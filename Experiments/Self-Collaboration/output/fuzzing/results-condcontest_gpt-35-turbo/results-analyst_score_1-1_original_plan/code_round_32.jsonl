{"name": "1598_C. Delete Two Elements", "description": "Monocarp has got an array a consisting of n integers. Let's denote k as the mathematic mean of these elements (note that it's possible that k is not an integer). \n\nThe mathematic mean of an array of n elements is the sum of elements divided by the number of these elements (i. e. sum divided by n).\n\nMonocarp wants to delete exactly two elements from a so that the mathematic mean of the remaining (n - 2) elements is still equal to k.\n\nYour task is to calculate the number of pairs of positions [i, j] (i < j) such that if the elements on these positions are deleted, the mathematic mean of (n - 2) remaining elements is equal to k (that is, it is equal to the mathematic mean of n elements of the original array a).\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains one integer n (3 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of elements in the array.\n\nThe second line contains a sequence of integers a_1, a_2, ..., a_n (0 \u2264 a_i \u2264 10^{9}), where a_i is the i-th element of the array.\n\nThe sum of n over all testcases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nPrint one integer \u2014 the number of pairs of positions [i, j] (i < j) such that if the elements on these positions are deleted, the mathematic mean of (n - 2) remaining elements is equal to k (that is, it is equal to the mathematic mean of n elements of the original array a).\n\nExample\n\nInput\n\n\n4\n4\n8 8 8 8\n3\n50 20 10\n5\n1 4 7 3 5\n7\n1 2 3 4 5 6 7\n\n\nOutput\n\n\n6\n0\n2\n3\n\nNote\n\nIn the first example, any pair of elements can be removed since all of them are equal.\n\nIn the second example, there is no way to delete two elements so the mathematic mean doesn't change.\n\nIn the third example, it is possible to delete the elements on positions 1 and 3, or the elements on positions 4 and 5.", "tags": ["data structures", "dp", "implementation", "math", "two pointers"], "difficulty": 9, "id": 1598, "sample_io": [{"input": "4\n4\n8 8 8 8\n3\n50 20 10\n5\n1 4 7 3 5\n7\n1 2 3 4 5 6 7\n", "output": ["6\n0\n2\n3\n"]}], "test_list": [{"input": "1\n3\n228 1337 228\n", "output": ["0\n"]}, {"input": "1\n3\n228 1144 228\n", "output": ["0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 20 10\n5\n1 4 7 3 5\n7\n1 2 3 4 5 4 7\n", "output": ["6\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 2 8\n3\n50 20 10\n5\n1 4 7 3 5\n7\n1 2 3 4 5 6 7\n", "output": ["0\n0\n2\n3\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 10\n5\n1 4 7 0 5\n7\n1 2 3 4 5 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 13 8\n3\n50 25 10\n5\n1 4 7 3 5\n7\n0 2 3 4 0 4 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 2 2 8\n3\n50 20 10\n5\n1 4 7 3 5\n7\n1 2 3 4 5 6 7\n", "output": ["4\n0\n2\n3\n"]}, {"input": "4\n4\n8 9 8 8\n3\n89 20 10\n5\n1 4 7 5 5\n7\n1 2 3 4 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n34 20 10\n5\n1 4 7 3 5\n7\n1 2 3 4 5 6 7\n", "output": ["6\n0\n2\n3\n"]}, {"input": "4\n4\n8 8 2 8\n3\n50 20 10\n5\n1 4 3 3 5\n7\n1 2 3 4 5 6 7\n", "output": ["0\n0\n0\n3\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 10\n5\n1 4 12 3 5\n7\n0 2 4 4 0 4 7\n", "output": ["6\n0\n0\n3\n"]}, {"input": "4\n4\n8 8 8 8\n3\n89 20 10\n5\n1 2 7 5 5\n7\n1 2 3 4 1 4 7\n", "output": ["6\n0\n1\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 10\n5\n1 4 12 3 5\n7\n0 2 4 4 0 4 0\n", "output": ["6\n0\n0\n9\n"]}, {"input": "4\n4\n10 8 13 5\n3\n50 25 6\n5\n0 4 7 2 5\n7\n0 2 0 4 0 4 7\n", "output": ["2\n0\n0\n0\n"]}, {"input": "4\n4\n8 1 13 14\n3\n50 45 10\n5\n0 4 7 2 5\n7\n0 2 0 4 0 8 7\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n4\n8 8 8 8\n3\n83 18 1\n5\n1 2 7 3 5\n7\n0 2 3 4 5 4 10\n", "output": ["6\n0\n0\n2\n"]}, {"input": "4\n4\n8 8 8 1\n3\n83 18 1\n5\n1 0 7 3 5\n7\n0 2 3 4 5 4 10\n", "output": ["0\n0\n0\n2\n"]}, {"input": "4\n4\n8 8 8 8\n3\n116 20 10\n5\n1 2 7 5 5\n7\n2 2 3 7 1 4 9\n", "output": ["6\n0\n1\n1\n"]}, {"input": "4\n4\n8 8 0 8\n3\n222 20 10\n5\n1 2 7 0 5\n7\n2 2 3 7 1 4 9\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n4\n8 8 0 8\n3\n222 20 6\n5\n1 2 7 0 5\n7\n0 2 3 7 1 4 9\n", "output": ["0\n0\n1\n0\n"]}, {"input": "4\n4\n8 2 2 8\n3\n50 20 10\n5\n1 4 7 0 5\n7\n1 2 3 4 5 6 7\n", "output": ["4\n0\n0\n3\n"]}, {"input": "4\n4\n8 8 13 5\n3\n50 28 6\n5\n0 4 7 2 5\n7\n0 2 0 4 0 4 7\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n4\n8 8 5 8\n3\n50 25 3\n5\n1 4 12 3 5\n7\n0 2 4 4 0 4 0\n", "output": ["0\n0\n0\n9\n"]}, {"input": "4\n4\n8 8 8 8\n3\n116 20 10\n5\n1 2 7 5 5\n7\n4 2 3 7 1 4 7\n", "output": ["6\n0\n1\n3\n"]}, {"input": "4\n4\n5 8 11 8\n3\n9 24 10\n5\n1 4 2 3 5\n7\n0 2 3 3 5 8 20\n", "output": ["2\n0\n2\n0\n"]}, {"input": "4\n4\n5 8 5 8\n3\n9 34 10\n5\n1 4 4 3 5\n7\n0 2 3 3 5 8 20\n", "output": ["4\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 10\n5\n1 4 7 3 5\n7\n1 2 3 4 5 4 7\n", "output": ["6\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 10\n5\n1 4 7 3 5\n7\n0 2 3 4 5 4 7\n", "output": ["6\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 10\n5\n1 4 7 3 5\n7\n0 2 3 4 0 4 7\n", "output": ["6\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 10\n5\n1 4 7 3 5\n7\n-1 2 3 4 0 4 7\n", "output": ["6\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 10\n5\n1 4 7 3 5\n7\n-1 2 3 4 0 0 7\n", "output": ["6\n0\n2\n0\n"]}, {"input": "1\n1\n228 1337 228\n", "output": ["0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n89 20 10\n5\n1 4 7 3 5\n7\n1 2 3 4 5 4 7\n", "output": ["6\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 1\n5\n1 4 7 3 5\n7\n0 2 3 4 5 4 7\n", "output": ["6\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 10\n5\n1 4 7 3 5\n7\n-1 2 4 4 0 4 7\n", "output": ["6\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 14\n3\n50 25 10\n5\n1 4 7 3 5\n7\n-1 2 3 4 0 0 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "1\n1\n228 1337 3\n", "output": ["0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n89 20 10\n5\n1 4 7 5 5\n7\n1 2 3 4 5 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 1\n5\n0 4 7 3 5\n7\n0 2 3 4 5 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 13 8\n3\n50 25 10\n5\n1 4 7 3 5\n7\n0 2 6 4 0 4 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 10\n5\n1 4 12 3 5\n7\n-1 2 4 4 0 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 14\n3\n50 25 10\n5\n1 4 7 3 5\n7\n-1 2 3 4 1 0 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "1\n1\n228 1512 3\n", "output": ["0\n"]}, {"input": "4\n4\n8 2 2 11\n3\n50 20 10\n5\n1 4 7 3 5\n7\n1 2 3 4 5 6 7\n", "output": ["0\n0\n2\n3\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 1\n5\n0 4 7 3 5\n7\n0 2 3 8 5 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 13 8\n3\n50 25 10\n5\n0 4 7 3 5\n7\n0 2 6 4 0 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 12 14\n3\n50 25 10\n5\n1 4 7 3 5\n7\n-1 2 3 4 1 0 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "1\n1\n228 2063 3\n", "output": ["0\n"]}, {"input": "4\n4\n8 9 15 8\n3\n89 20 10\n5\n1 4 7 5 5\n7\n1 2 3 4 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 1\n5\n0 4 6 3 5\n7\n0 2 3 8 5 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 13 8\n3\n50 25 10\n5\n0 4 7 3 5\n7\n0 2 0 4 0 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 12 14\n3\n44 25 10\n5\n1 4 7 3 5\n7\n-1 2 3 4 1 0 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "1\n1\n228 2063 2\n", "output": ["0\n"]}, {"input": "4\n4\n8 9 24 8\n3\n89 20 10\n5\n1 4 7 5 5\n7\n1 2 3 4 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 1\n5\n0 4 6 3 5\n7\n0 2 3 8 6 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 13 8\n3\n50 25 10\n5\n0 4 7 2 5\n7\n0 2 0 4 0 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 18 14\n3\n44 25 10\n5\n1 4 7 3 5\n7\n-1 2 3 4 1 0 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 1\n5\n0 4 6 3 5\n7\n0 2 3 8 9 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 13 8\n3\n50 45 10\n5\n0 4 7 2 5\n7\n0 2 0 4 0 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 1\n5\n0 4 0 3 5\n7\n0 2 3 8 9 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 1\n5\n0 4 0 3 5\n7\n-1 2 3 8 9 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 40 1\n5\n0 4 0 3 5\n7\n-1 2 3 8 9 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 7 8\n3\n50 40 1\n5\n0 4 0 3 5\n7\n-1 2 3 8 9 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 7 8\n3\n50 40 1\n5\n0 4 0 3 5\n7\n-1 2 3 12 9 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 7 8\n3\n50 40 1\n5\n0 8 0 3 5\n7\n-1 2 3 12 9 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "1\n3\n228 1337 127\n", "output": ["0\n"]}, {"input": "1\n3\n40 1144 228\n", "output": ["0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 20 10\n5\n1 4 12 3 5\n7\n1 2 3 4 5 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n9 25 10\n5\n1 4 7 3 5\n7\n0 2 3 4 5 4 7\n", "output": ["6\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 10\n5\n1 4 7 3 5\n7\n0 2 3 6 0 4 7\n", "output": ["6\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 10\n5\n1 4 3 3 5\n7\n-1 2 3 4 0 0 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 10\n5\n1 4 7 3 9\n7\n-1 2 3 4 0 0 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "1\n1\n148 1337 228\n", "output": ["0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n89 20 10\n5\n0 4 7 3 5\n7\n1 2 3 4 5 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 18 1\n5\n1 4 7 3 5\n7\n0 2 3 4 5 4 7\n", "output": ["6\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 13 8\n3\n50 25 10\n5\n1 4 12 3 5\n7\n0 2 3 4 0 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 4 14\n3\n50 25 10\n5\n1 4 7 3 5\n7\n-1 2 3 4 0 0 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 0 2 8\n3\n50 20 10\n5\n1 4 7 3 5\n7\n1 2 3 4 5 6 7\n", "output": ["0\n0\n2\n3\n"]}, {"input": "4\n4\n8 8 8 8\n3\n89 20 10\n5\n1 4 7 5 5\n7\n1 2 3 4 1 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 14\n3\n50 25 10\n5\n1 4 7 3 5\n7\n-1 2 3 4 1 -1 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "1\n1\n342 1512 3\n", "output": ["0\n"]}, {"input": "4\n4\n8 2 2 11\n3\n50 20 10\n5\n1 4 7 3 5\n7\n1 2 0 4 5 6 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 13 8\n3\n50 25 10\n5\n0 4 7 3 5\n7\n0 2 6 4 1 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 12 14\n3\n50 25 9\n5\n1 4 7 3 5\n7\n-1 2 3 4 1 0 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "1\n1\n228 2063 0\n", "output": ["0\n"]}, {"input": "4\n4\n8 9 15 8\n3\n89 20 10\n5\n1 4 7 5 5\n7\n1 2 3 2 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 9\n3\n50 25 1\n5\n0 4 6 3 5\n7\n0 2 3 8 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 13 8\n3\n50 25 10\n5\n0 4 7 3 5\n7\n0 2 -1 4 0 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 12 14\n3\n44 25 10\n5\n1 4 7 5 5\n7\n-1 2 3 4 1 0 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "1\n1\n228 4021 2\n", "output": ["0\n"]}, {"input": "4\n4\n8 9 24 8\n3\n89 20 10\n5\n1 8 7 5 5\n7\n1 2 3 4 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 1\n5\n0 3 6 3 5\n7\n0 2 3 8 6 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 13 5\n3\n50 25 10\n5\n0 4 7 2 5\n7\n0 2 0 4 0 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 1\n5\n0 4 6 3 5\n7\n0 2 3 14 9 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 1 13 8\n3\n50 45 10\n5\n0 4 7 2 5\n7\n0 2 0 4 0 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 1\n5\n0 4 0 6 5\n7\n0 2 3 8 9 4 7\n", "output": ["6\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 1\n5\n0 4 0 3 5\n7\n-1 2 3 8 9 3 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 40 1\n5\n0 4 0 5 5\n7\n-1 2 3 8 9 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 7 8\n3\n50 40 1\n5\n0 4 0 0 5\n7\n-1 2 3 8 9 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "1\n3\n228 1337 103\n", "output": ["0\n"]}, {"input": "1\n3\n40 270 228\n", "output": ["0\n"]}, {"input": "4\n4\n8 8 8 9\n3\n50 20 10\n5\n1 4 12 3 5\n7\n1 2 3 4 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n5 8 8 8\n3\n9 25 10\n5\n1 4 7 3 5\n7\n0 2 3 4 5 4 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n2 25 10\n5\n1 4 7 3 5\n7\n0 2 3 6 0 4 7\n", "output": ["6\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 7\n5\n1 4 3 3 5\n7\n-1 2 3 4 0 0 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "1\n1\n148 1337 44\n", "output": ["0\n"]}, {"input": "4\n4\n8 8 2 8\n3\n50 20 10\n5\n1 4 3 3 5\n7\n1 4 3 4 5 6 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n6 8 8 8\n3\n89 20 10\n5\n0 4 7 3 5\n7\n1 2 3 4 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 18 1\n5\n1 2 7 3 5\n7\n0 2 3 4 5 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 13 8\n3\n50 25 10\n5\n1 4 12 3 5\n7\n-1 2 3 4 0 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 4 14\n3\n50 37 10\n5\n1 4 7 3 5\n7\n-1 2 3 4 0 0 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 10\n5\n1 4 12 3 5\n7\n0 2 4 4 0 4 3\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 13 8\n3\n50 25 10\n5\n0 4 8 3 5\n7\n0 2 6 4 1 4 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 9 15 8\n3\n89 20 10\n5\n0 4 7 5 5\n7\n1 2 3 2 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 9\n3\n50 25 1\n5\n0 4 6 3 5\n7\n0 2 3 8 5 6 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 12 14\n3\n44 25 10\n5\n1 4 7 5 8\n7\n-1 2 3 4 1 0 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "1\n1\n228 4021 1\n", "output": ["0\n"]}, {"input": "4\n4\n8 8 13 5\n3\n50 25 6\n5\n0 4 7 2 5\n7\n0 2 0 4 0 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 1 13 14\n3\n50 45 10\n5\n0 4 7 2 5\n7\n0 2 0 4 0 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 1\n5\n0 4 0 6 7\n7\n0 2 3 8 9 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 2\n5\n0 4 0 3 5\n7\n-1 2 3 8 9 3 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 3 8 8\n3\n50 40 1\n5\n0 4 0 5 5\n7\n-1 2 3 8 9 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 7 8\n3\n50 40 1\n5\n0 4 0 0 5\n7\n-1 2 3 0 9 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "1\n3\n382 1337 103\n", "output": ["0\n"]}, {"input": "4\n4\n8 8 8 9\n3\n50 20 8\n5\n1 4 12 3 5\n7\n1 2 3 4 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n5 8 8 8\n3\n9 25 10\n5\n1 4 11 3 5\n7\n0 2 3 4 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 14 8\n3\n2 25 10\n5\n1 4 7 3 5\n7\n0 2 3 6 0 4 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 7\n5\n1 4 3 3 5\n7\n-1 2 3 4 0 1 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "1\n1\n148 1337 74\n", "output": ["0\n"]}, {"input": "4\n4\n8 15 2 8\n3\n50 20 10\n5\n1 4 3 3 5\n7\n1 4 3 4 5 6 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n12 8 8 8\n3\n89 20 10\n5\n0 4 7 3 5\n7\n1 2 3 4 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n83 18 1\n5\n1 2 7 3 5\n7\n0 2 3 4 5 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 13 8\n3\n50 46 10\n5\n1 4 12 3 5\n7\n-1 2 3 4 0 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 4 14\n3\n50 53 10\n5\n1 4 7 3 5\n7\n-1 2 3 4 0 0 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n116 20 10\n5\n1 2 7 5 5\n7\n1 2 3 4 1 4 7\n", "output": ["6\n0\n1\n0\n"]}, {"input": "4\n4\n8 8 9 8\n3\n50 25 10\n5\n0 4 8 3 5\n7\n0 2 6 4 1 4 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 9 15 8\n3\n89 20 10\n5\n0 4 7 5 5\n7\n1 2 3 2 5 3 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 12 14\n3\n44 25 3\n5\n1 4 7 5 8\n7\n-1 2 3 4 1 0 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "1\n1\n298 4021 1\n", "output": ["0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n93 25 1\n5\n0 4 0 6 7\n7\n0 2 3 8 9 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 2\n5\n0 4 0 3 10\n7\n-1 2 3 8 9 3 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 3 8 8\n3\n50 40 1\n5\n0 4 0 5 5\n7\n-1 2 4 8 9 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 7 8\n3\n50 40 1\n5\n0 4 0 0 5\n7\n-1 1 3 0 9 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "1\n3\n232 1337 103\n", "output": ["0\n"]}, {"input": "4\n4\n8 8 8 9\n3\n50 20 15\n5\n1 4 12 3 5\n7\n1 2 3 4 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n5 8 8 8\n3\n9 25 10\n5\n1 4 11 3 5\n7\n0 2 3 4 5 4 11\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 14 8\n3\n2 25 10\n5\n1 4 7 3 5\n7\n0 2 3 6 0 8 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 7\n5\n1 4 3 3 5\n7\n-1 2 3 8 0 1 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "1\n1\n148 1337 93\n", "output": ["0\n"]}, {"input": "4\n4\n8 15 2 8\n3\n50 20 10\n5\n1 4 3 3 5\n7\n1 4 3 4 5 6 5\n", "output": ["0\n0\n0\n3\n"]}, {"input": "4\n4\n12 8 8 8\n3\n130 20 10\n5\n0 4 7 3 5\n7\n1 2 3 4 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 13 8\n3\n38 46 10\n5\n1 4 12 3 5\n7\n-1 2 3 4 0 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 4 28\n3\n50 53 10\n5\n1 4 7 3 5\n7\n-1 2 3 4 0 0 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n116 20 10\n5\n1 2 7 5 5\n7\n1 2 3 7 1 4 7\n", "output": ["6\n0\n1\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 3\n5\n1 4 12 3 5\n7\n0 2 4 4 0 4 0\n", "output": ["6\n0\n0\n9\n"]}, {"input": "4\n4\n8 8 9 8\n3\n50 25 19\n5\n0 4 8 3 5\n7\n0 2 6 4 1 4 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 9 15 8\n3\n89 20 18\n5\n0 4 7 5 5\n7\n1 2 3 2 5 3 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 12 14\n3\n44 2 3\n5\n1 4 7 5 8\n7\n-1 2 3 4 1 0 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n10 8 13 5\n3\n50 29 6\n5\n0 4 7 2 5\n7\n0 2 0 4 0 4 7\n", "output": ["2\n0\n0\n0\n"]}, {"input": "4\n4\n8 1 17 14\n3\n50 45 10\n5\n0 4 7 2 5\n7\n0 2 0 4 0 8 7\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n4\n8 8 8 8\n3\n141 25 1\n5\n0 4 0 6 7\n7\n0 2 3 8 9 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 12 8\n3\n50 25 2\n5\n0 4 0 3 10\n7\n-1 2 3 8 9 3 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 3 8 8\n3\n50 40 1\n5\n0 4 0 10 5\n7\n-1 2 4 8 9 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 7 8\n3\n50 40 1\n5\n0 4 0 0 0\n7\n-1 1 3 0 9 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "1\n3\n232 1055 103\n", "output": ["0\n"]}, {"input": "4\n4\n8 8 8 9\n3\n50 20 7\n5\n1 4 12 3 5\n7\n1 2 3 4 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n5 8 8 8\n3\n9 25 10\n5\n1 4 11 3 5\n7\n0 2 3 4 5 4 20\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 14 16\n3\n2 25 10\n5\n1 4 7 3 5\n7\n0 2 3 6 0 8 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 11 8\n3\n50 25 7\n5\n1 4 3 3 5\n7\n-1 2 3 8 0 1 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "1\n1\n148 141 93\n", "output": ["0\n"]}, {"input": "4\n4\n8 15 2 8\n3\n50 20 10\n5\n1 4 3 3 5\n7\n1 4 3 4 7 6 5\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n12 8 8 8\n3\n130 20 10\n5\n0 4 7 3 5\n7\n1 2 0 4 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n83 18 1\n5\n1 0 7 3 5\n7\n0 2 3 4 5 4 10\n", "output": ["6\n0\n0\n2\n"]}, {"input": "4\n4\n8 8 13 8\n3\n38 46 4\n5\n1 4 12 3 5\n7\n-1 2 3 4 0 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 4 28\n3\n50 53 10\n5\n1 4 7 3 5\n7\n-1 2 3 4 0 0 5\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n116 20 10\n5\n1 2 7 5 5\n7\n2 2 3 7 1 4 7\n", "output": ["6\n0\n1\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 3\n5\n1 4 12 3 5\n7\n0 2 4 4 1 4 0\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 9 8\n3\n50 25 19\n5\n0 4 8 3 5\n7\n0 2 7 4 1 4 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 9 15 8\n3\n89 20 18\n5\n0 4 7 5 7\n7\n1 2 3 2 5 3 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 12 14\n3\n44 2 5\n5\n1 4 7 5 8\n7\n-1 2 3 4 1 0 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n6 1 17 14\n3\n50 45 10\n5\n0 4 7 2 5\n7\n0 2 0 4 0 8 7\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n4\n8 8 8 8\n3\n233 25 1\n5\n0 4 0 6 7\n7\n0 2 3 8 9 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 12 8\n3\n50 25 2\n5\n0 4 0 3 10\n7\n-1 2 3 11 9 3 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "1\n3\n232 1055 22\n", "output": ["0\n"]}, {"input": "4\n4\n8 8 8 9\n3\n50 20 7\n5\n1 4 12 3 5\n7\n1 2 3 4 5 5 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n5 8 8 8\n3\n9 25 10\n5\n1 4 11 3 5\n7\n0 2 3 4 5 8 20\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n4\n8 8 14 16\n3\n4 25 10\n5\n1 4 7 3 5\n7\n0 2 3 6 0 8 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 15 2 8\n3\n50 37 10\n5\n1 4 3 3 5\n7\n1 4 3 4 7 6 5\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n12 8 8 8\n3\n130 20 10\n5\n0 4 7 3 5\n7\n1 2 0 4 1 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 13 0\n3\n38 46 4\n5\n1 4 12 3 5\n7\n-1 2 3 4 0 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 6 8\n3\n50 25 3\n5\n1 4 12 3 5\n7\n0 2 4 4 1 4 0\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 9 8\n3\n50 25 19\n5\n0 4 8 6 5\n7\n0 2 7 4 1 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 9 15 8\n3\n89 20 18\n5\n0 4 7 5 7\n7\n1 2 3 2 5 6 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 12 14\n3\n44 2 5\n5\n0 4 7 5 8\n7\n-1 2 3 4 1 0 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n6 1 24 14\n3\n50 45 10\n5\n0 4 7 2 5\n7\n0 2 0 4 0 8 7\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n4\n8 8 12 8\n3\n50 25 2\n5\n0 4 0 3 10\n7\n-1 2 3 11 7 3 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "1\n3\n232 461 22\n", "output": ["0\n"]}, {"input": "4\n4\n8 8 8 9\n3\n50 20 7\n5\n1 4 12 3 5\n7\n1 2 3 4 1 5 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n5 8 8 8\n3\n9 25 10\n5\n1 4 4 3 5\n7\n0 2 3 4 5 8 20\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n4\n8 8 14 28\n3\n4 25 10\n5\n1 4 7 3 5\n7\n0 2 3 6 0 8 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 15 2 12\n3\n50 37 10\n5\n1 4 3 3 5\n7\n1 4 3 4 7 6 5\n", "output": ["0\n0\n0\n0\n"]}], "task_id": "codecontest/60", "repair_prompt": ["Monocarp has got an array a consisting of n integers. We shall denote k as the mathematic mean of these elements. It is important to note that k may not necessarily be an integer. \n\nThe mathematic mean of an array of n elements is the sum of elements divided by the number of these elements (i. e. sum divided by n).\n\nMonocarp wants to delete exactly two elements from a so that the mathematic mean of the remaining (n - 2) elements is still equal to k.\n\nYour task is to calculate the number of pairs of positions [i, j] (i < j) such that if the elements on these positions are deleted, the mathematic mean of (n - 2) remaining elements is equal to k (that is, it is equal to the mathematic mean of n elements of the original array a).\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains one integer n (3 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of elements in the array.\n\nThe second line contains a sequence of integers a_1, a_2, ..., a_n (0 \u2264 a_i \u2264 10^{9}), where a_i is the i-th element of the array.\n\nThe sum of n over all testcases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nPrint one integer \u2014 the number of pairs of positions [i, j] (i < j) such that if the elements on these positions are deleted, the mathematic mean of (n - 2) remaining elements is equal to k (that is, it is equal to the mathematic mean of n elements of the original array a).\n\nExample\n\nInput\n\n\n4\n4\n8 8 8 8\n3\n50 20 10\n5\n1 4 7 3 5\n7\n1 2 3 4 5 6 7\n\n\nOutput\n\n\n6\n0\n2\n3\n\nNote\n\nIn the first example, any pair of elements can be removed since all of them are equal.\n\nIn the second example, there is no way to delete two elements so the mathematic mean doesn't change.\n\nIn the third example, it is possible to delete the elements on positions 1 and 3, or the elements on positions 4 and 5.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed."], "completion": "def calculate_mean(arr):\n    return sum(arr) / len(arr)\n\ndef count_pairs_with_mean(arr, k):\n    count = 0\n    n = len(arr)\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            temp_arr = arr[:i] + arr[i+1:j] + arr[j+1:]\n            if calculate_mean(temp_arr) == k:\n                count += 1\n    \n    return count\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    k = calculate_mean(arr)\n    \n    result = count_pairs_with_mean(arr, k)\n    print(result)\n\nmain()", "completions": ["t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    \n    total_pairs = 0\n    total_sum = sum(a)\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            current_sum = total_sum - a[i] - a[j]\n            current_mean = current_sum / (n - 2)\n            if current_mean == a[i] + a[j]:\n                total_pairs += 1\n    \n    print(total_pairs)\n\nmain()", "from collections import defaultdict\n\ndef calculate_mean(arr):\n    return sum(arr) / len(arr)\n\ndef count_pairs_to_delete(t, testcases):\n    results = []\n    \n    for _ in range(t):\n        n = testcases[_][0]\n        arr = testcases[_][1]\n        \n        mean = calculate_mean(arr)\n        diff_count = defaultdict(int)\n        \n        for i in range(n):\n            for j in range(i+1, n):\n                diff = (mean * (n - 2)) - (mean * (n - 1) - arr[i] - arr[j])\n                if diff == 0:\n                    diff_count[(i, j)] += 1\n        \n        total_pairs = sum(count * (count - 1) // 2 for count in diff_count.values())\n        results.append(total_pairs)\n    \n    return results\n\nif __name__ == \"__main__\":\n    t = int(input())\n    testcases = []\n    \n    for _ in range(t):\n        n = int(input())\n        arr = list(map(int, input().split()))\n        testcases.append((n, arr))\n    \n    results = count_pairs_to_delete(t, testcases)\n    \n    for result in results:\n        print(result)\n\nmain()", "def calculate_mean(arr):\n    return sum(arr) / len(arr)\n\ndef count_pairs(t, testcases):\n    results = []\n    \n    for _ in range(t):\n        n = testcases[_][0]\n        arr = testcases[_][1]\n        k = calculate_mean(arr)\n        \n        count = 0\n        for i in range(n):\n            for j in range(i+1, n):\n                new_arr = arr[:i] + arr[i+1:j] + arr[j+1:]\n                new_mean = calculate_mean(new_arr)\n                if new_mean == k:\n                    count += 1\n        \n        results.append(count)\n    \n    return results\n\n# Input\nt = int(input())\ntestcases = []\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    testcases.append((n, arr))\n\n# Output\noutput = count_pairs(t, testcases)\nfor res in output:\n    print(res)\n\nmain()", "from collections import defaultdict\n\ndef calculate_mean(arr):\n    return sum(arr) / len(arr)\n\ndef count_pairs_to_delete(t, testcases):\n    results = []\n    \n    for _ in range(t):\n        n = testcases[_][0]\n        arr = testcases[_][1]\n        \n        mean = calculate_mean(arr)\n        diff_count = defaultdict(int)\n        \n        for i in range(n):\n            for j in range(i+1, n):\n                diff = (arr[i] + arr[j] - mean * 2) * 2\n                diff_count[diff] += 1\n        \n        total_pairs = 0\n        for diff, count in diff_count.items():\n            total_pairs += count * (count - 1) // 2\n        \n        results.append(total_pairs)\n    \n    return results\n\n# Read input\nt = int(input())\ntestcases = []\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    testcases.append((n, arr))\n\n# Get results\nresults = count_pairs_to_delete(t, testcases)\n\n# Output results\nfor res in results:\n    print(res)\n\nmain()", "def calculate_mean(arr):\n    return sum(arr) / len(arr)\n\ndef count_pairs(t, testcases):\n    def check_mean(arr, i, j, mean):\n        total = sum(arr)\n        total -= arr[i] + arr[j]\n        new_mean = total / (len(arr) - 2)\n        return new_mean == mean\n\n    results = []\n    for _ in range(t):\n        n = testcases[_][0]\n        arr = testcases[_][1]\n\n        mean = calculate_mean(arr)\n        count = 0\n        for i in range(n):\n            for j in range(i+1, n):\n                if check_mean(arr, i, j, mean):\n                    count += 1\n\n        results.append(count)\n\n    return results\n\n# Input\nt = int(input())\ntestcases = []\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    testcases.append((n, arr))\n\n# Output\nresults = count_pairs(t, testcases)\nfor res in results:\n    print(res)\n\nmain()", "from collections import defaultdict\n\ndef calculate_mean(arr):\n    return sum(arr) / len(arr)\n\ndef count_pairs_to_delete(t, testcases):\n    results = []\n    \n    for _ in range(t):\n        n = testcases[_][0]\n        arr = testcases[_][1]\n        \n        mean = calculate_mean(arr)\n        freq = defaultdict(int)\n        pairs = 0\n        \n        for i in range(n):\n            freq[arr[i]] += 1\n        \n        for i in range(n):\n            pairs += freq[2 * mean - arr[i]]\n            if 2 * mean == arr[i]:\n                pairs -= 1\n        \n        results.append(pairs // 2)\n    \n    return results\n\n# Read input\nt = int(input())\ntestcases = []\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    testcases.append((n, arr))\n\n# Calculate and output results\nresults = count_pairs_to_delete(t, testcases)\nfor res in results:\n    print(res)\n\nmain()", "def calculate_mean(arr):\n    return sum(arr) / len(arr)\n\ndef count_pairs(t, testcases):\n    results = []\n    for _ in range(t):\n        n = testcases[_][0]\n        arr = testcases[_][1]\n        k = calculate_mean(arr)\n        count = 0\n        for i in range(n):\n            for j in range(i+1, n):\n                temp_arr = arr[:i] + arr[i+1:j] + arr[j+1:]\n                if calculate_mean(temp_arr) == k:\n                    count += 1\n        results.append(count)\n    return results\n\nt = int(input())\ntestcases = []\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    testcases.append((n, arr))\n\noutput = count_pairs(t, testcases)\nfor res in output:\n    print(res)\n\nmain()", "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    \n    total_sum = sum(arr)\n    count = 0\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            current_sum = total_sum - arr[i] - arr[j]\n            if current_sum == (n-2) * sum(arr) / n:\n                count += 1\n                \n    print(count)\n\nmain()", "def calculate_mean(arr):\n    return sum(arr) / len(arr)\n\ndef count_pairs(t, testcases):\n    def check_mean(arr, i, j, k):\n        arr.pop(j)\n        arr.pop(i)\n        return calculate_mean(arr) == k\n    \n    results = []\n    for _ in range(t):\n        n = testcases[_][0]\n        arr = testcases[_][1]\n        k = calculate_mean(arr)\n        count = 0\n        for i in range(n):\n            for j in range(i+1, n):\n                if check_mean(arr.copy(), i, j, k):\n                    count += 1\n        results.append(count)\n    \n    return results\n\nt = int(input())\ntestcases = []\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    testcases.append((n, arr))\n\nresults = count_pairs(t, testcases)\nfor res in results:\n    print(res)\n\nmain()", "def calculate_mean(arr):\n    return sum(arr) / len(arr)\n\ndef count_pairs_with_mean(arr, k):\n    count = 0\n    n = len(arr)\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            temp_arr = arr[:i] + arr[i+1:j] + arr[j+1:]\n            if calculate_mean(temp_arr) == k:\n                count += 1\n    \n    return count\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    k = calculate_mean(arr)\n    \n    result = count_pairs_with_mean(arr, k)\n    print(result)\n\nmain()"], "session_history": {"plan": "{\n  \"subproblems\": [\n    \"Calculate the mathematic mean of the array a\",\n    \"Identify all pairs of positions [i, j] (i < j) where deleting the elements on these positions will result in the mathematic mean of the remaining elements being equal to k\"\n  ],\n  \"high_level_plan\": {\n    \"step_1\": \"Calculate the mathematic mean of the array a\",\n    \"step_2\": \"Iterate through all pairs of positions [i, j] (i < j) in the array\",\n    \"step_3\": \"For each pair, calculate the mathematic mean of the remaining elements after deleting the elements on positions i and j\",\n    \"step_4\": \"Count the number of pairs where the mathematic mean of the remaining elements is equal to k\",\n    \"step_5\": \"Output the total count of such pairs\"\n  }\n}", "Round_0": {"code": "def calculate_mean(arr):\n    return sum(arr) / len(arr)\n\ndef count_pairs_with_mean(arr, k):\n    count = 0\n    n = len(arr)\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            temp_arr = arr[:i] + arr[i+1:j] + arr[j+1:]\n            if calculate_mean(temp_arr) == k:\n                count += 1\n    \n    return count\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    k = calculate_mean(arr)\n    \n    result = count_pairs_with_mean(arr, k)\n    print(result)\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 30)"}, "Round_1": {"code": "def calculate_mean(arr):\n    return sum(arr) / len(arr)\n\ndef count_pairs_with_mean(arr, k):\n    count = 0\n    n = len(arr)\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            temp_arr = arr[:i] + arr[i+1:j] + arr[j+1:]\n            if calculate_mean(temp_arr) == k:\n                count += 1\n    \n    return count\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    k = calculate_mean(arr)\n    \n    result = count_pairs_with_mean(arr, k)\n    print(result)\n"}}, "session_historys": [{"plan": "{\n  \"subproblems\": [\n    \"Calculate the mathematic mean of the array a\",\n    \"Identify all pairs of positions [i, j] (i < j) where deleting the elements on these positions will result in the mathematic mean of the remaining elements being equal to k\"\n  ],\n  \"high_level_plan\": {\n    \"step_1\": \"Calculate the mathematic mean of the array a\",\n    \"step_2\": \"Iterate through all pairs of positions [i, j] (i < j) in the array\",\n    \"step_3\": \"Check if deleting the elements on positions i and j will result in the mathematic mean of the remaining elements being equal to k\",\n    \"step_4\": \"Count the number of pairs that satisfy the condition in step 3\",\n    \"step_5\": \"Output the total count of pairs\"\n  }\n}", "Round_0": {"code": "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    \n    total_pairs = 0\n    total_sum = sum(a)\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            current_sum = total_sum - a[i] - a[j]\n            current_mean = current_sum / (n - 2)\n            if current_mean == a[i] + a[j]:\n                total_pairs += 1\n    \n    print(total_pairs)\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 24)"}, "Round_1": {"code": "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    \n    total_pairs = 0\n    total_sum = sum(a)\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            current_sum = total_sum - a[i] - a[j]\n            current_mean = current_sum / (n - 2)\n            if current_mean == a[i] + a[j]:\n                total_pairs += 1\n    \n    print(total_pairs)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Calculate the mathematic mean of the array a\",\n    \"Identify all pairs of positions [i, j] (i < j) where deleting elements on these positions will result in the mathematic mean of the remaining elements being equal to k\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Read the number of testcases (t)\",\n    \"Step 2\": \"For each testcase, read the number of elements in the array (n)\",\n    \"Step 3\": \"Read the sequence of integers a_1, a_2, ..., a_n\",\n    \"Step 4\": \"Calculate the mathematic mean (k) of the array a\",\n    \"Step 5\": \"Identify all pairs of positions [i, j] (i < j) where deleting elements on these positions will result in the mathematic mean of the remaining elements being equal to k\",\n    \"Step 6\": \"Output the number of pairs of positions [i, j] for each testcase\"\n  }\n}", "Round_0": {"code": "from collections import defaultdict\n\ndef calculate_mean(arr):\n    return sum(arr) / len(arr)\n\ndef count_pairs_to_delete(t, testcases):\n    results = []\n    \n    for _ in range(t):\n        n = testcases[_][0]\n        arr = testcases[_][1]\n        \n        mean = calculate_mean(arr)\n        diff_count = defaultdict(int)\n        \n        for i in range(n):\n            for j in range(i+1, n):\n                diff = (mean * (n - 2)) - (mean * (n - 1) - arr[i] - arr[j])\n                if diff == 0:\n                    diff_count[(i, j)] += 1\n        \n        total_pairs = sum(count * (count - 1) // 2 for count in diff_count.values())\n        results.append(total_pairs)\n    \n    return results\n\nif __name__ == \"__main__\":\n    t = int(input())\n    testcases = []\n    \n    for _ in range(t):\n        n = int(input())\n        arr = list(map(int, input().split()))\n        testcases.append((n, arr))\n    \n    results = count_pairs_to_delete(t, testcases)\n    \n    for result in results:\n        print(result)\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 46)"}, "Round_1": {"code": "from collections import defaultdict\n\ndef calculate_mean(arr):\n    return sum(arr) / len(arr)\n\ndef count_pairs_to_delete(t, testcases):\n    results = []\n    \n    for _ in range(t):\n        n = testcases[_][0]\n        arr = testcases[_][1]\n        \n        mean = calculate_mean(arr)\n        diff_count = defaultdict(int)\n        \n        for i in range(n):\n            for j in range(i+1, n):\n                diff = (mean * (n - 2)) - (mean * (n - 1) - arr[i] - arr[j])\n                if diff == 0:\n                    diff_count[(i, j)] += 1\n        \n        total_pairs = sum(count * (count - 1) // 2 for count in diff_count.values())\n        results.append(total_pairs)\n    \n    return results\n\nif __name__ == \"__main__\":\n    t = int(input())\n    testcases = []\n    \n    for _ in range(t):\n        n = int(input())\n        arr = list(map(int, input().split()))\n        testcases.append((n, arr))\n    \n    results = count_pairs_to_delete(t, testcases)\n    \n    for result in results:\n        print(result)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Calculate the mathematic mean of the array a\",\n    \"Identify pairs of positions [i, j] where deleting elements will result in the same mathematic mean\",\n    \"Count the number of such pairs\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Calculate the mathematic mean of the array a\",\n    \"Step 2\": \"Iterate through all pairs of positions [i, j] (i < j)\",\n    \"Step 3\": \"Delete elements on positions [i, j] and calculate the new mathematic mean\",\n    \"Step 4\": \"If the new mathematic mean is equal to the original mean, increment the count of pairs\",\n    \"Step 5\": \"Output the total count of pairs\"\n  }\n}", "Round_0": {"code": "def calculate_mean(arr):\n    return sum(arr) / len(arr)\n\ndef count_pairs(t, testcases):\n    results = []\n    \n    for _ in range(t):\n        n = testcases[_][0]\n        arr = testcases[_][1]\n        k = calculate_mean(arr)\n        \n        count = 0\n        for i in range(n):\n            for j in range(i+1, n):\n                new_arr = arr[:i] + arr[i+1:j] + arr[j+1:]\n                new_mean = calculate_mean(new_arr)\n                if new_mean == k:\n                    count += 1\n        \n        results.append(count)\n    \n    return results\n\n# Input\nt = int(input())\ntestcases = []\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    testcases.append((n, arr))\n\n# Output\noutput = count_pairs(t, testcases)\nfor res in output:\n    print(res)\n", "report": "The compilation output of the preceding code is: closing parenthesis ')' does not match opening parenthesis '[' (<string>, line 38)"}, "Round_1": {"code": "def calculate_mean(arr):\n    return sum(arr) / len(arr)\n\ndef count_pairs(t, testcases):\n    results = []\n    \n    for _ in range(t):\n        n = testcases[_][0]\n        arr = testcases[_][1]\n        k = calculate_mean(arr)\n        \n        count = 0\n        for i in range(n):\n            for j in range(i+1, n):\n                new_arr = arr[:i] + arr[i+1:j] + arr[j+1:]\n                new_mean = calculate_mean(new_arr)\n                if new_mean == k:\n                    count += 1\n        \n        results.append(count)\n    \n    return results\n\n# Input\nt = int(input())\ntestcases = []\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    testcases.append((n, arr))\n\n# Output\noutput = count_pairs(t, testcases)\nfor res in output:\n    print(res)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Calculate the mathematic mean of the array a\",\n    \"Identify all pairs of positions [i, j] (i < j) where deleting elements on these positions will result in the mathematic mean of the remaining elements being equal to k\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Read the number of testcases (t)\",\n    \"Step 2\": \"For each testcase, read the number of elements in the array (n)\",\n    \"Step 3\": \"Read the sequence of integers a_1, a_2, ..., a_n\",\n    \"Step 4\": \"Calculate the mathematic mean (k) of the array a\",\n    \"Step 5\": \"Identify all pairs of positions [i, j] (i < j) where deleting elements on these positions will result in the mathematic mean of the remaining elements being equal to k\",\n    \"Step 6\": \"Output the number of pairs of positions [i, j] that satisfy the condition\"\n  }\n}", "Round_0": {"code": "from collections import defaultdict\n\ndef calculate_mean(arr):\n    return sum(arr) / len(arr)\n\ndef count_pairs_to_delete(t, testcases):\n    results = []\n    \n    for _ in range(t):\n        n = testcases[_][0]\n        arr = testcases[_][1]\n        \n        mean = calculate_mean(arr)\n        diff_count = defaultdict(int)\n        \n        for i in range(n):\n            for j in range(i+1, n):\n                diff = (arr[i] + arr[j] - mean * 2) * 2\n                diff_count[diff] += 1\n        \n        total_pairs = 0\n        for diff, count in diff_count.items():\n            total_pairs += count * (count - 1) // 2\n        \n        results.append(total_pairs)\n    \n    return results\n\n# Read input\nt = int(input())\ntestcases = []\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    testcases.append((n, arr))\n\n# Get results\nresults = count_pairs_to_delete(t, testcases)\n\n# Output results\nfor res in results:\n    print(res)\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "from collections import defaultdict\n\ndef calculate_mean(arr):\n    return sum(arr) / len(arr)\n\ndef count_pairs_to_delete(t, testcases):\n    results = []\n    \n    for _ in range(t):\n        n = testcases[_][0]\n        arr = testcases[_][1]\n        \n        mean = calculate_mean(arr)\n        diff_count = defaultdict(int)\n        \n        for i in range(n):\n            for j in range(i+1, n):\n                diff = (arr[i] + arr[j] - mean * 2) * 2\n                diff_count[diff] += 1\n        \n        total_pairs = 0\n        for diff, count in diff_count.items():\n            total_pairs += count * (count - 1) // 2\n        \n        results.append(total_pairs)\n    \n    return results\n\n# Read input\nt = int(input())\ntestcases = []\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    testcases.append((n, arr))\n\n# Get results\nresults = count_pairs_to_delete(t, testcases)\n\n# Output results\nfor res in results:\n    print(res)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Calculate the mathematic mean of the array a\",\n    \"Identify pairs of positions [i, j] where deleting elements will result in the same mathematic mean\",\n    \"Count the number of such pairs\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Calculate the mathematic mean of the array a\",\n    \"Step 2\": \"Iterate through all pairs of positions [i, j] (i < j)\",\n    \"Step 3\": \"Delete elements on positions [i, j] and calculate the mathematic mean of the remaining elements\",\n    \"Step 4\": \"Check if the new mathematic mean is equal to the original mathematic mean\",\n    \"Step 5\": \"If equal, increment the count of pairs\",\n    \"Step 6\": \"Repeat steps 2-5 for all pairs\",\n    \"Step 7\": \"Output the total count of pairs\"\n  }\n}", "Round_0": {"code": "def calculate_mean(arr):\n    return sum(arr) / len(arr)\n\ndef count_pairs(t, testcases):\n    def check_mean(arr, i, j, mean):\n        total = sum(arr)\n        total -= arr[i] + arr[j]\n        new_mean = total / (len(arr) - 2)\n        return new_mean == mean\n\n    results = []\n    for _ in range(t):\n        n = testcases[_][0]\n        arr = testcases[_][1]\n\n        mean = calculate_mean(arr)\n        count = 0\n        for i in range(n):\n            for j in range(i+1, n):\n                if check_mean(arr, i, j, mean):\n                    count += 1\n\n        results.append(count)\n\n    return results\n\n# Input\nt = int(input())\ntestcases = []\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    testcases.append((n, arr))\n\n# Output\nresults = count_pairs(t, testcases)\nfor res in results:\n    print(res)\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 45)"}, "Round_1": {"code": "def calculate_mean(arr):\n    return sum(arr) / len(arr)\n\ndef count_pairs(t, testcases):\n    def check_mean(arr, i, j, mean):\n        total = sum(arr)\n        total -= arr[i] + arr[j]\n        new_mean = total / (len(arr) - 2)\n        return new_mean == mean\n\n    results = []\n    for _ in range(t):\n        n = testcases[_][0]\n        arr = testcases[_][1]\n\n        mean = calculate_mean(arr)\n        count = 0\n        for i in range(n):\n            for j in range(i+1, n):\n                if check_mean(arr, i, j, mean):\n                    count += 1\n\n        results.append(count)\n\n    return results\n\n# Input\nt = int(input())\ntestcases = []\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    testcases.append((n, arr))\n\n# Output\nresults = count_pairs(t, testcases)\nfor res in results:\n    print(res)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Calculate the mathematic mean of the array a\",\n    \"Identify all pairs of positions [i, j] (i < j) where deleting elements on these positions will result in the mathematic mean of the remaining elements being equal to k\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Read the number of testcases (t)\",\n    \"Step 2\": \"For each testcase, read the number of elements in the array (n)\",\n    \"Step 3\": \"Read the sequence of integers a_1, a_2, ..., a_n\",\n    \"Step 4\": \"Calculate the mathematic mean (k) of the array a\",\n    \"Step 5\": \"Identify all pairs of positions [i, j] (i < j) where deleting elements on these positions will result in the mathematic mean of the remaining elements being equal to k\",\n    \"Step 6\": \"Output the number of pairs of positions [i, j] that satisfy the condition\"\n  }\n}", "Round_0": {"code": "from collections import defaultdict\n\ndef calculate_mean(arr):\n    return sum(arr) / len(arr)\n\ndef count_pairs_to_delete(t, testcases):\n    results = []\n    \n    for _ in range(t):\n        n = testcases[_][0]\n        arr = testcases[_][1]\n        \n        mean = calculate_mean(arr)\n        freq = defaultdict(int)\n        pairs = 0\n        \n        for i in range(n):\n            freq[arr[i]] += 1\n        \n        for i in range(n):\n            pairs += freq[2 * mean - arr[i]]\n            if 2 * mean == arr[i]:\n                pairs -= 1\n        \n        results.append(pairs // 2)\n    \n    return results\n\n# Read input\nt = int(input())\ntestcases = []\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    testcases.append((n, arr))\n\n# Calculate and output results\nresults = count_pairs_to_delete(t, testcases)\nfor res in results:\n    print(res)\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 47)"}, "Round_1": {"code": "from collections import defaultdict\n\ndef calculate_mean(arr):\n    return sum(arr) / len(arr)\n\ndef count_pairs_to_delete(t, testcases):\n    results = []\n    \n    for _ in range(t):\n        n = testcases[_][0]\n        arr = testcases[_][1]\n        \n        mean = calculate_mean(arr)\n        freq = defaultdict(int)\n        pairs = 0\n        \n        for i in range(n):\n            freq[arr[i]] += 1\n        \n        for i in range(n):\n            pairs += freq[2 * mean - arr[i]]\n            if 2 * mean == arr[i]:\n                pairs -= 1\n        \n        results.append(pairs // 2)\n    \n    return results\n\n# Read input\nt = int(input())\ntestcases = []\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    testcases.append((n, arr))\n\n# Calculate and output results\nresults = count_pairs_to_delete(t, testcases)\nfor res in results:\n    print(res)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Calculate the mathematic mean of the array a\",\n    \"Identify pairs of positions [i, j] where deleting elements will result in the same mathematic mean\",\n    \"Count the number of such pairs\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Calculate the mathematic mean of the array a\",\n    \"Step 2\": \"Iterate through all pairs of positions [i, j] (i < j)\",\n    \"Step 3\": \"Delete elements on positions [i, j] and calculate the mathematic mean of the remaining elements\",\n    \"Step 4\": \"If the mathematic mean is equal to k, increment the count of pairs\",\n    \"Step 5\": \"Output the total count of pairs\"\n  }\n}", "Round_0": {"code": "def calculate_mean(arr):\n    return sum(arr) / len(arr)\n\ndef count_pairs(t, testcases):\n    results = []\n    for _ in range(t):\n        n = testcases[_][0]\n        arr = testcases[_][1]\n        k = calculate_mean(arr)\n        count = 0\n        for i in range(n):\n            for j in range(i+1, n):\n                temp_arr = arr[:i] + arr[i+1:j] + arr[j+1:]\n                if calculate_mean(temp_arr) == k:\n                    count += 1\n        results.append(count)\n    return results\n\nt = int(input())\ntestcases = []\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    testcases.append((n, arr))\n\noutput = count_pairs(t, testcases)\nfor res in output:\n    print(res)\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 35)"}, "Round_1": {"code": "def calculate_mean(arr):\n    return sum(arr) / len(arr)\n\ndef count_pairs(t, testcases):\n    results = []\n    for _ in range(t):\n        n = testcases[_][0]\n        arr = testcases[_][1]\n        k = calculate_mean(arr)\n        count = 0\n        for i in range(n):\n            for j in range(i+1, n):\n                temp_arr = arr[:i] + arr[i+1:j] + arr[j+1:]\n                if calculate_mean(temp_arr) == k:\n                    count += 1\n        results.append(count)\n    return results\n\nt = int(input())\ntestcases = []\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    testcases.append((n, arr))\n\noutput = count_pairs(t, testcases)\nfor res in output:\n    print(res)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Calculate the mathematic mean of the array a\",\n    \"Identify all pairs of positions [i, j] (i < j) where deleting the elements on these positions will result in the mathematic mean of the remaining elements being equal to k\"\n  ],\n  \"high_level_plan\": {\n    \"step_1\": \"Calculate the mathematic mean of the array a\",\n    \"step_2\": \"Iterate through all pairs of positions [i, j] (i < j) in the array\",\n    \"step_3\": \"Delete the elements on positions [i, j] and calculate the mathematic mean of the remaining elements\",\n    \"step_4\": \"Check if the mathematic mean of the remaining elements is equal to k\",\n    \"step_5\": \"Count the number of pairs where the mathematic mean is equal to k\"\n  }\n}", "Round_0": {"code": "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    \n    total_sum = sum(arr)\n    count = 0\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            current_sum = total_sum - arr[i] - arr[j]\n            if current_sum == (n-2) * sum(arr) / n:\n                count += 1\n                \n    print(count)\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 23)"}, "Round_1": {"code": "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    \n    total_sum = sum(arr)\n    count = 0\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            current_sum = total_sum - arr[i] - arr[j]\n            if current_sum == (n-2) * sum(arr) / n:\n                count += 1\n                \n    print(count)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Calculate the mathematic mean of the array a\",\n    \"Identify pairs of positions [i, j] where deleting elements will result in the same mathematic mean\",\n    \"Count the number of such pairs\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Calculate the mathematic mean of the array a\",\n    \"Step 2\": \"Iterate through all pairs of positions [i, j] (i < j)\",\n    \"Step 3\": \"Delete elements on positions [i, j] and calculate the mathematic mean of the remaining elements\",\n    \"Step 4\": \"If the mathematic mean is equal to k, increment the count of pairs\",\n    \"Step 5\": \"Output the total count of pairs\"\n  }\n}", "Round_0": {"code": "def calculate_mean(arr):\n    return sum(arr) / len(arr)\n\ndef count_pairs(t, testcases):\n    def check_mean(arr, i, j, k):\n        arr.pop(j)\n        arr.pop(i)\n        return calculate_mean(arr) == k\n    \n    results = []\n    for _ in range(t):\n        n = testcases[_][0]\n        arr = testcases[_][1]\n        k = calculate_mean(arr)\n        count = 0\n        for i in range(n):\n            for j in range(i+1, n):\n                if check_mean(arr.copy(), i, j, k):\n                    count += 1\n        results.append(count)\n    \n    return results\n\nt = int(input())\ntestcases = []\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    testcases.append((n, arr))\n\nresults = count_pairs(t, testcases)\nfor res in results:\n    print(res)\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 40)"}, "Round_1": {"code": "def calculate_mean(arr):\n    return sum(arr) / len(arr)\n\ndef count_pairs(t, testcases):\n    def check_mean(arr, i, j, k):\n        arr.pop(j)\n        arr.pop(i)\n        return calculate_mean(arr) == k\n    \n    results = []\n    for _ in range(t):\n        n = testcases[_][0]\n        arr = testcases[_][1]\n        k = calculate_mean(arr)\n        count = 0\n        for i in range(n):\n            for j in range(i+1, n):\n                if check_mean(arr.copy(), i, j, k):\n                    count += 1\n        results.append(count)\n    \n    return results\n\nt = int(input())\ntestcases = []\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    testcases.append((n, arr))\n\nresults = count_pairs(t, testcases)\nfor res in results:\n    print(res)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Calculate the mathematic mean of the array a\",\n    \"Identify all pairs of positions [i, j] (i < j) where deleting the elements on these positions will result in the mathematic mean of the remaining elements being equal to k\"\n  ],\n  \"high_level_plan\": {\n    \"step_1\": \"Calculate the mathematic mean of the array a\",\n    \"step_2\": \"Iterate through all pairs of positions [i, j] (i < j) in the array\",\n    \"step_3\": \"For each pair, calculate the mathematic mean of the remaining elements after deleting the elements on positions i and j\",\n    \"step_4\": \"Count the number of pairs where the mathematic mean of the remaining elements is equal to k\",\n    \"step_5\": \"Output the total count of such pairs\"\n  }\n}", "Round_0": {"code": "def calculate_mean(arr):\n    return sum(arr) / len(arr)\n\ndef count_pairs_with_mean(arr, k):\n    count = 0\n    n = len(arr)\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            temp_arr = arr[:i] + arr[i+1:j] + arr[j+1:]\n            if calculate_mean(temp_arr) == k:\n                count += 1\n    \n    return count\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    k = calculate_mean(arr)\n    \n    result = count_pairs_with_mean(arr, k)\n    print(result)\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 30)"}, "Round_1": {"code": "def calculate_mean(arr):\n    return sum(arr) / len(arr)\n\ndef count_pairs_with_mean(arr, k):\n    count = 0\n    n = len(arr)\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            temp_arr = arr[:i] + arr[i+1:j] + arr[j+1:]\n            if calculate_mean(temp_arr) == k:\n                count += 1\n    \n    return count\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    k = calculate_mean(arr)\n    \n    result = count_pairs_with_mean(arr, k)\n    print(result)\n"}}], "scores": [], "pass_results": [true, true, true, true, false, false, false, true, false, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 1, "round": 32, "prompt": "Monocarp has got an array a consisting of n integers. We shall denote k as the mathematic mean of these elements. It is important to note that k may not necessarily be an integer. \n\nThe mathematic mean of an array of n elements is the sum of elements divided by the number of these elements (i. e. sum divided by n).\n\nMonocarp wants to delete exactly two elements from a so that the mathematic mean of the remaining (n - 2) elements is still equal to k.\n\nYour task is to calculate the number of pairs of positions [i, j] (i < j) such that if the elements on these positions are deleted, the mathematic mean of (n - 2) remaining elements is equal to k (that is, it is equal to the mathematic mean of n elements of the original array a).\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains one integer n (3 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of elements in the array.\n\nThe second line contains a sequence of integers a_1, a_2, ..., a_n (0 \u2264 a_i \u2264 10^{9}), where a_i is the i-th element of the array.\n\nThe sum of n over all testcases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nPrint one integer \u2014 the number of pairs of positions [i, j] (i < j) such that if the elements on these positions are deleted, the mathematic mean of (n - 2) remaining elements is equal to k (that is, it is equal to the mathematic mean of n elements of the original array a).\n\nExample\n\nInput\n\n\n4\n4\n8 8 8 8\n3\n50 20 10\n5\n1 4 7 3 5\n7\n1 2 3 4 5 6 7\n\n\nOutput\n\n\n6\n0\n2\n3\n\nNote\n\nIn the first example, any pair of elements can be removed since all of them are equal.\n\nIn the second example, there is no way to delete two elements so the mathematic mean doesn't change.\n\nIn the third example, it is possible to delete the elements on positions 1 and 3, or the elements on positions 4 and 5.", "examples": "\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains one integer n (3 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of elements in the array.\n\nThe second line contains a sequence of integers a_1, a_2, ..., a_n (0 \u2264 a_i \u2264 10^{9}), where a_i is the i-th element of the array.\n\nThe sum of n over all testcases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nPrint one integer \u2014 the number of pairs of positions [i, j] (i < j) such that if the elements on these positions are deleted, the mathematic mean of (n - 2) remaining elements is equal to k (that is, it is equal to the mathematic mean of n elements of the original array a).\n\nExample\n\nInput\n\n\n4\n4\n8 8 8 8\n3\n50 20 10\n5\n1 4 7 3 5\n7\n1 2 3 4 5 6 7\n\n\nOutput\n\n\n6\n0\n2\n3\n\nNote\n\nIn the first example, any pair of elements can be removed since all of them are equal.\n\nIn the second example, there is no way to delete two elements so the mathematic mean doesn't change.\n\nIn the third example, it is possible to delete the elements on positions 1 and 3, or the elements on positions 4 and 5.", "mutate_method": "expand_one2two", "save_node": false, "parent_index": 7}
