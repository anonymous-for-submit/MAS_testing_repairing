{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 12, "prompt": "Write a function to sort a given matrix in ascending order according to the sum of its rows. Ensure that the function maintains the original order of rows with equal sums.", "code": "def sort_matrix(M):\n    result = sorted(M, key=sum)\n    return result", "test_imports": [], "test_list": ["assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]", "assert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]", "assert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]", "assert sort_matrix([[1, 5, 3], [3, 4, 10], [2, 1, 4]]) == [[2, 1, 4], [1, 5, 3], [3, 4, 10]]", "assert sort_matrix([[2, 5, 4], [3, 9, 3], [4, 2, 2]]) == [[4, 2, 2], [2, 5, 4], [3, 9, 3]]", "assert sort_matrix([[1, 1, 6], [7, 8, 3], [1, 1, 6]]) == [[1, 1, 6], [1, 1, 6], [7, 8, 3]]", "assert sort_matrix([[3, 3, 7], [2, 6, 10], [1, 3, 1]]) == [[1, 3, 1], [3, 3, 7], [2, 6, 10]]", "assert sort_matrix([[3, 2, 3], [4, 3, 8], [6, 2, 3]]) == [[3, 2, 3], [6, 2, 3], [4, 3, 8]]", "assert sort_matrix([[4, 5, 5], [6, 8, 6], [2, 5, 4]]) == [[2, 5, 4], [4, 5, 5], [6, 8, 6]]", "assert sort_matrix([[1, 2, 3], [3, 1, 4], [1, 2, 4]]) == [[1, 2, 3], [1, 2, 4], [3, 1, 4]]", "assert sort_matrix([[2, 2, 5], [4, 6, 9], [5, 2, 5]]) == [[2, 2, 5], [5, 2, 5], [4, 6, 9]]", "assert sort_matrix([[3, 4, 7], [7, 6, 5], [6, 3, 1]]) == [[6, 3, 1], [3, 4, 7], [7, 6, 5]]", "assert sort_matrix([[5, 1, 5], [4, 5, 1], [4, 5, 1]]) == [[4, 5, 1], [4, 5, 1], [5, 1, 5]]", "assert sort_matrix([[4, 1, 8], [7, 2, 10], [1, 3, 5]]) == [[1, 3, 5], [4, 1, 8], [7, 2, 10]]", "assert sort_matrix([[1, 3, 8], [6, 3, 7], [1, 4, 3]]) == [[1, 4, 3], [1, 3, 8], [6, 3, 7]]", "assert sort_matrix([[5, 5, 6], [6, 9, 1], [2, 5, 1]]) == [[2, 5, 1], [5, 5, 6], [6, 9, 1]]", "assert sort_matrix([[5, 2, 2], [5, 5, 3], [5, 1, 1]]) == [[5, 1, 1], [5, 2, 2], [5, 5, 3]]", "assert sort_matrix([[1, 2, 3], [3, 5, 5], [6, 2, 3]]) == [[1, 2, 3], [6, 2, 3], [3, 5, 5]]", "assert sort_matrix([[3, 7, 7], [6, 7, 5], [1, 1, 2]]) == [[1, 1, 2], [3, 7, 7], [6, 7, 5]]", "assert sort_matrix([[1, 1, 5], [2, 5, 1], [5, 6, 5]]) == [[1, 1, 5], [2, 5, 1], [5, 6, 5]]", "assert sort_matrix([[6, 3, 8], [7, 9, 5], [4, 2, 6]]) == [[4, 2, 6], [6, 3, 8], [7, 9, 5]]", "assert sort_matrix([[3, 6, 4], [7, 5, 10], [6, 4, 5]]) == [[3, 6, 4], [6, 4, 5], [7, 5, 10]]", "assert sort_matrix([[3, 3, 7], [3, 5, 3], [3, 3, 3]]) == [[3, 3, 3], [3, 5, 3], [3, 3, 7]]", "assert sort_matrix([[6, 3, 6], [5, 1, 2], [6, 5, 3]]) == [[5, 1, 2], [6, 5, 3], [6, 3, 6]]", "assert sort_matrix([[2, 2, 8], [5, 9, 10], [5, 1, 5]]) == [[5, 1, 5], [2, 2, 8], [5, 9, 10]]", "assert sort_matrix([[5, 3, 5], [3, 8, 2], [1, 5, 2]]) == [[1, 5, 2], [5, 3, 5], [3, 8, 2]]", "assert sort_matrix([[2, 6, 8], [1, 9, 2], [5, 2, 4]]) == [[5, 2, 4], [1, 9, 2], [2, 6, 8]]", "assert sort_matrix([[1, 1, 3], [6, 4, 7], [1, 1, 2]]) == [[1, 1, 2], [1, 1, 3], [6, 4, 7]]", "assert sort_matrix([[5, 2, 8], [1, 4, 5], [2, 4, 2]]) == [[2, 4, 2], [1, 4, 5], [5, 2, 8]]", "assert sort_matrix([[3, 2, 4], [6, 4, 4], [2, 6, 6]]) == [[3, 2, 4], [6, 4, 4], [2, 6, 6]]", "assert sort_matrix([[5, 2, 4], [5, 1, 2], [1, 5, 3]]) == [[5, 1, 2], [1, 5, 3], [5, 2, 4]]", "assert sort_matrix([[5, 3, 1], [5, 9, 5], [5, 4, 1]]) == [[5, 3, 1], [5, 4, 1], [5, 9, 5]]", "assert sort_matrix([[6, 2, 6], [1, 6, 5], [5, 1, 3]]) == [[5, 1, 3], [1, 6, 5], [6, 2, 6]]", "assert sort_matrix([[6, 7, 8], [2, 2, 9], [6, 4, 1]]) == [[6, 4, 1], [2, 2, 9], [6, 7, 8]]", "assert sort_matrix([[2, 1, 1], [4, 4, 2], [3, 5, 4]]) == [[2, 1, 1], [4, 4, 2], [3, 5, 4]]", "assert sort_matrix([[6, 4, 4], [3, 4, 7], [4, 5, 3]]) == [[4, 5, 3], [6, 4, 4], [3, 4, 7]]", "assert sort_matrix([[1, 7, 7], [-6, 7, -6], [5, -2, 3]]) == [[-6, 7, -6], [5, -2, 3], [1, 7, 7]]", "assert sort_matrix([[1, 4, 5], [2, 4, 0], [5, -4, 3]]) == [[5, -4, 3], [2, 4, 0], [1, 4, 5]]", "assert sort_matrix([[5, 2, 3], [-6, 6, -7], [6, 1, 5]]) == [[-6, 6, -7], [5, 2, 3], [6, 1, 5]]", "assert sort_matrix([[1, 3, 4], [0, 6, -2], [5, -3, 6]]) == [[0, 6, -2], [1, 3, 4], [5, -3, 6]]", "assert sort_matrix([[3, 4, 4], [3, 3, -2], [3, 2, 6]]) == [[3, 3, -2], [3, 4, 4], [3, 2, 6]]", "assert sort_matrix([[6, 2, 7], [-5, 2, -1], [2, -6, 2]]) == [[-5, 2, -1], [2, -6, 2], [6, 2, 7]]", "assert sort_matrix([[1, 2, 1], [3, 7, -8], [3, -4, 1]]) == [[3, -4, 1], [3, 7, -8], [1, 2, 1]]", "assert sort_matrix([[3, 4, 7], [-6, 8, 0], [4, -5, 2]]) == [[4, -5, 2], [-6, 8, 0], [3, 4, 7]]", "assert sort_matrix([[4, 3, 5], [0, 6, 0], [1, -6, 2]]) == [[1, -6, 2], [0, 6, 0], [4, 3, 5]]", "assert sort_matrix([[5, 6, 1], [-7, 5, -6], [5, -1, 2]]) == [[-7, 5, -6], [5, -1, 2], [5, 6, 1]]", "assert sort_matrix([[3, 2, 8], [1, 2, -3], [6, 1, 2]]) == [[1, 2, -3], [6, 1, 2], [3, 2, 8]]", "assert sort_matrix([[3, 3, 1], [0, 9, -2], [1, -5, 5]]) == [[1, -5, 5], [3, 3, 1], [0, 9, -2]]", "assert sort_matrix([[5, 7, 1], [-6, 4, -1], [2, -2, 2]]) == [[-6, 4, -1], [2, -2, 2], [5, 7, 1]]", "assert sort_matrix([[6, 5, 2], [-6, 7, -1], [2, -5, 4]]) == [[-6, 7, -1], [2, -5, 4], [6, 5, 2]]", "assert sort_matrix([[2, 6, 7], [-1, 2, -2], [1, -2, 1]]) == [[-1, 2, -2], [1, -2, 1], [2, 6, 7]]", "assert sort_matrix([[1, 3, 8], [-1, 4, -2], [5, 2, 1]]) == [[-1, 4, -2], [5, 2, 1], [1, 3, 8]]", "assert sort_matrix([[6, 3, 3], [3, 3, 0], [3, 1, 3]]) == [[3, 3, 0], [3, 1, 3], [6, 3, 3]]", "assert sort_matrix([[4, 7, 8], [-7, 7, -1], [2, 1, 5]]) == [[-7, 7, -1], [2, 1, 5], [4, 7, 8]]", "assert sort_matrix([[6, 1, 2], [-3, 8, -9], [5, 3, 6]]) == [[-3, 8, -9], [6, 1, 2], [5, 3, 6]]", "assert sort_matrix([[3, 4, 3], [-2, 8, -10], [3, 0, 6]]) == [[-2, 8, -10], [3, 0, 6], [3, 4, 3]]", "assert sort_matrix([[3, 5, 5], [-4, 3, -9], [3, -1, 1]]) == [[-4, 3, -9], [3, -1, 1], [3, 5, 5]]", "assert sort_matrix([[4, 2, 2], [-2, 1, -8], [5, -5, 1]]) == [[-2, 1, -8], [5, -5, 1], [4, 2, 2]]", "assert sort_matrix([[5, 4, 7], [-5, 4, -8], [1, 1, 4]]) == [[-5, 4, -8], [1, 1, 4], [5, 4, 7]]", "assert sort_matrix([[6, 4, 5], [2, 7, -10], [1, 2, 2]]) == [[2, 7, -10], [1, 2, 2], [6, 4, 5]]", "assert sort_matrix([[5, 7, 6], [2, 1, -4], [5, -6, 4]]) == [[2, 1, -4], [5, -6, 4], [5, 7, 6]]", "assert sort_matrix([[5, 5, 8], [3, 3, -2], [3, -1, 3]]) == [[3, 3, -2], [3, -1, 3], [5, 5, 8]]", "assert sort_matrix([[5, 1, 8], [-2, 3, -6], [1, 0, 2]]) == [[-2, 3, -6], [1, 0, 2], [5, 1, 8]]", "assert sort_matrix([[4, 7, 5], [-4, 9, 0], [2, -4, 2]]) == [[2, -4, 2], [-4, 9, 0], [4, 7, 5]]", "assert sort_matrix([[1, 5, 6], [2, 1, -2], [1, 1, 3]]) == [[2, 1, -2], [1, 1, 3], [1, 5, 6]]", "assert sort_matrix([[4, 5, 8], [-3, 9, 0], [4, 3, 3]]) == [[-3, 9, 0], [4, 3, 3], [4, 5, 8]]", "assert sort_matrix([[3, 4, 4], [1, 6, -5], [5, 0, 2]]) == [[1, 6, -5], [5, 0, 2], [3, 4, 4]]", "assert sort_matrix([[4, 4, 2], [-6, 7, -3], [4, 3, 5]]) == [[-6, 7, -3], [4, 4, 2], [4, 3, 5]]", "assert sort_matrix([[4, 7, 7], [0, 5, -1], [1, -1, 4]]) == [[0, 5, -1], [1, -1, 4], [4, 7, 7]]", "assert sort_matrix([[10, 12, 8], [5, 1, 5], [2, 5, 8]]) == [[5, 1, 5], [2, 5, 8], [10, 12, 8]]", "assert sort_matrix([[3, 8, 13], [11, 9, 6], [3, 6, 4]]) == [[3, 6, 4], [3, 8, 13], [11, 9, 6]]", "assert sort_matrix([[1, 11, 8], [2, 5, 6], [6, 3, 5]]) == [[2, 5, 6], [6, 3, 5], [1, 11, 8]]", "assert sort_matrix([[1, 6, 11], [1, 8, 8], [2, 2, 6]]) == [[2, 2, 6], [1, 8, 8], [1, 6, 11]]", "assert sort_matrix([[9, 4, 8], [10, 7, 2], [1, 3, 2]]) == [[1, 3, 2], [10, 7, 2], [9, 4, 8]]", "assert sort_matrix([[7, 4, 4], [9, 2, 8], [1, 4, 2]]) == [[1, 4, 2], [7, 4, 4], [9, 2, 8]]", "assert sort_matrix([[4, 5, 12], [2, 9, 7], [5, 4, 5]]) == [[5, 4, 5], [2, 9, 7], [4, 5, 12]]", "assert sort_matrix([[3, 9, 4], [7, 3, 6], [3, 1, 9]]) == [[3, 1, 9], [3, 9, 4], [7, 3, 6]]", "assert sort_matrix([[1, 11, 11], [4, 9, 5], [4, 3, 7]]) == [[4, 3, 7], [4, 9, 5], [1, 11, 11]]", "assert sort_matrix([[6, 4, 6], [2, 6, 1], [6, 1, 4]]) == [[2, 6, 1], [6, 1, 4], [6, 4, 6]]", "assert sort_matrix([[9, 11, 11], [1, 4, 1], [4, 1, 8]]) == [[1, 4, 1], [4, 1, 8], [9, 11, 11]]", "assert sort_matrix([[1, 11, 4], [5, 7, 2], [5, 5, 6]]) == [[5, 7, 2], [1, 11, 4], [5, 5, 6]]", "assert sort_matrix([[9, 9, 11], [2, 8, 5], [3, 6, 6]]) == [[2, 8, 5], [3, 6, 6], [9, 9, 11]]", "assert sort_matrix([[3, 3, 4], [5, 1, 6], [2, 6, 4]]) == [[3, 3, 4], [5, 1, 6], [2, 6, 4]]", "assert sort_matrix([[1, 9, 13], [9, 9, 3], [6, 4, 4]]) == [[6, 4, 4], [9, 9, 3], [1, 9, 13]]", "assert sort_matrix([[9, 4, 11], [5, 7, 4], [3, 5, 4]]) == [[3, 5, 4], [5, 7, 4], [9, 4, 11]]", "assert sort_matrix([[5, 8, 12], [1, 3, 2], [6, 4, 8]]) == [[1, 3, 2], [6, 4, 8], [5, 8, 12]]", "assert sort_matrix([[10, 13, 6], [3, 6, 7], [6, 4, 4]]) == [[6, 4, 4], [3, 6, 7], [10, 13, 6]]", "assert sort_matrix([[7, 11, 7], [4, 1, 3], [5, 5, 7]]) == [[4, 1, 3], [5, 5, 7], [7, 11, 7]]", "assert sort_matrix([[9, 9, 10], [10, 2, 7], [5, 6, 9]]) == [[10, 2, 7], [5, 6, 9], [9, 9, 10]]", "assert sort_matrix([[8, 12, 11], [1, 5, 7], [4, 3, 5]]) == [[4, 3, 5], [1, 5, 7], [8, 12, 11]]", "assert sort_matrix([[2, 6, 14], [5, 2, 3], [3, 1, 5]]) == [[3, 1, 5], [5, 2, 3], [2, 6, 14]]", "assert sort_matrix([[6, 3, 5], [7, 5, 3], [6, 6, 7]]) == [[6, 3, 5], [7, 5, 3], [6, 6, 7]]", "assert sort_matrix([[1, 13, 4], [4, 4, 2], [4, 1, 9]]) == [[4, 4, 2], [4, 1, 9], [1, 13, 4]]", "assert sort_matrix([[8, 7, 4], [5, 8, 4], [2, 4, 1]]) == [[2, 4, 1], [5, 8, 4], [8, 7, 4]]", "assert sort_matrix([[4, 8, 9], [5, 4, 4], [2, 5, 6]]) == [[5, 4, 4], [2, 5, 6], [4, 8, 9]]", "assert sort_matrix([[5, 10, 14], [9, 7, 7], [5, 6, 7]]) == [[5, 6, 7], [9, 7, 7], [5, 10, 14]]", "assert sort_matrix([[5, 6, 4], [8, 8, 1], [2, 5, 1]]) == [[2, 5, 1], [5, 6, 4], [8, 8, 1]]", "assert sort_matrix([[5, 12, 12], [3, 5, 3], [5, 3, 1]]) == [[5, 3, 1], [3, 5, 3], [5, 12, 12]]", "assert sort_matrix([[4, 7, 10], [10, 4, 8], [5, 6, 8]]) == [[5, 6, 8], [4, 7, 10], [10, 4, 8]]", "assert sort_matrix([[2, 4, 7], [10, 3, 3], [6, 4, 6]]) == [[2, 4, 7], [10, 3, 3], [6, 4, 6]]", "assert sort_matrix([[5, 5, 6], [11, 9, 3], [1, 3, 9]]) == [[1, 3, 9], [5, 5, 6], [11, 9, 3]]", "assert sort_matrix([[3, 8, 10], [7, 7, 7], [4, 3, 3]]) == [[4, 3, 3], [3, 8, 10], [7, 7, 7]]"], "entry_point": "sort_matrix", "completion": "from typing import *\ndef sort_matrix(matrix):\n    # Validate the input to ensure it is a matrix with numerical values\n    if not all(isinstance(row, list) and all(isinstance(num, (int, float)) for num in row) for row in matrix):\n        raise ValueError(\"Input must be a list of lists with numerical values.\")\n    \n    # Initialize an empty list to store tuples of (row_sum, row)\n    row_sum_pairs = []\n    \n    # Iterate over each row in the matrix\n    for row in matrix:\n        # Calculate the sum of the current row\n        row_sum = sum(row)\n        # Append a tuple (row_sum, row) to the list\n        row_sum_pairs.append((row_sum, row))\n    \n    # Sort the list of tuples based on the first element (row_sum) of each tuple\n    row_sum_pairs.sort(key=lambda x: x[0])\n    \n    # Extract the rows from the sorted list of tuples\n    sorted_rows = [row for _, row in row_sum_pairs]\n    \n    # Return the sorted list of rows as the output of the function\n    return sorted_rows\n\n# Example usage\nprint(sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))  # Output: [[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n", "completions": ["from typing import *\ndef sort_matrix(matrix):\n    # Validate the input to ensure it is a matrix with consistent row lengths\n    if not isinstance(matrix, list) or not all(isinstance(row, list) for row in matrix):\n        raise ValueError(\"Input must be a list of lists (matrix).\")\n    \n    row_length = len(matrix[0])\n    if not all(len(row) == row_length for row in matrix):\n        raise ValueError(\"All rows in the matrix must have the same length.\")\n    \n    # Initialize an empty list to store pairs of (row_sum, row)\n    row_sum_pairs = []\n    \n    # Iterate over each row in the matrix\n    for row in matrix:\n        # Calculate the sum of the current row\n        row_sum = sum(row)\n        # Append a tuple (row_sum, row) to the list\n        row_sum_pairs.append((row_sum, row))\n    \n    # Sort the list of tuples based on the first element (row_sum) using a stable sorting algorithm\n    row_sum_pairs.sort(key=lambda x: x[0])\n    \n    # Extract the rows from the sorted list of tuples, maintaining the order\n    sorted_matrix = [row for _, row in row_sum_pairs]\n    \n    # Return the sorted list of rows\n    return sorted_matrix\n\n# Example usage\nprint(sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))  # Output: [[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n", "from typing import *\ndef sort_matrix(matrix):\n    # Validate the input to ensure it is a matrix with numerical values\n    if not all(isinstance(row, list) for row in matrix):\n        raise ValueError(\"Input must be a list of lists.\")\n    if not all(all(isinstance(num, (int, float)) for num in row) for row in matrix):\n        raise ValueError(\"All elements in the matrix must be numerical values.\")\n\n    # Initialize an empty list to store tuples of (row_sum, row)\n    row_sum_pairs = []\n\n    # Iterate over each row in the matrix\n    for row in matrix:\n        # Calculate the sum of the current row\n        row_sum = sum(row)\n        # Append a tuple (row_sum, row) to the list\n        row_sum_pairs.append((row_sum, row))\n\n    # Sort the list of tuples based on the first element (row_sum) of each tuple\n    row_sum_pairs.sort(key=lambda x: x[0])\n\n    # Extract the rows from the sorted list of tuples\n    sorted_rows = [row for _, row in row_sum_pairs]\n\n    # Return the sorted list of rows as the output of the function\n    return sorted_rows\n\n# Example usage\nprint(sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))  # Output: [[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n", "from typing import *\ndef sort_matrix(matrix):\n    # Calculate the sum of each row in the matrix\n    row_sums = [sum(row) for row in matrix]\n    \n    # Pair each row with its corresponding sum\n    row_sum_pairs = list(zip(matrix, row_sums))\n    \n    # Sort the list of tuples based on the sum, maintaining the original order for rows with equal sums\n    sorted_row_sum_pairs = sorted(row_sum_pairs, key=lambda x: x[1])\n    \n    # Extract the sorted rows from the list of tuples\n    sorted_matrix = [row for row, _ in sorted_row_sum_pairs]\n    \n    return sorted_matrix\n\n# Example usage\nprint(sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))  # Output: [[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n", "from typing import *\ndef sort_matrix(matrix):\n    # Validate the input to ensure it is a matrix with numerical values\n    if not all(isinstance(row, list) for row in matrix):\n        raise ValueError(\"Input must be a list of lists.\")\n    if not all(all(isinstance(num, (int, float)) for num in row) for row in matrix):\n        raise ValueError(\"All elements in the matrix must be numerical values.\")\n\n    # Create a list of tuples where each tuple contains a row and its corresponding sum\n    row_sum_pairs = [(row, sum(row)) for row in matrix]\n\n    # Sort the list of tuples based on the sum values, using a stable sorting algorithm\n    row_sum_pairs.sort(key=lambda x: x[1])\n\n    # Extract the rows from the sorted list of tuples to form the sorted matrix\n    sorted_matrix = [row for row, _ in row_sum_pairs]\n\n    # Return the sorted matrix as the output of the function\n    return sorted_matrix\n\n# Example usage\nprint(sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))  # Output: [[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n", "from typing import *\ndef sort_matrix(matrix):\n    # Calculate row sums and pair each row with its sum\n    row_sums = [(row, sum(row)) for row in matrix]\n    \n    # Sort rows by their sums, maintaining the original order for equal sums\n    sorted_rows = sorted(row_sums, key=lambda x: x[1])\n    \n    # Extract the sorted rows\n    sorted_matrix = [row for row, _ in sorted_rows]\n    \n    return sorted_matrix\n\n# Example usage\nprint(sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))  # Output: [[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n", "from typing import *\ndef sort_matrix(matrix):\n    # Calculate the sum of each row in the matrix\n    row_sums = [sum(row) for row in matrix]\n    \n    # Pair each row with its corresponding sum\n    row_sum_pairs = list(zip(matrix, row_sums))\n    \n    # Sort the list of tuples based on the sum, maintaining the original order for rows with equal sums\n    sorted_row_sum_pairs = sorted(row_sum_pairs, key=lambda x: x[1])\n    \n    # Extract the sorted rows from the list of tuples\n    sorted_matrix = [row for row, _ in sorted_row_sum_pairs]\n    \n    return sorted_matrix\n\n# Example usage\nprint(sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))  # Output: [[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n", "from typing import *\ndef sort_matrix(matrix):\n    # Pair each row with its sum\n    row_sum_pairs = [(row, sum(row)) for row in matrix]\n    \n    # Sort the pairs based on the sum, maintaining original order for equal sums\n    row_sum_pairs.sort(key=lambda x: x[1])\n    \n    # Extract the sorted rows\n    sorted_matrix = [row for row, _ in row_sum_pairs]\n    \n    return sorted_matrix\n\n# Example usage\nprint(sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))  # Output: [[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n", "from typing import *\ndef sort_matrix(matrix):\n    # Validate the input to ensure it is a matrix with consistent row lengths\n    if not matrix or not all(isinstance(row, list) for row in matrix):\n        raise ValueError(\"Input must be a list of lists (matrix).\")\n    \n    row_length = len(matrix[0])\n    if not all(len(row) == row_length for row in matrix):\n        raise ValueError(\"All rows must have the same length.\")\n    \n    # Initialize an empty list to store tuples of (row_sum, row)\n    row_sum_pairs = []\n    \n    # Iterate over each row in the matrix\n    for row in matrix:\n        # Calculate the sum of the current row\n        row_sum = sum(row)\n        # Append a tuple (row_sum, row) to the list\n        row_sum_pairs.append((row_sum, row))\n    \n    # Sort the list of tuples based on the first element (row_sum) of each tuple\n    row_sum_pairs.sort(key=lambda x: x[0])\n    \n    # Extract the rows from the sorted list of tuples\n    sorted_rows = [row for _, row in row_sum_pairs]\n    \n    # Return the sorted list of rows\n    return sorted_rows\n\n# Example usage\nprint(sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))  # Output: [[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n", "from typing import *\ndef sort_matrix(matrix):\n    # Pair each row with the sum of its elements\n    row_sums = [(row, sum(row)) for row in matrix]\n    \n    # Sort the list of tuples based on the sum values, maintaining stability\n    row_sums.sort(key=lambda x: x[1])\n    \n    # Extract the sorted rows from the list of tuples\n    sorted_matrix = [row for row, _ in row_sums]\n    \n    return sorted_matrix\n\n# Example usage\nprint(sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))  # Output: [[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n", "from typing import *\ndef sort_matrix(matrix):\n    # Validate the input to ensure it is a matrix with numerical values\n    if not all(isinstance(row, list) and all(isinstance(num, (int, float)) for num in row) for row in matrix):\n        raise ValueError(\"Input must be a list of lists with numerical values.\")\n    \n    # Initialize an empty list to store tuples of (row_sum, row)\n    row_sum_pairs = []\n    \n    # Iterate over each row in the matrix\n    for row in matrix:\n        # Calculate the sum of the current row\n        row_sum = sum(row)\n        # Append a tuple (row_sum, row) to the list\n        row_sum_pairs.append((row_sum, row))\n    \n    # Sort the list of tuples based on the first element (row_sum) of each tuple\n    row_sum_pairs.sort(key=lambda x: x[0])\n    \n    # Extract the rows from the sorted list of tuples\n    sorted_rows = [row for _, row in row_sum_pairs]\n    \n    # Return the sorted list of rows as the output of the function\n    return sorted_rows\n\n# Example usage\nprint(sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))  # Output: [[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n"], "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    \"Parse the input matrix to ensure it is a valid list of lists with numerical values.\",\n    \"Calculate the sum of each row in the matrix.\",\n    \"Pair each row with its corresponding sum.\",\n    \"Sort the list of row-sum pairs based on the sum values, maintaining the original order for rows with equal sums.\",\n    \"Extract the sorted rows from the sorted list of row-sum pairs.\"\n  ],\n  \"high_level_plan\": [\n    \"Define a function named 'sort_matrix' that takes a matrix (list of lists) as input.\",\n    \"Validate the input to ensure it is a matrix with numerical values.\",\n    \"Initialize an empty list to store tuples of (row_sum, row).\",\n    \"Iterate over each row in the matrix:\",\n    \"  - Calculate the sum of the current row.\",\n    \"  - Append a tuple (row_sum, row) to the list.\",\n    \"Sort the list of tuples based on the first element (row_sum) of each tuple, using a stable sorting algorithm to maintain order for equal sums.\",\n    \"Extract the rows from the sorted list of tuples.\",\n    \"Return the sorted list of rows as the output of the function.\"\n  ]\n}\n```", "Round_0": {"code": "def sort_matrix(matrix):\n    # Validate the input to ensure it is a matrix with numerical values\n    if not all(isinstance(row, list) and all(isinstance(num, (int, float)) for num in row) for row in matrix):\n        raise ValueError(\"Input must be a list of lists with numerical values.\")\n    \n    # Initialize an empty list to store tuples of (row_sum, row)\n    row_sum_pairs = []\n    \n    # Iterate over each row in the matrix\n    for row in matrix:\n        # Calculate the sum of the current row\n        row_sum = sum(row)\n        # Append a tuple (row_sum, row) to the list\n        row_sum_pairs.append((row_sum, row))\n    \n    # Sort the list of tuples based on the first element (row_sum) of each tuple\n    row_sum_pairs.sort(key=lambda x: x[0])\n    \n    # Extract the rows from the sorted list of tuples\n    sorted_rows = [row for _, row in row_sum_pairs]\n    \n    # Return the sorted list of rows as the output of the function\n    return sorted_rows\n\n# Example usage\nprint(sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))  # Output: [[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, "session_historys": [{"plan": "```json\n{\n  \"subproblems\": [\n    \"Parse the input to ensure it is a valid matrix (list of lists) with consistent row lengths.\",\n    \"Calculate the sum of each row in the matrix.\",\n    \"Pair each row with its corresponding sum.\",\n    \"Sort the list of pairs based on the sum, ensuring stability to maintain the original order of rows with equal sums.\",\n    \"Extract the sorted rows from the sorted list of pairs.\"\n  ],\n  \"high_level_plan\": [\n    \"Define a function named 'sort_matrix' that takes a matrix as input.\",\n    \"Validate the input to ensure it is a matrix with consistent row lengths.\",\n    \"Initialize an empty list to store pairs of (row_sum, row).\",\n    \"Iterate over each row in the matrix:\",\n    \"  - Calculate the sum of the current row.\",\n    \"  - Append a tuple (row_sum, row) to the list.\",\n    \"Sort the list of tuples based on the first element (row_sum) using a stable sorting algorithm.\",\n    \"Extract the rows from the sorted list of tuples, maintaining the order.\",\n    \"Return the sorted list of rows.\"\n  ]\n}\n```", "Round_0": {"code": "def sort_matrix(matrix):\n    # Validate the input to ensure it is a matrix with consistent row lengths\n    if not matrix or not all(isinstance(row, list) for row in matrix):\n        raise ValueError(\"Input must be a list of lists (matrix).\")\n    \n    row_length = len(matrix[0])\n    if not all(len(row) == row_length for row in matrix):\n        raise ValueError(\"All rows in the matrix must have the same length.\")\n    \n    # Initialize an empty list to store pairs of (row_sum, row)\n    row_sum_pairs = []\n    \n    # Iterate over each row in the matrix\n    for row in matrix:\n        # Calculate the sum of the current row\n        row_sum = sum(row)\n        # Append a tuple (row_sum, row) to the list\n        row_sum_pairs.append((row_sum, row))\n    \n    # Sort the list of tuples based on the first element (row_sum) using a stable sorting algorithm\n    row_sum_pairs.sort(key=lambda x: x[0])\n    \n    # Extract the rows from the sorted list of tuples, maintaining the order\n    sorted_matrix = [row for _, row in row_sum_pairs]\n    \n    # Return the sorted list of rows\n    return sorted_matrix\n\n# Example usage\nprint(sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))  # Output: [[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n", "report": "The compilation output of the preceding code is: Input must be a list of lists (matrix)."}, "Round_1": {"code": "def sort_matrix(matrix):\n    # Validate the input to ensure it is a matrix with consistent row lengths\n    if not isinstance(matrix, list) or not all(isinstance(row, list) for row in matrix):\n        raise ValueError(\"Input must be a list of lists (matrix).\")\n    \n    row_length = len(matrix[0])\n    if not all(len(row) == row_length for row in matrix):\n        raise ValueError(\"All rows in the matrix must have the same length.\")\n    \n    # Initialize an empty list to store pairs of (row_sum, row)\n    row_sum_pairs = []\n    \n    # Iterate over each row in the matrix\n    for row in matrix:\n        # Calculate the sum of the current row\n        row_sum = sum(row)\n        # Append a tuple (row_sum, row) to the list\n        row_sum_pairs.append((row_sum, row))\n    \n    # Sort the list of tuples based on the first element (row_sum) using a stable sorting algorithm\n    row_sum_pairs.sort(key=lambda x: x[0])\n    \n    # Extract the rows from the sorted list of tuples, maintaining the order\n    sorted_matrix = [row for _, row in row_sum_pairs]\n    \n    # Return the sorted list of rows\n    return sorted_matrix\n\n# Example usage\nprint(sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))  # Output: [[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    \"Parse the input matrix to ensure it is a valid list of lists containing numerical values.\",\n    \"Calculate the sum of each row in the matrix.\",\n    \"Pair each row with its corresponding sum.\",\n    \"Sort the list of row-sum pairs based on the sum values, maintaining the original order for rows with equal sums.\",\n    \"Extract the sorted rows from the sorted list of row-sum pairs.\"\n  ],\n  \"high_level_plan\": [\n    \"Define a function named 'sort_matrix' that takes a matrix (list of lists) as input.\",\n    \"Validate the input to ensure it is a matrix with numerical values.\",\n    \"Initialize an empty list to store tuples of (row_sum, row).\",\n    \"Iterate over each row in the matrix:\",\n    \"  - Calculate the sum of the current row.\",\n    \"  - Append a tuple (row_sum, row) to the list.\",\n    \"Sort the list of tuples based on the first element (row_sum) of each tuple, using a stable sorting algorithm to maintain order for equal sums.\",\n    \"Extract the rows from the sorted list of tuples.\",\n    \"Return the sorted list of rows as the output of the function.\"\n  ]\n}\n```", "Round_0": {"code": "def sort_matrix(matrix):\n    # Validate the input to ensure it is a matrix with numerical values\n    if not all(isinstance(row, list) for row in matrix):\n        raise ValueError(\"Input must be a list of lists.\")\n    if not all(all(isinstance(num, (int, float)) for num in row) for row in matrix):\n        raise ValueError(\"All elements in the matrix must be numerical values.\")\n\n    # Initialize an empty list to store tuples of (row_sum, row)\n    row_sum_pairs = []\n\n    # Iterate over each row in the matrix\n    for row in matrix:\n        # Calculate the sum of the current row\n        row_sum = sum(row)\n        # Append a tuple (row_sum, row) to the list\n        row_sum_pairs.append((row_sum, row))\n\n    # Sort the list of tuples based on the first element (row_sum) of each tuple\n    row_sum_pairs.sort(key=lambda x: x[0])\n\n    # Extract the rows from the sorted list of tuples\n    sorted_rows = [row for _, row in row_sum_pairs]\n\n    # Return the sorted list of rows as the output of the function\n    return sorted_rows\n\n# Example usage\nprint(sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))  # Output: [[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Calculate the sum of each row in the given matrix.\",\n      \"input\": \"A matrix represented as a list of lists, where each inner list is a row.\",\n      \"output\": \"A list of sums, where each sum corresponds to a row in the matrix.\"\n    },\n    {\n      \"description\": \"Pair each row with its corresponding sum.\",\n      \"input\": \"The original matrix and the list of row sums.\",\n      \"output\": \"A list of tuples, where each tuple contains a row and its corresponding sum.\"\n    },\n    {\n      \"description\": \"Sort the list of tuples based on the sum, maintaining the original order for rows with equal sums.\",\n      \"input\": \"A list of tuples containing rows and their corresponding sums.\",\n      \"output\": \"A sorted list of tuples based on the sum.\"\n    },\n    {\n      \"description\": \"Extract the sorted rows from the list of tuples.\",\n      \"input\": \"A sorted list of tuples containing rows and their corresponding sums.\",\n      \"output\": \"A matrix with rows sorted according to their sums.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Receive the input matrix.\",\n    \"Calculate the sum of each row in the matrix.\",\n    \"Create a list of tuples pairing each row with its sum.\",\n    \"Sort the list of tuples by the sum, ensuring rows with equal sums maintain their original order.\",\n    \"Extract and return the sorted rows from the list of tuples.\"\n  ]\n}\n```", "Round_0": {"code": "def sort_matrix(matrix):\n    # Calculate the sum of each row in the matrix\n    row_sums = [sum(row) for row in matrix]\n    \n    # Pair each row with its corresponding sum\n    row_sum_pairs = list(zip(matrix, row_sums))\n    \n    # Sort the list of tuples based on the sum, maintaining the original order for rows with equal sums\n    sorted_row_sum_pairs = sorted(row_sum_pairs, key=lambda x: x[1])\n    \n    # Extract the sorted rows from the list of tuples\n    sorted_matrix = [row for row, _ in sorted_row_sum_pairs]\n    \n    return sorted_matrix\n\n# Example usage\nprint(sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))  # Output: [[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    \"Parse the input matrix to ensure it is a valid list of lists with numerical values.\",\n    \"Calculate the sum of each row in the matrix.\",\n    \"Pair each row with its corresponding sum.\",\n    \"Sort the list of row-sum pairs based on the sum values, maintaining the original order for rows with equal sums.\",\n    \"Extract the sorted rows from the sorted list of row-sum pairs.\"\n  ],\n  \"high_level_plan\": [\n    \"Define a function named 'sort_matrix' that takes a matrix (list of lists) as input.\",\n    \"Validate the input to ensure it is a matrix with numerical values.\",\n    \"Iterate over each row in the matrix to calculate the sum of its elements.\",\n    \"Create a list of tuples where each tuple contains a row and its corresponding sum.\",\n    \"Sort the list of tuples based on the sum values, using a stable sorting algorithm to maintain the order of rows with equal sums.\",\n    \"Extract the rows from the sorted list of tuples to form the sorted matrix.\",\n    \"Return the sorted matrix as the output of the function.\"\n  ]\n}\n```", "Round_0": {"code": "def sort_matrix(matrix):\n    # Validate the input to ensure it is a matrix with numerical values\n    if not all(isinstance(row, list) for row in matrix):\n        raise ValueError(\"Input must be a list of lists.\")\n    if not all(all(isinstance(num, (int, float)) for num in row) for row in matrix):\n        raise ValueError(\"All elements in the matrix must be numerical values.\")\n\n    # Create a list of tuples where each tuple contains a row and its corresponding sum\n    row_sum_pairs = [(row, sum(row)) for row in matrix]\n\n    # Sort the list of tuples based on the sum values, using a stable sorting algorithm\n    row_sum_pairs.sort(key=lambda x: x[1])\n\n    # Extract the rows from the sorted list of tuples to form the sorted matrix\n    sorted_matrix = [row for row, _ in row_sum_pairs]\n\n    # Return the sorted matrix as the output of the function\n    return sorted_matrix\n\n# Example usage\nprint(sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))  # Output: [[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"decomposed_subproblems\": [\n    {\n      \"subproblem\": \"Calculate the sum of each row in the matrix.\",\n      \"description\": \"Iterate through each row of the matrix and compute the sum of its elements.\"\n    },\n    {\n      \"subproblem\": \"Pair each row with its corresponding sum.\",\n      \"description\": \"Create a list of tuples where each tuple contains a row and its sum.\"\n    },\n    {\n      \"subproblem\": \"Sort the list of tuples based on the sum values.\",\n      \"description\": \"Sort the list of tuples in ascending order using the sum as the key, ensuring rows with equal sums maintain their original order.\"\n    },\n    {\n      \"subproblem\": \"Extract the sorted rows from the list of tuples.\",\n      \"description\": \"After sorting, extract the rows from the sorted list of tuples to form the final sorted matrix.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Define the function signature.\",\n      \"description\": \"Create a function named 'sort_matrix' that takes a matrix (list of lists) as input.\"\n    },\n    {\n      \"step\": \"Calculate row sums.\",\n      \"description\": \"Iterate over each row in the matrix and calculate the sum of its elements.\"\n    },\n    {\n      \"step\": \"Pair rows with sums.\",\n      \"description\": \"Create a list of tuples, each containing a row and its sum.\"\n    },\n    {\n      \"step\": \"Sort rows by sums.\",\n      \"description\": \"Sort the list of tuples by the sum values, ensuring rows with equal sums maintain their original order.\"\n    },\n    {\n      \"step\": \"Extract sorted rows.\",\n      \"description\": \"Extract the rows from the sorted list of tuples to form the final sorted matrix.\"\n    },\n    {\n      \"step\": \"Return the sorted matrix.\",\n      \"description\": \"Return the matrix with rows sorted by their sums.\"\n    }\n  ]\n}\n```", "Round_0": {"code": "def sort_matrix(matrix):\n    # Calculate row sums and pair each row with its sum\n    row_sums = [(row, sum(row)) for row in matrix]\n    \n    # Sort rows by their sums, maintaining the original order for equal sums\n    sorted_rows = sorted(row_sums, key=lambda x: x[1])\n    \n    # Extract the sorted rows\n    sorted_matrix = [row for row, _ in sorted_rows]\n    \n    return sorted_matrix\n\n# Example usage\nprint(sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))  # Output: [[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Calculate the sum of each row in the given matrix.\",\n      \"input\": \"A matrix represented as a list of lists, where each inner list is a row.\",\n      \"output\": \"A list of sums, where each sum corresponds to a row in the matrix.\"\n    },\n    {\n      \"description\": \"Pair each row with its corresponding sum.\",\n      \"input\": \"The original matrix and the list of row sums.\",\n      \"output\": \"A list of tuples, where each tuple contains a row and its corresponding sum.\"\n    },\n    {\n      \"description\": \"Sort the list of tuples based on the sum, maintaining the original order for rows with equal sums.\",\n      \"input\": \"A list of tuples containing rows and their corresponding sums.\",\n      \"output\": \"A sorted list of tuples based on the sum.\"\n    },\n    {\n      \"description\": \"Extract the sorted rows from the list of tuples.\",\n      \"input\": \"A sorted list of tuples containing rows and their corresponding sums.\",\n      \"output\": \"A matrix with rows sorted based on the sum of their elements.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Receive the input matrix.\",\n    \"Calculate the sum of each row in the matrix.\",\n    \"Pair each row with its corresponding sum.\",\n    \"Sort the list of row-sum pairs based on the sum, ensuring stability to maintain the original order for rows with equal sums.\",\n    \"Extract and return the sorted rows from the sorted list of row-sum pairs.\"\n  ]\n}\n```", "Round_0": {"code": "def sort_matrix(matrix):\n    # Calculate the sum of each row in the matrix\n    row_sums = [sum(row) for row in matrix]\n    \n    # Pair each row with its corresponding sum\n    row_sum_pairs = list(zip(matrix, row_sums))\n    \n    # Sort the list of tuples based on the sum, maintaining the original order for rows with equal sums\n    sorted_row_sum_pairs = sorted(row_sum_pairs, key=lambda x: x[1])\n    \n    # Extract the sorted rows from the list of tuples\n    sorted_matrix = [row for row, _ in sorted_row_sum_pairs]\n    \n    return sorted_matrix\n\n# Example usage\nprint(sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))  # Output: [[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"decomposed_subproblems\": [\n    {\n      \"subproblem\": \"Calculate the sum of each row in the matrix.\",\n      \"description\": \"Iterate through each row of the matrix and compute the sum of its elements.\"\n    },\n    {\n      \"subproblem\": \"Pair each row with its corresponding sum.\",\n      \"description\": \"Create a list of tuples where each tuple contains a row and its sum.\"\n    },\n    {\n      \"subproblem\": \"Sort the list of tuples based on the sum values.\",\n      \"description\": \"Sort the list of tuples in ascending order using the sum as the key, ensuring rows with equal sums maintain their original order.\"\n    },\n    {\n      \"subproblem\": \"Extract the sorted rows from the list of tuples.\",\n      \"description\": \"After sorting, extract the rows from the sorted list of tuples to form the final sorted matrix.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Define a function named sort_matrix that takes a matrix as input.\",\n    \"Calculate the sum of each row and pair it with the row.\",\n    \"Sort the list of row-sum pairs based on the sum values, maintaining the original order for equal sums.\",\n    \"Extract the sorted rows from the sorted list of pairs.\",\n    \"Return the sorted matrix.\"\n  ]\n}\n```", "Round_0": {"code": "def sort_matrix(matrix):\n    # Pair each row with its sum\n    row_sum_pairs = [(row, sum(row)) for row in matrix]\n    \n    # Sort the pairs based on the sum, maintaining original order for equal sums\n    row_sum_pairs.sort(key=lambda x: x[1])\n    \n    # Extract the sorted rows\n    sorted_matrix = [row for row, _ in row_sum_pairs]\n    \n    return sorted_matrix\n\n# Example usage\nprint(sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))  # Output: [[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    \"Parse the input to ensure it is a valid matrix (list of lists) with consistent row lengths.\",\n    \"Calculate the sum of each row in the matrix.\",\n    \"Pair each row with its corresponding sum.\",\n    \"Sort the list of row-sum pairs based on the sum values, maintaining the original order for rows with equal sums.\",\n    \"Extract the sorted rows from the sorted list of row-sum pairs.\"\n  ],\n  \"high_level_plan\": [\n    \"Define a function named 'sort_matrix' that takes a matrix as input.\",\n    \"Validate the input to ensure it is a matrix with consistent row lengths.\",\n    \"Initialize an empty list to store tuples of (row_sum, row).\",\n    \"Iterate over each row in the matrix:\",\n    \"  - Calculate the sum of the current row.\",\n    \"  - Append a tuple (row_sum, row) to the list.\",\n    \"Sort the list of tuples based on the first element (row_sum) of each tuple, using a stable sorting algorithm to maintain order for equal sums.\",\n    \"Extract the rows from the sorted list of tuples.\",\n    \"Return the sorted list of rows.\"\n  ]\n}\n```", "Round_0": {"code": "def sort_matrix(matrix):\n    # Validate the input to ensure it is a matrix with consistent row lengths\n    if not matrix or not all(isinstance(row, list) for row in matrix):\n        raise ValueError(\"Input must be a list of lists (matrix).\")\n    \n    row_length = len(matrix[0])\n    if not all(len(row) == row_length for row in matrix):\n        raise ValueError(\"All rows must have the same length.\")\n    \n    # Initialize an empty list to store tuples of (row_sum, row)\n    row_sum_pairs = []\n    \n    # Iterate over each row in the matrix\n    for row in matrix:\n        # Calculate the sum of the current row\n        row_sum = sum(row)\n        # Append a tuple (row_sum, row) to the list\n        row_sum_pairs.append((row_sum, row))\n    \n    # Sort the list of tuples based on the first element (row_sum) of each tuple\n    row_sum_pairs.sort(key=lambda x: x[0])\n    \n    # Extract the rows from the sorted list of tuples\n    sorted_rows = [row for _, row in row_sum_pairs]\n    \n    # Return the sorted list of rows\n    return sorted_rows\n\n# Example usage\nprint(sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))  # Output: [[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Calculate the sum of each row in the matrix.\",\n      \"details\": \"Iterate through each row of the matrix and compute the sum of its elements.\"\n    },\n    {\n      \"description\": \"Pair each row with its corresponding sum.\",\n      \"details\": \"Create a list of tuples where each tuple contains a row and its sum.\"\n    },\n    {\n      \"description\": \"Sort the list of tuples based on the sum values.\",\n      \"details\": \"Use a sorting algorithm that maintains the original order of rows with equal sums.\"\n    },\n    {\n      \"description\": \"Extract the sorted rows from the list of tuples.\",\n      \"details\": \"After sorting, retrieve only the rows from the list of tuples to form the sorted matrix.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Define a function named 'sort_matrix' that takes a matrix as input.\",\n    \"Calculate the sum of each row and pair it with the row in a list of tuples.\",\n    \"Sort the list of tuples by the sum values, ensuring stability to maintain the order of rows with equal sums.\",\n    \"Extract the rows from the sorted list of tuples to form the final sorted matrix.\",\n    \"Return the sorted matrix.\"\n  ]\n}\n```", "Round_0": {"code": "def sort_matrix(matrix):\n    # Pair each row with the sum of its elements\n    row_sums = [(row, sum(row)) for row in matrix]\n    \n    # Sort the list of tuples based on the sum values, maintaining stability\n    row_sums.sort(key=lambda x: x[1])\n    \n    # Extract the sorted rows from the list of tuples\n    sorted_matrix = [row for row, _ in row_sums]\n    \n    return sorted_matrix\n\n# Example usage\nprint(sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))  # Output: [[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    \"Parse the input matrix to ensure it is a valid list of lists with numerical values.\",\n    \"Calculate the sum of each row in the matrix.\",\n    \"Pair each row with its corresponding sum.\",\n    \"Sort the list of row-sum pairs based on the sum values, maintaining the original order for rows with equal sums.\",\n    \"Extract the sorted rows from the sorted list of row-sum pairs.\"\n  ],\n  \"high_level_plan\": [\n    \"Define a function named 'sort_matrix' that takes a matrix (list of lists) as input.\",\n    \"Validate the input to ensure it is a matrix with numerical values.\",\n    \"Initialize an empty list to store tuples of (row_sum, row).\",\n    \"Iterate over each row in the matrix:\",\n    \"  - Calculate the sum of the current row.\",\n    \"  - Append a tuple (row_sum, row) to the list.\",\n    \"Sort the list of tuples based on the first element (row_sum) of each tuple, using a stable sorting algorithm to maintain order for equal sums.\",\n    \"Extract the rows from the sorted list of tuples.\",\n    \"Return the sorted list of rows as the output of the function.\"\n  ]\n}\n```", "Round_0": {"code": "def sort_matrix(matrix):\n    # Validate the input to ensure it is a matrix with numerical values\n    if not all(isinstance(row, list) and all(isinstance(num, (int, float)) for num in row) for row in matrix):\n        raise ValueError(\"Input must be a list of lists with numerical values.\")\n    \n    # Initialize an empty list to store tuples of (row_sum, row)\n    row_sum_pairs = []\n    \n    # Iterate over each row in the matrix\n    for row in matrix:\n        # Calculate the sum of the current row\n        row_sum = sum(row)\n        # Append a tuple (row_sum, row) to the list\n        row_sum_pairs.append((row_sum, row))\n    \n    # Sort the list of tuples based on the first element (row_sum) of each tuple\n    row_sum_pairs.sort(key=lambda x: x[0])\n    \n    # Extract the rows from the sorted list of tuples\n    sorted_rows = [row for _, row in row_sum_pairs]\n    \n    # Return the sorted list of rows as the output of the function\n    return sorted_rows\n\n# Example usage\nprint(sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))  # Output: [[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}], "test": ["def check(sort_matrix):\n\tassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]", "def check(sort_matrix):\n\tassert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 5, 3], [3, 4, 10], [2, 1, 4]]) == [[2, 1, 4], [1, 5, 3], [3, 4, 10]]", "def check(sort_matrix):\n\tassert sort_matrix([[2, 5, 4], [3, 9, 3], [4, 2, 2]]) == [[4, 2, 2], [2, 5, 4], [3, 9, 3]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 1, 6], [7, 8, 3], [1, 1, 6]]) == [[1, 1, 6], [1, 1, 6], [7, 8, 3]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 3, 7], [2, 6, 10], [1, 3, 1]]) == [[1, 3, 1], [3, 3, 7], [2, 6, 10]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 2, 3], [4, 3, 8], [6, 2, 3]]) == [[3, 2, 3], [6, 2, 3], [4, 3, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 5, 5], [6, 8, 6], [2, 5, 4]]) == [[2, 5, 4], [4, 5, 5], [6, 8, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 2, 3], [3, 1, 4], [1, 2, 4]]) == [[1, 2, 3], [1, 2, 4], [3, 1, 4]]", "def check(sort_matrix):\n\tassert sort_matrix([[2, 2, 5], [4, 6, 9], [5, 2, 5]]) == [[2, 2, 5], [5, 2, 5], [4, 6, 9]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 4, 7], [7, 6, 5], [6, 3, 1]]) == [[6, 3, 1], [3, 4, 7], [7, 6, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 1, 5], [4, 5, 1], [4, 5, 1]]) == [[4, 5, 1], [4, 5, 1], [5, 1, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 1, 8], [7, 2, 10], [1, 3, 5]]) == [[1, 3, 5], [4, 1, 8], [7, 2, 10]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 3, 8], [6, 3, 7], [1, 4, 3]]) == [[1, 4, 3], [1, 3, 8], [6, 3, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 5, 6], [6, 9, 1], [2, 5, 1]]) == [[2, 5, 1], [5, 5, 6], [6, 9, 1]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 2, 2], [5, 5, 3], [5, 1, 1]]) == [[5, 1, 1], [5, 2, 2], [5, 5, 3]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 2, 3], [3, 5, 5], [6, 2, 3]]) == [[1, 2, 3], [6, 2, 3], [3, 5, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 7, 7], [6, 7, 5], [1, 1, 2]]) == [[1, 1, 2], [3, 7, 7], [6, 7, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 1, 5], [2, 5, 1], [5, 6, 5]]) == [[1, 1, 5], [2, 5, 1], [5, 6, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 3, 8], [7, 9, 5], [4, 2, 6]]) == [[4, 2, 6], [6, 3, 8], [7, 9, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 6, 4], [7, 5, 10], [6, 4, 5]]) == [[3, 6, 4], [6, 4, 5], [7, 5, 10]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 3, 7], [3, 5, 3], [3, 3, 3]]) == [[3, 3, 3], [3, 5, 3], [3, 3, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 3, 6], [5, 1, 2], [6, 5, 3]]) == [[5, 1, 2], [6, 5, 3], [6, 3, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[2, 2, 8], [5, 9, 10], [5, 1, 5]]) == [[5, 1, 5], [2, 2, 8], [5, 9, 10]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 3, 5], [3, 8, 2], [1, 5, 2]]) == [[1, 5, 2], [5, 3, 5], [3, 8, 2]]", "def check(sort_matrix):\n\tassert sort_matrix([[2, 6, 8], [1, 9, 2], [5, 2, 4]]) == [[5, 2, 4], [1, 9, 2], [2, 6, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 1, 3], [6, 4, 7], [1, 1, 2]]) == [[1, 1, 2], [1, 1, 3], [6, 4, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 2, 8], [1, 4, 5], [2, 4, 2]]) == [[2, 4, 2], [1, 4, 5], [5, 2, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 2, 4], [6, 4, 4], [2, 6, 6]]) == [[3, 2, 4], [6, 4, 4], [2, 6, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 2, 4], [5, 1, 2], [1, 5, 3]]) == [[5, 1, 2], [1, 5, 3], [5, 2, 4]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 3, 1], [5, 9, 5], [5, 4, 1]]) == [[5, 3, 1], [5, 4, 1], [5, 9, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 2, 6], [1, 6, 5], [5, 1, 3]]) == [[5, 1, 3], [1, 6, 5], [6, 2, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 7, 8], [2, 2, 9], [6, 4, 1]]) == [[6, 4, 1], [2, 2, 9], [6, 7, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[2, 1, 1], [4, 4, 2], [3, 5, 4]]) == [[2, 1, 1], [4, 4, 2], [3, 5, 4]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 4, 4], [3, 4, 7], [4, 5, 3]]) == [[4, 5, 3], [6, 4, 4], [3, 4, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 7, 7], [-6, 7, -6], [5, -2, 3]]) == [[-6, 7, -6], [5, -2, 3], [1, 7, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 4, 5], [2, 4, 0], [5, -4, 3]]) == [[5, -4, 3], [2, 4, 0], [1, 4, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 2, 3], [-6, 6, -7], [6, 1, 5]]) == [[-6, 6, -7], [5, 2, 3], [6, 1, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 3, 4], [0, 6, -2], [5, -3, 6]]) == [[0, 6, -2], [1, 3, 4], [5, -3, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 4, 4], [3, 3, -2], [3, 2, 6]]) == [[3, 3, -2], [3, 4, 4], [3, 2, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 2, 7], [-5, 2, -1], [2, -6, 2]]) == [[-5, 2, -1], [2, -6, 2], [6, 2, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 2, 1], [3, 7, -8], [3, -4, 1]]) == [[3, -4, 1], [3, 7, -8], [1, 2, 1]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 4, 7], [-6, 8, 0], [4, -5, 2]]) == [[4, -5, 2], [-6, 8, 0], [3, 4, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 3, 5], [0, 6, 0], [1, -6, 2]]) == [[1, -6, 2], [0, 6, 0], [4, 3, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 6, 1], [-7, 5, -6], [5, -1, 2]]) == [[-7, 5, -6], [5, -1, 2], [5, 6, 1]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 2, 8], [1, 2, -3], [6, 1, 2]]) == [[1, 2, -3], [6, 1, 2], [3, 2, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 3, 1], [0, 9, -2], [1, -5, 5]]) == [[1, -5, 5], [3, 3, 1], [0, 9, -2]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 7, 1], [-6, 4, -1], [2, -2, 2]]) == [[-6, 4, -1], [2, -2, 2], [5, 7, 1]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 5, 2], [-6, 7, -1], [2, -5, 4]]) == [[-6, 7, -1], [2, -5, 4], [6, 5, 2]]", "def check(sort_matrix):\n\tassert sort_matrix([[2, 6, 7], [-1, 2, -2], [1, -2, 1]]) == [[-1, 2, -2], [1, -2, 1], [2, 6, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 3, 8], [-1, 4, -2], [5, 2, 1]]) == [[-1, 4, -2], [5, 2, 1], [1, 3, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 3, 3], [3, 3, 0], [3, 1, 3]]) == [[3, 3, 0], [3, 1, 3], [6, 3, 3]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 7, 8], [-7, 7, -1], [2, 1, 5]]) == [[-7, 7, -1], [2, 1, 5], [4, 7, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 1, 2], [-3, 8, -9], [5, 3, 6]]) == [[-3, 8, -9], [6, 1, 2], [5, 3, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 4, 3], [-2, 8, -10], [3, 0, 6]]) == [[-2, 8, -10], [3, 0, 6], [3, 4, 3]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 5, 5], [-4, 3, -9], [3, -1, 1]]) == [[-4, 3, -9], [3, -1, 1], [3, 5, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 2, 2], [-2, 1, -8], [5, -5, 1]]) == [[-2, 1, -8], [5, -5, 1], [4, 2, 2]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 4, 7], [-5, 4, -8], [1, 1, 4]]) == [[-5, 4, -8], [1, 1, 4], [5, 4, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 4, 5], [2, 7, -10], [1, 2, 2]]) == [[2, 7, -10], [1, 2, 2], [6, 4, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 7, 6], [2, 1, -4], [5, -6, 4]]) == [[2, 1, -4], [5, -6, 4], [5, 7, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 5, 8], [3, 3, -2], [3, -1, 3]]) == [[3, 3, -2], [3, -1, 3], [5, 5, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 1, 8], [-2, 3, -6], [1, 0, 2]]) == [[-2, 3, -6], [1, 0, 2], [5, 1, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 7, 5], [-4, 9, 0], [2, -4, 2]]) == [[2, -4, 2], [-4, 9, 0], [4, 7, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 5, 6], [2, 1, -2], [1, 1, 3]]) == [[2, 1, -2], [1, 1, 3], [1, 5, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 5, 8], [-3, 9, 0], [4, 3, 3]]) == [[-3, 9, 0], [4, 3, 3], [4, 5, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 4, 4], [1, 6, -5], [5, 0, 2]]) == [[1, 6, -5], [5, 0, 2], [3, 4, 4]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 4, 2], [-6, 7, -3], [4, 3, 5]]) == [[-6, 7, -3], [4, 4, 2], [4, 3, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 7, 7], [0, 5, -1], [1, -1, 4]]) == [[0, 5, -1], [1, -1, 4], [4, 7, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[10, 12, 8], [5, 1, 5], [2, 5, 8]]) == [[5, 1, 5], [2, 5, 8], [10, 12, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 8, 13], [11, 9, 6], [3, 6, 4]]) == [[3, 6, 4], [3, 8, 13], [11, 9, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 11, 8], [2, 5, 6], [6, 3, 5]]) == [[2, 5, 6], [6, 3, 5], [1, 11, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 6, 11], [1, 8, 8], [2, 2, 6]]) == [[2, 2, 6], [1, 8, 8], [1, 6, 11]]", "def check(sort_matrix):\n\tassert sort_matrix([[9, 4, 8], [10, 7, 2], [1, 3, 2]]) == [[1, 3, 2], [10, 7, 2], [9, 4, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[7, 4, 4], [9, 2, 8], [1, 4, 2]]) == [[1, 4, 2], [7, 4, 4], [9, 2, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 5, 12], [2, 9, 7], [5, 4, 5]]) == [[5, 4, 5], [2, 9, 7], [4, 5, 12]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 9, 4], [7, 3, 6], [3, 1, 9]]) == [[3, 1, 9], [3, 9, 4], [7, 3, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 11, 11], [4, 9, 5], [4, 3, 7]]) == [[4, 3, 7], [4, 9, 5], [1, 11, 11]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 4, 6], [2, 6, 1], [6, 1, 4]]) == [[2, 6, 1], [6, 1, 4], [6, 4, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[9, 11, 11], [1, 4, 1], [4, 1, 8]]) == [[1, 4, 1], [4, 1, 8], [9, 11, 11]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 11, 4], [5, 7, 2], [5, 5, 6]]) == [[5, 7, 2], [1, 11, 4], [5, 5, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[9, 9, 11], [2, 8, 5], [3, 6, 6]]) == [[2, 8, 5], [3, 6, 6], [9, 9, 11]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 3, 4], [5, 1, 6], [2, 6, 4]]) == [[3, 3, 4], [5, 1, 6], [2, 6, 4]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 9, 13], [9, 9, 3], [6, 4, 4]]) == [[6, 4, 4], [9, 9, 3], [1, 9, 13]]", "def check(sort_matrix):\n\tassert sort_matrix([[9, 4, 11], [5, 7, 4], [3, 5, 4]]) == [[3, 5, 4], [5, 7, 4], [9, 4, 11]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 8, 12], [1, 3, 2], [6, 4, 8]]) == [[1, 3, 2], [6, 4, 8], [5, 8, 12]]", "def check(sort_matrix):\n\tassert sort_matrix([[10, 13, 6], [3, 6, 7], [6, 4, 4]]) == [[6, 4, 4], [3, 6, 7], [10, 13, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[7, 11, 7], [4, 1, 3], [5, 5, 7]]) == [[4, 1, 3], [5, 5, 7], [7, 11, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[9, 9, 10], [10, 2, 7], [5, 6, 9]]) == [[10, 2, 7], [5, 6, 9], [9, 9, 10]]", "def check(sort_matrix):\n\tassert sort_matrix([[8, 12, 11], [1, 5, 7], [4, 3, 5]]) == [[4, 3, 5], [1, 5, 7], [8, 12, 11]]", "def check(sort_matrix):\n\tassert sort_matrix([[2, 6, 14], [5, 2, 3], [3, 1, 5]]) == [[3, 1, 5], [5, 2, 3], [2, 6, 14]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 3, 5], [7, 5, 3], [6, 6, 7]]) == [[6, 3, 5], [7, 5, 3], [6, 6, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 13, 4], [4, 4, 2], [4, 1, 9]]) == [[4, 4, 2], [4, 1, 9], [1, 13, 4]]", "def check(sort_matrix):\n\tassert sort_matrix([[8, 7, 4], [5, 8, 4], [2, 4, 1]]) == [[2, 4, 1], [5, 8, 4], [8, 7, 4]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 8, 9], [5, 4, 4], [2, 5, 6]]) == [[5, 4, 4], [2, 5, 6], [4, 8, 9]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 10, 14], [9, 7, 7], [5, 6, 7]]) == [[5, 6, 7], [9, 7, 7], [5, 10, 14]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 6, 4], [8, 8, 1], [2, 5, 1]]) == [[2, 5, 1], [5, 6, 4], [8, 8, 1]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 12, 12], [3, 5, 3], [5, 3, 1]]) == [[5, 3, 1], [3, 5, 3], [5, 12, 12]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 7, 10], [10, 4, 8], [5, 6, 8]]) == [[5, 6, 8], [4, 7, 10], [10, 4, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[2, 4, 7], [10, 3, 3], [6, 4, 6]]) == [[2, 4, 7], [10, 3, 3], [6, 4, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 5, 6], [11, 9, 3], [1, 3, 9]]) == [[1, 3, 9], [5, 5, 6], [11, 9, 3]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 8, 10], [7, 7, 7], [4, 3, 3]]) == [[4, 3, 3], [3, 8, 10], [7, 7, 7]]"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 102, 102, 102, 102, 102], "passed": true, "pass": true, "pass_num": 10, "round": 959, "mutate_method": "add_1_sentence_at_end", "save_node": false, "parent_index": 300}
