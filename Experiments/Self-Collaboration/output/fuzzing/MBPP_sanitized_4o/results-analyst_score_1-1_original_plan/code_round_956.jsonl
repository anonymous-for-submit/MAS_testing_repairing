{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 728, "prompt": "Write a function that takes two arrays [a_1,...,a_n], [b_1,...,b_n] as input. The function should be able to handle arrays of the same size. It returns [a_1+b_1,...,a_n+b_n].", "code": "def sum_list(lst1,lst2):\n  res_list = [lst1[i] + lst2[i] for i in range(len(lst1))] \n  return res_list", "test_imports": [], "test_list": ["assert sum_list([10,20,30],[15,25,35])==[25,45,65]", "assert sum_list([1,2,3],[5,6,7])==[6,8,10]", "assert sum_list([15,20,30],[15,45,75])==[30,65,105]", "assert sum_list([11, 19, 31], [20, 29, 39]) == [31, 48, 70]", "assert sum_list([15, 19, 31], [18, 26, 30]) == [33, 45, 61]", "assert sum_list([11, 23, 29], [15, 20, 40]) == [26, 43, 69]", "assert sum_list([11, 25, 35], [13, 27, 32]) == [24, 52, 67]", "assert sum_list([6, 20, 25], [11, 29, 36]) == [17, 49, 61]", "assert sum_list([10, 18, 26], [11, 27, 30]) == [21, 45, 56]", "assert sum_list([6, 16, 31], [19, 21, 36]) == [25, 37, 67]", "assert sum_list([8, 17, 30], [17, 30, 40]) == [25, 47, 70]", "assert sum_list([12, 22, 26], [17, 27, 32]) == [29, 49, 58]", "assert sum_list([12, 20, 34], [14, 22, 37]) == [26, 42, 71]", "assert sum_list([8, 21, 26], [15, 23, 36]) == [23, 44, 62]", "assert sum_list([5, 19, 27], [13, 22, 39]) == [18, 41, 66]", "assert sum_list([6, 15, 25], [15, 28, 32]) == [21, 43, 57]", "assert sum_list([8, 22, 27], [11, 28, 35]) == [19, 50, 62]", "assert sum_list([5, 25, 33], [13, 30, 38]) == [18, 55, 71]", "assert sum_list([12, 18, 34], [17, 23, 36]) == [29, 41, 70]", "assert sum_list([5, 20, 30], [20, 28, 39]) == [25, 48, 69]", "assert sum_list([12, 21, 30], [15, 22, 36]) == [27, 43, 66]", "assert sum_list([14, 15, 27], [18, 25, 36]) == [32, 40, 63]", "assert sum_list([7, 15, 33], [16, 30, 35]) == [23, 45, 68]", "assert sum_list([7, 22, 33], [12, 27, 30]) == [19, 49, 63]", "assert sum_list([13, 25, 35], [18, 21, 35]) == [31, 46, 70]", "assert sum_list([9, 23, 35], [11, 28, 35]) == [20, 51, 70]", "assert sum_list([14, 24, 27], [11, 26, 37]) == [25, 50, 64]", "assert sum_list([9, 24, 34], [20, 23, 35]) == [29, 47, 69]", "assert sum_list([11, 24, 33], [14, 29, 31]) == [25, 53, 64]", "assert sum_list([13, 24, 28], [10, 25, 34]) == [23, 49, 62]", "assert sum_list([15, 21, 28], [10, 20, 30]) == [25, 41, 58]", "assert sum_list([9, 17, 28], [17, 22, 32]) == [26, 39, 60]", "assert sum_list([7, 25, 28], [13, 29, 31]) == [20, 54, 59]", "assert sum_list([6, 25, 26], [12, 26, 34]) == [18, 51, 60]", "assert sum_list([9, 21, 34], [10, 26, 40]) == [19, 47, 74]", "assert sum_list([13, 18, 25], [12, 26, 39]) == [25, 44, 64]", "assert sum_list([2, 1, 2], [10, 8, 6]) == [12, 9, 8]", "assert sum_list([1, 7, 5], [1, 9, 2]) == [2, 16, 7]", "assert sum_list([1, 2, 6], [4, 11, 2]) == [5, 13, 8]", "assert sum_list([4, 6, 4], [1, 6, 6]) == [5, 12, 10]", "assert sum_list([6, 3, 2], [3, 8, 7]) == [9, 11, 9]", "assert sum_list([5, 3, 2], [10, 4, 7]) == [15, 7, 9]", "assert sum_list([2, 5, 5], [7, 10, 3]) == [9, 15, 8]", "assert sum_list([6, 7, 4], [9, 5, 8]) == [15, 12, 12]", "assert sum_list([4, 3, 1], [8, 11, 7]) == [12, 14, 8]", "assert sum_list([1, 7, 8], [1, 10, 4]) == [2, 17, 12]", "assert sum_list([5, 2, 1], [2, 9, 9]) == [7, 11, 10]", "assert sum_list([1, 5, 2], [2, 4, 9]) == [3, 9, 11]", "assert sum_list([1, 4, 2], [8, 5, 7]) == [9, 9, 9]", "assert sum_list([4, 4, 1], [4, 5, 5]) == [8, 9, 6]", "assert sum_list([6, 2, 4], [5, 10, 12]) == [11, 12, 16]", "assert sum_list([3, 2, 6], [7, 1, 4]) == [10, 3, 10]", "assert sum_list([2, 7, 3], [9, 5, 2]) == [11, 12, 5]", "assert sum_list([2, 3, 4], [9, 6, 12]) == [11, 9, 16]", "assert sum_list([2, 6, 6], [1, 3, 10]) == [3, 9, 16]", "assert sum_list([4, 7, 7], [6, 7, 8]) == [10, 14, 15]", "assert sum_list([1, 3, 7], [10, 8, 6]) == [11, 11, 13]", "assert sum_list([1, 3, 6], [3, 1, 6]) == [4, 4, 12]", "assert sum_list([2, 7, 1], [9, 4, 4]) == [11, 11, 5]", "assert sum_list([4, 2, 1], [8, 2, 5]) == [12, 4, 6]", "assert sum_list([6, 2, 5], [3, 4, 10]) == [9, 6, 15]", "assert sum_list([5, 3, 2], [5, 1, 4]) == [10, 4, 6]", "assert sum_list([4, 5, 5], [9, 10, 8]) == [13, 15, 13]", "assert sum_list([3, 4, 3], [3, 5, 11]) == [6, 9, 14]", "assert sum_list([1, 5, 2], [5, 1, 11]) == [6, 6, 13]", "assert sum_list([2, 3, 8], [3, 7, 3]) == [5, 10, 11]", "assert sum_list([3, 5, 7], [5, 8, 8]) == [8, 13, 15]", "assert sum_list([4, 3, 6], [8, 11, 11]) == [12, 14, 17]", "assert sum_list([3, 7, 8], [6, 9, 2]) == [9, 16, 10]", "assert sum_list([14, 18, 32], [14, 49, 80]) == [28, 67, 112]", "assert sum_list([15, 21, 33], [13, 47, 78]) == [28, 68, 111]", "assert sum_list([14, 15, 27], [17, 49, 79]) == [31, 64, 106]", "assert sum_list([10, 20, 33], [19, 41, 75]) == [29, 61, 108]", "assert sum_list([19, 21, 32], [11, 48, 80]) == [30, 69, 112]", "assert sum_list([18, 18, 28], [10, 50, 76]) == [28, 68, 104]", "assert sum_list([19, 17, 25], [19, 44, 79]) == [38, 61, 104]", "assert sum_list([16, 21, 26], [15, 44, 72]) == [31, 65, 98]", "assert sum_list([11, 19, 32], [10, 44, 77]) == [21, 63, 109]", "assert sum_list([20, 21, 34], [14, 50, 74]) == [34, 71, 108]", "assert sum_list([18, 23, 34], [10, 41, 72]) == [28, 64, 106]", "assert sum_list([17, 23, 28], [20, 49, 71]) == [37, 72, 99]", "assert sum_list([16, 17, 33], [12, 41, 74]) == [28, 58, 107]", "assert sum_list([13, 16, 29], [19, 40, 70]) == [32, 56, 99]", "assert sum_list([19, 18, 29], [12, 46, 79]) == [31, 64, 108]", "assert sum_list([20, 16, 33], [13, 47, 80]) == [33, 63, 113]", "assert sum_list([16, 24, 34], [17, 41, 76]) == [33, 65, 110]", "assert sum_list([19, 24, 34], [11, 50, 80]) == [30, 74, 114]", "assert sum_list([14, 24, 28], [18, 43, 76]) == [32, 67, 104]", "assert sum_list([11, 15, 29], [19, 46, 80]) == [30, 61, 109]", "assert sum_list([14, 18, 31], [11, 41, 78]) == [25, 59, 109]", "assert sum_list([16, 18, 32], [13, 46, 72]) == [29, 64, 104]", "assert sum_list([13, 23, 30], [19, 41, 78]) == [32, 64, 108]", "assert sum_list([16, 18, 33], [17, 44, 80]) == [33, 62, 113]", "assert sum_list([13, 22, 33], [12, 48, 77]) == [25, 70, 110]", "assert sum_list([13, 18, 29], [14, 50, 76]) == [27, 68, 105]", "assert sum_list([15, 18, 29], [12, 43, 80]) == [27, 61, 109]", "assert sum_list([12, 16, 35], [11, 46, 74]) == [23, 62, 109]", "assert sum_list([14, 16, 32], [18, 40, 75]) == [32, 56, 107]", "assert sum_list([14, 21, 29], [10, 41, 80]) == [24, 62, 109]", "assert sum_list([13, 18, 25], [16, 45, 75]) == [29, 63, 100]", "assert sum_list([18, 25, 35], [19, 47, 79]) == [37, 72, 114]", "assert sum_list([18, 25, 29], [16, 48, 73]) == [34, 73, 102]"], "entry_point": "sum_list", "completion": "from typing import *\ndef sum_list(array1, array2):\n    # Check if the lengths of the two arrays are equal\n    if len(array1) != len(array2):\n        raise ValueError(\"Both arrays must be of the same size.\")\n    \n    # Initialize an empty array to store the results\n    result = []\n    \n    # Use a loop to iterate over the indices of the arrays\n    for i in range(len(array1)):\n        # Add the elements from both arrays at the current index and append the result to the results array\n        result.append(array1[i] + array2[i])\n    \n    # After the loop completes, return the results array\n    return result\n\n# Example usage\nprint(sum_list([10, 20, 30], [15, 25, 35]))  # Output: [25, 45, 65]\n", "completions": ["from typing import *\ndef sum_list(array1, array2):\n    # Check if the input arrays are of the same length\n    if len(array1) != len(array2):\n        raise ValueError(\"Input arrays must be of the same length.\")\n    \n    # Initialize an empty array to store the results\n    result = []\n    \n    # Use a loop to iterate over the indices of the arrays\n    for i in range(len(array1)):\n        # Compute the sum of the elements from both arrays and append the result to the results array\n        result.append(array1[i] + array2[i])\n    \n    # Return the results array\n    return result\n\n# Example usage\nprint(sum_list([10, 20, 30], [15, 25, 35]))  # Output: [25, 45, 65]\n", "from typing import *\ndef sum_list(array1, array2):\n    # Step 1: Validate that both inputs are arrays of the same length and contain only numbers.\n    if not isinstance(array1, list) or not isinstance(array2, list):\n        raise ValueError(\"Both inputs must be lists.\")\n    if len(array1) != len(array2):\n        raise ValueError(\"Both lists must be of the same length.\")\n    if not all(isinstance(x, (int, float)) for x in array1 + array2):\n        raise ValueError(\"All elements in the lists must be numbers.\")\n\n    # Step 2: Create an empty array to store the results of the addition.\n    result = []\n\n    # Step 3: Loop through the elements of the input arrays, adding corresponding elements together.\n    for a, b in zip(array1, array2):\n        # Step 4: Store each sum in the result array.\n        result.append(a + b)\n\n    # Step 5: Return the result array.\n    return result\n\n# Example usage:\nprint(sum_list([10, 20, 30], [15, 25, 35]))  # Output: [25, 45, 65]\n", "from typing import *\ndef sum_list(array1, array2):\n    # Check if the lengths of the two arrays are equal\n    if len(array1) != len(array2):\n        raise ValueError(\"Input arrays must be of the same size.\")\n    \n    # Initialize an empty array to store the results\n    result = []\n    \n    # Iterate over the indices of the arrays\n    for i in range(len(array1)):\n        # Add the elements from both arrays and append the result to the results array\n        result.append(array1[i] + array2[i])\n    \n    # Return the results array\n    return result\n\n# Example usage\nprint(sum_list([10, 20, 30], [15, 25, 35]))  # Output: [25, 45, 65]\n", "from typing import *\ndef sum_list(array1, array2):\n    # Check if the lengths of the two input arrays are equal\n    if len(array1) != len(array2):\n        raise ValueError(\"Input arrays must be of the same size.\")\n    \n    # Initialize an empty list to store the results of the addition\n    result = []\n    \n    # Use a loop to iterate over the indices of the arrays\n    for i in range(len(array1)):\n        # Add the elements from both arrays and append the result to the result list\n        result.append(array1[i] + array2[i])\n    \n    # Return the result list after the loop completes\n    return result\n\n# Example usage\nprint(sum_list([10, 20, 30], [15, 25, 35]))  # Output: [25, 45, 65]\n", "from typing import *\ndef sum_list(array1, array2):\n    # Input validation\n    if len(array1) != len(array2):\n        raise ValueError(\"Both arrays must be of the same length.\")\n    \n    if not all(isinstance(x, (int, float)) for x in array1 + array2):\n        raise ValueError(\"Both arrays must contain only numerical values.\")\n    \n    # Initialize result array\n    result = []\n    \n    # Iterate and sum elements\n    for a, b in zip(array1, array2):\n        result.append(a + b)\n    \n    # Return result\n    return result\n\n# Example usage\nprint(sum_list([10, 20, 30], [15, 25, 35]))  # Output: [25, 45, 65]\n", "from typing import *\ndef sum_list(array1, array2):\n    # Check if the lengths of the two arrays are equal\n    if len(array1) != len(array2):\n        raise ValueError(\"Both arrays must be of the same size.\")\n    \n    # Initialize an empty array to store the results\n    result = []\n    \n    # Use a loop to iterate over the indices of the arrays\n    for i in range(len(array1)):\n        # Add the elements from both arrays at the current index and append the result to the results array\n        result.append(array1[i] + array2[i])\n    \n    # After the loop completes, return the results array\n    return result\n\n# Example usage\nprint(sum_list([10, 20, 30], [15, 25, 35]))  # Output: [25, 45, 65]\n", "from typing import *\ndef sum_list(array1, array2):\n    # Input validation: Check if both arrays are of the same length\n    if len(array1) != len(array2):\n        raise ValueError(\"Both arrays must be of the same length.\")\n    \n    # Initialize result array\n    result = []\n    \n    # Iterate and sum: Loop through each element of the arrays simultaneously\n    for a, b in zip(array1, array2):\n        # Sum corresponding elements and store in result array\n        result.append(a + b)\n    \n    # Return result array\n    return result\n\n# Example usage\nprint(sum_list([10, 20, 30], [15, 25, 35]))  # Output: [25, 45, 65]\n", "from typing import *\ndef sum_list(array1, array2):\n    # Step 1: Validate that both input arrays are of the same length and contain only numbers.\n    if len(array1) != len(array2):\n        raise ValueError(\"Both arrays must be of the same length.\")\n    \n    if not all(isinstance(x, (int, float)) for x in array1 + array2):\n        raise ValueError(\"Both arrays must contain only numerical values.\")\n    \n    # Step 2: Create an empty array to store the results of the addition.\n    result = []\n    \n    # Step 3: Loop through the indices of the arrays, adding elements from the first array to the corresponding elements in the second array.\n    for i in range(len(array1)):\n        # Step 4: Append the result of each addition to the result array.\n        result.append(array1[i] + array2[i])\n    \n    # Step 5: Return the result array containing the sums of the corresponding elements.\n    return result\n\n# Example usage:\nprint(sum_list([10, 20, 30], [15, 25, 35]))  # Output: [25, 45, 65]\n", "from typing import *\ndef sum_list(array1, array2):\n    # Input validation\n    if len(array1) != len(array2):\n        raise ValueError(\"Both arrays must be of the same length.\")\n    \n    if not all(isinstance(x, (int, float)) for x in array1 + array2):\n        raise ValueError(\"Both arrays must contain only numerical values.\")\n    \n    # Initialize result array\n    result = []\n    \n    # Iterate and sum\n    for a, b in zip(array1, array2):\n        result.append(a + b)\n    \n    # Return result\n    return result\n\n# Example usage\nprint(sum_list([10, 20, 30], [15, 25, 35]))  # Output: [25, 45, 65]\n", "from typing import *\ndef sum_list(array1, array2):\n    # Check if the lengths of the two arrays are equal\n    if len(array1) != len(array2):\n        raise ValueError(\"Both arrays must be of the same size.\")\n    \n    # Initialize an empty array to store the results\n    result = []\n    \n    # Use a loop to iterate over the indices of the arrays\n    for i in range(len(array1)):\n        # Add the elements from both arrays at the current index and append the result to the results array\n        result.append(array1[i] + array2[i])\n    \n    # After the loop completes, return the results array\n    return result\n\n# Example usage\nprint(sum_list([10, 20, 30], [15, 25, 35]))  # Output: [25, 45, 65]\n"], "session_history": {"plan": "```json\n{\n  \"decomposed_subproblems\": [\n    \"Validate that both input arrays are of the same size.\",\n    \"Iterate over the elements of the arrays.\",\n    \"For each pair of elements at the same index, calculate their sum.\",\n    \"Store the result of each sum in a new array.\",\n    \"Return the new array containing the sums.\"\n  ],\n  \"high_level_plan\": [\n    \"Define a function named 'sum_list' that takes two parameters, both expected to be arrays.\",\n    \"Check if the lengths of the two arrays are equal. If not, handle the error appropriately (e.g., raise an exception or return an error message).\",\n    \"Initialize an empty array to store the results.\",\n    \"Use a loop to iterate over the indices of the arrays.\",\n    \"Within the loop, add the elements from both arrays at the current index and append the result to the results array.\",\n    \"After the loop completes, return the results array.\"\n  ]\n}\n```", "Round_0": {"code": "def sum_list(array1, array2):\n    # Check if the lengths of the two arrays are equal\n    if len(array1) != len(array2):\n        raise ValueError(\"Both arrays must be of the same size.\")\n    \n    # Initialize an empty array to store the results\n    result = []\n    \n    # Use a loop to iterate over the indices of the arrays\n    for i in range(len(array1)):\n        # Add the elements from both arrays at the current index and append the result to the results array\n        result.append(array1[i] + array2[i])\n    \n    # After the loop completes, return the results array\n    return result\n\n# Example usage\nprint(sum_list([10, 20, 30], [15, 25, 35]))  # Output: [25, 45, 65]\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, "session_historys": [{"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Validate the input arrays to ensure they are of the same size.\",\n      \"details\": \"Check if the lengths of the two input arrays are equal. If not, handle the error appropriately.\"\n    },\n    {\n      \"description\": \"Iterate over the elements of the arrays and compute the sum of corresponding elements.\",\n      \"details\": \"Use a loop to iterate through the indices of the arrays and add the elements at each index.\"\n    },\n    {\n      \"description\": \"Store the results in a new array.\",\n      \"details\": \"Create a new array to store the sums of the corresponding elements from the input arrays.\"\n    },\n    {\n      \"description\": \"Return the resulting array.\",\n      \"details\": \"Output the array containing the sums of the corresponding elements.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Define a function that accepts two arrays as input parameters.\",\n    \"Check if the input arrays are of the same length. If not, raise an error or return an appropriate message.\",\n    \"Initialize an empty array to store the results.\",\n    \"Use a loop to iterate over the indices of the arrays.\",\n    \"For each index, compute the sum of the elements from both arrays and append the result to the results array.\",\n    \"Return the results array.\"\n  ]\n}\n```", "Round_0": {"code": "def sum_list(array1, array2):\n    # Check if the input arrays are of the same length\n    if len(array1) != len(array2):\n        raise ValueError(\"Input arrays must be of the same length.\")\n    \n    # Initialize an empty array to store the results\n    result = []\n    \n    # Use a loop to iterate over the indices of the arrays\n    for i in range(len(array1)):\n        # Compute the sum of the elements from both arrays and append the result to the results array\n        result.append(array1[i] + array2[i])\n    \n    # Return the results array\n    return result\n\n# Example usage\nprint(sum_list([10, 20, 30], [15, 25, 35]))  # Output: [25, 45, 65]\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"requirement_analysis\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Validate input arrays\",\n        \"details\": \"Ensure both inputs are arrays of the same size and contain numerical values.\"\n      },\n      {\n        \"description\": \"Initialize result array\",\n        \"details\": \"Create an empty array to store the results of the element-wise addition.\"\n      },\n      {\n        \"description\": \"Perform element-wise addition\",\n        \"details\": \"Iterate over the elements of both arrays, adding corresponding elements and storing the result in the result array.\"\n      },\n      {\n        \"description\": \"Return result array\",\n        \"details\": \"Output the array containing the sums of corresponding elements from the input arrays.\"\n      }\n    ],\n    \"high_level_plan\": [\n      \"Step 1: Validate that both inputs are arrays of the same length and contain only numbers.\",\n      \"Step 2: Create an empty array to store the results of the addition.\",\n      \"Step 3: Loop through the elements of the input arrays, adding corresponding elements together.\",\n      \"Step 4: Store each sum in the result array.\",\n      \"Step 5: Return the result array.\"\n    ]\n  }\n}\n```", "Round_0": {"code": "def sum_list(array1, array2):\n    # Step 1: Validate that both inputs are arrays of the same length and contain only numbers.\n    if not isinstance(array1, list) or not isinstance(array2, list):\n        raise ValueError(\"Both inputs must be lists.\")\n    if len(array1) != len(array2):\n        raise ValueError(\"Both lists must be of the same length.\")\n    if not all(isinstance(x, (int, float)) for x in array1 + array2):\n        raise ValueError(\"All elements in the lists must be numbers.\")\n\n    # Step 2: Create an empty array to store the results of the addition.\n    result = []\n\n    # Step 3: Loop through the elements of the input arrays, adding corresponding elements together.\n    for a, b in zip(array1, array2):\n        # Step 4: Store each sum in the result array.\n        result.append(a + b)\n\n    # Step 5: Return the result array.\n    return result\n\n# Example usage:\nprint(sum_list([10, 20, 30], [15, 25, 35]))  # Output: [25, 45, 65]\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Validate the input arrays to ensure they are of the same size.\",\n      \"details\": \"Check if the lengths of the two input arrays are equal. If not, handle the error appropriately.\"\n    },\n    {\n      \"description\": \"Iterate over the elements of the arrays and compute the sum of corresponding elements.\",\n      \"details\": \"Use a loop to iterate through the indices of the arrays and add the elements at each index.\"\n    },\n    {\n      \"description\": \"Store the results in a new array.\",\n      \"details\": \"Create a new array to store the sums of the corresponding elements from the input arrays.\"\n    },\n    {\n      \"description\": \"Return the resulting array.\",\n      \"details\": \"Output the array containing the sums of the corresponding elements.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Define a function named 'sum_list' that takes two arrays as input parameters.\",\n    \"Inside the function, check if the lengths of the two arrays are equal. If not, raise an error or return an appropriate message.\",\n    \"Initialize an empty array to store the results.\",\n    \"Use a loop to iterate over the indices of the arrays. For each index, add the elements from both arrays and append the result to the results array.\",\n    \"After the loop, return the results array.\"\n  ]\n}\n```", "Round_0": {"code": "def sum_list(array1, array2):\n    # Check if the lengths of the two arrays are equal\n    if len(array1) != len(array2):\n        raise ValueError(\"Input arrays must be of the same size.\")\n    \n    # Initialize an empty array to store the results\n    result = []\n    \n    # Iterate over the indices of the arrays\n    for i in range(len(array1)):\n        # Add the elements from both arrays and append the result to the results array\n        result.append(array1[i] + array2[i])\n    \n    # Return the results array\n    return result\n\n# Example usage\nprint(sum_list([10, 20, 30], [15, 25, 35]))  # Output: [25, 45, 65]\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Validate input arrays\",\n      \"details\": \"Ensure both input arrays are of the same size and contain numerical values.\"\n    },\n    {\n      \"description\": \"Initialize result array\",\n      \"details\": \"Create an empty array to store the results of the element-wise addition.\"\n    },\n    {\n      \"description\": \"Perform element-wise addition\",\n      \"details\": \"Iterate over the elements of the input arrays, adding corresponding elements and storing the result in the result array.\"\n    },\n    {\n      \"description\": \"Return result array\",\n      \"details\": \"Output the array containing the sums of corresponding elements from the input arrays.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Define a function named 'sum_list' that takes two parameters, both expected to be arrays.\",\n    \"Check if the lengths of the two input arrays are equal. If not, raise an error or return an appropriate message.\",\n    \"Initialize an empty list to store the results of the addition.\",\n    \"Use a loop to iterate over the indices of the arrays. For each index, add the elements from both arrays and append the result to the result list.\",\n    \"Return the result list after the loop completes.\"\n  ]\n}\n```", "Round_0": {"code": "def sum_list(array1, array2):\n    # Check if the lengths of the two input arrays are equal\n    if len(array1) != len(array2):\n        raise ValueError(\"Input arrays must be of the same size.\")\n    \n    # Initialize an empty list to store the results of the addition\n    result = []\n    \n    # Use a loop to iterate over the indices of the arrays\n    for i in range(len(array1)):\n        # Add the elements from both arrays and append the result to the result list\n        result.append(array1[i] + array2[i])\n    \n    # Return the result list after the loop completes\n    return result\n\n# Example usage\nprint(sum_list([10, 20, 30], [15, 25, 35]))  # Output: [25, 45, 65]\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"decomposed_subproblems\": [\n    {\n      \"subproblem\": \"Validate input arrays\",\n      \"description\": \"Ensure both input arrays are of the same size and contain numerical values.\"\n    },\n    {\n      \"subproblem\": \"Iterate through arrays\",\n      \"description\": \"Loop through each element of the arrays simultaneously.\"\n    },\n    {\n      \"subproblem\": \"Sum corresponding elements\",\n      \"description\": \"Add elements from the same index of both arrays.\"\n    },\n    {\n      \"subproblem\": \"Store results\",\n      \"description\": \"Store the sum of each pair of elements in a new array.\"\n    },\n    {\n      \"subproblem\": \"Return result array\",\n      \"description\": \"Return the array containing the summed elements.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Define function signature\",\n      \"description\": \"Create a function named 'sum_list' that accepts two arrays as parameters.\"\n    },\n    {\n      \"step\": \"Input validation\",\n      \"description\": \"Check if both arrays are of the same length and contain valid numerical data.\"\n    },\n    {\n      \"step\": \"Initialize result array\",\n      \"description\": \"Create an empty array to store the results of the summed elements.\"\n    },\n    {\n      \"step\": \"Iterate and sum elements\",\n      \"description\": \"Use a loop to iterate through the arrays, summing corresponding elements and storing them in the result array.\"\n    },\n    {\n      \"step\": \"Return result\",\n      \"description\": \"Return the result array containing the summed elements.\"\n    }\n  ]\n}\n```", "Round_0": {"code": "def sum_list(array1, array2):\n    # Input validation\n    if len(array1) != len(array2):\n        raise ValueError(\"Both arrays must be of the same length.\")\n    \n    if not all(isinstance(x, (int, float)) for x in array1 + array2):\n        raise ValueError(\"Both arrays must contain only numerical values.\")\n    \n    # Initialize result array\n    result = []\n    \n    # Iterate and sum elements\n    for a, b in zip(array1, array2):\n        result.append(a + b)\n    \n    # Return result\n    return result\n\n# Example usage\nprint(sum_list([10, 20, 30], [15, 25, 35]))  # Output: [25, 45, 65]\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"decomposed_subproblems\": [\n    \"Validate that both input arrays are of the same size.\",\n    \"Iterate over the elements of the arrays.\",\n    \"For each pair of elements at the same index, compute their sum.\",\n    \"Store the computed sums in a new array.\",\n    \"Return the new array containing the sums.\"\n  ],\n  \"high_level_plan\": [\n    \"Define a function named 'sum_list' that takes two parameters, both expected to be arrays.\",\n    \"Check if the lengths of the two arrays are equal. If not, handle the error appropriately (e.g., raise an exception or return an error message).\",\n    \"Initialize an empty array to store the results.\",\n    \"Use a loop to iterate over the indices of the arrays.\",\n    \"Within the loop, add the elements from both arrays at the current index and append the result to the results array.\",\n    \"After the loop completes, return the results array.\"\n  ]\n}\n```", "Round_0": {"code": "def sum_list(array1, array2):\n    # Check if the lengths of the two arrays are equal\n    if len(array1) != len(array2):\n        raise ValueError(\"Both arrays must be of the same size.\")\n    \n    # Initialize an empty array to store the results\n    result = []\n    \n    # Use a loop to iterate over the indices of the arrays\n    for i in range(len(array1)):\n        # Add the elements from both arrays at the current index and append the result to the results array\n        result.append(array1[i] + array2[i])\n    \n    # After the loop completes, return the results array\n    return result\n\n# Example usage\nprint(sum_list([10, 20, 30], [15, 25, 35]))  # Output: [25, 45, 65]\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"decomposed_subproblems\": [\n    {\n      \"subproblem\": \"Validate input arrays\",\n      \"description\": \"Ensure both input arrays are of the same size and contain valid numerical elements.\"\n    },\n    {\n      \"subproblem\": \"Iterate over arrays\",\n      \"description\": \"Loop through each element of the arrays simultaneously.\"\n    },\n    {\n      \"subproblem\": \"Sum corresponding elements\",\n      \"description\": \"Add elements from the same index of both arrays.\"\n    },\n    {\n      \"subproblem\": \"Store results\",\n      \"description\": \"Store the sum of each pair of elements in a new array.\"\n    },\n    {\n      \"subproblem\": \"Return result array\",\n      \"description\": \"Return the array containing the summed elements.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Define function\",\n      \"description\": \"Create a function named 'sum_list' that takes two arrays as parameters.\"\n    },\n    {\n      \"step\": \"Input validation\",\n      \"description\": \"Check if both arrays are of the same length and contain valid numbers.\"\n    },\n    {\n      \"step\": \"Initialize result array\",\n      \"description\": \"Create an empty array to store the results of the summation.\"\n    },\n    {\n      \"step\": \"Iterate and sum\",\n      \"description\": \"Use a loop to iterate over the arrays, summing corresponding elements and storing them in the result array.\"\n    },\n    {\n      \"step\": \"Return result\",\n      \"description\": \"Return the result array containing the summed elements.\"\n    }\n  ]\n}\n```", "Round_0": {"code": "def sum_list(array1, array2):\n    # Input validation: Check if both arrays are of the same length\n    if len(array1) != len(array2):\n        raise ValueError(\"Both arrays must be of the same length.\")\n    \n    # Initialize result array\n    result = []\n    \n    # Iterate and sum: Loop through each element of the arrays simultaneously\n    for a, b in zip(array1, array2):\n        # Sum corresponding elements and store in result array\n        result.append(a + b)\n    \n    # Return result array\n    return result\n\n# Example usage\nprint(sum_list([10, 20, 30], [15, 25, 35]))  # Output: [25, 45, 65]\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"requirement_analysis\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Validate input arrays\",\n        \"details\": \"Ensure both inputs are arrays of the same size and contain numerical values.\"\n      },\n      {\n        \"description\": \"Initialize result array\",\n        \"details\": \"Create an empty array to store the results of the element-wise addition.\"\n      },\n      {\n        \"description\": \"Perform element-wise addition\",\n        \"details\": \"Iterate over the arrays, adding corresponding elements from each array and storing the result in the result array.\"\n      },\n      {\n        \"description\": \"Return result array\",\n        \"details\": \"Output the array containing the sums of corresponding elements.\"\n      }\n    ],\n    \"high_level_plan\": [\n      \"Step 1: Validate that both input arrays are of the same length and contain only numbers.\",\n      \"Step 2: Create an empty array to store the results of the addition.\",\n      \"Step 3: Loop through the indices of the arrays, adding elements from the first array to the corresponding elements in the second array.\",\n      \"Step 4: Append the result of each addition to the result array.\",\n      \"Step 5: Return the result array containing the sums of the corresponding elements.\"\n    ]\n  }\n}\n```", "Round_0": {"code": "def sum_list(array1, array2):\n    # Step 1: Validate that both input arrays are of the same length and contain only numbers.\n    if len(array1) != len(array2):\n        raise ValueError(\"Both arrays must be of the same length.\")\n    \n    if not all(isinstance(x, (int, float)) for x in array1 + array2):\n        raise ValueError(\"Both arrays must contain only numerical values.\")\n    \n    # Step 2: Create an empty array to store the results of the addition.\n    result = []\n    \n    # Step 3: Loop through the indices of the arrays, adding elements from the first array to the corresponding elements in the second array.\n    for i in range(len(array1)):\n        # Step 4: Append the result of each addition to the result array.\n        result.append(array1[i] + array2[i])\n    \n    # Step 5: Return the result array containing the sums of the corresponding elements.\n    return result\n\n# Example usage:\nprint(sum_list([10, 20, 30], [15, 25, 35]))  # Output: [25, 45, 65]\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"decomposed_subproblems\": [\n    {\n      \"subproblem\": \"Validate input arrays\",\n      \"description\": \"Ensure both input arrays are of the same size and contain numerical values.\"\n    },\n    {\n      \"subproblem\": \"Iterate through arrays\",\n      \"description\": \"Loop through each element of the arrays simultaneously.\"\n    },\n    {\n      \"subproblem\": \"Sum corresponding elements\",\n      \"description\": \"Add elements from the same index of both arrays.\"\n    },\n    {\n      \"subproblem\": \"Store results\",\n      \"description\": \"Store the sum of each pair of elements in a new array.\"\n    },\n    {\n      \"subproblem\": \"Return result array\",\n      \"description\": \"Return the array containing the summed elements.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Define function\",\n      \"description\": \"Create a function named 'sum_list' that takes two arrays as parameters.\"\n    },\n    {\n      \"step\": \"Input validation\",\n      \"description\": \"Check if both arrays are of the same length and contain valid numerical data.\"\n    },\n    {\n      \"step\": \"Initialize result array\",\n      \"description\": \"Create an empty array to store the results of the summed elements.\"\n    },\n    {\n      \"step\": \"Iterate and sum\",\n      \"description\": \"Use a loop to iterate through the arrays, summing corresponding elements and storing them in the result array.\"\n    },\n    {\n      \"step\": \"Return result\",\n      \"description\": \"Return the result array containing the summed elements.\"\n    }\n  ]\n}\n```", "Round_0": {"code": "def sum_list(array1, array2):\n    # Input validation\n    if len(array1) != len(array2):\n        raise ValueError(\"Both arrays must be of the same length.\")\n    \n    if not all(isinstance(x, (int, float)) for x in array1 + array2):\n        raise ValueError(\"Both arrays must contain only numerical values.\")\n    \n    # Initialize result array\n    result = []\n    \n    # Iterate and sum\n    for a, b in zip(array1, array2):\n        result.append(a + b)\n    \n    # Return result\n    return result\n\n# Example usage\nprint(sum_list([10, 20, 30], [15, 25, 35]))  # Output: [25, 45, 65]\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"decomposed_subproblems\": [\n    \"Validate that both input arrays are of the same size.\",\n    \"Iterate over the elements of the arrays.\",\n    \"For each pair of elements at the same index, calculate their sum.\",\n    \"Store the result of each sum in a new array.\",\n    \"Return the new array containing the sums.\"\n  ],\n  \"high_level_plan\": [\n    \"Define a function named 'sum_list' that takes two parameters, both expected to be arrays.\",\n    \"Check if the lengths of the two arrays are equal. If not, handle the error appropriately (e.g., raise an exception or return an error message).\",\n    \"Initialize an empty array to store the results.\",\n    \"Use a loop to iterate over the indices of the arrays.\",\n    \"Within the loop, add the elements from both arrays at the current index and append the result to the results array.\",\n    \"After the loop completes, return the results array.\"\n  ]\n}\n```", "Round_0": {"code": "def sum_list(array1, array2):\n    # Check if the lengths of the two arrays are equal\n    if len(array1) != len(array2):\n        raise ValueError(\"Both arrays must be of the same size.\")\n    \n    # Initialize an empty array to store the results\n    result = []\n    \n    # Use a loop to iterate over the indices of the arrays\n    for i in range(len(array1)):\n        # Add the elements from both arrays at the current index and append the result to the results array\n        result.append(array1[i] + array2[i])\n    \n    # After the loop completes, return the results array\n    return result\n\n# Example usage\nprint(sum_list([10, 20, 30], [15, 25, 35]))  # Output: [25, 45, 65]\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}], "test": ["def check(sum_list):\n\tassert sum_list([10,20,30],[15,25,35])==[25,45,65]", "def check(sum_list):\n\tassert sum_list([1,2,3],[5,6,7])==[6,8,10]", "def check(sum_list):\n\tassert sum_list([15,20,30],[15,45,75])==[30,65,105]", "def check(sum_list):\n\tassert sum_list([11, 19, 31], [20, 29, 39]) == [31, 48, 70]", "def check(sum_list):\n\tassert sum_list([15, 19, 31], [18, 26, 30]) == [33, 45, 61]", "def check(sum_list):\n\tassert sum_list([11, 23, 29], [15, 20, 40]) == [26, 43, 69]", "def check(sum_list):\n\tassert sum_list([11, 25, 35], [13, 27, 32]) == [24, 52, 67]", "def check(sum_list):\n\tassert sum_list([6, 20, 25], [11, 29, 36]) == [17, 49, 61]", "def check(sum_list):\n\tassert sum_list([10, 18, 26], [11, 27, 30]) == [21, 45, 56]", "def check(sum_list):\n\tassert sum_list([6, 16, 31], [19, 21, 36]) == [25, 37, 67]", "def check(sum_list):\n\tassert sum_list([8, 17, 30], [17, 30, 40]) == [25, 47, 70]", "def check(sum_list):\n\tassert sum_list([12, 22, 26], [17, 27, 32]) == [29, 49, 58]", "def check(sum_list):\n\tassert sum_list([12, 20, 34], [14, 22, 37]) == [26, 42, 71]", "def check(sum_list):\n\tassert sum_list([8, 21, 26], [15, 23, 36]) == [23, 44, 62]", "def check(sum_list):\n\tassert sum_list([5, 19, 27], [13, 22, 39]) == [18, 41, 66]", "def check(sum_list):\n\tassert sum_list([6, 15, 25], [15, 28, 32]) == [21, 43, 57]", "def check(sum_list):\n\tassert sum_list([8, 22, 27], [11, 28, 35]) == [19, 50, 62]", "def check(sum_list):\n\tassert sum_list([5, 25, 33], [13, 30, 38]) == [18, 55, 71]", "def check(sum_list):\n\tassert sum_list([12, 18, 34], [17, 23, 36]) == [29, 41, 70]", "def check(sum_list):\n\tassert sum_list([5, 20, 30], [20, 28, 39]) == [25, 48, 69]", "def check(sum_list):\n\tassert sum_list([12, 21, 30], [15, 22, 36]) == [27, 43, 66]", "def check(sum_list):\n\tassert sum_list([14, 15, 27], [18, 25, 36]) == [32, 40, 63]", "def check(sum_list):\n\tassert sum_list([7, 15, 33], [16, 30, 35]) == [23, 45, 68]", "def check(sum_list):\n\tassert sum_list([7, 22, 33], [12, 27, 30]) == [19, 49, 63]", "def check(sum_list):\n\tassert sum_list([13, 25, 35], [18, 21, 35]) == [31, 46, 70]", "def check(sum_list):\n\tassert sum_list([9, 23, 35], [11, 28, 35]) == [20, 51, 70]", "def check(sum_list):\n\tassert sum_list([14, 24, 27], [11, 26, 37]) == [25, 50, 64]", "def check(sum_list):\n\tassert sum_list([9, 24, 34], [20, 23, 35]) == [29, 47, 69]", "def check(sum_list):\n\tassert sum_list([11, 24, 33], [14, 29, 31]) == [25, 53, 64]", "def check(sum_list):\n\tassert sum_list([13, 24, 28], [10, 25, 34]) == [23, 49, 62]", "def check(sum_list):\n\tassert sum_list([15, 21, 28], [10, 20, 30]) == [25, 41, 58]", "def check(sum_list):\n\tassert sum_list([9, 17, 28], [17, 22, 32]) == [26, 39, 60]", "def check(sum_list):\n\tassert sum_list([7, 25, 28], [13, 29, 31]) == [20, 54, 59]", "def check(sum_list):\n\tassert sum_list([6, 25, 26], [12, 26, 34]) == [18, 51, 60]", "def check(sum_list):\n\tassert sum_list([9, 21, 34], [10, 26, 40]) == [19, 47, 74]", "def check(sum_list):\n\tassert sum_list([13, 18, 25], [12, 26, 39]) == [25, 44, 64]", "def check(sum_list):\n\tassert sum_list([2, 1, 2], [10, 8, 6]) == [12, 9, 8]", "def check(sum_list):\n\tassert sum_list([1, 7, 5], [1, 9, 2]) == [2, 16, 7]", "def check(sum_list):\n\tassert sum_list([1, 2, 6], [4, 11, 2]) == [5, 13, 8]", "def check(sum_list):\n\tassert sum_list([4, 6, 4], [1, 6, 6]) == [5, 12, 10]", "def check(sum_list):\n\tassert sum_list([6, 3, 2], [3, 8, 7]) == [9, 11, 9]", "def check(sum_list):\n\tassert sum_list([5, 3, 2], [10, 4, 7]) == [15, 7, 9]", "def check(sum_list):\n\tassert sum_list([2, 5, 5], [7, 10, 3]) == [9, 15, 8]", "def check(sum_list):\n\tassert sum_list([6, 7, 4], [9, 5, 8]) == [15, 12, 12]", "def check(sum_list):\n\tassert sum_list([4, 3, 1], [8, 11, 7]) == [12, 14, 8]", "def check(sum_list):\n\tassert sum_list([1, 7, 8], [1, 10, 4]) == [2, 17, 12]", "def check(sum_list):\n\tassert sum_list([5, 2, 1], [2, 9, 9]) == [7, 11, 10]", "def check(sum_list):\n\tassert sum_list([1, 5, 2], [2, 4, 9]) == [3, 9, 11]", "def check(sum_list):\n\tassert sum_list([1, 4, 2], [8, 5, 7]) == [9, 9, 9]", "def check(sum_list):\n\tassert sum_list([4, 4, 1], [4, 5, 5]) == [8, 9, 6]", "def check(sum_list):\n\tassert sum_list([6, 2, 4], [5, 10, 12]) == [11, 12, 16]", "def check(sum_list):\n\tassert sum_list([3, 2, 6], [7, 1, 4]) == [10, 3, 10]", "def check(sum_list):\n\tassert sum_list([2, 7, 3], [9, 5, 2]) == [11, 12, 5]", "def check(sum_list):\n\tassert sum_list([2, 3, 4], [9, 6, 12]) == [11, 9, 16]", "def check(sum_list):\n\tassert sum_list([2, 6, 6], [1, 3, 10]) == [3, 9, 16]", "def check(sum_list):\n\tassert sum_list([4, 7, 7], [6, 7, 8]) == [10, 14, 15]", "def check(sum_list):\n\tassert sum_list([1, 3, 7], [10, 8, 6]) == [11, 11, 13]", "def check(sum_list):\n\tassert sum_list([1, 3, 6], [3, 1, 6]) == [4, 4, 12]", "def check(sum_list):\n\tassert sum_list([2, 7, 1], [9, 4, 4]) == [11, 11, 5]", "def check(sum_list):\n\tassert sum_list([4, 2, 1], [8, 2, 5]) == [12, 4, 6]", "def check(sum_list):\n\tassert sum_list([6, 2, 5], [3, 4, 10]) == [9, 6, 15]", "def check(sum_list):\n\tassert sum_list([5, 3, 2], [5, 1, 4]) == [10, 4, 6]", "def check(sum_list):\n\tassert sum_list([4, 5, 5], [9, 10, 8]) == [13, 15, 13]", "def check(sum_list):\n\tassert sum_list([3, 4, 3], [3, 5, 11]) == [6, 9, 14]", "def check(sum_list):\n\tassert sum_list([1, 5, 2], [5, 1, 11]) == [6, 6, 13]", "def check(sum_list):\n\tassert sum_list([2, 3, 8], [3, 7, 3]) == [5, 10, 11]", "def check(sum_list):\n\tassert sum_list([3, 5, 7], [5, 8, 8]) == [8, 13, 15]", "def check(sum_list):\n\tassert sum_list([4, 3, 6], [8, 11, 11]) == [12, 14, 17]", "def check(sum_list):\n\tassert sum_list([3, 7, 8], [6, 9, 2]) == [9, 16, 10]", "def check(sum_list):\n\tassert sum_list([14, 18, 32], [14, 49, 80]) == [28, 67, 112]", "def check(sum_list):\n\tassert sum_list([15, 21, 33], [13, 47, 78]) == [28, 68, 111]", "def check(sum_list):\n\tassert sum_list([14, 15, 27], [17, 49, 79]) == [31, 64, 106]", "def check(sum_list):\n\tassert sum_list([10, 20, 33], [19, 41, 75]) == [29, 61, 108]", "def check(sum_list):\n\tassert sum_list([19, 21, 32], [11, 48, 80]) == [30, 69, 112]", "def check(sum_list):\n\tassert sum_list([18, 18, 28], [10, 50, 76]) == [28, 68, 104]", "def check(sum_list):\n\tassert sum_list([19, 17, 25], [19, 44, 79]) == [38, 61, 104]", "def check(sum_list):\n\tassert sum_list([16, 21, 26], [15, 44, 72]) == [31, 65, 98]", "def check(sum_list):\n\tassert sum_list([11, 19, 32], [10, 44, 77]) == [21, 63, 109]", "def check(sum_list):\n\tassert sum_list([20, 21, 34], [14, 50, 74]) == [34, 71, 108]", "def check(sum_list):\n\tassert sum_list([18, 23, 34], [10, 41, 72]) == [28, 64, 106]", "def check(sum_list):\n\tassert sum_list([17, 23, 28], [20, 49, 71]) == [37, 72, 99]", "def check(sum_list):\n\tassert sum_list([16, 17, 33], [12, 41, 74]) == [28, 58, 107]", "def check(sum_list):\n\tassert sum_list([13, 16, 29], [19, 40, 70]) == [32, 56, 99]", "def check(sum_list):\n\tassert sum_list([19, 18, 29], [12, 46, 79]) == [31, 64, 108]", "def check(sum_list):\n\tassert sum_list([20, 16, 33], [13, 47, 80]) == [33, 63, 113]", "def check(sum_list):\n\tassert sum_list([16, 24, 34], [17, 41, 76]) == [33, 65, 110]", "def check(sum_list):\n\tassert sum_list([19, 24, 34], [11, 50, 80]) == [30, 74, 114]", "def check(sum_list):\n\tassert sum_list([14, 24, 28], [18, 43, 76]) == [32, 67, 104]", "def check(sum_list):\n\tassert sum_list([11, 15, 29], [19, 46, 80]) == [30, 61, 109]", "def check(sum_list):\n\tassert sum_list([14, 18, 31], [11, 41, 78]) == [25, 59, 109]", "def check(sum_list):\n\tassert sum_list([16, 18, 32], [13, 46, 72]) == [29, 64, 104]", "def check(sum_list):\n\tassert sum_list([13, 23, 30], [19, 41, 78]) == [32, 64, 108]", "def check(sum_list):\n\tassert sum_list([16, 18, 33], [17, 44, 80]) == [33, 62, 113]", "def check(sum_list):\n\tassert sum_list([13, 22, 33], [12, 48, 77]) == [25, 70, 110]", "def check(sum_list):\n\tassert sum_list([13, 18, 29], [14, 50, 76]) == [27, 68, 105]", "def check(sum_list):\n\tassert sum_list([15, 18, 29], [12, 43, 80]) == [27, 61, 109]", "def check(sum_list):\n\tassert sum_list([12, 16, 35], [11, 46, 74]) == [23, 62, 109]", "def check(sum_list):\n\tassert sum_list([14, 16, 32], [18, 40, 75]) == [32, 56, 107]", "def check(sum_list):\n\tassert sum_list([14, 21, 29], [10, 41, 80]) == [24, 62, 109]", "def check(sum_list):\n\tassert sum_list([13, 18, 25], [16, 45, 75]) == [29, 63, 100]", "def check(sum_list):\n\tassert sum_list([18, 25, 35], [19, 47, 79]) == [37, 72, 114]", "def check(sum_list):\n\tassert sum_list([18, 25, 29], [16, 48, 73]) == [34, 73, 102]"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 102, 102, 102, 102, 102], "passed": true, "pass": true, "pass_num": 10, "round": 956, "mutate_method": "expand_one2two", "save_node": false, "parent_index": 762}
