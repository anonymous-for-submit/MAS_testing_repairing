{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 745, "prompt": "Write a function to find numbers within a given range from startnum to endnum. The function should identify numbers where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php", "code": "def divisible_by_digits(startnum, endnum):\n    return [n for n in range(startnum, endnum+1) \\\n                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]", "test_imports": [], "test_list": ["assert divisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]", "assert divisible_by_digits(1,15)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(20,25)==[22, 24]", "assert divisible_by_digits(6, 20) == [6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(3, 22) == [3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]", "assert divisible_by_digits(5, 27) == [5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "assert divisible_by_digits(6, 21) == [6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(1, 19) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(1, 25) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "assert divisible_by_digits(3, 23) == [3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]", "assert divisible_by_digits(4, 25) == [4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "assert divisible_by_digits(2, 25) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "assert divisible_by_digits(2, 27) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "assert divisible_by_digits(2, 24) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "assert divisible_by_digits(1, 17) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(6, 24) == [6, 7, 8, 9, 11, 12, 15, 22, 24]", "assert divisible_by_digits(6, 19) == [6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(2, 18) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(5, 26) == [5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "assert divisible_by_digits(3, 25) == [3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "assert divisible_by_digits(2, 27) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "assert divisible_by_digits(5, 25) == [5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "assert divisible_by_digits(1, 19) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(4, 19) == [4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(6, 26) == [6, 7, 8, 9, 11, 12, 15, 22, 24]", "assert divisible_by_digits(3, 26) == [3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "assert divisible_by_digits(6, 23) == [6, 7, 8, 9, 11, 12, 15, 22]", "assert divisible_by_digits(1, 20) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(3, 21) == [3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(2, 19) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(4, 20) == [4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(2, 27) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "assert divisible_by_digits(2, 26) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "assert divisible_by_digits(5, 22) == [5, 6, 7, 8, 9, 11, 12, 15, 22]", "assert divisible_by_digits(1, 27) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "assert divisible_by_digits(2, 19) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(4, 10) == [4, 5, 6, 7, 8, 9]", "assert divisible_by_digits(5, 19) == [5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(1, 20) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(4, 11) == [4, 5, 6, 7, 8, 9, 11]", "assert divisible_by_digits(2, 20) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(3, 15) == [3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(1, 18) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(5, 15) == [5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(4, 20) == [4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(2, 20) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(4, 17) == [4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(1, 11) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11]", "assert divisible_by_digits(1, 14) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12]", "assert divisible_by_digits(5, 19) == [5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(4, 20) == [4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(6, 17) == [6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(4, 20) == [4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(4, 15) == [4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(5, 12) == [5, 6, 7, 8, 9, 11, 12]", "assert divisible_by_digits(5, 15) == [5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(2, 20) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(5, 10) == [5, 6, 7, 8, 9]", "assert divisible_by_digits(5, 19) == [5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(4, 13) == [4, 5, 6, 7, 8, 9, 11, 12]", "assert divisible_by_digits(5, 17) == [5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(6, 16) == [6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(4, 16) == [4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(2, 19) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(3, 20) == [3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(2, 17) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(6, 18) == [6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(1, 17) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(3, 18) == [3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(24, 30) == [24]", "assert divisible_by_digits(24, 30) == [24]", "assert divisible_by_digits(17, 24) == [22, 24]", "assert divisible_by_digits(23, 25) == [24]", "assert divisible_by_digits(25, 29) == []", "assert divisible_by_digits(25, 25) == []", "assert divisible_by_digits(25, 27) == []", "assert divisible_by_digits(18, 29) == [22, 24]", "assert divisible_by_digits(25, 21) == []", "assert divisible_by_digits(22, 28) == [22, 24]", "assert divisible_by_digits(22, 25) == [22, 24]", "assert divisible_by_digits(19, 26) == [22, 24]", "assert divisible_by_digits(15, 28) == [15, 22, 24]", "assert divisible_by_digits(20, 25) == [22, 24]", "assert divisible_by_digits(25, 26) == []", "assert divisible_by_digits(16, 20) == []", "assert divisible_by_digits(23, 20) == []", "assert divisible_by_digits(22, 23) == [22]", "assert divisible_by_digits(23, 25) == [24]", "assert divisible_by_digits(21, 23) == [22]", "assert divisible_by_digits(19, 24) == [22, 24]", "assert divisible_by_digits(20, 24) == [22, 24]", "assert divisible_by_digits(17, 22) == [22]", "assert divisible_by_digits(18, 26) == [22, 24]", "assert divisible_by_digits(23, 30) == [24]", "assert divisible_by_digits(25, 28) == []", "assert divisible_by_digits(15, 29) == [15, 22, 24]", "assert divisible_by_digits(20, 26) == [22, 24]", "assert divisible_by_digits(16, 23) == [22]", "assert divisible_by_digits(20, 21) == []", "assert divisible_by_digits(18, 22) == [22]", "assert divisible_by_digits(22, 22) == [22]", "assert divisible_by_digits(21, 21) == []"], "entry_point": "divisible_by_digits", "completion": "from typing import *\ndef divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum + 1):\n        num_str = str(num)\n        if all(int(digit) != 0 and num % int(digit) == 0 for digit in num_str):\n            result.append(num)\n    return result\n\n# Example usage\nprint(divisible_by_digits(1, 22))  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n", "completions": ["from typing import *\ndef divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum + 1):\n        num_str = str(num)\n        if all(int(digit) != 0 and num % int(digit) == 0 for digit in num_str):\n            result.append(num)\n    return result\n\n# Example usage\nprint(divisible_by_digits(1, 22))  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n", "from typing import *\ndef divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum + 1):\n        num_str = str(num)\n        if all(digit != '0' and num % int(digit) == 0 for digit in num_str):\n            result.append(num)\n    return result\n\n# Example usage\nprint(divisible_by_digits(1, 22))  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n", "from typing import *\ndef divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum + 1):\n        num_str = str(num)\n        if all(int(digit) != 0 and num % int(digit) == 0 for digit in num_str):\n            result.append(num)\n    return result\n\n# Example usage\nprint(divisible_by_digits(1, 22))  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n", "from typing import *\ndef divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum + 1):\n        num_str = str(num)\n        if all(int(digit) != 0 and num % int(digit) == 0 for digit in num_str):\n            result.append(num)\n    return result\n\n# Example usage\nprint(divisible_by_digits(1, 22))  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n", "from typing import *\ndef divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum + 1):\n        num_str = str(num)\n        if all(int(digit) != 0 and num % int(digit) == 0 for digit in num_str):\n            result.append(num)\n    return result\n\n# Example usage\nprint(divisible_by_digits(1, 22))  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n", "from typing import *\ndef divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum + 1):\n        num_str = str(num)\n        if all(int(digit) != 0 and num % int(digit) == 0 for digit in num_str):\n            result.append(num)\n    return result\n\n# Example usage\nprint(divisible_by_digits(1, 22))  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n", "from typing import *\ndef divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum + 1):\n        digits = [int(d) for d in str(num) if d != '0']\n        if all(num % d == 0 for d in digits):\n            result.append(num)\n    return result\n\n# Example usage\nprint(divisible_by_digits(1, 22))  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n", "from typing import *\ndef divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum + 1):\n        num_str = str(num)\n        if all(int(digit) != 0 and num % int(digit) == 0 for digit in num_str):\n            result.append(num)\n    return result\n\n# Example usage\nprint(divisible_by_digits(1, 22))  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n", "from typing import *\ndef divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum + 1):\n        num_str = str(num)\n        if all(int(digit) != 0 and num % int(digit) == 0 for digit in num_str):\n            result.append(num)\n    return result\n\n# Example usage\nprint(divisible_by_digits(1, 22))  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n", "from typing import *\ndef divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum + 1):\n        num_str = str(num)\n        if all(int(digit) != 0 and num % int(digit) == 0 for digit in num_str):\n            result.append(num)\n    return result\n\n# Example usage\nprint(divisible_by_digits(1, 22))  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n"], "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input range from startnum to endnum.\",\n      \"details\": \"Ensure the function accepts two integer parameters, startnum and endnum, representing the range of numbers to be checked.\"\n    },\n    {\n      \"description\": \"Iterate through each number in the given range.\",\n      \"details\": \"Use a loop to go through each number from startnum to endnum, inclusive.\"\n    },\n    {\n      \"description\": \"Check if a number is divisible by each of its digits.\",\n      \"details\": \"For each number, extract its digits and verify if the number is divisible by each non-zero digit.\"\n    },\n    {\n      \"description\": \"Collect numbers that meet the divisibility condition.\",\n      \"details\": \"If a number is divisible by all its non-zero digits, add it to the result list.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Define the function divisible_by_digits with parameters startnum and endnum.\",\n    \"Initialize an empty list to store numbers that meet the condition.\",\n    \"Loop through each number from startnum to endnum.\",\n    \"For each number, convert it to a string to iterate over its digits.\",\n    \"Check if the number is divisible by each of its non-zero digits.\",\n    \"If the number is divisible by all its non-zero digits, append it to the result list.\",\n    \"Return the list of numbers that satisfy the condition.\"\n  ]\n}\n```", "Round_0": {"code": "def divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum + 1):\n        num_str = str(num)\n        if all(int(digit) != 0 and num % int(digit) == 0 for digit in num_str):\n            result.append(num)\n    return result\n\n# Example usage\nprint(divisible_by_digits(1, 22))  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, "session_historys": [{"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input range from startnum to endnum.\",\n      \"details\": \"Ensure the function accepts two integer parameters, startnum and endnum, representing the range.\"\n    },\n    {\n      \"description\": \"Iterate through each number in the given range.\",\n      \"details\": \"Use a loop to go through each number from startnum to endnum inclusive.\"\n    },\n    {\n      \"description\": \"Check if a number is divisible by each of its digits.\",\n      \"details\": \"For each number, extract its digits and verify if the number is divisible by each non-zero digit.\"\n    },\n    {\n      \"description\": \"Collect numbers that meet the divisibility condition.\",\n      \"details\": \"If a number is divisible by all its non-zero digits, add it to the result list.\"\n    },\n    {\n      \"description\": \"Return the list of numbers that satisfy the condition.\",\n      \"details\": \"After iterating through the range, return the list of numbers that are divisible by all their digits.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Define the function divisible_by_digits with parameters startnum and endnum.\",\n    \"Initialize an empty list to store numbers that meet the condition.\",\n    \"Loop through each number from startnum to endnum.\",\n    \"For each number, convert it to a string to iterate over its digits.\",\n    \"Check if the number is divisible by each of its non-zero digits.\",\n    \"If the number is divisible by all its non-zero digits, add it to the result list.\",\n    \"After the loop, return the result list.\"\n  ]\n}\n```", "Round_0": {"code": "def divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum + 1):\n        num_str = str(num)\n        if all(int(digit) != 0 and num % int(digit) == 0 for digit in num_str):\n            result.append(num)\n    return result\n\n# Example usage\nprint(divisible_by_digits(1, 22))  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Iterate through each number in the given range from startnum to endnum.\",\n      \"goal\": \"Ensure that each number in the range is checked for divisibility by its digits.\"\n    },\n    {\n      \"description\": \"Extract digits from the current number.\",\n      \"goal\": \"Identify all individual digits of the number to check divisibility.\"\n    },\n    {\n      \"description\": \"Check if the number is divisible by each of its digits.\",\n      \"goal\": \"Determine if the number can be evenly divided by each of its digits without a remainder.\"\n    },\n    {\n      \"description\": \"Collect numbers that meet the divisibility criteria.\",\n      \"goal\": \"Store numbers that are divisible by all their digits in a result list.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Define a function divisible_by_digits that takes two parameters: startnum and endnum.\",\n    \"Initialize an empty list to store numbers that meet the criteria.\",\n    \"Loop through each number from startnum to endnum (inclusive).\",\n    \"For each number, convert it to a string to easily access each digit.\",\n    \"Check if the number is divisible by each of its digits:\",\n    \"  - Convert each character back to an integer.\",\n    \"  - Skip the number if any digit is zero (to avoid division by zero).\",\n    \"  - Check divisibility of the number by each digit.\",\n    \"If the number is divisible by all its digits, add it to the result list.\",\n    \"Return the list of numbers that meet the criteria.\"\n  ]\n}\n```", "Round_0": {"code": "def divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum + 1):\n        num_str = str(num)\n        if all(digit != '0' and num % int(digit) == 0 for digit in num_str):\n            result.append(num)\n    return result\n\n# Example usage\nprint(divisible_by_digits(1, 22))  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Iterate through each number in the given range from startnum to endnum.\",\n      \"details\": \"Use a loop to go through each number in the specified range.\"\n    },\n    {\n      \"description\": \"Check if a number is divisible by each of its digits.\",\n      \"details\": \"For each number, extract its digits and verify if the number is divisible by each non-zero digit.\"\n    },\n    {\n      \"description\": \"Collect numbers that meet the divisibility condition.\",\n      \"details\": \"If a number is divisible by all its digits, add it to the result list.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Initialize an empty list to store numbers that meet the condition.\"\n    },\n    {\n      \"step\": \"Loop through each number from startnum to endnum (inclusive).\"\n    },\n    {\n      \"step\": \"For each number, convert it to a string to iterate over its digits.\"\n    },\n    {\n      \"step\": \"Check if the number is divisible by each of its non-zero digits.\"\n    },\n    {\n      \"step\": \"If the number is divisible by all its digits, append it to the result list.\"\n    },\n    {\n      \"step\": \"Return the list of numbers that meet the condition.\"\n    }\n  ]\n}\n```", "Round_0": {"code": "def divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum + 1):\n        num_str = str(num)\n        if all(int(digit) != 0 and num % int(digit) == 0 for digit in num_str):\n            result.append(num)\n    return result\n\n# Example usage\nprint(divisible_by_digits(1, 22))  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input range from startnum to endnum.\",\n      \"details\": \"Ensure the function accepts two integer parameters, startnum and endnum, representing the range of numbers to be checked.\"\n    },\n    {\n      \"description\": \"Iterate through each number in the given range.\",\n      \"details\": \"Use a loop to go through each number from startnum to endnum, inclusive.\"\n    },\n    {\n      \"description\": \"Check if a number is divisible by each of its digits.\",\n      \"details\": \"For each number, extract its digits and verify if the number is divisible by each non-zero digit.\"\n    },\n    {\n      \"description\": \"Collect numbers that meet the divisibility condition.\",\n      \"details\": \"If a number is divisible by all its non-zero digits, add it to the result list.\"\n    },\n    {\n      \"description\": \"Return the list of numbers that satisfy the condition.\",\n      \"details\": \"After iterating through the range, return the list of numbers that are divisible by all their digits.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Define the function divisible_by_digits with parameters startnum and endnum.\",\n    \"Initialize an empty list to store numbers that meet the condition.\",\n    \"Loop through each number from startnum to endnum.\",\n    \"For each number, convert it to a string to iterate over its digits.\",\n    \"Check if the number is divisible by each of its non-zero digits.\",\n    \"If the number is divisible by all its non-zero digits, append it to the result list.\",\n    \"After the loop, return the result list.\"\n  ]\n}\n```", "Round_0": {"code": "def divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum + 1):\n        num_str = str(num)\n        if all(int(digit) != 0 and num % int(digit) == 0 for digit in num_str):\n            result.append(num)\n    return result\n\n# Example usage\nprint(divisible_by_digits(1, 22))  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input range from startnum to endnum.\",\n      \"details\": \"Ensure the function accepts two integer parameters, startnum and endnum, representing the range of numbers to be checked.\"\n    },\n    {\n      \"description\": \"Iterate through each number in the given range.\",\n      \"details\": \"Use a loop to go through each number from startnum to endnum, inclusive.\"\n    },\n    {\n      \"description\": \"Check if a number is divisible by each of its digits.\",\n      \"details\": \"For each number, extract its digits and check if the number is divisible by each non-zero digit.\"\n    },\n    {\n      \"description\": \"Collect numbers that meet the divisibility condition.\",\n      \"details\": \"If a number is divisible by all its non-zero digits, add it to the result list.\"\n    },\n    {\n      \"description\": \"Return the list of numbers that satisfy the condition.\",\n      \"details\": \"After iterating through the range, return the list of numbers that are divisible by all their digits.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Define the function divisible_by_digits with parameters startnum and endnum.\",\n    \"Initialize an empty list to store numbers that meet the condition.\",\n    \"Loop through each number from startnum to endnum.\",\n    \"For each number, convert it to a string to iterate over its digits.\",\n    \"Check if the number is divisible by each of its non-zero digits.\",\n    \"If the number is divisible by all its non-zero digits, append it to the result list.\",\n    \"After the loop, return the result list.\"\n  ]\n}\n```", "Round_0": {"code": "def divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum + 1):\n        num_str = str(num)\n        if all(int(digit) != 0 and num % int(digit) == 0 for digit in num_str):\n            result.append(num)\n    return result\n\n# Example usage\nprint(divisible_by_digits(1, 22))  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Iterate through each number in the given range from startnum to endnum.\",\n      \"goal\": \"Ensure that each number in the range is checked for divisibility by its digits.\"\n    },\n    {\n      \"description\": \"Extract digits from the current number.\",\n      \"goal\": \"Identify all individual digits of the number to check divisibility.\"\n    },\n    {\n      \"description\": \"Check if the number is divisible by each of its digits.\",\n      \"goal\": \"Determine if the number can be evenly divided by each of its non-zero digits.\"\n    },\n    {\n      \"description\": \"Collect numbers that meet the divisibility criteria.\",\n      \"goal\": \"Store numbers that are divisible by all their digits in a result list.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Define a function named divisible_by_digits that takes two parameters: startnum and endnum.\",\n    \"Initialize an empty list to store numbers that meet the criteria.\",\n    \"Loop through each number from startnum to endnum (inclusive).\",\n    \"For each number, convert it to a string to easily access each digit.\",\n    \"Check if the number is divisible by each of its digits, skipping any zero digits.\",\n    \"If the number is divisible by all its non-zero digits, add it to the result list.\",\n    \"Return the list of numbers that meet the criteria after the loop completes.\"\n  ]\n}\n```", "Round_0": {"code": "def divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum + 1):\n        num_str = str(num)\n        if all(int(digit) != 0 and num % int(digit) == 0 for digit in num_str):\n            result.append(num)\n    return result\n\n# Example usage\nprint(divisible_by_digits(1, 22))  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the start and end numbers.\",\n      \"details\": \"Ensure the function accepts two parameters: startnum and endnum.\"\n    },\n    {\n      \"description\": \"Iterate through each number in the given range from startnum to endnum.\",\n      \"details\": \"Use a loop to go through each number in the range.\"\n    },\n    {\n      \"description\": \"For each number, extract its digits.\",\n      \"details\": \"Convert the number to a string or use mathematical operations to get each digit.\"\n    },\n    {\n      \"description\": \"Check if the number is divisible by each of its digits.\",\n      \"details\": \"For each digit, check if the number modulo the digit is zero. Handle cases where the digit is zero.\"\n    },\n    {\n      \"description\": \"Collect numbers that meet the criteria into a list.\",\n      \"details\": \"If a number is divisible by all its digits, add it to the result list.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Define the function divisible_by_digits with parameters startnum and endnum.\",\n    \"Initialize an empty list to store numbers that meet the criteria.\",\n    \"Loop through each number from startnum to endnum (inclusive).\",\n    \"For each number, extract its digits.\",\n    \"Check if the number is divisible by each of its non-zero digits.\",\n    \"If the number is divisible by all its non-zero digits, add it to the list.\",\n    \"Return the list of numbers that meet the criteria.\"\n  ]\n}\n```", "Round_0": {"code": "def divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum + 1):\n        digits = [int(d) for d in str(num) if d != '0']\n        if all(num % d == 0 for d in digits):\n            result.append(num)\n    return result\n\n# Example usage\nprint(divisible_by_digits(1, 22))  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Iterate through each number in the given range from startnum to endnum.\",\n      \"details\": \"Use a loop to go through each number in the specified range.\"\n    },\n    {\n      \"description\": \"Check if a number is divisible by each of its digits.\",\n      \"details\": \"For each number, extract its digits and verify if the number is divisible by each non-zero digit.\"\n    },\n    {\n      \"description\": \"Collect numbers that meet the divisibility condition.\",\n      \"details\": \"If a number is divisible by all its digits, add it to the result list.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Define the function divisible_by_digits with parameters startnum and endnum.\"\n    },\n    {\n      \"step\": \"Initialize an empty list to store numbers that meet the condition.\"\n    },\n    {\n      \"step\": \"Loop through each number from startnum to endnum (inclusive).\"\n    },\n    {\n      \"step\": \"For each number, convert it to a string to iterate over its digits.\"\n    },\n    {\n      \"step\": \"Check if the number is divisible by each of its non-zero digits.\"\n    },\n    {\n      \"step\": \"If the number is divisible by all its non-zero digits, append it to the result list.\"\n    },\n    {\n      \"step\": \"Return the list of numbers that meet the condition.\"\n    }\n  ]\n}\n```", "Round_0": {"code": "def divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum + 1):\n        num_str = str(num)\n        if all(int(digit) != 0 and num % int(digit) == 0 for digit in num_str):\n            result.append(num)\n    return result\n\n# Example usage\nprint(divisible_by_digits(1, 22))  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input range from startnum to endnum.\",\n      \"details\": \"Ensure the function accepts two integer parameters, startnum and endnum, representing the range.\"\n    },\n    {\n      \"description\": \"Iterate through each number in the given range.\",\n      \"details\": \"Use a loop to go through each number from startnum to endnum, inclusive.\"\n    },\n    {\n      \"description\": \"Check divisibility of a number by its digits.\",\n      \"details\": \"For each number, extract its digits and check if the number is divisible by each of its non-zero digits.\"\n    },\n    {\n      \"description\": \"Collect numbers that meet the divisibility condition.\",\n      \"details\": \"If a number is divisible by all its non-zero digits, add it to the result list.\"\n    },\n    {\n      \"description\": \"Return the list of numbers that satisfy the condition.\",\n      \"details\": \"After iterating through the range, return the list of numbers that are divisible by their digits.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Define the function divisible_by_digits with parameters startnum and endnum.\",\n    \"Initialize an empty list to store numbers that meet the condition.\",\n    \"Loop through each number from startnum to endnum.\",\n    \"For each number, convert it to a string to iterate over its digits.\",\n    \"Check if the number is divisible by each of its non-zero digits.\",\n    \"If the number is divisible by all its non-zero digits, add it to the result list.\",\n    \"After the loop, return the result list.\"\n  ]\n}\n```", "Round_0": {"code": "def divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum + 1):\n        num_str = str(num)\n        if all(int(digit) != 0 and num % int(digit) == 0 for digit in num_str):\n            result.append(num)\n    return result\n\n# Example usage\nprint(divisible_by_digits(1, 22))  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input range from startnum to endnum.\",\n      \"details\": \"Ensure the function accepts two integer parameters, startnum and endnum, representing the range of numbers to be checked.\"\n    },\n    {\n      \"description\": \"Iterate through each number in the given range.\",\n      \"details\": \"Use a loop to go through each number from startnum to endnum, inclusive.\"\n    },\n    {\n      \"description\": \"Check if a number is divisible by each of its digits.\",\n      \"details\": \"For each number, extract its digits and verify if the number is divisible by each non-zero digit.\"\n    },\n    {\n      \"description\": \"Collect numbers that meet the divisibility condition.\",\n      \"details\": \"If a number is divisible by all its non-zero digits, add it to the result list.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Define the function divisible_by_digits with parameters startnum and endnum.\",\n    \"Initialize an empty list to store numbers that meet the condition.\",\n    \"Loop through each number from startnum to endnum.\",\n    \"For each number, convert it to a string to iterate over its digits.\",\n    \"Check if the number is divisible by each of its non-zero digits.\",\n    \"If the number is divisible by all its non-zero digits, append it to the result list.\",\n    \"Return the list of numbers that satisfy the condition.\"\n  ]\n}\n```", "Round_0": {"code": "def divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum + 1):\n        num_str = str(num)\n        if all(int(digit) != 0 and num % int(digit) == 0 for digit in num_str):\n            result.append(num)\n    return result\n\n# Example usage\nprint(divisible_by_digits(1, 22))  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}], "test": ["def check(divisible_by_digits):\n\tassert divisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(1,15)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(20,25)==[22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(6, 20) == [6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(3, 22) == [3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(5, 27) == [5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(6, 21) == [6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(1, 19) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(1, 25) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(3, 23) == [3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(4, 25) == [4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(2, 25) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(2, 27) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(2, 24) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(1, 17) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(6, 24) == [6, 7, 8, 9, 11, 12, 15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(6, 19) == [6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(2, 18) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(5, 26) == [5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(3, 25) == [3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(2, 27) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(5, 25) == [5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(1, 19) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(4, 19) == [4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(6, 26) == [6, 7, 8, 9, 11, 12, 15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(3, 26) == [3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(6, 23) == [6, 7, 8, 9, 11, 12, 15, 22]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(1, 20) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(3, 21) == [3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(2, 19) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(4, 20) == [4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(2, 27) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(2, 26) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(5, 22) == [5, 6, 7, 8, 9, 11, 12, 15, 22]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(1, 27) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(2, 19) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(4, 10) == [4, 5, 6, 7, 8, 9]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(5, 19) == [5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(1, 20) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(4, 11) == [4, 5, 6, 7, 8, 9, 11]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(2, 20) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(3, 15) == [3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(1, 18) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(5, 15) == [5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(4, 20) == [4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(2, 20) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(4, 17) == [4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(1, 11) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(1, 14) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(5, 19) == [5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(4, 20) == [4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(6, 17) == [6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(4, 20) == [4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(4, 15) == [4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(5, 12) == [5, 6, 7, 8, 9, 11, 12]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(5, 15) == [5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(2, 20) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(5, 10) == [5, 6, 7, 8, 9]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(5, 19) == [5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(4, 13) == [4, 5, 6, 7, 8, 9, 11, 12]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(5, 17) == [5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(6, 16) == [6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(4, 16) == [4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(2, 19) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(3, 20) == [3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(2, 17) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(6, 18) == [6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(1, 17) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(3, 18) == [3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(24, 30) == [24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(24, 30) == [24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(17, 24) == [22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(23, 25) == [24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(25, 29) == []", "def check(divisible_by_digits):\n\tassert divisible_by_digits(25, 25) == []", "def check(divisible_by_digits):\n\tassert divisible_by_digits(25, 27) == []", "def check(divisible_by_digits):\n\tassert divisible_by_digits(18, 29) == [22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(25, 21) == []", "def check(divisible_by_digits):\n\tassert divisible_by_digits(22, 28) == [22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(22, 25) == [22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(19, 26) == [22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(15, 28) == [15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(20, 25) == [22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(25, 26) == []", "def check(divisible_by_digits):\n\tassert divisible_by_digits(16, 20) == []", "def check(divisible_by_digits):\n\tassert divisible_by_digits(23, 20) == []", "def check(divisible_by_digits):\n\tassert divisible_by_digits(22, 23) == [22]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(23, 25) == [24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(21, 23) == [22]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(19, 24) == [22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(20, 24) == [22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(17, 22) == [22]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(18, 26) == [22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(23, 30) == [24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(25, 28) == []", "def check(divisible_by_digits):\n\tassert divisible_by_digits(15, 29) == [15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(20, 26) == [22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(16, 23) == [22]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(20, 21) == []", "def check(divisible_by_digits):\n\tassert divisible_by_digits(18, 22) == [22]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(22, 22) == [22]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(21, 21) == []"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.1471, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, false, true, true, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 102, 15, 102, 102, 102], "passed": true, "pass": true, "pass_num": 3, "round": 1040, "mutate_method": "expand_one2two", "save_node": false, "parent_index": 229}
