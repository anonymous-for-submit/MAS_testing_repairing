{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 397, "prompt": "Write a function to find the central value among three numbers.", "code": "def median_numbers(a,b,c):\n if a > b:\n    if a < c:\n        median = a\n    elif b > c:\n        median = b\n    else:\n        median = c\n else:\n    if a > c:\n        median = a\n    elif b < c:\n        median = b\n    else:\n        median = c\n return median", "test_imports": [], "test_list": ["assert median_numbers(25,55,65)==55.0", "assert median_numbers(20,10,30)==20.0", "assert median_numbers(15,45,75)==45.0", "assert median_numbers(22, 54, 68) == 54", "assert median_numbers(22, 57, 66) == 57", "assert median_numbers(22, 54, 61) == 54", "assert median_numbers(30, 53, 63) == 53", "assert median_numbers(22, 55, 61) == 55", "assert median_numbers(25, 60, 61) == 60", "assert median_numbers(22, 56, 68) == 56", "assert median_numbers(29, 53, 70) == 53", "assert median_numbers(23, 53, 66) == 53", "assert median_numbers(29, 58, 67) == 58", "assert median_numbers(27, 52, 64) == 52", "assert median_numbers(29, 60, 61) == 60", "assert median_numbers(25, 57, 61) == 57", "assert median_numbers(20, 50, 66) == 50", "assert median_numbers(21, 51, 65) == 51", "assert median_numbers(29, 51, 67) == 51", "assert median_numbers(26, 55, 69) == 55", "assert median_numbers(24, 53, 64) == 53", "assert median_numbers(28, 55, 65) == 55", "assert median_numbers(27, 57, 66) == 57", "assert median_numbers(20, 58, 70) == 58", "assert median_numbers(23, 56, 67) == 56", "assert median_numbers(28, 55, 69) == 55", "assert median_numbers(23, 58, 70) == 58", "assert median_numbers(26, 54, 62) == 54", "assert median_numbers(27, 51, 64) == 51", "assert median_numbers(28, 50, 65) == 50", "assert median_numbers(29, 55, 69) == 55", "assert median_numbers(22, 57, 70) == 57", "assert median_numbers(27, 52, 69) == 52", "assert median_numbers(30, 58, 61) == 58", "assert median_numbers(20, 58, 63) == 58", "assert median_numbers(27, 51, 69) == 51", "assert median_numbers(21, 12, 26) == 21", "assert median_numbers(18, 6, 28) == 18", "assert median_numbers(19, 7, 27) == 19", "assert median_numbers(21, 14, 25) == 21", "assert median_numbers(20, 7, 29) == 20", "assert median_numbers(15, 7, 31) == 15", "assert median_numbers(15, 8, 32) == 15", "assert median_numbers(20, 6, 34) == 20", "assert median_numbers(20, 7, 28) == 20", "assert median_numbers(21, 8, 31) == 21", "assert median_numbers(23, 6, 31) == 23", "assert median_numbers(20, 10, 34) == 20", "assert median_numbers(16, 14, 29) == 16", "assert median_numbers(16, 7, 30) == 16", "assert median_numbers(23, 9, 32) == 23", "assert median_numbers(15, 7, 28) == 15", "assert median_numbers(18, 5, 26) == 18", "assert median_numbers(22, 8, 26) == 22", "assert median_numbers(19, 6, 26) == 19", "assert median_numbers(15, 11, 30) == 15", "assert median_numbers(18, 5, 31) == 18", "assert median_numbers(19, 6, 32) == 19", "assert median_numbers(20, 5, 31) == 20", "assert median_numbers(21, 13, 26) == 21", "assert median_numbers(19, 5, 33) == 19", "assert median_numbers(24, 8, 25) == 24", "assert median_numbers(21, 15, 34) == 21", "assert median_numbers(17, 14, 31) == 17", "assert median_numbers(17, 8, 30) == 17", "assert median_numbers(21, 13, 34) == 21", "assert median_numbers(19, 5, 34) == 19", "assert median_numbers(15, 8, 30) == 15", "assert median_numbers(21, 12, 31) == 21", "assert median_numbers(19, 40, 78) == 40", "assert median_numbers(19, 50, 78) == 50", "assert median_numbers(11, 44, 73) == 44", "assert median_numbers(18, 42, 70) == 42", "assert median_numbers(11, 48, 72) == 48", "assert median_numbers(10, 48, 79) == 48", "assert median_numbers(17, 48, 79) == 48", "assert median_numbers(17, 46, 74) == 46", "assert median_numbers(20, 49, 78) == 49", "assert median_numbers(12, 40, 71) == 40", "assert median_numbers(16, 40, 79) == 40", "assert median_numbers(17, 40, 80) == 40", "assert median_numbers(15, 50, 78) == 50", "assert median_numbers(11, 41, 76) == 41", "assert median_numbers(20, 47, 73) == 47", "assert median_numbers(19, 50, 71) == 50", "assert median_numbers(10, 42, 77) == 42", "assert median_numbers(20, 44, 70) == 44", "assert median_numbers(16, 41, 78) == 41", "assert median_numbers(20, 49, 70) == 49", "assert median_numbers(11, 50, 75) == 50", "assert median_numbers(20, 42, 72) == 42", "assert median_numbers(15, 48, 74) == 48", "assert median_numbers(15, 49, 72) == 49", "assert median_numbers(10, 42, 80) == 42", "assert median_numbers(17, 43, 78) == 43", "assert median_numbers(18, 44, 73) == 44", "assert median_numbers(13, 50, 80) == 50", "assert median_numbers(14, 40, 75) == 40", "assert median_numbers(11, 48, 72) == 48", "assert median_numbers(10, 42, 75) == 42", "assert median_numbers(10, 42, 74) == 42", "assert median_numbers(15, 41, 74) == 41"], "entry_point": "median_numbers", "completion": "from typing import *\ndef median_numbers(a, b, c):\n    # Step 2: Validate the input to ensure that all three parameters are numbers.\n    if not all(isinstance(i, (int, float)) for i in (a, b, c)):\n        raise ValueError(\"All inputs must be numbers.\")\n    \n    # Step 3: Sort the three numbers to arrange them in ascending order.\n    sorted_numbers = sorted([a, b, c])\n    \n    # Step 4: Identify the central value, which will be the second number in the sorted list.\n    central_value = sorted_numbers[1]\n    \n    # Step 5: Return the central value as a float.\n    return float(central_value)\n", "completions": ["from typing import *\ndef median_numbers(a, b, c):\n    # Sort the numbers and return the middle one as the median\n    numbers = [a, b, c]\n    numbers.sort()\n    return float(numbers[1])\n\n# Example usage\nprint(median_numbers(25, 55, 65))  # Output should be 55.0\n", "from typing import *\ndef median_numbers(a, b, c):\n    # Sort the three input numbers\n    sorted_numbers = sorted([a, b, c])\n    \n    # Select the second number from the sorted list, which is the median\n    median = sorted_numbers[1]\n    \n    # Convert the median to a float if it is not already\n    median_float = float(median)\n    \n    # Return the median value\n    return median_float\n", "from typing import *\ndef median_numbers(a, b, c):\n    # Sort the numbers to arrange them in ascending order\n    sorted_numbers = sorted([a, b, c])\n    # Select the second number from the sorted list, which is the central value\n    central_value = sorted_numbers[1]\n    # Return the central value\n    return central_value\n\n# Example usage\nprint(median_numbers(25, 55, 65))  # Output: 55\n", "from typing import *\ndef median_numbers(a, b, c):\n    # Sort the input numbers\n    sorted_numbers = sorted([a, b, c])\n    # Select the central value\n    median = sorted_numbers[1]\n    # Return the median value as a float\n    return float(median)\n\n# Example usage\nprint(median_numbers(25, 55, 65))  # Output: 55.0\n", "from typing import *\ndef median_numbers(a, b, c):\n    numbers = [a, b, c]\n    numbers.sort()\n    return float(numbers[1])\n\n# Example usage\nprint(median_numbers(25, 55, 65))  # Output: 55.0\n", "from typing import *\ndef median_numbers(a, b, c):\n    # Sort the numbers to find the central value\n    sorted_numbers = sorted([a, b, c])\n    # Select the second number, convert it to float, and return\n    return float(sorted_numbers[1])\n\n# Example usage\nprint(median_numbers(25, 55, 65))  # Output: 55.0\n", "from typing import *\ndef median_numbers(a, b, c):\n    # Step 2: Validate that the input consists of exactly three numbers.\n    if not all(isinstance(i, (int, float)) for i in [a, b, c]):\n        raise ValueError(\"All inputs must be numbers.\")\n    \n    # Step 3: Sort the three numbers to arrange them in ascending order.\n    sorted_numbers = sorted([a, b, c])\n    \n    # Step 4: Identify the central value, which will be the second number in the sorted list.\n    central_value = sorted_numbers[1]\n    \n    # Step 5: Return the central value as a float.\n    return float(central_value)\n", "from typing import *\ndef median_numbers(a, b, c):\n    # Sort the numbers and return the middle one as a float\n    return float(sorted([a, b, c])[1])\n\n# Example usage\nprint(median_numbers(25, 55, 65))  # Output: 55.0\n", "from typing import *\ndef median_numbers(a, b, c):\n    # Sort the three input numbers\n    sorted_numbers = sorted([a, b, c])\n    # Select the second number from the sorted list as the central value\n    central_value = sorted_numbers[1]\n    # Convert the central value to a float and return it\n    return float(central_value)\n\n# Example usage\nprint(median_numbers(25, 55, 65))  # Output: 55.0\n", "from typing import *\ndef median_numbers(a, b, c):\n    # Step 2: Validate the input to ensure that all three parameters are numbers.\n    if not all(isinstance(i, (int, float)) for i in (a, b, c)):\n        raise ValueError(\"All inputs must be numbers.\")\n    \n    # Step 3: Sort the three numbers to arrange them in ascending order.\n    sorted_numbers = sorted([a, b, c])\n    \n    # Step 4: Identify the central value, which will be the second number in the sorted list.\n    central_value = sorted_numbers[1]\n    \n    # Step 5: Return the central value as a float.\n    return float(central_value)\n"], "session_history": {"plan": "```json\n{\n  \"decomposed_subproblems\": [\n    \"1. Validate the input to ensure that exactly three numbers are provided.\",\n    \"2. Determine the central value among the three numbers.\",\n    \"3. Return the central value as a float.\"\n  ],\n  \"high_level_plan\": [\n    \"Step 1: Define a function named 'median_numbers' that accepts three parameters.\",\n    \"Step 2: Validate the input to ensure that all three parameters are numbers.\",\n    \"Step 3: Sort the three numbers to arrange them in ascending order.\",\n    \"Step 4: Identify the central value, which will be the second number in the sorted list.\",\n    \"Step 5: Return the central value as a float.\"\n  ]\n}\n```", "Round_0": {"code": "def median_numbers(a, b, c):\n    # Step 2: Validate the input to ensure that all three parameters are numbers.\n    if not all(isinstance(i, (int, float)) for i in (a, b, c)):\n        raise ValueError(\"All inputs must be numbers.\")\n    \n    # Step 3: Sort the three numbers to arrange them in ascending order.\n    sorted_numbers = sorted([a, b, c])\n    \n    # Step 4: Identify the central value, which will be the second number in the sorted list.\n    central_value = sorted_numbers[1]\n    \n    # Step 5: Return the central value as a float.\n    return float(central_value)\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, "session_historys": [{"plan": "```json\n{\n  \"decomposed_subproblems\": [\n    \"Identify the three input numbers for which the central value (median) needs to be found.\",\n    \"Determine the logic to find the median of three numbers.\",\n    \"Implement the function to accept three numbers as input and return the median.\"\n  ],\n  \"high_level_plan\": [\n    \"Define a function named 'median_numbers' that takes three parameters.\",\n    \"Within the function, use conditional statements to compare the three numbers and determine the median.\",\n    \"Return the median value as a float.\",\n    \"Test the function with the provided example to ensure it returns the correct median.\"\n  ]\n}\n```", "Round_0": {"code": "def median_numbers(a, b, c):\n    # Sort the numbers and return the middle one as the median\n    numbers = [a, b, c]\n    numbers.sort()\n    return float(numbers[1])\n\n# Example usage\nprint(median_numbers(25, 55, 65))  # Output should be 55.0\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"requirement_analysis\": {\n    \"subproblems\": [\n      \"Identify the three input numbers.\",\n      \"Determine the central value among the three numbers.\",\n      \"Return the central value as a float.\"\n    ],\n    \"high_level_plan\": [\n      \"Define a function named 'median_numbers' that takes three parameters.\",\n      \"Sort the three input numbers.\",\n      \"Select the second number from the sorted list, which is the median.\",\n      \"Convert the median to a float if it is not already.\",\n      \"Return the median value.\"\n    ]\n  }\n}\n```", "Round_0": {"code": "def median_numbers(a, b, c):\n    # Sort the three input numbers\n    sorted_numbers = sorted([a, b, c])\n    \n    # Select the second number from the sorted list, which is the median\n    median = sorted_numbers[1]\n    \n    # Convert the median to a float if it is not already\n    median_float = float(median)\n    \n    # Return the median value\n    return median_float\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"decomposed_subproblems\": [\n    \"Identify the input parameters for the function, which are three numbers.\",\n    \"Determine the logic to find the central value among the three numbers.\",\n    \"Implement the function to return the central value.\"\n  ],\n  \"high_level_plan\": [\n    \"Define a function named 'median_numbers' that accepts three numerical arguments.\",\n    \"Sort the three numbers to arrange them in ascending order.\",\n    \"Select the second number from the sorted list, which represents the central value.\",\n    \"Return the central value as the output of the function.\"\n  ]\n}\n```", "Round_0": {"code": "def median_numbers(a, b, c):\n    # Sort the numbers to arrange them in ascending order\n    sorted_numbers = sorted([a, b, c])\n    # Select the second number from the sorted list, which is the central value\n    central_value = sorted_numbers[1]\n    # Return the central value\n    return central_value\n\n# Example usage\nprint(median_numbers(25, 55, 65))  # Output: 55\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"decomposed_subproblems\": [\n    {\n      \"subproblem\": \"Identify the input parameters for the function.\",\n      \"details\": \"The function should accept three numerical inputs.\"\n    },\n    {\n      \"subproblem\": \"Determine the logic to find the central value.\",\n      \"details\": \"The central value is the median of the three numbers.\"\n    },\n    {\n      \"subproblem\": \"Implement the function to return the median value.\",\n      \"details\": \"Ensure the function returns a float as the median.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Define the function signature.\",\n      \"details\": \"Create a function named 'median_numbers' that takes three arguments.\"\n    },\n    {\n      \"step\": \"Sort the input numbers.\",\n      \"details\": \"Use a sorting method to arrange the numbers in ascending order.\"\n    },\n    {\n      \"step\": \"Select the central value.\",\n      \"details\": \"After sorting, the median is the second element in the sorted list.\"\n    },\n    {\n      \"step\": \"Return the median value.\",\n      \"details\": \"Ensure the returned value is a float.\"\n    }\n  ]\n}\n```", "Round_0": {"code": "def median_numbers(a, b, c):\n    # Sort the input numbers\n    sorted_numbers = sorted([a, b, c])\n    # Select the central value\n    median = sorted_numbers[1]\n    # Return the median value as a float\n    return float(median)\n\n# Example usage\nprint(median_numbers(25, 55, 65))  # Output: 55.0\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"decomposed_subproblems\": [\n    \"Understand the concept of a median in a set of three numbers.\",\n    \"Identify the three numbers as inputs to the function.\",\n    \"Determine the logic to find the central value (median) among the three numbers.\",\n    \"Implement the logic to return the median value as a float.\"\n  ],\n  \"high_level_plan\": [\n    \"Define a function named 'median_numbers' that takes three parameters.\",\n    \"Sort the three input numbers to arrange them in ascending order.\",\n    \"Identify the second number in the sorted list as the median.\",\n    \"Return the median value as a float.\"\n  ]\n}\n```", "Round_0": {"code": "def median_numbers(a, b, c):\n    numbers = [a, b, c]\n    numbers.sort()\n    return float(numbers[1])\n\n# Example usage\nprint(median_numbers(25, 55, 65))  # Output: 55.0\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"requirement_analysis\": {\n    \"subproblems\": [\n      \"Identify the three input numbers.\",\n      \"Determine the central value among the three numbers.\",\n      \"Return the central value as a float.\"\n    ],\n    \"high_level_plan\": [\n      \"Define a function named 'median_numbers' that takes three parameters.\",\n      \"Sort the three input numbers to arrange them in ascending order.\",\n      \"Select the second number from the sorted list, which represents the central value.\",\n      \"Convert the central value to a float.\",\n      \"Return the central value as the output of the function.\"\n    ]\n  }\n}\n```", "Round_0": {"code": "def median_numbers(a, b, c):\n    # Sort the numbers to find the central value\n    sorted_numbers = sorted([a, b, c])\n    # Select the second number, convert it to float, and return\n    return float(sorted_numbers[1])\n\n# Example usage\nprint(median_numbers(25, 55, 65))  # Output: 55.0\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"decomposed_subproblems\": [\n    \"1. Validate the input to ensure that exactly three numbers are provided.\",\n    \"2. Determine the central value among the three numbers.\",\n    \"3. Return the central value as a float.\"\n  ],\n  \"high_level_plan\": [\n    \"Step 1: Define a function named 'median_numbers' that accepts three parameters.\",\n    \"Step 2: Validate that the input consists of exactly three numbers. If not, handle the error appropriately.\",\n    \"Step 3: Sort the three numbers to arrange them in ascending order.\",\n    \"Step 4: Identify the central value, which will be the second number in the sorted list.\",\n    \"Step 5: Return the central value as a float.\"\n  ]\n}\n```", "Round_0": {"code": "def median_numbers(a, b, c):\n    # Step 2: Validate that the input consists of exactly three numbers.\n    if not all(isinstance(i, (int, float)) for i in [a, b, c]):\n        raise ValueError(\"All inputs must be numbers.\")\n    \n    # Step 3: Sort the three numbers to arrange them in ascending order.\n    sorted_numbers = sorted([a, b, c])\n    \n    # Step 4: Identify the central value, which will be the second number in the sorted list.\n    central_value = sorted_numbers[1]\n    \n    # Step 5: Return the central value as a float.\n    return float(central_value)\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"decomposed_subproblems\": [\n    \"Identify the three input numbers for which the central value needs to be found.\",\n    \"Determine the logic to find the median of the three numbers.\",\n    \"Implement the function to accept three numbers as input parameters.\",\n    \"Calculate the median value using the identified logic.\",\n    \"Return the median value as a float.\"\n  ],\n  \"high_level_plan\": [\n    \"Define a function named 'median_numbers' that takes three parameters.\",\n    \"Within the function, use conditional statements to compare the three numbers and determine the median.\",\n    \"Ensure the function returns the median value as a float.\",\n    \"Test the function with the provided example to verify correctness.\"\n  ]\n}\n```", "Round_0": {"code": "def median_numbers(a, b, c):\n    # Sort the numbers and return the middle one as a float\n    return float(sorted([a, b, c])[1])\n\n# Example usage\nprint(median_numbers(25, 55, 65))  # Output: 55.0\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"requirement_analysis\": {\n    \"subproblems\": [\n      \"Identify the three input numbers.\",\n      \"Determine the central value among the three numbers.\",\n      \"Return the central value as a float.\"\n    ],\n    \"high_level_plan\": [\n      \"Define a function named 'median_numbers' that takes three parameters.\",\n      \"Sort the three input numbers.\",\n      \"Select the second number from the sorted list as the central value.\",\n      \"Convert the central value to a float.\",\n      \"Return the central value.\"\n    ]\n  }\n}\n```", "Round_0": {"code": "def median_numbers(a, b, c):\n    # Sort the three input numbers\n    sorted_numbers = sorted([a, b, c])\n    # Select the second number from the sorted list as the central value\n    central_value = sorted_numbers[1]\n    # Convert the central value to a float and return it\n    return float(central_value)\n\n# Example usage\nprint(median_numbers(25, 55, 65))  # Output: 55.0\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"decomposed_subproblems\": [\n    \"1. Validate the input to ensure that exactly three numbers are provided.\",\n    \"2. Determine the central value among the three numbers.\",\n    \"3. Return the central value as a float.\"\n  ],\n  \"high_level_plan\": [\n    \"Step 1: Define a function named 'median_numbers' that accepts three parameters.\",\n    \"Step 2: Validate the input to ensure that all three parameters are numbers.\",\n    \"Step 3: Sort the three numbers to arrange them in ascending order.\",\n    \"Step 4: Identify the central value, which will be the second number in the sorted list.\",\n    \"Step 5: Return the central value as a float.\"\n  ]\n}\n```", "Round_0": {"code": "def median_numbers(a, b, c):\n    # Step 2: Validate the input to ensure that all three parameters are numbers.\n    if not all(isinstance(i, (int, float)) for i in (a, b, c)):\n        raise ValueError(\"All inputs must be numbers.\")\n    \n    # Step 3: Sort the three numbers to arrange them in ascending order.\n    sorted_numbers = sorted([a, b, c])\n    \n    # Step 4: Identify the central value, which will be the second number in the sorted list.\n    central_value = sorted_numbers[1]\n    \n    # Step 5: Return the central value as a float.\n    return float(central_value)\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}], "test": ["def check(median_numbers):\n\tassert median_numbers(25,55,65)==55.0", "def check(median_numbers):\n\tassert median_numbers(20,10,30)==20.0", "def check(median_numbers):\n\tassert median_numbers(15,45,75)==45.0", "def check(median_numbers):\n\tassert median_numbers(22, 54, 68) == 54", "def check(median_numbers):\n\tassert median_numbers(22, 57, 66) == 57", "def check(median_numbers):\n\tassert median_numbers(22, 54, 61) == 54", "def check(median_numbers):\n\tassert median_numbers(30, 53, 63) == 53", "def check(median_numbers):\n\tassert median_numbers(22, 55, 61) == 55", "def check(median_numbers):\n\tassert median_numbers(25, 60, 61) == 60", "def check(median_numbers):\n\tassert median_numbers(22, 56, 68) == 56", "def check(median_numbers):\n\tassert median_numbers(29, 53, 70) == 53", "def check(median_numbers):\n\tassert median_numbers(23, 53, 66) == 53", "def check(median_numbers):\n\tassert median_numbers(29, 58, 67) == 58", "def check(median_numbers):\n\tassert median_numbers(27, 52, 64) == 52", "def check(median_numbers):\n\tassert median_numbers(29, 60, 61) == 60", "def check(median_numbers):\n\tassert median_numbers(25, 57, 61) == 57", "def check(median_numbers):\n\tassert median_numbers(20, 50, 66) == 50", "def check(median_numbers):\n\tassert median_numbers(21, 51, 65) == 51", "def check(median_numbers):\n\tassert median_numbers(29, 51, 67) == 51", "def check(median_numbers):\n\tassert median_numbers(26, 55, 69) == 55", "def check(median_numbers):\n\tassert median_numbers(24, 53, 64) == 53", "def check(median_numbers):\n\tassert median_numbers(28, 55, 65) == 55", "def check(median_numbers):\n\tassert median_numbers(27, 57, 66) == 57", "def check(median_numbers):\n\tassert median_numbers(20, 58, 70) == 58", "def check(median_numbers):\n\tassert median_numbers(23, 56, 67) == 56", "def check(median_numbers):\n\tassert median_numbers(28, 55, 69) == 55", "def check(median_numbers):\n\tassert median_numbers(23, 58, 70) == 58", "def check(median_numbers):\n\tassert median_numbers(26, 54, 62) == 54", "def check(median_numbers):\n\tassert median_numbers(27, 51, 64) == 51", "def check(median_numbers):\n\tassert median_numbers(28, 50, 65) == 50", "def check(median_numbers):\n\tassert median_numbers(29, 55, 69) == 55", "def check(median_numbers):\n\tassert median_numbers(22, 57, 70) == 57", "def check(median_numbers):\n\tassert median_numbers(27, 52, 69) == 52", "def check(median_numbers):\n\tassert median_numbers(30, 58, 61) == 58", "def check(median_numbers):\n\tassert median_numbers(20, 58, 63) == 58", "def check(median_numbers):\n\tassert median_numbers(27, 51, 69) == 51", "def check(median_numbers):\n\tassert median_numbers(21, 12, 26) == 21", "def check(median_numbers):\n\tassert median_numbers(18, 6, 28) == 18", "def check(median_numbers):\n\tassert median_numbers(19, 7, 27) == 19", "def check(median_numbers):\n\tassert median_numbers(21, 14, 25) == 21", "def check(median_numbers):\n\tassert median_numbers(20, 7, 29) == 20", "def check(median_numbers):\n\tassert median_numbers(15, 7, 31) == 15", "def check(median_numbers):\n\tassert median_numbers(15, 8, 32) == 15", "def check(median_numbers):\n\tassert median_numbers(20, 6, 34) == 20", "def check(median_numbers):\n\tassert median_numbers(20, 7, 28) == 20", "def check(median_numbers):\n\tassert median_numbers(21, 8, 31) == 21", "def check(median_numbers):\n\tassert median_numbers(23, 6, 31) == 23", "def check(median_numbers):\n\tassert median_numbers(20, 10, 34) == 20", "def check(median_numbers):\n\tassert median_numbers(16, 14, 29) == 16", "def check(median_numbers):\n\tassert median_numbers(16, 7, 30) == 16", "def check(median_numbers):\n\tassert median_numbers(23, 9, 32) == 23", "def check(median_numbers):\n\tassert median_numbers(15, 7, 28) == 15", "def check(median_numbers):\n\tassert median_numbers(18, 5, 26) == 18", "def check(median_numbers):\n\tassert median_numbers(22, 8, 26) == 22", "def check(median_numbers):\n\tassert median_numbers(19, 6, 26) == 19", "def check(median_numbers):\n\tassert median_numbers(15, 11, 30) == 15", "def check(median_numbers):\n\tassert median_numbers(18, 5, 31) == 18", "def check(median_numbers):\n\tassert median_numbers(19, 6, 32) == 19", "def check(median_numbers):\n\tassert median_numbers(20, 5, 31) == 20", "def check(median_numbers):\n\tassert median_numbers(21, 13, 26) == 21", "def check(median_numbers):\n\tassert median_numbers(19, 5, 33) == 19", "def check(median_numbers):\n\tassert median_numbers(24, 8, 25) == 24", "def check(median_numbers):\n\tassert median_numbers(21, 15, 34) == 21", "def check(median_numbers):\n\tassert median_numbers(17, 14, 31) == 17", "def check(median_numbers):\n\tassert median_numbers(17, 8, 30) == 17", "def check(median_numbers):\n\tassert median_numbers(21, 13, 34) == 21", "def check(median_numbers):\n\tassert median_numbers(19, 5, 34) == 19", "def check(median_numbers):\n\tassert median_numbers(15, 8, 30) == 15", "def check(median_numbers):\n\tassert median_numbers(21, 12, 31) == 21", "def check(median_numbers):\n\tassert median_numbers(19, 40, 78) == 40", "def check(median_numbers):\n\tassert median_numbers(19, 50, 78) == 50", "def check(median_numbers):\n\tassert median_numbers(11, 44, 73) == 44", "def check(median_numbers):\n\tassert median_numbers(18, 42, 70) == 42", "def check(median_numbers):\n\tassert median_numbers(11, 48, 72) == 48", "def check(median_numbers):\n\tassert median_numbers(10, 48, 79) == 48", "def check(median_numbers):\n\tassert median_numbers(17, 48, 79) == 48", "def check(median_numbers):\n\tassert median_numbers(17, 46, 74) == 46", "def check(median_numbers):\n\tassert median_numbers(20, 49, 78) == 49", "def check(median_numbers):\n\tassert median_numbers(12, 40, 71) == 40", "def check(median_numbers):\n\tassert median_numbers(16, 40, 79) == 40", "def check(median_numbers):\n\tassert median_numbers(17, 40, 80) == 40", "def check(median_numbers):\n\tassert median_numbers(15, 50, 78) == 50", "def check(median_numbers):\n\tassert median_numbers(11, 41, 76) == 41", "def check(median_numbers):\n\tassert median_numbers(20, 47, 73) == 47", "def check(median_numbers):\n\tassert median_numbers(19, 50, 71) == 50", "def check(median_numbers):\n\tassert median_numbers(10, 42, 77) == 42", "def check(median_numbers):\n\tassert median_numbers(20, 44, 70) == 44", "def check(median_numbers):\n\tassert median_numbers(16, 41, 78) == 41", "def check(median_numbers):\n\tassert median_numbers(20, 49, 70) == 49", "def check(median_numbers):\n\tassert median_numbers(11, 50, 75) == 50", "def check(median_numbers):\n\tassert median_numbers(20, 42, 72) == 42", "def check(median_numbers):\n\tassert median_numbers(15, 48, 74) == 48", "def check(median_numbers):\n\tassert median_numbers(15, 49, 72) == 49", "def check(median_numbers):\n\tassert median_numbers(10, 42, 80) == 42", "def check(median_numbers):\n\tassert median_numbers(17, 43, 78) == 43", "def check(median_numbers):\n\tassert median_numbers(18, 44, 73) == 44", "def check(median_numbers):\n\tassert median_numbers(13, 50, 80) == 50", "def check(median_numbers):\n\tassert median_numbers(14, 40, 75) == 40", "def check(median_numbers):\n\tassert median_numbers(11, 48, 72) == 48", "def check(median_numbers):\n\tassert median_numbers(10, 42, 75) == 42", "def check(median_numbers):\n\tassert median_numbers(10, 42, 74) == 42", "def check(median_numbers):\n\tassert median_numbers(15, 41, 74) == 41"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 102, 102, 102, 102, 102], "passed": true, "pass": true, "pass_num": 10, "round": 1151, "mutate_method": "rephrase_one", "save_node": false, "parent_index": 397}
