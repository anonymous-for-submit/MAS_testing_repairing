{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 606, "prompt": "Write a function to convert degrees to radians. Make sure that your function is able to handle both positive and negative degree values. It is important that it correctly processes these values.", "code": "import math\ndef radian_degree(degree):\n radian = degree*(math.pi/180)\n return radian", "test_imports": [], "test_list": ["assert radian_degree(90)==1.5707963267948966", "assert radian_degree(60)==1.0471975511965976", "assert radian_degree(120)==2.0943951023931953", "assert radian_degree(94) == 1.6406094968746698", "assert radian_degree(88) == 1.53588974175501", "assert radian_degree(89) == 1.5533430342749532", "assert radian_degree(88) == 1.53588974175501", "assert radian_degree(92) == 1.6057029118347832", "assert radian_degree(86) == 1.5009831567151235", "assert radian_degree(90) == 1.5707963267948966", "assert radian_degree(91) == 1.5882496193148399", "assert radian_degree(89) == 1.5533430342749532", "assert radian_degree(87) == 1.5184364492350666", "assert radian_degree(87) == 1.5184364492350666", "assert radian_degree(85) == 1.4835298641951802", "assert radian_degree(86) == 1.5009831567151235", "assert radian_degree(94) == 1.6406094968746698", "assert radian_degree(90) == 1.5707963267948966", "assert radian_degree(89) == 1.5533430342749532", "assert radian_degree(95) == 1.6580627893946132", "assert radian_degree(86) == 1.5009831567151235", "assert radian_degree(94) == 1.6406094968746698", "assert radian_degree(85) == 1.4835298641951802", "assert radian_degree(87) == 1.5184364492350666", "assert radian_degree(87) == 1.5184364492350666", "assert radian_degree(94) == 1.6406094968746698", "assert radian_degree(89) == 1.5533430342749532", "assert radian_degree(86) == 1.5009831567151235", "assert radian_degree(93) == 1.6231562043547265", "assert radian_degree(95) == 1.6580627893946132", "assert radian_degree(90) == 1.5707963267948966", "assert radian_degree(95) == 1.6580627893946132", "assert radian_degree(87) == 1.5184364492350666", "assert radian_degree(91) == 1.5882496193148399", "assert radian_degree(85) == 1.4835298641951802", "assert radian_degree(93) == 1.6231562043547265", "assert radian_degree(63) == 1.0995574287564276", "assert radian_degree(64) == 1.117010721276371", "assert radian_degree(58) == 1.0122909661567112", "assert radian_degree(62) == 1.0821041362364843", "assert radian_degree(55) == 0.9599310885968813", "assert radian_degree(60) == 1.0471975511965976", "assert radian_degree(57) == 0.9948376736367679", "assert radian_degree(60) == 1.0471975511965976", "assert radian_degree(63) == 1.0995574287564276", "assert radian_degree(56) == 0.9773843811168246", "assert radian_degree(60) == 1.0471975511965976", "assert radian_degree(56) == 0.9773843811168246", "assert radian_degree(60) == 1.0471975511965976", "assert radian_degree(63) == 1.0995574287564276", "assert radian_degree(60) == 1.0471975511965976", "assert radian_degree(59) == 1.0297442586766545", "assert radian_degree(58) == 1.0122909661567112", "assert radian_degree(65) == 1.1344640137963142", "assert radian_degree(65) == 1.1344640137963142", "assert radian_degree(65) == 1.1344640137963142", "assert radian_degree(60) == 1.0471975511965976", "assert radian_degree(61) == 1.064650843716541", "assert radian_degree(64) == 1.117010721276371", "assert radian_degree(65) == 1.1344640137963142", "assert radian_degree(60) == 1.0471975511965976", "assert radian_degree(57) == 0.9948376736367679", "assert radian_degree(61) == 1.064650843716541", "assert radian_degree(57) == 0.9948376736367679", "assert radian_degree(55) == 0.9599310885968813", "assert radian_degree(58) == 1.0122909661567112", "assert radian_degree(60) == 1.0471975511965976", "assert radian_degree(58) == 1.0122909661567112", "assert radian_degree(58) == 1.0122909661567112", "assert radian_degree(115) == 2.007128639793479", "assert radian_degree(115) == 2.007128639793479", "assert radian_degree(123) == 2.1467549799530254", "assert radian_degree(118) == 2.059488517353309", "assert radian_degree(122) == 2.129301687433082", "assert radian_degree(121) == 2.111848394913139", "assert radian_degree(120) == 2.0943951023931953", "assert radian_degree(125) == 2.181661564992912", "assert radian_degree(120) == 2.0943951023931953", "assert radian_degree(118) == 2.059488517353309", "assert radian_degree(124) == 2.1642082724729685", "assert radian_degree(117) == 2.0420352248333655", "assert radian_degree(120) == 2.0943951023931953", "assert radian_degree(124) == 2.1642082724729685", "assert radian_degree(116) == 2.0245819323134224", "assert radian_degree(123) == 2.1467549799530254", "assert radian_degree(119) == 2.076941809873252", "assert radian_degree(118) == 2.059488517353309", "assert radian_degree(119) == 2.076941809873252", "assert radian_degree(121) == 2.111848394913139", "assert radian_degree(121) == 2.111848394913139", "assert radian_degree(124) == 2.1642082724729685", "assert radian_degree(118) == 2.059488517353309", "assert radian_degree(122) == 2.129301687433082", "assert radian_degree(121) == 2.111848394913139", "assert radian_degree(117) == 2.0420352248333655", "assert radian_degree(116) == 2.0245819323134224", "assert radian_degree(123) == 2.1467549799530254", "assert radian_degree(115) == 2.007128639793479", "assert radian_degree(117) == 2.0420352248333655", "assert radian_degree(119) == 2.076941809873252", "assert radian_degree(115) == 2.007128639793479", "assert radian_degree(123) == 2.1467549799530254"], "entry_point": "radian_degree", "completion": "from typing import *\nimport math\n\ndef radian_degree(degrees):\n    radians = degrees * (math.pi / 180)\n    return radians\n\n# Example test\nprint(radian_degree(90))  # Output should be 1.5707963267948966\n", "completions": ["from typing import *\nimport math\n\ndef radian_degree(degree):\n    return degree * (math.pi / 180)\n\n# Example test\nprint(radian_degree(90))  # Output should be 1.5707963267948966\n", "from typing import *\nimport math\n\ndef radian_degree(degrees):\n    radians = degrees * (math.pi / 180)\n    return radians\n\n# Example usage\nprint(radian_degree(90))  # Output: 1.5707963267948966\n", "from typing import *\nimport math\n\ndef radian_degree(degrees):\n    radians = degrees * (math.pi / 180)\n    return radians\n\n# Example test\nprint(radian_degree(90))  # Output should be 1.5707963267948966\n", "from typing import *\nimport math\n\ndef radian_degree(degrees):\n    radians = degrees * (math.pi / 180)\n    return radians\n\n# Example usage\nprint(radian_degree(90))  # Output: 1.5707963267948966\n", "from typing import *\nimport math\n\ndef radian_degree(degrees):\n    radians = degrees * (math.pi / 180)\n    return radians\n\n# Example test\nprint(radian_degree(90))  # Output should be 1.5707963267948966\n", "from typing import *\nimport math\n\ndef radian_degree(degrees):\n    return degrees * (math.pi / 180)\n\n# Example usage\nprint(radian_degree(90))  # Output: 1.5707963267948966\n", "from typing import *\nimport math\n\ndef radian_degree(degrees):\n    radians = degrees * (math.pi / 180)\n    return radians\n\n# Example test\nprint(radian_degree(90))  # Output should be 1.5707963267948966\n", "from typing import *\nimport math\n\ndef radian_degree(degrees):\n    return degrees * (math.pi / 180)\n\n# Example usage\nprint(radian_degree(90))  # Output: 1.5707963267948966\n", "from typing import *\nimport math\n\ndef radian_degree(degrees):\n    radians = degrees * (math.pi / 180)\n    return radians\n\n# Example test\nprint(radian_degree(90))  # Output: 1.5707963267948966\n", "from typing import *\nimport math\n\ndef radian_degree(degrees):\n    radians = degrees * (math.pi / 180)\n    return radians\n\n# Example test\nprint(radian_degree(90))  # Output should be 1.5707963267948966\n"], "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Understand the mathematical formula for converting degrees to radians.\",\n      \"details\": \"The formula to convert degrees to radians is radians = degrees * (\u03c0 / 180).\"\n    },\n    {\n      \"description\": \"Handle both positive and negative degree values.\",\n      \"details\": \"Ensure the function can accept any real number as input, including negative values.\"\n    },\n    {\n      \"description\": \"Implement the function to perform the conversion.\",\n      \"details\": \"Write a Python function that takes a degree value as input and returns the corresponding radian value.\"\n    },\n    {\n      \"description\": \"Test the function with example values.\",\n      \"details\": \"Verify the function with given example: radian_degree(90) should return 1.5707963267948966.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Define a function named 'radian_degree' that accepts one parameter for the degree value.\",\n    \"Inside the function, use the conversion formula to calculate the radian value.\",\n    \"Return the calculated radian value from the function.\",\n    \"Test the function with various inputs, including the example provided, to ensure it handles both positive and negative degrees correctly.\"\n  ]\n}\n```", "Round_0": {"code": "import math\n\ndef radian_degree(degrees):\n    radians = degrees * (math.pi / 180)\n    return radians\n\n# Example test\nprint(radian_degree(90))  # Output should be 1.5707963267948966\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, "session_historys": [{"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Understand the mathematical formula for converting degrees to radians.\",\n      \"details\": \"The formula to convert degrees to radians is radians = degrees * (\u03c0 / 180).\"\n    },\n    {\n      \"description\": \"Handle both positive and negative degree values.\",\n      \"details\": \"Ensure that the function can accept any float or integer value as input, including negative numbers.\"\n    },\n    {\n      \"description\": \"Implement the function to perform the conversion.\",\n      \"details\": \"Write a Python function that takes a degree value as input and returns the corresponding radian value.\"\n    },\n    {\n      \"description\": \"Test the function with example values.\",\n      \"details\": \"Verify the function with the example provided: radian_degree(90) should return 1.5707963267948966.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Define a function named radian_degree that accepts one parameter, degree.\",\n    \"Inside the function, use the conversion formula to calculate radians from the given degree.\",\n    \"Return the calculated radian value.\",\n    \"Test the function with various inputs, including the example provided, to ensure it handles both positive and negative values correctly.\"\n  ]\n}\n```", "Round_0": {"code": "import math\n\ndef radian_degree(degree):\n    return degree * (math.pi / 180)\n\n# Example test\nprint(radian_degree(90))  # Output should be 1.5707963267948966\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Understand the mathematical formula for converting degrees to radians.\",\n      \"details\": \"The formula to convert degrees to radians is radians = degrees * (\u03c0 / 180).\"\n    },\n    {\n      \"description\": \"Handle both positive and negative degree values.\",\n      \"details\": \"Ensure the function can accept any float or integer value as input, including negative numbers.\"\n    },\n    {\n      \"description\": \"Implement the function to perform the conversion.\",\n      \"details\": \"Write a Python function that takes a degree value as input and returns the corresponding radian value.\"\n    },\n    {\n      \"description\": \"Test the function with example values.\",\n      \"details\": \"Verify the function with given example: radian_degree(90) should return 1.5707963267948966.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Define a function named 'radian_degree' that accepts one parameter for the degree value.\",\n    \"Inside the function, use the conversion formula to calculate the radian value.\",\n    \"Return the calculated radian value from the function.\",\n    \"Test the function with various inputs, including positive, negative, and zero degree values, to ensure accuracy.\"\n  ]\n}\n```", "Round_0": {"code": "import math\n\ndef radian_degree(degrees):\n    radians = degrees * (math.pi / 180)\n    return radians\n\n# Example usage\nprint(radian_degree(90))  # Output: 1.5707963267948966\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Understand the mathematical formula for converting degrees to radians.\",\n      \"details\": \"The formula to convert degrees to radians is radians = degrees * (\u03c0 / 180).\"\n    },\n    {\n      \"description\": \"Handle both positive and negative degree values.\",\n      \"details\": \"Ensure that the function can accept any real number as input, including negative values.\"\n    },\n    {\n      \"description\": \"Implement the function to perform the conversion.\",\n      \"details\": \"Write a Python function that takes a degree value as input and returns the corresponding radian value.\"\n    },\n    {\n      \"description\": \"Test the function with example values.\",\n      \"details\": \"Verify the function with the example provided: radian_degree(90) should return 1.5707963267948966.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Define a function named 'radian_degree' that accepts one parameter for the degree value.\",\n    \"Inside the function, use the conversion formula to calculate the radian value.\",\n    \"Return the calculated radian value from the function.\",\n    \"Test the function with various inputs, including the example provided, to ensure it handles both positive and negative degrees correctly.\"\n  ]\n}\n```", "Round_0": {"code": "import math\n\ndef radian_degree(degrees):\n    radians = degrees * (math.pi / 180)\n    return radians\n\n# Example test\nprint(radian_degree(90))  # Output should be 1.5707963267948966\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Understand the mathematical formula for converting degrees to radians.\",\n      \"details\": \"The formula to convert degrees to radians is radians = degrees * (\u03c0 / 180).\"\n    },\n    {\n      \"description\": \"Handle both positive and negative degree values.\",\n      \"details\": \"Ensure that the function can accept any float or integer value as input and correctly apply the conversion formula.\"\n    },\n    {\n      \"description\": \"Implement the function with a clear and descriptive name.\",\n      \"details\": \"The function should be named 'radian_degree' as specified in the requirement.\"\n    },\n    {\n      \"description\": \"Test the function with example values.\",\n      \"details\": \"Verify that the function returns the correct radian value for the given degree input, such as radian_degree(90) == 1.5707963267948966.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Define the function 'radian_degree' with a parameter for degree input.\"\n    },\n    {\n      \"step\": \"Inside the function, apply the conversion formula: radians = degrees * (\u03c0 / 180).\"\n    },\n    {\n      \"step\": \"Return the calculated radian value.\"\n    },\n    {\n      \"step\": \"Test the function with various inputs, including positive and negative degrees, to ensure accuracy.\"\n    }\n  ]\n}\n```", "Round_0": {"code": "import math\n\ndef radian_degree(degrees):\n    radians = degrees * (math.pi / 180)\n    return radians\n\n# Example usage\nprint(radian_degree(90))  # Output: 1.5707963267948966\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Understand the mathematical formula for converting degrees to radians.\",\n      \"details\": \"The formula to convert degrees to radians is radians = degrees * (\u03c0 / 180).\"\n    },\n    {\n      \"description\": \"Handle both positive and negative degree values.\",\n      \"details\": \"Ensure that the function can accept any float or integer value as input, including negative numbers.\"\n    },\n    {\n      \"description\": \"Implement the function to perform the conversion.\",\n      \"details\": \"Write a Python function that takes a degree value as input and returns the corresponding radian value.\"\n    },\n    {\n      \"description\": \"Test the function with example values.\",\n      \"details\": \"Verify the function with the example provided: radian_degree(90) should return 1.5707963267948966.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Define a function named 'radian_degree' that accepts one parameter for the degree value.\",\n    \"Inside the function, use the conversion formula to calculate the radian value.\",\n    \"Return the calculated radian value from the function.\",\n    \"Test the function with various inputs, including the example provided, to ensure it handles both positive and negative values correctly.\"\n  ]\n}\n```", "Round_0": {"code": "import math\n\ndef radian_degree(degrees):\n    radians = degrees * (math.pi / 180)\n    return radians\n\n# Example test\nprint(radian_degree(90))  # Output should be 1.5707963267948966\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Understand the mathematical formula for converting degrees to radians.\",\n      \"details\": \"The formula to convert degrees to radians is radians = degrees * (\u03c0 / 180).\"\n    },\n    {\n      \"description\": \"Handle both positive and negative degree values.\",\n      \"details\": \"Ensure the function can accept any float or integer value, whether positive or negative.\"\n    },\n    {\n      \"description\": \"Implement the function to perform the conversion.\",\n      \"details\": \"Write a Python function that takes a degree value as input and returns the corresponding radian value.\"\n    },\n    {\n      \"description\": \"Test the function with example values.\",\n      \"details\": \"Verify the function with the example provided: radian_degree(90) should return 1.5707963267948966.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Define a function named 'radian_degree' that accepts one parameter for the degree value.\",\n    \"Inside the function, use the conversion formula to calculate the radian value.\",\n    \"Return the calculated radian value from the function.\",\n    \"Test the function with various inputs, including the example provided, to ensure it handles both positive and negative values correctly.\"\n  ]\n}\n```", "Round_0": {"code": "import math\n\ndef radian_degree(degrees):\n    return degrees * (math.pi / 180)\n\n# Example usage\nprint(radian_degree(90))  # Output: 1.5707963267948966\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Understand the mathematical formula for converting degrees to radians.\",\n      \"details\": \"The formula to convert degrees to radians is radians = degrees * (\u03c0 / 180).\"\n    },\n    {\n      \"description\": \"Handle both positive and negative degree values.\",\n      \"details\": \"Ensure that the function can accept any float or integer value, whether positive or negative.\"\n    },\n    {\n      \"description\": \"Implement the function to perform the conversion.\",\n      \"details\": \"Write a Python function that takes a degree value as input and returns the corresponding radian value.\"\n    },\n    {\n      \"description\": \"Test the function with example values.\",\n      \"details\": \"Verify the function with the provided example: radian_degree(90) should return 1.5707963267948966.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Define a function named 'radian_degree' that accepts one parameter for the degree value.\",\n    \"Inside the function, apply the conversion formula: radians = degrees * (\u03c0 / 180).\",\n    \"Return the calculated radian value.\",\n    \"Test the function with various inputs, including the example provided, to ensure it handles both positive and negative values correctly.\"\n  ]\n}\n```", "Round_0": {"code": "import math\n\ndef radian_degree(degrees):\n    radians = degrees * (math.pi / 180)\n    return radians\n\n# Example test\nprint(radian_degree(90))  # Output should be 1.5707963267948966\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    \"Understand the mathematical formula for converting degrees to radians.\",\n    \"Ensure the function can handle both positive and negative degree values.\",\n    \"Implement the function to perform the conversion.\",\n    \"Test the function with example inputs to verify correctness.\"\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Research\",\n      \"description\": \"Review the formula for converting degrees to radians, which is radians = degrees * (\u03c0 / 180).\"\n    },\n    {\n      \"step\": \"Function Definition\",\n      \"description\": \"Define a function named 'radian_degree' that takes a single argument representing degrees.\"\n    },\n    {\n      \"step\": \"Conversion Logic\",\n      \"description\": \"Within the function, apply the conversion formula to convert the input degree value to radians.\"\n    },\n    {\n      \"step\": \"Handle Input\",\n      \"description\": \"Ensure the function can process both positive and negative degree values without any additional handling, as the formula inherently supports this.\"\n    },\n    {\n      \"step\": \"Testing\",\n      \"description\": \"Test the function with various inputs, including the example provided (90 degrees), to ensure it returns the correct radian value.\"\n    }\n  ]\n}\n```", "Round_0": {"code": "import math\n\ndef radian_degree(degrees):\n    return degrees * (math.pi / 180)\n\n# Example usage\nprint(radian_degree(90))  # Output: 1.5707963267948966\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Understand the mathematical formula for converting degrees to radians.\",\n      \"details\": \"The formula to convert degrees to radians is radians = degrees * (\u03c0 / 180).\"\n    },\n    {\n      \"description\": \"Handle both positive and negative degree values.\",\n      \"details\": \"Ensure that the function can accept any real number as input and correctly apply the conversion formula.\"\n    },\n    {\n      \"description\": \"Implement the function with the correct signature.\",\n      \"details\": \"The function should be named 'radian_degree' and take a single argument representing degrees.\"\n    },\n    {\n      \"description\": \"Test the function with example values.\",\n      \"details\": \"Verify that the function returns the correct radian value for given degree inputs, such as 90 degrees.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Define the function 'radian_degree' with one parameter for the degree input.\",\n    \"Inside the function, apply the conversion formula: radians = degrees * (\u03c0 / 180).\",\n    \"Return the calculated radian value.\",\n    \"Test the function with various inputs, including positive and negative degrees, to ensure accuracy.\"\n  ]\n}\n```", "Round_0": {"code": "import math\n\ndef radian_degree(degrees):\n    radians = degrees * (math.pi / 180)\n    return radians\n\n# Example test\nprint(radian_degree(90))  # Output: 1.5707963267948966\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Understand the mathematical formula for converting degrees to radians.\",\n      \"details\": \"The formula to convert degrees to radians is radians = degrees * (\u03c0 / 180).\"\n    },\n    {\n      \"description\": \"Handle both positive and negative degree values.\",\n      \"details\": \"Ensure the function can accept any real number as input, including negative values.\"\n    },\n    {\n      \"description\": \"Implement the function to perform the conversion.\",\n      \"details\": \"Write a Python function that takes a degree value as input and returns the corresponding radian value.\"\n    },\n    {\n      \"description\": \"Test the function with example values.\",\n      \"details\": \"Verify the function with given example: radian_degree(90) should return 1.5707963267948966.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Define a function named 'radian_degree' that accepts one parameter for the degree value.\",\n    \"Inside the function, use the conversion formula to calculate the radian value.\",\n    \"Return the calculated radian value from the function.\",\n    \"Test the function with various inputs, including the example provided, to ensure it handles both positive and negative degrees correctly.\"\n  ]\n}\n```", "Round_0": {"code": "import math\n\ndef radian_degree(degrees):\n    radians = degrees * (math.pi / 180)\n    return radians\n\n# Example test\nprint(radian_degree(90))  # Output should be 1.5707963267948966\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}], "test": ["def check(radian_degree):\n\tassert radian_degree(90)==1.5707963267948966", "def check(radian_degree):\n\tassert radian_degree(60)==1.0471975511965976", "def check(radian_degree):\n\tassert radian_degree(120)==2.0943951023931953", "def check(radian_degree):\n\tassert radian_degree(94) == 1.6406094968746698", "def check(radian_degree):\n\tassert radian_degree(88) == 1.53588974175501", "def check(radian_degree):\n\tassert radian_degree(89) == 1.5533430342749532", "def check(radian_degree):\n\tassert radian_degree(88) == 1.53588974175501", "def check(radian_degree):\n\tassert radian_degree(92) == 1.6057029118347832", "def check(radian_degree):\n\tassert radian_degree(86) == 1.5009831567151235", "def check(radian_degree):\n\tassert radian_degree(90) == 1.5707963267948966", "def check(radian_degree):\n\tassert radian_degree(91) == 1.5882496193148399", "def check(radian_degree):\n\tassert radian_degree(89) == 1.5533430342749532", "def check(radian_degree):\n\tassert radian_degree(87) == 1.5184364492350666", "def check(radian_degree):\n\tassert radian_degree(87) == 1.5184364492350666", "def check(radian_degree):\n\tassert radian_degree(85) == 1.4835298641951802", "def check(radian_degree):\n\tassert radian_degree(86) == 1.5009831567151235", "def check(radian_degree):\n\tassert radian_degree(94) == 1.6406094968746698", "def check(radian_degree):\n\tassert radian_degree(90) == 1.5707963267948966", "def check(radian_degree):\n\tassert radian_degree(89) == 1.5533430342749532", "def check(radian_degree):\n\tassert radian_degree(95) == 1.6580627893946132", "def check(radian_degree):\n\tassert radian_degree(86) == 1.5009831567151235", "def check(radian_degree):\n\tassert radian_degree(94) == 1.6406094968746698", "def check(radian_degree):\n\tassert radian_degree(85) == 1.4835298641951802", "def check(radian_degree):\n\tassert radian_degree(87) == 1.5184364492350666", "def check(radian_degree):\n\tassert radian_degree(87) == 1.5184364492350666", "def check(radian_degree):\n\tassert radian_degree(94) == 1.6406094968746698", "def check(radian_degree):\n\tassert radian_degree(89) == 1.5533430342749532", "def check(radian_degree):\n\tassert radian_degree(86) == 1.5009831567151235", "def check(radian_degree):\n\tassert radian_degree(93) == 1.6231562043547265", "def check(radian_degree):\n\tassert radian_degree(95) == 1.6580627893946132", "def check(radian_degree):\n\tassert radian_degree(90) == 1.5707963267948966", "def check(radian_degree):\n\tassert radian_degree(95) == 1.6580627893946132", "def check(radian_degree):\n\tassert radian_degree(87) == 1.5184364492350666", "def check(radian_degree):\n\tassert radian_degree(91) == 1.5882496193148399", "def check(radian_degree):\n\tassert radian_degree(85) == 1.4835298641951802", "def check(radian_degree):\n\tassert radian_degree(93) == 1.6231562043547265", "def check(radian_degree):\n\tassert radian_degree(63) == 1.0995574287564276", "def check(radian_degree):\n\tassert radian_degree(64) == 1.117010721276371", "def check(radian_degree):\n\tassert radian_degree(58) == 1.0122909661567112", "def check(radian_degree):\n\tassert radian_degree(62) == 1.0821041362364843", "def check(radian_degree):\n\tassert radian_degree(55) == 0.9599310885968813", "def check(radian_degree):\n\tassert radian_degree(60) == 1.0471975511965976", "def check(radian_degree):\n\tassert radian_degree(57) == 0.9948376736367679", "def check(radian_degree):\n\tassert radian_degree(60) == 1.0471975511965976", "def check(radian_degree):\n\tassert radian_degree(63) == 1.0995574287564276", "def check(radian_degree):\n\tassert radian_degree(56) == 0.9773843811168246", "def check(radian_degree):\n\tassert radian_degree(60) == 1.0471975511965976", "def check(radian_degree):\n\tassert radian_degree(56) == 0.9773843811168246", "def check(radian_degree):\n\tassert radian_degree(60) == 1.0471975511965976", "def check(radian_degree):\n\tassert radian_degree(63) == 1.0995574287564276", "def check(radian_degree):\n\tassert radian_degree(60) == 1.0471975511965976", "def check(radian_degree):\n\tassert radian_degree(59) == 1.0297442586766545", "def check(radian_degree):\n\tassert radian_degree(58) == 1.0122909661567112", "def check(radian_degree):\n\tassert radian_degree(65) == 1.1344640137963142", "def check(radian_degree):\n\tassert radian_degree(65) == 1.1344640137963142", "def check(radian_degree):\n\tassert radian_degree(65) == 1.1344640137963142", "def check(radian_degree):\n\tassert radian_degree(60) == 1.0471975511965976", "def check(radian_degree):\n\tassert radian_degree(61) == 1.064650843716541", "def check(radian_degree):\n\tassert radian_degree(64) == 1.117010721276371", "def check(radian_degree):\n\tassert radian_degree(65) == 1.1344640137963142", "def check(radian_degree):\n\tassert radian_degree(60) == 1.0471975511965976", "def check(radian_degree):\n\tassert radian_degree(57) == 0.9948376736367679", "def check(radian_degree):\n\tassert radian_degree(61) == 1.064650843716541", "def check(radian_degree):\n\tassert radian_degree(57) == 0.9948376736367679", "def check(radian_degree):\n\tassert radian_degree(55) == 0.9599310885968813", "def check(radian_degree):\n\tassert radian_degree(58) == 1.0122909661567112", "def check(radian_degree):\n\tassert radian_degree(60) == 1.0471975511965976", "def check(radian_degree):\n\tassert radian_degree(58) == 1.0122909661567112", "def check(radian_degree):\n\tassert radian_degree(58) == 1.0122909661567112", "def check(radian_degree):\n\tassert radian_degree(115) == 2.007128639793479", "def check(radian_degree):\n\tassert radian_degree(115) == 2.007128639793479", "def check(radian_degree):\n\tassert radian_degree(123) == 2.1467549799530254", "def check(radian_degree):\n\tassert radian_degree(118) == 2.059488517353309", "def check(radian_degree):\n\tassert radian_degree(122) == 2.129301687433082", "def check(radian_degree):\n\tassert radian_degree(121) == 2.111848394913139", "def check(radian_degree):\n\tassert radian_degree(120) == 2.0943951023931953", "def check(radian_degree):\n\tassert radian_degree(125) == 2.181661564992912", "def check(radian_degree):\n\tassert radian_degree(120) == 2.0943951023931953", "def check(radian_degree):\n\tassert radian_degree(118) == 2.059488517353309", "def check(radian_degree):\n\tassert radian_degree(124) == 2.1642082724729685", "def check(radian_degree):\n\tassert radian_degree(117) == 2.0420352248333655", "def check(radian_degree):\n\tassert radian_degree(120) == 2.0943951023931953", "def check(radian_degree):\n\tassert radian_degree(124) == 2.1642082724729685", "def check(radian_degree):\n\tassert radian_degree(116) == 2.0245819323134224", "def check(radian_degree):\n\tassert radian_degree(123) == 2.1467549799530254", "def check(radian_degree):\n\tassert radian_degree(119) == 2.076941809873252", "def check(radian_degree):\n\tassert radian_degree(118) == 2.059488517353309", "def check(radian_degree):\n\tassert radian_degree(119) == 2.076941809873252", "def check(radian_degree):\n\tassert radian_degree(121) == 2.111848394913139", "def check(radian_degree):\n\tassert radian_degree(121) == 2.111848394913139", "def check(radian_degree):\n\tassert radian_degree(124) == 2.1642082724729685", "def check(radian_degree):\n\tassert radian_degree(118) == 2.059488517353309", "def check(radian_degree):\n\tassert radian_degree(122) == 2.129301687433082", "def check(radian_degree):\n\tassert radian_degree(121) == 2.111848394913139", "def check(radian_degree):\n\tassert radian_degree(117) == 2.0420352248333655", "def check(radian_degree):\n\tassert radian_degree(116) == 2.0245819323134224", "def check(radian_degree):\n\tassert radian_degree(123) == 2.1467549799530254", "def check(radian_degree):\n\tassert radian_degree(115) == 2.007128639793479", "def check(radian_degree):\n\tassert radian_degree(117) == 2.0420352248333655", "def check(radian_degree):\n\tassert radian_degree(119) == 2.076941809873252", "def check(radian_degree):\n\tassert radian_degree(115) == 2.007128639793479", "def check(radian_degree):\n\tassert radian_degree(123) == 2.1467549799530254"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 102, 102, 102, 102, 102], "passed": true, "pass": true, "pass_num": 10, "round": 773, "mutate_method": "expand_one2two", "save_node": false, "parent_index": 678}
