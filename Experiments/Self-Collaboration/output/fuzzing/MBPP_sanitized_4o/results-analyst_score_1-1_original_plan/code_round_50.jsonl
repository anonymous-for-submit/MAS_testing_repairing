{"source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 118, "prompt": "Write a function to convert a string to a list of strings split on the space character. Ensure the function handles multiple spaces correctly without producing empty strings in the list.", "code": "def string_to_list(string): \n    lst = list(string.split(\" \")) \n    return lst", "test_imports": [], "test_list": ["assert string_to_list(\"python programming\")==['python','programming']", "assert string_to_list(\"lists tuples strings\")==['lists','tuples','strings']", "assert string_to_list(\"write a program\")==['write','a','program']", "assert string_to_list(\"cisjjqxcey baawfimfgkrd\") == ['cisjjqxcey', 'baawfimfgkrd']", "assert string_to_list(\"isfkh ldsbndxsjxaqfuhy\") == ['isfkh', 'ldsbndxsjxaqfuhy']", "assert string_to_list(\"hrgud vhckxvgyjtlhjz\") == ['hrgud', 'vhckxvgyjtlhjz']", "assert string_to_list(\"qfwxkikvnzhymkwntqictmm\") == ['qfwxkikvnzhymkwntqictmm']", "assert string_to_list(\"xnah mgufvjjumxn\") == ['xnah', 'mgufvjjumxn']", "assert string_to_list(\"bmegkba yhecgvfzhye\") == ['bmegkba', 'yhecgvfzhye']", "assert string_to_list(\"zopcvaeutdwhffvpwewxq\") == ['zopcvaeutdwhffvpwewxq']", "assert string_to_list(\"vwykco rgrikwlsnly\") == ['vwykco', 'rgrikwlsnly']", "assert string_to_list(\"hjfqeifykx lamwqij\") == ['hjfqeifykx', 'lamwqij']", "assert string_to_list(\"ghfyk yphhgiunav\") == ['ghfyk', 'yphhgiunav']", "assert string_to_list(\" guiolhudbohi dwbr\") == ['', 'guiolhudbohi', 'dwbr']", "assert string_to_list(\"lzsfulxqo jxnfij\") == ['lzsfulxqo', 'jxnfij']", "assert string_to_list(\"gzbninfzwvvldji\") == ['gzbninfzwvvldji']", "assert string_to_list(\"cevnbmgrahdovualuqqbehf\") == ['cevnbmgrahdovualuqqbehf']", "assert string_to_list(\"sal t qchxlffwwlbq \") == ['sal', 't', 'qchxlffwwlbq', '']", "assert string_to_list(\"pktrchshtdl ism\") == ['pktrchshtdl', 'ism']", "assert string_to_list(\"jfo dbadrmefk iylrckva\") == ['jfo', 'dbadrmefk', 'iylrckva']", "assert string_to_list(\"jtt ahhnownduyobcbdlvi\") == ['jtt', 'ahhnownduyobcbdlvi']", "assert string_to_list(\"rgbcyfumfbizvsmplmjjvngp\") == ['rgbcyfumfbizvsmplmjjvngp']", "assert string_to_list(\"acqkjdlpj fctxzvi\") == ['acqkjdlpj', 'fctxzvi']", "assert string_to_list(\"vdcibapqnwxuxrgnfigfidr\") == ['vdcibapqnwxuxrgnfigfidr']", "assert string_to_list(\"gcfrctuspho xnuvg\") == ['gcfrctuspho', 'xnuvg']", "assert string_to_list(\"yjxmw mfudiutb hkl\") == ['yjxmw', 'mfudiutb', 'hkl']", "assert string_to_list(\"q hujjubhudrqnflzpnknd\") == ['q', 'hujjubhudrqnflzpnknd']", "assert string_to_list(\"hdixrzjjwqohvzzahz\") == ['hdixrzjjwqohvzzahz']", "assert string_to_list(\"zdmivflvsvyltjcielwyv\") == ['zdmivflvsvyltjcielwyv']", "assert string_to_list(\"nqdlkmyoameggza\") == ['nqdlkmyoameggza']", "assert string_to_list(\"pfzbllbiwincbheehtomatc\") == ['pfzbllbiwincbheehtomatc']", "assert string_to_list(\"lnefesdqctltydvnpezva\") == ['lnefesdqctltydvnpezva']", "assert string_to_list(\"oaixkfcfj  lyax\") == ['oaixkfcfj', '', 'lyax']", "assert string_to_list(\"krrjyictpzflfpyzaf\") == ['krrjyictpzflfpyzaf']", "assert string_to_list(\"pagup pbizbigmsjnbhpskm\") == ['pagup', 'pbizbigmsjnbhpskm']", "assert string_to_list(\"oroibuktegdchgmkv\") == ['oroibuktegdchgmkv']", "assert string_to_list(\"efvospkdmhlbdjieoofij\") == ['efvospkdmhlbdjieoofij']", "assert string_to_list(\"zhacsydpwri jppjlpek\") == ['zhacsydpwri', 'jppjlpek']", "assert string_to_list(\"hspslthryurxqbq\") == ['hspslthryurxqbq']", "assert string_to_list(\"dlehypzqpvxittayziua\") == ['dlehypzqpvxittayziua']", "assert string_to_list(\"pwaolxfagueqvdfxu\") == ['pwaolxfagueqvdfxu']", "assert string_to_list(\"jcsfmxphwa wvygxjoyj\") == ['jcsfmxphwa', 'wvygxjoyj']", "assert string_to_list(\"cimyotgj pwrcbntfer\") == ['cimyotgj', 'pwrcbntfer']", "assert string_to_list(\"uxbofvfw qjlofc\") == ['uxbofvfw', 'qjlofc']", "assert string_to_list(\"nifcjtgeoqtmvfiok\") == ['nifcjtgeoqtmvfiok']", "assert string_to_list(\"vslthpixtfden  cmrsg\") == ['vslthpixtfden', '', 'cmrsg']", "assert string_to_list(\"hxhygxavhhgwxruy\") == ['hxhygxavhhgwxruy']", "assert string_to_list(\"to nwxevudslvrwphpwjhvz\") == ['to', 'nwxevudslvrwphpwjhvz']", "assert string_to_list(\"rekvzpdmgdhfflmrk fmxv\") == ['rekvzpdmgdhfflmrk', 'fmxv']", "assert string_to_list(\"enieoxxkgkxiwofrukyzbc\") == ['enieoxxkgkxiwofrukyzbc']", "assert string_to_list(\"fnxqpdpwvdqueyu\") == ['fnxqpdpwvdqueyu']", "assert string_to_list(\"hqwgcbjqmdxqkgzngnduuc\") == ['hqwgcbjqmdxqkgzngnduuc']", "assert string_to_list(\"zuqtuehlvcugxqzh\") == ['zuqtuehlvcugxqzh']", "assert string_to_list(\"xcuniqsxkyodapwfczzue\") == ['xcuniqsxkyodapwfczzue']", "assert string_to_list(\"ktuoulzgecnjetvssanmxcxs\") == ['ktuoulzgecnjetvssanmxcxs']", "assert string_to_list(\"vxrozhfoicjwdlhkttslnk\") == ['vxrozhfoicjwdlhkttslnk']", "assert string_to_list(\"lqhjmwnevkmftyjfmrn nzeq\") == ['lqhjmwnevkmftyjfmrn', 'nzeq']", "assert string_to_list(\"xpyxydfvbtvwfvr\") == ['xpyxydfvbtvwfvr']", "assert string_to_list(\"esvxixwpe fytflxs\") == ['esvxixwpe', 'fytflxs']", "assert string_to_list(\"ooxpvkmimfmslsv\") == ['ooxpvkmimfmslsv']", "assert string_to_list(\"etrrvmjjipcqgvfkc\") == ['etrrvmjjipcqgvfkc']", "assert string_to_list(\"fijfkpuaehflizloqedxfsy\") == ['fijfkpuaehflizloqedxfsy']", "assert string_to_list(\"bgy jpvbqickuecbep\") == ['bgy', 'jpvbqickuecbep']", "assert string_to_list(\"vfrhko fbdczguj hmzl\") == ['vfrhko', 'fbdczguj', 'hmzl']", "assert string_to_list(\"gpyc dbwwixgzpl\") == ['gpyc', 'dbwwixgzpl']", "assert string_to_list(\"xdgblirazralikoa\") == ['xdgblirazralikoa']", "assert string_to_list(\"npdbulhyrw zldzyxkjrnb\") == ['npdbulhyrw', 'zldzyxkjrnb']", "assert string_to_list(\"kitoqdzhssxyppiwgiadrazo\") == ['kitoqdzhssxyppiwgiadrazo']", "assert string_to_list(\"dwu  okzbfrxnkgq\") == ['dwu', '', 'okzbfrxnkgq']", "assert string_to_list(\"et xpnnvwisnbwmxt\") == ['et', 'xpnnvwisnbwmxt']", "assert string_to_list(\"iyshjgmopwaua jyqlyae\") == ['iyshjgmopwaua', 'jyqlyae']", "assert string_to_list(\"zs czycacjrsrnjysk\") == ['zs', 'czycacjrsrnjysk']", "assert string_to_list(\"gqrmqhwevnxpugd\") == ['gqrmqhwevnxpugd']", "assert string_to_list(\"hijmncyvmblcmxvcxvwt\") == ['hijmncyvmblcmxvcxvwt']", "assert string_to_list(\"vb rml d wue\") == ['vb', 'rml', 'd', 'wue']", "assert string_to_list(\"xj bifcaxgormmg\") == ['xj', 'bifcaxgormmg']", "assert string_to_list(\"npetqtlljpuglidkgkw\") == ['npetqtlljpuglidkgkw']", "assert string_to_list(\" etskmlmtqxjmttuq w\") == ['', 'etskmlmtqxjmttuq', 'w']", "assert string_to_list(\"jhrpluvrewhecipok\") == ['jhrpluvrewhecipok']", "assert string_to_list(\"unfsfdghmyglwaexmm\") == ['unfsfdghmyglwaexmm']", "assert string_to_list(\"wdmzvqtji nctmouiczu\") == ['wdmzvqtji', 'nctmouiczu']", "assert string_to_list(\"glkxkqdgoxsgy\") == ['glkxkqdgoxsgy']", "assert string_to_list(\"mubsfdtspeclyciiesd\") == ['mubsfdtspeclyciiesd']", "assert string_to_list(\"tgiqayzeewugiqwlmsdn\") == ['tgiqayzeewugiqwlmsdn']", "assert string_to_list(\"d ppjrvnbnqmvsqdh\") == ['d', 'ppjrvnbnqmvsqdh']", "assert string_to_list(\"ru apass opfat\") == ['ru', 'apass', 'opfat']", "assert string_to_list(\"cqdkctctvprob\") == ['cqdkctctvprob']", "assert string_to_list(\"pgflj criggkfhdfjtgy\") == ['pgflj', 'criggkfhdfjtgy']", "assert string_to_list(\"xbjapimhjaqafor\") == ['xbjapimhjaqafor']", "assert string_to_list(\"nnngmgdxqiwvovl v g\") == ['nnngmgdxqiwvovl', 'v', 'g']", "assert string_to_list(\"yrvludlmgghe ghd\") == ['yrvludlmgghe', 'ghd']", "assert string_to_list(\"tfhfmglqt stw\") == ['tfhfmglqt', 'stw']", "assert string_to_list(\"l hdjmwqdrwqsyyqh\") == ['l', 'hdjmwqdrwqsyyqh']", "assert string_to_list(\"pagctjfdlayyzrpbwp\") == ['pagctjfdlayyzrpbwp']", "assert string_to_list(\"amrflplpqxwpdsdwmdv\") == ['amrflplpqxwpdsdwmdv']", "assert string_to_list(\"ilmmkdkqfnvjuf\") == ['ilmmkdkqfnvjuf']", "assert string_to_list(\"uftuqubbhv rix\") == ['uftuqubbhv', 'rix']", "assert string_to_list(\" uv ieztyfquvnlu\") == ['', 'uv', 'ieztyfquvnlu']", "assert string_to_list(\"imsnyracatkxvr\") == ['imsnyracatkxvr']", "assert string_to_list(\"mcqle msbkr ktrn\") == ['mcqle', 'msbkr', 'ktrn']", "assert string_to_list(\"zlshhwscfclj \") == ['zlshhwscfclj', '']", "assert string_to_list(\"vuxsgfdygqfosl\") == ['vuxsgfdygqfosl']"], "entry_point": "string_to_list", "completion": "from typing import *\ndef string_to_list(input_string):\n    # Split the string on spaces and filter out any empty strings\n    return [word for word in input_string.split(' ') if word]\n\n# Example usage\nprint(string_to_list(\"python programming\"))  # Output: ['python', 'programming']\n", "completions": ["from typing import *\ndef string_to_list(input_string):\n    # Split the string on spaces and filter out any empty strings\n    return [word for word in input_string.split() if word]\n\n# Example usage\nprint(string_to_list(\"python programming\"))  # Output: ['python', 'programming']\n", "from typing import *\ndef string_to_list(input_string):\n    # Split the string on spaces and filter out empty strings\n    return [word for word in input_string.split() if word]\n\n# Example usage\nprint(string_to_list(\"python programming\"))  # Output: ['python', 'programming']\n", "from typing import *\ndef string_to_list(input_string):\n    # Split the string on spaces and filter out any empty strings\n    return [word for word in input_string.split() if word]\n\n# Example usage\nprint(string_to_list(\"python programming\"))  # Output: ['python', 'programming']\n", "from typing import *\ndef string_to_list(input_string):\n    # Split the string on spaces and filter out any empty strings\n    return [word for word in input_string.split() if word]\n\n# Example usage\nprint(string_to_list(\"python programming\"))  # Output: ['python', 'programming']\n", "from typing import *\ndef string_to_list(input_string):\n    # Split the string on spaces and filter out any empty strings\n    return [word for word in input_string.split(' ') if word]\n\n# Example usage\nprint(string_to_list(\"python programming\"))  # Output: ['python', 'programming']\n", "from typing import *\ndef string_to_list(input_string):\n    # Split the string on spaces and filter out any empty strings\n    return [word for word in input_string.split() if word]\n\n# Example usage\nprint(string_to_list(\"python programming\"))  # Output: ['python', 'programming']\n", "from typing import *\ndef string_to_list(input_string):\n    # Split the string on spaces and filter out any empty strings\n    return [word for word in input_string.split() if word]\n\n# Example usage\nprint(string_to_list(\"python programming\"))  # Output: ['python', 'programming']\n", "from typing import *\ndef string_to_list(input_string):\n    # Split the input string on spaces and filter out any empty strings\n    return [word for word in input_string.split() if word]\n\n# Example usage\nprint(string_to_list(\"python programming\"))  # Output: ['python', 'programming']\n", "from typing import *\ndef string_to_list(input_string):\n    # Split the string on spaces and filter out any empty strings\n    return [word for word in input_string.split(' ') if word]\n\n# Example usage\nprint(string_to_list(\"python programming\"))  # Output: ['python', 'programming']\n", "from typing import *\ndef string_to_list(input_string):\n    # Split the string on spaces and filter out any empty strings\n    return [word for word in input_string.split(' ') if word]\n\n# Example usage\nprint(string_to_list(\"python programming\"))  # Output: ['python', 'programming']\n"], "session_history": {"plan": "```json\n{\n  \"decomposed_subproblems\": [\n    \"Identify the input and output of the function.\",\n    \"Determine how to handle multiple spaces in the input string.\",\n    \"Ensure the function does not produce empty strings in the output list.\"\n  ],\n  \"high_level_plan\": [\n    \"Define a function named 'string_to_list' that takes a single argument, a string.\",\n    \"Use a method to split the string on spaces, ensuring multiple spaces are handled correctly.\",\n    \"Filter the resulting list to remove any empty strings.\",\n    \"Return the filtered list as the output.\"\n  ]\n}\n```", "Round_0": {"code": "def string_to_list(input_string):\n    # Split the string on spaces and filter out any empty strings\n    return [word for word in input_string.split(' ') if word]\n\n# Example usage\nprint(string_to_list(\"python programming\"))  # Output: ['python', 'programming']\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, "session_historys": [{"plan": "```json\n{\n  \"decomposed_subproblems\": [\n    \"Identify the input and output of the function.\",\n    \"Determine how to handle multiple spaces in the input string.\",\n    \"Ensure the function does not produce empty strings in the output list.\"\n  ],\n  \"high_level_plan\": [\n    \"Define a function named 'string_to_list' that takes a single argument, a string.\",\n    \"Use a method to split the string on spaces while ignoring multiple spaces.\",\n    \"Filter out any empty strings from the resulting list.\",\n    \"Return the list of non-empty strings.\"\n  ]\n}\n```", "Round_0": {"code": "def string_to_list(input_string):\n    # Split the string on spaces and filter out any empty strings\n    return [word for word in input_string.split() if word]\n\n# Example usage\nprint(string_to_list(\"python programming\"))  # Output: ['python', 'programming']\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"decomposed_subproblems\": [\n    \"Identify the input and output of the function.\",\n    \"Determine how to handle multiple spaces in the input string.\",\n    \"Ensure the function does not produce empty strings in the output list.\"\n  ],\n  \"high_level_plan\": [\n    \"Define the function with a single parameter for the input string.\",\n    \"Use a method to split the string on spaces while ignoring multiple spaces.\",\n    \"Filter out any empty strings from the resulting list.\",\n    \"Return the list of non-empty strings.\"\n  ]\n}\n```", "Round_0": {"code": "def string_to_list(input_string):\n    # Split the string on spaces and filter out empty strings\n    return [word for word in input_string.split() if word]\n\n# Example usage\nprint(string_to_list(\"python programming\"))  # Output: ['python', 'programming']\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"decomposed_subproblems\": [\n    \"Identify the input and output of the function.\",\n    \"Determine how to handle multiple spaces in the input string.\",\n    \"Ensure the function does not produce empty strings in the output list.\"\n  ],\n  \"high_level_plan\": [\n    \"Define the function with a single parameter for the input string.\",\n    \"Use a method to split the string on spaces while ignoring multiple spaces.\",\n    \"Filter out any empty strings from the resulting list.\",\n    \"Return the list of non-empty strings.\"\n  ]\n}\n```", "Round_0": {"code": "def string_to_list(input_string):\n    # Split the string on spaces and filter out any empty strings\n    return [word for word in input_string.split() if word]\n\n# Example usage\nprint(string_to_list(\"python programming\"))  # Output: ['python', 'programming']\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    \"Identify the input and output of the function.\",\n    \"Determine how to handle multiple spaces in the input string.\",\n    \"Ensure that the function does not produce empty strings in the output list.\"\n  ],\n  \"high_level_plan\": [\n    \"Define a function named 'string_to_list' that takes a single parameter, a string.\",\n    \"Use a method to split the string on spaces while ignoring multiple spaces.\",\n    \"Filter out any empty strings that may result from splitting.\",\n    \"Return the list of non-empty strings.\"\n  ]\n}\n```", "Round_0": {"code": "def string_to_list(input_string):\n    # Split the string on spaces and filter out any empty strings\n    return [word for word in input_string.split() if word]\n\n# Example usage\nprint(string_to_list(\"python programming\"))  # Output: ['python', 'programming']\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"decomposed_subproblems\": [\n    \"Identify the input and output of the function.\",\n    \"Determine how to handle multiple spaces in the input string.\",\n    \"Ensure the function does not produce empty strings in the output list.\"\n  ],\n  \"high_level_plan\": [\n    \"Define a function named 'string_to_list' that takes a single argument, a string.\",\n    \"Use a method to split the string on spaces, ensuring multiple spaces are handled correctly.\",\n    \"Filter the resulting list to remove any empty strings.\",\n    \"Return the filtered list as the output.\"\n  ]\n}\n```", "Round_0": {"code": "def string_to_list(input_string):\n    # Split the string on spaces and filter out any empty strings\n    return [word for word in input_string.split(' ') if word]\n\n# Example usage\nprint(string_to_list(\"python programming\"))  # Output: ['python', 'programming']\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    \"Identify the input and output of the function.\",\n    \"Determine how to handle multiple spaces in the input string.\",\n    \"Ensure that the function does not produce empty strings in the output list.\"\n  ],\n  \"high_level_plan\": [\n    \"Define a function named 'string_to_list' that takes a single parameter, a string.\",\n    \"Use a method to split the string on spaces while ignoring multiple spaces.\",\n    \"Filter out any empty strings that may result from splitting.\",\n    \"Return the resulting list of strings.\"\n  ]\n}\n```", "Round_0": {"code": "def string_to_list(input_string):\n    # Split the string on spaces and filter out any empty strings\n    return [word for word in input_string.split() if word]\n\n# Example usage\nprint(string_to_list(\"python programming\"))  # Output: ['python', 'programming']\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    \"Identify the input and output of the function.\",\n    \"Determine how to handle multiple spaces in the input string.\",\n    \"Ensure that the function does not produce empty strings in the output list.\"\n  ],\n  \"high_level_plan\": [\n    \"Define a function named 'string_to_list' that takes a single parameter, a string.\",\n    \"Use a method to split the string on spaces while ignoring multiple spaces.\",\n    \"Filter out any empty strings that may result from the split operation.\",\n    \"Return the resulting list of strings.\"\n  ]\n}\n```", "Round_0": {"code": "def string_to_list(input_string):\n    # Split the string on spaces and filter out any empty strings\n    return [word for word in input_string.split() if word]\n\n# Example usage\nprint(string_to_list(\"python programming\"))  # Output: ['python', 'programming']\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    \"Identify the input and output of the function.\",\n    \"Determine how to handle multiple spaces in the input string.\",\n    \"Ensure that the function does not produce empty strings in the output list.\"\n  ],\n  \"high_level_plan\": [\n    \"Define a function named 'string_to_list' that takes a single string as input.\",\n    \"Use a method to split the input string on spaces while ignoring multiple spaces.\",\n    \"Filter out any empty strings that may result from the splitting process.\",\n    \"Return the resulting list of strings.\"\n  ]\n}\n```", "Round_0": {"code": "def string_to_list(input_string):\n    # Split the input string on spaces and filter out any empty strings\n    return [word for word in input_string.split() if word]\n\n# Example usage\nprint(string_to_list(\"python programming\"))  # Output: ['python', 'programming']\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"decomposed_subproblems\": [\n    \"Identify the input and output of the function.\",\n    \"Determine how to handle multiple spaces in the input string.\",\n    \"Ensure the function does not produce empty strings in the output list.\"\n  ],\n  \"high_level_plan\": [\n    \"Define a function named 'string_to_list' that takes a single argument, a string.\",\n    \"Use a method to split the string on spaces, ensuring multiple spaces are handled correctly.\",\n    \"Filter the resulting list to remove any empty strings.\",\n    \"Return the filtered list as the output of the function.\"\n  ]\n}\n```", "Round_0": {"code": "def string_to_list(input_string):\n    # Split the string on spaces and filter out any empty strings\n    return [word for word in input_string.split(' ') if word]\n\n# Example usage\nprint(string_to_list(\"python programming\"))  # Output: ['python', 'programming']\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"decomposed_subproblems\": [\n    \"Identify the input and output of the function.\",\n    \"Determine how to handle multiple spaces in the input string.\",\n    \"Ensure the function does not produce empty strings in the output list.\"\n  ],\n  \"high_level_plan\": [\n    \"Define a function named 'string_to_list' that takes a single argument, a string.\",\n    \"Use a method to split the string on spaces, ensuring multiple spaces are handled correctly.\",\n    \"Filter the resulting list to remove any empty strings.\",\n    \"Return the filtered list as the output.\"\n  ]\n}\n```", "Round_0": {"code": "def string_to_list(input_string):\n    # Split the string on spaces and filter out any empty strings\n    return [word for word in input_string.split(' ') if word]\n\n# Example usage\nprint(string_to_list(\"python programming\"))  # Output: ['python', 'programming']\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}], "test": ["def check(string_to_list):\n\tassert string_to_list(\"python programming\")==['python','programming']", "def check(string_to_list):\n\tassert string_to_list(\"lists tuples strings\")==['lists','tuples','strings']", "def check(string_to_list):\n\tassert string_to_list(\"write a program\")==['write','a','program']", "def check(string_to_list):\n\tassert string_to_list(\"cisjjqxcey baawfimfgkrd\") == ['cisjjqxcey', 'baawfimfgkrd']", "def check(string_to_list):\n\tassert string_to_list(\"isfkh ldsbndxsjxaqfuhy\") == ['isfkh', 'ldsbndxsjxaqfuhy']", "def check(string_to_list):\n\tassert string_to_list(\"hrgud vhckxvgyjtlhjz\") == ['hrgud', 'vhckxvgyjtlhjz']", "def check(string_to_list):\n\tassert string_to_list(\"qfwxkikvnzhymkwntqictmm\") == ['qfwxkikvnzhymkwntqictmm']", "def check(string_to_list):\n\tassert string_to_list(\"xnah mgufvjjumxn\") == ['xnah', 'mgufvjjumxn']", "def check(string_to_list):\n\tassert string_to_list(\"bmegkba yhecgvfzhye\") == ['bmegkba', 'yhecgvfzhye']", "def check(string_to_list):\n\tassert string_to_list(\"zopcvaeutdwhffvpwewxq\") == ['zopcvaeutdwhffvpwewxq']", "def check(string_to_list):\n\tassert string_to_list(\"vwykco rgrikwlsnly\") == ['vwykco', 'rgrikwlsnly']", "def check(string_to_list):\n\tassert string_to_list(\"hjfqeifykx lamwqij\") == ['hjfqeifykx', 'lamwqij']", "def check(string_to_list):\n\tassert string_to_list(\"ghfyk yphhgiunav\") == ['ghfyk', 'yphhgiunav']", "def check(string_to_list):\n\tassert string_to_list(\" guiolhudbohi dwbr\") == ['', 'guiolhudbohi', 'dwbr']", "def check(string_to_list):\n\tassert string_to_list(\"lzsfulxqo jxnfij\") == ['lzsfulxqo', 'jxnfij']", "def check(string_to_list):\n\tassert string_to_list(\"gzbninfzwvvldji\") == ['gzbninfzwvvldji']", "def check(string_to_list):\n\tassert string_to_list(\"cevnbmgrahdovualuqqbehf\") == ['cevnbmgrahdovualuqqbehf']", "def check(string_to_list):\n\tassert string_to_list(\"sal t qchxlffwwlbq \") == ['sal', 't', 'qchxlffwwlbq', '']", "def check(string_to_list):\n\tassert string_to_list(\"pktrchshtdl ism\") == ['pktrchshtdl', 'ism']", "def check(string_to_list):\n\tassert string_to_list(\"jfo dbadrmefk iylrckva\") == ['jfo', 'dbadrmefk', 'iylrckva']", "def check(string_to_list):\n\tassert string_to_list(\"jtt ahhnownduyobcbdlvi\") == ['jtt', 'ahhnownduyobcbdlvi']", "def check(string_to_list):\n\tassert string_to_list(\"rgbcyfumfbizvsmplmjjvngp\") == ['rgbcyfumfbizvsmplmjjvngp']", "def check(string_to_list):\n\tassert string_to_list(\"acqkjdlpj fctxzvi\") == ['acqkjdlpj', 'fctxzvi']", "def check(string_to_list):\n\tassert string_to_list(\"vdcibapqnwxuxrgnfigfidr\") == ['vdcibapqnwxuxrgnfigfidr']", "def check(string_to_list):\n\tassert string_to_list(\"gcfrctuspho xnuvg\") == ['gcfrctuspho', 'xnuvg']", "def check(string_to_list):\n\tassert string_to_list(\"yjxmw mfudiutb hkl\") == ['yjxmw', 'mfudiutb', 'hkl']", "def check(string_to_list):\n\tassert string_to_list(\"q hujjubhudrqnflzpnknd\") == ['q', 'hujjubhudrqnflzpnknd']", "def check(string_to_list):\n\tassert string_to_list(\"hdixrzjjwqohvzzahz\") == ['hdixrzjjwqohvzzahz']", "def check(string_to_list):\n\tassert string_to_list(\"zdmivflvsvyltjcielwyv\") == ['zdmivflvsvyltjcielwyv']", "def check(string_to_list):\n\tassert string_to_list(\"nqdlkmyoameggza\") == ['nqdlkmyoameggza']", "def check(string_to_list):\n\tassert string_to_list(\"pfzbllbiwincbheehtomatc\") == ['pfzbllbiwincbheehtomatc']", "def check(string_to_list):\n\tassert string_to_list(\"lnefesdqctltydvnpezva\") == ['lnefesdqctltydvnpezva']", "def check(string_to_list):\n\tassert string_to_list(\"oaixkfcfj  lyax\") == ['oaixkfcfj', '', 'lyax']", "def check(string_to_list):\n\tassert string_to_list(\"krrjyictpzflfpyzaf\") == ['krrjyictpzflfpyzaf']", "def check(string_to_list):\n\tassert string_to_list(\"pagup pbizbigmsjnbhpskm\") == ['pagup', 'pbizbigmsjnbhpskm']", "def check(string_to_list):\n\tassert string_to_list(\"oroibuktegdchgmkv\") == ['oroibuktegdchgmkv']", "def check(string_to_list):\n\tassert string_to_list(\"efvospkdmhlbdjieoofij\") == ['efvospkdmhlbdjieoofij']", "def check(string_to_list):\n\tassert string_to_list(\"zhacsydpwri jppjlpek\") == ['zhacsydpwri', 'jppjlpek']", "def check(string_to_list):\n\tassert string_to_list(\"hspslthryurxqbq\") == ['hspslthryurxqbq']", "def check(string_to_list):\n\tassert string_to_list(\"dlehypzqpvxittayziua\") == ['dlehypzqpvxittayziua']", "def check(string_to_list):\n\tassert string_to_list(\"pwaolxfagueqvdfxu\") == ['pwaolxfagueqvdfxu']", "def check(string_to_list):\n\tassert string_to_list(\"jcsfmxphwa wvygxjoyj\") == ['jcsfmxphwa', 'wvygxjoyj']", "def check(string_to_list):\n\tassert string_to_list(\"cimyotgj pwrcbntfer\") == ['cimyotgj', 'pwrcbntfer']", "def check(string_to_list):\n\tassert string_to_list(\"uxbofvfw qjlofc\") == ['uxbofvfw', 'qjlofc']", "def check(string_to_list):\n\tassert string_to_list(\"nifcjtgeoqtmvfiok\") == ['nifcjtgeoqtmvfiok']", "def check(string_to_list):\n\tassert string_to_list(\"vslthpixtfden  cmrsg\") == ['vslthpixtfden', '', 'cmrsg']", "def check(string_to_list):\n\tassert string_to_list(\"hxhygxavhhgwxruy\") == ['hxhygxavhhgwxruy']", "def check(string_to_list):\n\tassert string_to_list(\"to nwxevudslvrwphpwjhvz\") == ['to', 'nwxevudslvrwphpwjhvz']", "def check(string_to_list):\n\tassert string_to_list(\"rekvzpdmgdhfflmrk fmxv\") == ['rekvzpdmgdhfflmrk', 'fmxv']", "def check(string_to_list):\n\tassert string_to_list(\"enieoxxkgkxiwofrukyzbc\") == ['enieoxxkgkxiwofrukyzbc']", "def check(string_to_list):\n\tassert string_to_list(\"fnxqpdpwvdqueyu\") == ['fnxqpdpwvdqueyu']", "def check(string_to_list):\n\tassert string_to_list(\"hqwgcbjqmdxqkgzngnduuc\") == ['hqwgcbjqmdxqkgzngnduuc']", "def check(string_to_list):\n\tassert string_to_list(\"zuqtuehlvcugxqzh\") == ['zuqtuehlvcugxqzh']", "def check(string_to_list):\n\tassert string_to_list(\"xcuniqsxkyodapwfczzue\") == ['xcuniqsxkyodapwfczzue']", "def check(string_to_list):\n\tassert string_to_list(\"ktuoulzgecnjetvssanmxcxs\") == ['ktuoulzgecnjetvssanmxcxs']", "def check(string_to_list):\n\tassert string_to_list(\"vxrozhfoicjwdlhkttslnk\") == ['vxrozhfoicjwdlhkttslnk']", "def check(string_to_list):\n\tassert string_to_list(\"lqhjmwnevkmftyjfmrn nzeq\") == ['lqhjmwnevkmftyjfmrn', 'nzeq']", "def check(string_to_list):\n\tassert string_to_list(\"xpyxydfvbtvwfvr\") == ['xpyxydfvbtvwfvr']", "def check(string_to_list):\n\tassert string_to_list(\"esvxixwpe fytflxs\") == ['esvxixwpe', 'fytflxs']", "def check(string_to_list):\n\tassert string_to_list(\"ooxpvkmimfmslsv\") == ['ooxpvkmimfmslsv']", "def check(string_to_list):\n\tassert string_to_list(\"etrrvmjjipcqgvfkc\") == ['etrrvmjjipcqgvfkc']", "def check(string_to_list):\n\tassert string_to_list(\"fijfkpuaehflizloqedxfsy\") == ['fijfkpuaehflizloqedxfsy']", "def check(string_to_list):\n\tassert string_to_list(\"bgy jpvbqickuecbep\") == ['bgy', 'jpvbqickuecbep']", "def check(string_to_list):\n\tassert string_to_list(\"vfrhko fbdczguj hmzl\") == ['vfrhko', 'fbdczguj', 'hmzl']", "def check(string_to_list):\n\tassert string_to_list(\"gpyc dbwwixgzpl\") == ['gpyc', 'dbwwixgzpl']", "def check(string_to_list):\n\tassert string_to_list(\"xdgblirazralikoa\") == ['xdgblirazralikoa']", "def check(string_to_list):\n\tassert string_to_list(\"npdbulhyrw zldzyxkjrnb\") == ['npdbulhyrw', 'zldzyxkjrnb']", "def check(string_to_list):\n\tassert string_to_list(\"kitoqdzhssxyppiwgiadrazo\") == ['kitoqdzhssxyppiwgiadrazo']", "def check(string_to_list):\n\tassert string_to_list(\"dwu  okzbfrxnkgq\") == ['dwu', '', 'okzbfrxnkgq']", "def check(string_to_list):\n\tassert string_to_list(\"et xpnnvwisnbwmxt\") == ['et', 'xpnnvwisnbwmxt']", "def check(string_to_list):\n\tassert string_to_list(\"iyshjgmopwaua jyqlyae\") == ['iyshjgmopwaua', 'jyqlyae']", "def check(string_to_list):\n\tassert string_to_list(\"zs czycacjrsrnjysk\") == ['zs', 'czycacjrsrnjysk']", "def check(string_to_list):\n\tassert string_to_list(\"gqrmqhwevnxpugd\") == ['gqrmqhwevnxpugd']", "def check(string_to_list):\n\tassert string_to_list(\"hijmncyvmblcmxvcxvwt\") == ['hijmncyvmblcmxvcxvwt']", "def check(string_to_list):\n\tassert string_to_list(\"vb rml d wue\") == ['vb', 'rml', 'd', 'wue']", "def check(string_to_list):\n\tassert string_to_list(\"xj bifcaxgormmg\") == ['xj', 'bifcaxgormmg']", "def check(string_to_list):\n\tassert string_to_list(\"npetqtlljpuglidkgkw\") == ['npetqtlljpuglidkgkw']", "def check(string_to_list):\n\tassert string_to_list(\" etskmlmtqxjmttuq w\") == ['', 'etskmlmtqxjmttuq', 'w']", "def check(string_to_list):\n\tassert string_to_list(\"jhrpluvrewhecipok\") == ['jhrpluvrewhecipok']", "def check(string_to_list):\n\tassert string_to_list(\"unfsfdghmyglwaexmm\") == ['unfsfdghmyglwaexmm']", "def check(string_to_list):\n\tassert string_to_list(\"wdmzvqtji nctmouiczu\") == ['wdmzvqtji', 'nctmouiczu']", "def check(string_to_list):\n\tassert string_to_list(\"glkxkqdgoxsgy\") == ['glkxkqdgoxsgy']", "def check(string_to_list):\n\tassert string_to_list(\"mubsfdtspeclyciiesd\") == ['mubsfdtspeclyciiesd']", "def check(string_to_list):\n\tassert string_to_list(\"tgiqayzeewugiqwlmsdn\") == ['tgiqayzeewugiqwlmsdn']", "def check(string_to_list):\n\tassert string_to_list(\"d ppjrvnbnqmvsqdh\") == ['d', 'ppjrvnbnqmvsqdh']", "def check(string_to_list):\n\tassert string_to_list(\"ru apass opfat\") == ['ru', 'apass', 'opfat']", "def check(string_to_list):\n\tassert string_to_list(\"cqdkctctvprob\") == ['cqdkctctvprob']", "def check(string_to_list):\n\tassert string_to_list(\"pgflj criggkfhdfjtgy\") == ['pgflj', 'criggkfhdfjtgy']", "def check(string_to_list):\n\tassert string_to_list(\"xbjapimhjaqafor\") == ['xbjapimhjaqafor']", "def check(string_to_list):\n\tassert string_to_list(\"nnngmgdxqiwvovl v g\") == ['nnngmgdxqiwvovl', 'v', 'g']", "def check(string_to_list):\n\tassert string_to_list(\"yrvludlmgghe ghd\") == ['yrvludlmgghe', 'ghd']", "def check(string_to_list):\n\tassert string_to_list(\"tfhfmglqt stw\") == ['tfhfmglqt', 'stw']", "def check(string_to_list):\n\tassert string_to_list(\"l hdjmwqdrwqsyyqh\") == ['l', 'hdjmwqdrwqsyyqh']", "def check(string_to_list):\n\tassert string_to_list(\"pagctjfdlayyzrpbwp\") == ['pagctjfdlayyzrpbwp']", "def check(string_to_list):\n\tassert string_to_list(\"amrflplpqxwpdsdwmdv\") == ['amrflplpqxwpdsdwmdv']", "def check(string_to_list):\n\tassert string_to_list(\"ilmmkdkqfnvjuf\") == ['ilmmkdkqfnvjuf']", "def check(string_to_list):\n\tassert string_to_list(\"uftuqubbhv rix\") == ['uftuqubbhv', 'rix']", "def check(string_to_list):\n\tassert string_to_list(\" uv ieztyfquvnlu\") == ['', 'uv', 'ieztyfquvnlu']", "def check(string_to_list):\n\tassert string_to_list(\"imsnyracatkxvr\") == ['imsnyracatkxvr']", "def check(string_to_list):\n\tassert string_to_list(\"mcqle msbkr ktrn\") == ['mcqle', 'msbkr', 'ktrn']", "def check(string_to_list):\n\tassert string_to_list(\"zlshhwscfclj \") == ['zlshhwscfclj', '']", "def check(string_to_list):\n\tassert string_to_list(\"vuxsgfdygqfosl\") == ['vuxsgfdygqfosl']"], "scores": [0.9216, 0.9216, 0.9216, 0.9216, 0.9216, 0.9216, 0.9216, 0.9216, 0.9216, 0.9216], "pass_results": [false, false, false, false, false, false, false, false, false, false], "pass_test_cases_num": [94, 94, 94, 94, 94, 94, 94, 94, 94, 94], "passed": false, "pass": false, "pass_num": 9, "round": 50, "mutate_method": "add_1_sentence_at_end", "save_node": true, "parent_index": 50}
