{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 745, "prompt": "Write a function to identify numbers in a specified range from startnum to endnum. Each number should be divisible by each digit it includes. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php", "code": "def divisible_by_digits(startnum, endnum):\n    return [n for n in range(startnum, endnum+1) \\\n                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]", "test_imports": [], "test_list": ["assert divisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]", "assert divisible_by_digits(1,15)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(20,25)==[22, 24]", "assert divisible_by_digits(6, 20) == [6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(3, 22) == [3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]", "assert divisible_by_digits(5, 27) == [5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "assert divisible_by_digits(6, 21) == [6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(1, 19) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(1, 25) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "assert divisible_by_digits(3, 23) == [3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]", "assert divisible_by_digits(4, 25) == [4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "assert divisible_by_digits(2, 25) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "assert divisible_by_digits(2, 27) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "assert divisible_by_digits(2, 24) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "assert divisible_by_digits(1, 17) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(6, 24) == [6, 7, 8, 9, 11, 12, 15, 22, 24]", "assert divisible_by_digits(6, 19) == [6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(2, 18) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(5, 26) == [5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "assert divisible_by_digits(3, 25) == [3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "assert divisible_by_digits(2, 27) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "assert divisible_by_digits(5, 25) == [5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "assert divisible_by_digits(1, 19) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(4, 19) == [4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(6, 26) == [6, 7, 8, 9, 11, 12, 15, 22, 24]", "assert divisible_by_digits(3, 26) == [3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "assert divisible_by_digits(6, 23) == [6, 7, 8, 9, 11, 12, 15, 22]", "assert divisible_by_digits(1, 20) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(3, 21) == [3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(2, 19) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(4, 20) == [4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(2, 27) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "assert divisible_by_digits(2, 26) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "assert divisible_by_digits(5, 22) == [5, 6, 7, 8, 9, 11, 12, 15, 22]", "assert divisible_by_digits(1, 27) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "assert divisible_by_digits(2, 19) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(4, 10) == [4, 5, 6, 7, 8, 9]", "assert divisible_by_digits(5, 19) == [5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(1, 20) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(4, 11) == [4, 5, 6, 7, 8, 9, 11]", "assert divisible_by_digits(2, 20) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(3, 15) == [3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(1, 18) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(5, 15) == [5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(4, 20) == [4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(2, 20) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(4, 17) == [4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(1, 11) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11]", "assert divisible_by_digits(1, 14) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12]", "assert divisible_by_digits(5, 19) == [5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(4, 20) == [4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(6, 17) == [6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(4, 20) == [4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(4, 15) == [4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(5, 12) == [5, 6, 7, 8, 9, 11, 12]", "assert divisible_by_digits(5, 15) == [5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(2, 20) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(5, 10) == [5, 6, 7, 8, 9]", "assert divisible_by_digits(5, 19) == [5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(4, 13) == [4, 5, 6, 7, 8, 9, 11, 12]", "assert divisible_by_digits(5, 17) == [5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(6, 16) == [6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(4, 16) == [4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(2, 19) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(3, 20) == [3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(2, 17) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(6, 18) == [6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(1, 17) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(3, 18) == [3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(24, 30) == [24]", "assert divisible_by_digits(24, 30) == [24]", "assert divisible_by_digits(17, 24) == [22, 24]", "assert divisible_by_digits(23, 25) == [24]", "assert divisible_by_digits(25, 29) == []", "assert divisible_by_digits(25, 25) == []", "assert divisible_by_digits(25, 27) == []", "assert divisible_by_digits(18, 29) == [22, 24]", "assert divisible_by_digits(25, 21) == []", "assert divisible_by_digits(22, 28) == [22, 24]", "assert divisible_by_digits(22, 25) == [22, 24]", "assert divisible_by_digits(19, 26) == [22, 24]", "assert divisible_by_digits(15, 28) == [15, 22, 24]", "assert divisible_by_digits(20, 25) == [22, 24]", "assert divisible_by_digits(25, 26) == []", "assert divisible_by_digits(16, 20) == []", "assert divisible_by_digits(23, 20) == []", "assert divisible_by_digits(22, 23) == [22]", "assert divisible_by_digits(23, 25) == [24]", "assert divisible_by_digits(21, 23) == [22]", "assert divisible_by_digits(19, 24) == [22, 24]", "assert divisible_by_digits(20, 24) == [22, 24]", "assert divisible_by_digits(17, 22) == [22]", "assert divisible_by_digits(18, 26) == [22, 24]", "assert divisible_by_digits(23, 30) == [24]", "assert divisible_by_digits(25, 28) == []", "assert divisible_by_digits(15, 29) == [15, 22, 24]", "assert divisible_by_digits(20, 26) == [22, 24]", "assert divisible_by_digits(16, 23) == [22]", "assert divisible_by_digits(20, 21) == []", "assert divisible_by_digits(18, 22) == [22]", "assert divisible_by_digits(22, 22) == [22]", "assert divisible_by_digits(21, 21) == []"], "entry_point": "divisible_by_digits", "completion": "from typing import *\ndef divisible_by_digits(startnum, endnum):\n    # Validate input\n    if not isinstance(startnum, int) or not isinstance(endnum, int):\n        raise ValueError(\"Start and end numbers must be integers.\")\n    if startnum > endnum:\n        raise ValueError(\"Start number must be less than or equal to end number.\")\n    \n    result = []\n    \n    # Iterate through each number in the specified range\n    for num in range(startnum, endnum + 1):\n        num_str = str(num)\n        is_divisible = True\n        \n        # Check if the number is divisible by each of its non-zero digits\n        for digit in num_str:\n            digit_int = int(digit)\n            if digit_int == 0 or num % digit_int != 0:\n                is_divisible = False\n                break\n        \n        # Collect numbers that meet the divisibility condition\n        if is_divisible:\n            result.append(num)\n    \n    return result\n\n# Example usage\nprint(divisible_by_digits(1, 22))  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n", "completions": ["from typing import *\ndef divisible_by_digits(startnum, endnum):\n    # Validate input range\n    if not isinstance(startnum, int) or not isinstance(endnum, int):\n        raise ValueError(\"Startnum and endnum must be integers.\")\n    if startnum > endnum:\n        raise ValueError(\"Startnum must be less than or equal to endnum.\")\n    \n    # Initialize result list\n    result = []\n    \n    # Iterate through each number in the range\n    for num in range(startnum, endnum + 1):\n        # Convert number to string to extract digits\n        digits = str(num)\n        \n        # Check divisibility by each non-zero digit\n        if all(digit != '0' and num % int(digit) == 0 for digit in digits):\n            # Add number to result list if divisible by all non-zero digits\n            result.append(num)\n    \n    return result\n\n# Example usage\nprint(divisible_by_digits(1, 22))  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n", "from typing import *\ndef divisible_by_digits(startnum, endnum):\n    # Validate input range\n    if not isinstance(startnum, int) or not isinstance(endnum, int):\n        raise ValueError(\"Startnum and endnum must be integers.\")\n    if startnum > endnum:\n        raise ValueError(\"Startnum must be less than or equal to endnum.\")\n    \n    # Initialize the result list\n    result = []\n    \n    # Iterate through each number in the specified range\n    for num in range(startnum, endnum + 1):\n        # Convert the number to a string to extract its digits\n        digits = str(num)\n        \n        # Check divisibility by each non-zero digit\n        divisible = True\n        for digit in digits:\n            if digit != '0' and num % int(digit) != 0:\n                divisible = False\n                break\n        \n        # If divisible by all non-zero digits, add to result list\n        if divisible:\n            result.append(num)\n    \n    return result\n\n# Example usage\nprint(divisible_by_digits(1, 22))  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n", "from typing import *\ndef divisible_by_digits(startnum, endnum):\n    # Validate input\n    if not isinstance(startnum, int) or not isinstance(endnum, int):\n        raise ValueError(\"Start and end numbers must be integers.\")\n    if startnum > endnum:\n        raise ValueError(\"Start number must be less than or equal to end number.\")\n    \n    result = []\n    \n    # Iterate through each number in the specified range\n    for num in range(startnum, endnum + 1):\n        num_str = str(num)\n        is_divisible = True\n        \n        # Check divisibility of each number by its digits\n        for digit_char in num_str:\n            digit = int(digit_char)\n            if digit == 0 or num % digit != 0:\n                is_divisible = False\n                break\n        \n        # Collect numbers that meet the divisibility condition\n        if is_divisible:\n            result.append(num)\n    \n    return result\n\n# Example usage\nprint(divisible_by_digits(1, 22))  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n", "from typing import *\ndef divisible_by_digits(startnum, endnum):\n    # Validate the input range\n    if startnum > endnum:\n        raise ValueError(\"startnum should be less than or equal to endnum\")\n    \n    result = []\n    \n    # Iterate through each number in the specified range\n    for num in range(startnum, endnum + 1):\n        # Convert the number to its individual digits\n        digits = [int(d) for d in str(num) if d != '0']\n        \n        # Check if the number is divisible by each of its non-zero digits\n        if all(num % d == 0 for d in digits):\n            result.append(num)\n    \n    return result\n\n# Example usage\nprint(divisible_by_digits(1, 22))  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n", "from typing import *\ndef divisible_by_digits(startnum, endnum):\n    # Validate input\n    if not isinstance(startnum, int) or not isinstance(endnum, int):\n        raise ValueError(\"Startnum and endnum must be integers.\")\n    if startnum > endnum:\n        raise ValueError(\"Startnum must be less than or equal to endnum.\")\n    \n    result = []\n    \n    # Iterate through each number in the specified range\n    for num in range(startnum, endnum + 1):\n        num_str = str(num)\n        if all(digit != '0' and num % int(digit) == 0 for digit in num_str):\n            result.append(num)\n    \n    return result\n\n# Example usage\nprint(divisible_by_digits(1, 22))  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n", "from typing import *\ndef divisible_by_digits(startnum, endnum):\n    # Validate the input\n    if not isinstance(startnum, int) or not isinstance(endnum, int):\n        raise ValueError(\"startnum and endnum must be integers\")\n    if startnum > endnum:\n        raise ValueError(\"startnum must be less than or equal to endnum\")\n    \n    # Initialize an empty list to store numbers that meet the criteria\n    result = []\n    \n    # Loop through each number from startnum to endnum\n    for num in range(startnum, endnum + 1):\n        # Convert the number to a string to iterate over each digit\n        num_str = str(num)\n        # Check if the number is divisible by each of its non-zero digits\n        if all(digit != '0' and num % int(digit) == 0 for digit in num_str):\n            # If the number is divisible by all its digits, append it to the result list\n            result.append(num)\n    \n    # Return the list of numbers that are divisible by all their digits\n    return result\n\n# Example usage\nprint(divisible_by_digits(1, 22))  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n", "from typing import *\ndef divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum + 1):\n        num_str = str(num)\n        if all(int(digit) != 0 and num % int(digit) == 0 for digit in num_str):\n            result.append(num)\n    return result\n\n# Example usage\nprint(divisible_by_digits(1, 22))  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n", "from typing import *\ndef divisible_by_digits(startnum, endnum):\n    def is_divisible_by_digits(number):\n        digits = [int(d) for d in str(number) if d != '0']\n        return all(number % d == 0 for d in digits)\n\n    result = []\n    for num in range(startnum, endnum + 1):\n        if is_divisible_by_digits(num):\n            result.append(num)\n    \n    return result\n\n# Example usage\nprint(divisible_by_digits(1, 22))  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n", "from typing import *\ndef divisible_by_digits(startnum, endnum):\n    # Validate input\n    if not isinstance(startnum, int) or not isinstance(endnum, int):\n        raise ValueError(\"startnum and endnum must be integers\")\n    if startnum > endnum:\n        raise ValueError(\"startnum must be less than or equal to endnum\")\n    \n    result = []\n    \n    # Iterate through each number in the specified range\n    for num in range(startnum, endnum + 1):\n        num_str = str(num)\n        is_divisible = True\n        \n        # Check divisibility of each number by its digits\n        for digit in num_str:\n            digit_int = int(digit)\n            if digit_int == 0 or num % digit_int != 0:\n                is_divisible = False\n                break\n        \n        # Collect numbers that meet the divisibility condition\n        if is_divisible:\n            result.append(num)\n    \n    # Return the list of numbers that satisfy the condition\n    return result\n\n# Example usage\nprint(divisible_by_digits(1, 22))  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n", "from typing import *\ndef divisible_by_digits(startnum, endnum):\n    # Validate input\n    if not isinstance(startnum, int) or not isinstance(endnum, int):\n        raise ValueError(\"Start and end numbers must be integers.\")\n    if startnum > endnum:\n        raise ValueError(\"Start number must be less than or equal to end number.\")\n    \n    result = []\n    \n    # Iterate through each number in the specified range\n    for num in range(startnum, endnum + 1):\n        num_str = str(num)\n        is_divisible = True\n        \n        # Check if the number is divisible by each of its non-zero digits\n        for digit in num_str:\n            digit_int = int(digit)\n            if digit_int == 0 or num % digit_int != 0:\n                is_divisible = False\n                break\n        \n        # Collect numbers that meet the divisibility condition\n        if is_divisible:\n            result.append(num)\n    \n    return result\n\n# Example usage\nprint(divisible_by_digits(1, 22))  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n"], "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input range from startnum to endnum.\",\n      \"details\": \"Ensure the input values are valid integers and startnum is less than or equal to endnum.\"\n    },\n    {\n      \"description\": \"Iterate through each number in the specified range.\",\n      \"details\": \"Loop through numbers from startnum to endnum inclusive.\"\n    },\n    {\n      \"description\": \"Check if a number is divisible by each of its digits.\",\n      \"details\": \"For each number, extract its digits and verify divisibility for each digit.\"\n    },\n    {\n      \"description\": \"Collect numbers that meet the divisibility condition.\",\n      \"details\": \"Store numbers that are divisible by all their digits in a result list.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse and validate the input range (startnum, endnum).\",\n    \"Initialize an empty list to store the result.\",\n    \"For each number in the range from startnum to endnum:\",\n    \"  - Convert the number to a string to extract its digits.\",\n    \"  - Check if the number is divisible by each of its non-zero digits.\",\n    \"  - If divisible, add the number to the result list.\",\n    \"Return the list of numbers that are divisible by all their digits.\"\n  ]\n}\n```", "Round_0": {"code": "def divisible_by_digits(startnum, endnum):\n    # Validate input\n    if not isinstance(startnum, int) or not isinstance(endnum, int):\n        raise ValueError(\"Start and end numbers must be integers.\")\n    if startnum > endnum:\n        raise ValueError(\"Start number must be less than or equal to end number.\")\n    \n    result = []\n    \n    # Iterate through each number in the specified range\n    for num in range(startnum, endnum + 1):\n        num_str = str(num)\n        is_divisible = True\n        \n        # Check if the number is divisible by each of its non-zero digits\n        for digit in num_str:\n            digit_int = int(digit)\n            if digit_int == 0 or num % digit_int != 0:\n                is_divisible = False\n                break\n        \n        # Collect numbers that meet the divisibility condition\n        if is_divisible:\n            result.append(num)\n    \n    return result\n\n# Example usage\nprint(divisible_by_digits(1, 22))  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, "session_historys": [{"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input range from startnum to endnum.\",\n      \"details\": \"Ensure the input values are valid integers and startnum is less than or equal to endnum.\"\n    },\n    {\n      \"description\": \"Iterate through each number in the specified range.\",\n      \"details\": \"Loop through numbers from startnum to endnum inclusive.\"\n    },\n    {\n      \"description\": \"Check divisibility of each number by its digits.\",\n      \"details\": \"For each number, extract its digits and check if the number is divisible by each non-zero digit.\"\n    },\n    {\n      \"description\": \"Collect numbers that meet the divisibility condition.\",\n      \"details\": \"If a number is divisible by all its non-zero digits, add it to the result list.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse and validate the input range (startnum, endnum).\",\n    \"Initialize an empty list to store numbers that meet the condition.\",\n    \"For each number in the range from startnum to endnum:\",\n    \"  - Convert the number to a string to extract its digits.\",\n    \"  - Check if the number is divisible by each of its non-zero digits.\",\n    \"  - If it is divisible by all such digits, add the number to the result list.\",\n    \"Return the list of numbers that are divisible by their digits.\"\n  ]\n}\n```", "Round_0": {"code": "def divisible_by_digits(startnum, endnum):\n    # Validate input range\n    if not isinstance(startnum, int) or not isinstance(endnum, int):\n        raise ValueError(\"Startnum and endnum must be integers.\")\n    if startnum > endnum:\n        raise ValueError(\"Startnum must be less than or equal to endnum.\")\n    \n    # Initialize result list\n    result = []\n    \n    # Iterate through each number in the range\n    for num in range(startnum, endnum + 1):\n        # Convert number to string to extract digits\n        digits = str(num)\n        \n        # Check divisibility by each non-zero digit\n        if all(digit != '0' and num % int(digit) == 0 for digit in digits):\n            # Add number to result list if divisible by all non-zero digits\n            result.append(num)\n    \n    return result\n\n# Example usage\nprint(divisible_by_digits(1, 22))  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input range from startnum to endnum.\",\n      \"details\": \"Ensure the input values are valid integers and startnum is less than or equal to endnum.\"\n    },\n    {\n      \"description\": \"Iterate through each number in the specified range.\",\n      \"details\": \"Loop through numbers from startnum to endnum inclusive.\"\n    },\n    {\n      \"description\": \"Check divisibility of each number by its digits.\",\n      \"details\": \"For each number, extract its digits and check if the number is divisible by each non-zero digit.\"\n    },\n    {\n      \"description\": \"Collect numbers that meet the divisibility criteria.\",\n      \"details\": \"If a number is divisible by all its non-zero digits, add it to the result list.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse and validate the input range (startnum, endnum).\",\n    \"Initialize an empty list to store numbers that meet the criteria.\",\n    \"For each number in the range from startnum to endnum:\",\n    \"  - Convert the number to a string to extract its digits.\",\n    \"  - Check if the number is divisible by each of its non-zero digits.\",\n    \"  - If it is divisible by all such digits, add the number to the result list.\",\n    \"Return the list of numbers that are divisible by their digits.\"\n  ]\n}\n```", "Round_0": {"code": "def divisible_by_digits(startnum, endnum):\n    # Validate input range\n    if not isinstance(startnum, int) or not isinstance(endnum, int):\n        raise ValueError(\"Startnum and endnum must be integers.\")\n    if startnum > endnum:\n        raise ValueError(\"Startnum must be less than or equal to endnum.\")\n    \n    # Initialize the result list\n    result = []\n    \n    # Iterate through each number in the specified range\n    for num in range(startnum, endnum + 1):\n        # Convert the number to a string to extract its digits\n        digits = str(num)\n        \n        # Check divisibility by each non-zero digit\n        divisible = True\n        for digit in digits:\n            if digit != '0' and num % int(digit) != 0:\n                divisible = False\n                break\n        \n        # If divisible by all non-zero digits, add to result list\n        if divisible:\n            result.append(num)\n    \n    return result\n\n# Example usage\nprint(divisible_by_digits(1, 22))  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input range from startnum to endnum.\",\n      \"details\": \"Ensure the input values are valid integers and startnum is less than or equal to endnum.\"\n    },\n    {\n      \"description\": \"Iterate through each number in the specified range.\",\n      \"details\": \"Loop through numbers from startnum to endnum inclusive.\"\n    },\n    {\n      \"description\": \"Check divisibility of each number by its digits.\",\n      \"details\": \"For each number, extract its digits and check if the number is divisible by each non-zero digit.\"\n    },\n    {\n      \"description\": \"Collect numbers that meet the divisibility condition.\",\n      \"details\": \"If a number is divisible by all its non-zero digits, add it to the result list.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse and validate the input range (startnum, endnum).\",\n    \"Initialize an empty list to store numbers that meet the criteria.\",\n    \"For each number in the range from startnum to endnum:\",\n    \"  - Convert the number to a string to extract its digits.\",\n    \"  - Check if the number is divisible by each of its non-zero digits.\",\n    \"  - If it is divisible by all such digits, add the number to the result list.\",\n    \"Return the list of numbers that are divisible by their digits.\"\n  ]\n}\n```", "Round_0": {"code": "def divisible_by_digits(startnum, endnum):\n    # Validate input\n    if not isinstance(startnum, int) or not isinstance(endnum, int):\n        raise ValueError(\"Start and end numbers must be integers.\")\n    if startnum > endnum:\n        raise ValueError(\"Start number must be less than or equal to end number.\")\n    \n    result = []\n    \n    # Iterate through each number in the specified range\n    for num in range(startnum, endnum + 1):\n        num_str = str(num)\n        is_divisible = True\n        \n        # Check divisibility of each number by its digits\n        for digit_char in num_str:\n            digit = int(digit_char)\n            if digit == 0 or num % digit != 0:\n                is_divisible = False\n                break\n        \n        # Collect numbers that meet the divisibility condition\n        if is_divisible:\n            result.append(num)\n    \n    return result\n\n# Example usage\nprint(divisible_by_digits(1, 22))  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input range from startnum to endnum.\",\n      \"details\": \"Ensure the input is valid and represents a range of integers.\"\n    },\n    {\n      \"description\": \"Iterate through each number in the specified range.\",\n      \"details\": \"Loop through each number from startnum to endnum inclusive.\"\n    },\n    {\n      \"description\": \"Extract digits of the current number.\",\n      \"details\": \"Convert the number to a string or use mathematical operations to get each digit.\"\n    },\n    {\n      \"description\": \"Check divisibility of the number by its digits.\",\n      \"details\": \"For each digit, check if the number is divisible by that digit. Handle cases where the digit is zero.\"\n    },\n    {\n      \"description\": \"Collect numbers that meet the criteria.\",\n      \"details\": \"If a number is divisible by all its non-zero digits, add it to the result list.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Define a function divisible_by_digits that takes startnum and endnum as parameters.\",\n    \"Validate the input range to ensure startnum is less than or equal to endnum.\",\n    \"Initialize an empty list to store numbers that meet the criteria.\",\n    \"For each number in the range from startnum to endnum:\",\n    \"  Convert the number to its individual digits.\",\n    \"  Check if the number is divisible by each of its non-zero digits.\",\n    \"  If it is divisible by all such digits, add the number to the result list.\",\n    \"Return the list of numbers that are divisible by their digits.\"\n  ]\n}\n```", "Round_0": {"code": "def divisible_by_digits(startnum, endnum):\n    # Validate the input range\n    if startnum > endnum:\n        raise ValueError(\"startnum should be less than or equal to endnum\")\n    \n    result = []\n    \n    # Iterate through each number in the specified range\n    for num in range(startnum, endnum + 1):\n        # Convert the number to its individual digits\n        digits = [int(d) for d in str(num) if d != '0']\n        \n        # Check if the number is divisible by each of its non-zero digits\n        if all(num % d == 0 for d in digits):\n            result.append(num)\n    \n    return result\n\n# Example usage\nprint(divisible_by_digits(1, 22))  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input range from startnum to endnum.\",\n      \"details\": \"Ensure the input values are valid integers and startnum is less than or equal to endnum.\"\n    },\n    {\n      \"description\": \"Iterate through each number in the specified range.\",\n      \"details\": \"Loop through numbers from startnum to endnum inclusive.\"\n    },\n    {\n      \"description\": \"Check if a number is divisible by each of its digits.\",\n      \"details\": \"For each number, extract its digits and verify divisibility for each digit.\"\n    },\n    {\n      \"description\": \"Collect numbers that meet the divisibility condition.\",\n      \"details\": \"Store numbers that are divisible by all their digits in a result list.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse and validate the input range (startnum, endnum).\",\n    \"Initialize an empty list to store numbers that meet the condition.\",\n    \"For each number in the range from startnum to endnum:\",\n    \"  - Convert the number to a string to iterate over its digits.\",\n    \"  - Check if the number is divisible by each of its non-zero digits.\",\n    \"  - If divisible, add the number to the result list.\",\n    \"Return the list of numbers that are divisible by all their digits.\"\n  ]\n}\n```", "Round_0": {"code": "def divisible_by_digits(startnum, endnum):\n    # Validate input\n    if not isinstance(startnum, int) or not isinstance(endnum, int):\n        raise ValueError(\"Startnum and endnum must be integers.\")\n    if startnum > endnum:\n        raise ValueError(\"Startnum must be less than or equal to endnum.\")\n    \n    result = []\n    \n    # Iterate through each number in the specified range\n    for num in range(startnum, endnum + 1):\n        num_str = str(num)\n        if all(digit != '0' and num % int(digit) == 0 for digit in num_str):\n            result.append(num)\n    \n    return result\n\n# Example usage\nprint(divisible_by_digits(1, 22))  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the start and end numbers.\",\n      \"details\": \"Ensure the input is valid and extract 'startnum' and 'endnum' from the function parameters.\"\n    },\n    {\n      \"description\": \"Iterate through each number in the specified range.\",\n      \"details\": \"Loop through numbers from 'startnum' to 'endnum' inclusive.\"\n    },\n    {\n      \"description\": \"Check if a number is divisible by each of its digits.\",\n      \"details\": \"For each number, convert it to a string to access each digit, then check divisibility.\"\n    },\n    {\n      \"description\": \"Collect numbers that meet the divisibility condition.\",\n      \"details\": \"If a number is divisible by all its digits, add it to the result list.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Define the function 'divisible_by_digits' with parameters 'startnum' and 'endnum'.\",\n    \"Validate the input to ensure 'startnum' and 'endnum' are integers and 'startnum' is less than or equal to 'endnum'.\",\n    \"Initialize an empty list to store numbers that meet the criteria.\",\n    \"Loop through each number from 'startnum' to 'endnum'.\",\n    \"For each number, convert it to a string to iterate over each digit.\",\n    \"Check if the number is divisible by each of its non-zero digits.\",\n    \"If the number is divisible by all its digits, append it to the result list.\",\n    \"Return the list of numbers that are divisible by all their digits.\"\n  ]\n}\n```", "Round_0": {"code": "def divisible_by_digits(startnum, endnum):\n    # Validate the input\n    if not isinstance(startnum, int) or not isinstance(endnum, int):\n        raise ValueError(\"startnum and endnum must be integers\")\n    if startnum > endnum:\n        raise ValueError(\"startnum must be less than or equal to endnum\")\n    \n    # Initialize an empty list to store numbers that meet the criteria\n    result = []\n    \n    # Loop through each number from startnum to endnum\n    for num in range(startnum, endnum + 1):\n        # Convert the number to a string to iterate over each digit\n        num_str = str(num)\n        # Check if the number is divisible by each of its non-zero digits\n        if all(digit != '0' and num % int(digit) == 0 for digit in num_str):\n            # If the number is divisible by all its digits, append it to the result list\n            result.append(num)\n    \n    # Return the list of numbers that are divisible by all their digits\n    return result\n\n# Example usage\nprint(divisible_by_digits(1, 22))  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input range from startnum to endnum.\",\n      \"details\": \"Ensure the function accepts two parameters, startnum and endnum, which define the range of numbers to be checked.\"\n    },\n    {\n      \"description\": \"Iterate through each number in the specified range.\",\n      \"details\": \"Use a loop to go through each number from startnum to endnum inclusive.\"\n    },\n    {\n      \"description\": \"Check if a number is divisible by each of its digits.\",\n      \"details\": \"For each number, extract its digits and verify if the number is divisible by each non-zero digit.\"\n    },\n    {\n      \"description\": \"Collect numbers that meet the divisibility condition.\",\n      \"details\": \"If a number is divisible by all its non-zero digits, add it to the result list.\"\n    },\n    {\n      \"description\": \"Return the list of numbers that satisfy the condition.\",\n      \"details\": \"After iterating through the range, return the list of numbers that are divisible by their digits.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Define the function divisible_by_digits with parameters startnum and endnum.\",\n    \"Initialize an empty list to store numbers that meet the condition.\",\n    \"Loop through each number from startnum to endnum.\",\n    \"For each number, convert it to a string to iterate over its digits.\",\n    \"Check if the number is divisible by each of its non-zero digits.\",\n    \"If the number is divisible by all its non-zero digits, append it to the result list.\",\n    \"After the loop, return the result list.\"\n  ]\n}\n```", "Round_0": {"code": "def divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum + 1):\n        num_str = str(num)\n        if all(int(digit) != 0 and num % int(digit) == 0 for digit in num_str):\n            result.append(num)\n    return result\n\n# Example usage\nprint(divisible_by_digits(1, 22))  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input range from startnum to endnum.\",\n      \"details\": \"Ensure the input is valid and extract the start and end numbers.\"\n    },\n    {\n      \"description\": \"Iterate through each number in the specified range.\",\n      \"details\": \"Loop from startnum to endnum inclusive.\"\n    },\n    {\n      \"description\": \"Check if a number is divisible by each of its digits.\",\n      \"details\": \"For each number, extract its digits and verify divisibility.\"\n    },\n    {\n      \"description\": \"Collect numbers that meet the divisibility condition.\",\n      \"details\": \"Store numbers that are divisible by all their digits in a list.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse and validate the input range (startnum, endnum).\",\n    \"Initialize an empty list to store valid numbers.\",\n    \"For each number in the range from startnum to endnum:\",\n    \"  - Convert the number to a string to extract its digits.\",\n    \"  - Check if the number is divisible by each of its non-zero digits.\",\n    \"  - If divisible, add the number to the list.\",\n    \"Return the list of numbers that are divisible by all their digits.\"\n  ]\n}\n```", "Round_0": {"code": "def divisible_by_digits(startnum, endnum):\n    def is_divisible_by_digits(number):\n        digits = [int(d) for d in str(number) if d != '0']\n        return all(number % d == 0 for d in digits)\n\n    result = []\n    for num in range(startnum, endnum + 1):\n        if is_divisible_by_digits(num):\n            result.append(num)\n    \n    return result\n\n# Example usage\nprint(divisible_by_digits(1, 22))  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the start and end numbers.\",\n      \"details\": \"Ensure the input is valid and extract 'startnum' and 'endnum' from the function arguments.\"\n    },\n    {\n      \"description\": \"Iterate through each number in the specified range.\",\n      \"details\": \"Loop through numbers from 'startnum' to 'endnum' inclusive.\"\n    },\n    {\n      \"description\": \"Check divisibility of each number by its digits.\",\n      \"details\": \"For each number, extract its digits and check if the number is divisible by each of its non-zero digits.\"\n    },\n    {\n      \"description\": \"Collect numbers that meet the divisibility condition.\",\n      \"details\": \"If a number is divisible by all its non-zero digits, add it to the result list.\"\n    },\n    {\n      \"description\": \"Return the list of numbers that satisfy the condition.\",\n      \"details\": \"Output the list of numbers that are divisible by each of their digits.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Define the function 'divisible_by_digits' with parameters 'startnum' and 'endnum'.\",\n    \"Validate the input to ensure 'startnum' and 'endnum' are integers and 'startnum' is less than or equal to 'endnum'.\",\n    \"Initialize an empty list to store numbers that meet the divisibility condition.\",\n    \"Loop through each number from 'startnum' to 'endnum'.\",\n    \"For each number, convert it to a string to iterate over its digits.\",\n    \"Check if the number is divisible by each of its non-zero digits.\",\n    \"If the number is divisible by all its non-zero digits, append it to the result list.\",\n    \"After the loop, return the result list.\"\n  ]\n}\n```", "Round_0": {"code": "def divisible_by_digits(startnum, endnum):\n    # Validate input\n    if not isinstance(startnum, int) or not isinstance(endnum, int):\n        raise ValueError(\"startnum and endnum must be integers\")\n    if startnum > endnum:\n        raise ValueError(\"startnum must be less than or equal to endnum\")\n    \n    result = []\n    \n    # Iterate through each number in the specified range\n    for num in range(startnum, endnum + 1):\n        num_str = str(num)\n        is_divisible = True\n        \n        # Check divisibility of each number by its digits\n        for digit in num_str:\n            digit_int = int(digit)\n            if digit_int == 0 or num % digit_int != 0:\n                is_divisible = False\n                break\n        \n        # Collect numbers that meet the divisibility condition\n        if is_divisible:\n            result.append(num)\n    \n    # Return the list of numbers that satisfy the condition\n    return result\n\n# Example usage\nprint(divisible_by_digits(1, 22))  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input range from startnum to endnum.\",\n      \"details\": \"Ensure the input values are valid integers and startnum is less than or equal to endnum.\"\n    },\n    {\n      \"description\": \"Iterate through each number in the specified range.\",\n      \"details\": \"Loop through numbers from startnum to endnum inclusive.\"\n    },\n    {\n      \"description\": \"Check if a number is divisible by each of its digits.\",\n      \"details\": \"For each number, extract its digits and verify divisibility for each digit.\"\n    },\n    {\n      \"description\": \"Collect numbers that meet the divisibility condition.\",\n      \"details\": \"Store numbers that are divisible by all their digits in a result list.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse and validate the input range (startnum, endnum).\",\n    \"Initialize an empty list to store the result.\",\n    \"For each number in the range from startnum to endnum:\",\n    \"  - Convert the number to a string to extract its digits.\",\n    \"  - Check if the number is divisible by each of its non-zero digits.\",\n    \"  - If divisible, add the number to the result list.\",\n    \"Return the list of numbers that are divisible by all their digits.\"\n  ]\n}\n```", "Round_0": {"code": "def divisible_by_digits(startnum, endnum):\n    # Validate input\n    if not isinstance(startnum, int) or not isinstance(endnum, int):\n        raise ValueError(\"Start and end numbers must be integers.\")\n    if startnum > endnum:\n        raise ValueError(\"Start number must be less than or equal to end number.\")\n    \n    result = []\n    \n    # Iterate through each number in the specified range\n    for num in range(startnum, endnum + 1):\n        num_str = str(num)\n        is_divisible = True\n        \n        # Check if the number is divisible by each of its non-zero digits\n        for digit in num_str:\n            digit_int = int(digit)\n            if digit_int == 0 or num % digit_int != 0:\n                is_divisible = False\n                break\n        \n        # Collect numbers that meet the divisibility condition\n        if is_divisible:\n            result.append(num)\n    \n    return result\n\n# Example usage\nprint(divisible_by_digits(1, 22))  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}], "test": ["def check(divisible_by_digits):\n\tassert divisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(1,15)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(20,25)==[22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(6, 20) == [6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(3, 22) == [3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(5, 27) == [5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(6, 21) == [6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(1, 19) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(1, 25) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(3, 23) == [3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(4, 25) == [4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(2, 25) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(2, 27) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(2, 24) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(1, 17) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(6, 24) == [6, 7, 8, 9, 11, 12, 15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(6, 19) == [6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(2, 18) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(5, 26) == [5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(3, 25) == [3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(2, 27) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(5, 25) == [5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(1, 19) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(4, 19) == [4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(6, 26) == [6, 7, 8, 9, 11, 12, 15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(3, 26) == [3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(6, 23) == [6, 7, 8, 9, 11, 12, 15, 22]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(1, 20) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(3, 21) == [3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(2, 19) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(4, 20) == [4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(2, 27) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(2, 26) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(5, 22) == [5, 6, 7, 8, 9, 11, 12, 15, 22]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(1, 27) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(2, 19) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(4, 10) == [4, 5, 6, 7, 8, 9]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(5, 19) == [5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(1, 20) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(4, 11) == [4, 5, 6, 7, 8, 9, 11]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(2, 20) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(3, 15) == [3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(1, 18) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(5, 15) == [5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(4, 20) == [4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(2, 20) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(4, 17) == [4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(1, 11) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(1, 14) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(5, 19) == [5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(4, 20) == [4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(6, 17) == [6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(4, 20) == [4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(4, 15) == [4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(5, 12) == [5, 6, 7, 8, 9, 11, 12]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(5, 15) == [5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(2, 20) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(5, 10) == [5, 6, 7, 8, 9]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(5, 19) == [5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(4, 13) == [4, 5, 6, 7, 8, 9, 11, 12]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(5, 17) == [5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(6, 16) == [6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(4, 16) == [4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(2, 19) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(3, 20) == [3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(2, 17) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(6, 18) == [6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(1, 17) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(3, 18) == [3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(24, 30) == [24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(24, 30) == [24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(17, 24) == [22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(23, 25) == [24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(25, 29) == []", "def check(divisible_by_digits):\n\tassert divisible_by_digits(25, 25) == []", "def check(divisible_by_digits):\n\tassert divisible_by_digits(25, 27) == []", "def check(divisible_by_digits):\n\tassert divisible_by_digits(18, 29) == [22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(25, 21) == []", "def check(divisible_by_digits):\n\tassert divisible_by_digits(22, 28) == [22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(22, 25) == [22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(19, 26) == [22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(15, 28) == [15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(20, 25) == [22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(25, 26) == []", "def check(divisible_by_digits):\n\tassert divisible_by_digits(16, 20) == []", "def check(divisible_by_digits):\n\tassert divisible_by_digits(23, 20) == []", "def check(divisible_by_digits):\n\tassert divisible_by_digits(22, 23) == [22]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(23, 25) == [24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(21, 23) == [22]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(19, 24) == [22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(20, 24) == [22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(17, 22) == [22]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(18, 26) == [22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(23, 30) == [24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(25, 28) == []", "def check(divisible_by_digits):\n\tassert divisible_by_digits(15, 29) == [15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(20, 26) == [22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(16, 23) == [22]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(20, 21) == []", "def check(divisible_by_digits):\n\tassert divisible_by_digits(18, 22) == [22]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(22, 22) == [22]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(21, 21) == []"], "scores": [0.9804, 0.1275, 0.9804, 0.1275, 0.9804, 0.9804, 1.0, 0.1471, 0.9804, 0.9804], "pass_results": [false, false, false, false, false, false, true, false, false, false], "pass_test_cases_num": [100, 13, 100, 13, 100, 100, 102, 15, 100, 100], "passed": true, "pass": true, "pass_num": 3, "round": 449, "mutate_method": "rephrase_one", "save_node": true, "parent_index": 462}
