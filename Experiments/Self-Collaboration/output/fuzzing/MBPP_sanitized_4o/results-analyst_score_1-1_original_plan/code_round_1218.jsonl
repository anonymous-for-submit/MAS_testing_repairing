{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 12, "prompt": "Develop a function that sorts an input matrix in ascending order based on the sum of its rows. Make sure that your solution effectively manages matrices of different dimensions.", "code": "def sort_matrix(M):\n    result = sorted(M, key=sum)\n    return result", "test_imports": [], "test_list": ["assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]", "assert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]", "assert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]", "assert sort_matrix([[1, 5, 3], [3, 4, 10], [2, 1, 4]]) == [[2, 1, 4], [1, 5, 3], [3, 4, 10]]", "assert sort_matrix([[2, 5, 4], [3, 9, 3], [4, 2, 2]]) == [[4, 2, 2], [2, 5, 4], [3, 9, 3]]", "assert sort_matrix([[1, 1, 6], [7, 8, 3], [1, 1, 6]]) == [[1, 1, 6], [1, 1, 6], [7, 8, 3]]", "assert sort_matrix([[3, 3, 7], [2, 6, 10], [1, 3, 1]]) == [[1, 3, 1], [3, 3, 7], [2, 6, 10]]", "assert sort_matrix([[3, 2, 3], [4, 3, 8], [6, 2, 3]]) == [[3, 2, 3], [6, 2, 3], [4, 3, 8]]", "assert sort_matrix([[4, 5, 5], [6, 8, 6], [2, 5, 4]]) == [[2, 5, 4], [4, 5, 5], [6, 8, 6]]", "assert sort_matrix([[1, 2, 3], [3, 1, 4], [1, 2, 4]]) == [[1, 2, 3], [1, 2, 4], [3, 1, 4]]", "assert sort_matrix([[2, 2, 5], [4, 6, 9], [5, 2, 5]]) == [[2, 2, 5], [5, 2, 5], [4, 6, 9]]", "assert sort_matrix([[3, 4, 7], [7, 6, 5], [6, 3, 1]]) == [[6, 3, 1], [3, 4, 7], [7, 6, 5]]", "assert sort_matrix([[5, 1, 5], [4, 5, 1], [4, 5, 1]]) == [[4, 5, 1], [4, 5, 1], [5, 1, 5]]", "assert sort_matrix([[4, 1, 8], [7, 2, 10], [1, 3, 5]]) == [[1, 3, 5], [4, 1, 8], [7, 2, 10]]", "assert sort_matrix([[1, 3, 8], [6, 3, 7], [1, 4, 3]]) == [[1, 4, 3], [1, 3, 8], [6, 3, 7]]", "assert sort_matrix([[5, 5, 6], [6, 9, 1], [2, 5, 1]]) == [[2, 5, 1], [5, 5, 6], [6, 9, 1]]", "assert sort_matrix([[5, 2, 2], [5, 5, 3], [5, 1, 1]]) == [[5, 1, 1], [5, 2, 2], [5, 5, 3]]", "assert sort_matrix([[1, 2, 3], [3, 5, 5], [6, 2, 3]]) == [[1, 2, 3], [6, 2, 3], [3, 5, 5]]", "assert sort_matrix([[3, 7, 7], [6, 7, 5], [1, 1, 2]]) == [[1, 1, 2], [3, 7, 7], [6, 7, 5]]", "assert sort_matrix([[1, 1, 5], [2, 5, 1], [5, 6, 5]]) == [[1, 1, 5], [2, 5, 1], [5, 6, 5]]", "assert sort_matrix([[6, 3, 8], [7, 9, 5], [4, 2, 6]]) == [[4, 2, 6], [6, 3, 8], [7, 9, 5]]", "assert sort_matrix([[3, 6, 4], [7, 5, 10], [6, 4, 5]]) == [[3, 6, 4], [6, 4, 5], [7, 5, 10]]", "assert sort_matrix([[3, 3, 7], [3, 5, 3], [3, 3, 3]]) == [[3, 3, 3], [3, 5, 3], [3, 3, 7]]", "assert sort_matrix([[6, 3, 6], [5, 1, 2], [6, 5, 3]]) == [[5, 1, 2], [6, 5, 3], [6, 3, 6]]", "assert sort_matrix([[2, 2, 8], [5, 9, 10], [5, 1, 5]]) == [[5, 1, 5], [2, 2, 8], [5, 9, 10]]", "assert sort_matrix([[5, 3, 5], [3, 8, 2], [1, 5, 2]]) == [[1, 5, 2], [5, 3, 5], [3, 8, 2]]", "assert sort_matrix([[2, 6, 8], [1, 9, 2], [5, 2, 4]]) == [[5, 2, 4], [1, 9, 2], [2, 6, 8]]", "assert sort_matrix([[1, 1, 3], [6, 4, 7], [1, 1, 2]]) == [[1, 1, 2], [1, 1, 3], [6, 4, 7]]", "assert sort_matrix([[5, 2, 8], [1, 4, 5], [2, 4, 2]]) == [[2, 4, 2], [1, 4, 5], [5, 2, 8]]", "assert sort_matrix([[3, 2, 4], [6, 4, 4], [2, 6, 6]]) == [[3, 2, 4], [6, 4, 4], [2, 6, 6]]", "assert sort_matrix([[5, 2, 4], [5, 1, 2], [1, 5, 3]]) == [[5, 1, 2], [1, 5, 3], [5, 2, 4]]", "assert sort_matrix([[5, 3, 1], [5, 9, 5], [5, 4, 1]]) == [[5, 3, 1], [5, 4, 1], [5, 9, 5]]", "assert sort_matrix([[6, 2, 6], [1, 6, 5], [5, 1, 3]]) == [[5, 1, 3], [1, 6, 5], [6, 2, 6]]", "assert sort_matrix([[6, 7, 8], [2, 2, 9], [6, 4, 1]]) == [[6, 4, 1], [2, 2, 9], [6, 7, 8]]", "assert sort_matrix([[2, 1, 1], [4, 4, 2], [3, 5, 4]]) == [[2, 1, 1], [4, 4, 2], [3, 5, 4]]", "assert sort_matrix([[6, 4, 4], [3, 4, 7], [4, 5, 3]]) == [[4, 5, 3], [6, 4, 4], [3, 4, 7]]", "assert sort_matrix([[1, 7, 7], [-6, 7, -6], [5, -2, 3]]) == [[-6, 7, -6], [5, -2, 3], [1, 7, 7]]", "assert sort_matrix([[1, 4, 5], [2, 4, 0], [5, -4, 3]]) == [[5, -4, 3], [2, 4, 0], [1, 4, 5]]", "assert sort_matrix([[5, 2, 3], [-6, 6, -7], [6, 1, 5]]) == [[-6, 6, -7], [5, 2, 3], [6, 1, 5]]", "assert sort_matrix([[1, 3, 4], [0, 6, -2], [5, -3, 6]]) == [[0, 6, -2], [1, 3, 4], [5, -3, 6]]", "assert sort_matrix([[3, 4, 4], [3, 3, -2], [3, 2, 6]]) == [[3, 3, -2], [3, 4, 4], [3, 2, 6]]", "assert sort_matrix([[6, 2, 7], [-5, 2, -1], [2, -6, 2]]) == [[-5, 2, -1], [2, -6, 2], [6, 2, 7]]", "assert sort_matrix([[1, 2, 1], [3, 7, -8], [3, -4, 1]]) == [[3, -4, 1], [3, 7, -8], [1, 2, 1]]", "assert sort_matrix([[3, 4, 7], [-6, 8, 0], [4, -5, 2]]) == [[4, -5, 2], [-6, 8, 0], [3, 4, 7]]", "assert sort_matrix([[4, 3, 5], [0, 6, 0], [1, -6, 2]]) == [[1, -6, 2], [0, 6, 0], [4, 3, 5]]", "assert sort_matrix([[5, 6, 1], [-7, 5, -6], [5, -1, 2]]) == [[-7, 5, -6], [5, -1, 2], [5, 6, 1]]", "assert sort_matrix([[3, 2, 8], [1, 2, -3], [6, 1, 2]]) == [[1, 2, -3], [6, 1, 2], [3, 2, 8]]", "assert sort_matrix([[3, 3, 1], [0, 9, -2], [1, -5, 5]]) == [[1, -5, 5], [3, 3, 1], [0, 9, -2]]", "assert sort_matrix([[5, 7, 1], [-6, 4, -1], [2, -2, 2]]) == [[-6, 4, -1], [2, -2, 2], [5, 7, 1]]", "assert sort_matrix([[6, 5, 2], [-6, 7, -1], [2, -5, 4]]) == [[-6, 7, -1], [2, -5, 4], [6, 5, 2]]", "assert sort_matrix([[2, 6, 7], [-1, 2, -2], [1, -2, 1]]) == [[-1, 2, -2], [1, -2, 1], [2, 6, 7]]", "assert sort_matrix([[1, 3, 8], [-1, 4, -2], [5, 2, 1]]) == [[-1, 4, -2], [5, 2, 1], [1, 3, 8]]", "assert sort_matrix([[6, 3, 3], [3, 3, 0], [3, 1, 3]]) == [[3, 3, 0], [3, 1, 3], [6, 3, 3]]", "assert sort_matrix([[4, 7, 8], [-7, 7, -1], [2, 1, 5]]) == [[-7, 7, -1], [2, 1, 5], [4, 7, 8]]", "assert sort_matrix([[6, 1, 2], [-3, 8, -9], [5, 3, 6]]) == [[-3, 8, -9], [6, 1, 2], [5, 3, 6]]", "assert sort_matrix([[3, 4, 3], [-2, 8, -10], [3, 0, 6]]) == [[-2, 8, -10], [3, 0, 6], [3, 4, 3]]", "assert sort_matrix([[3, 5, 5], [-4, 3, -9], [3, -1, 1]]) == [[-4, 3, -9], [3, -1, 1], [3, 5, 5]]", "assert sort_matrix([[4, 2, 2], [-2, 1, -8], [5, -5, 1]]) == [[-2, 1, -8], [5, -5, 1], [4, 2, 2]]", "assert sort_matrix([[5, 4, 7], [-5, 4, -8], [1, 1, 4]]) == [[-5, 4, -8], [1, 1, 4], [5, 4, 7]]", "assert sort_matrix([[6, 4, 5], [2, 7, -10], [1, 2, 2]]) == [[2, 7, -10], [1, 2, 2], [6, 4, 5]]", "assert sort_matrix([[5, 7, 6], [2, 1, -4], [5, -6, 4]]) == [[2, 1, -4], [5, -6, 4], [5, 7, 6]]", "assert sort_matrix([[5, 5, 8], [3, 3, -2], [3, -1, 3]]) == [[3, 3, -2], [3, -1, 3], [5, 5, 8]]", "assert sort_matrix([[5, 1, 8], [-2, 3, -6], [1, 0, 2]]) == [[-2, 3, -6], [1, 0, 2], [5, 1, 8]]", "assert sort_matrix([[4, 7, 5], [-4, 9, 0], [2, -4, 2]]) == [[2, -4, 2], [-4, 9, 0], [4, 7, 5]]", "assert sort_matrix([[1, 5, 6], [2, 1, -2], [1, 1, 3]]) == [[2, 1, -2], [1, 1, 3], [1, 5, 6]]", "assert sort_matrix([[4, 5, 8], [-3, 9, 0], [4, 3, 3]]) == [[-3, 9, 0], [4, 3, 3], [4, 5, 8]]", "assert sort_matrix([[3, 4, 4], [1, 6, -5], [5, 0, 2]]) == [[1, 6, -5], [5, 0, 2], [3, 4, 4]]", "assert sort_matrix([[4, 4, 2], [-6, 7, -3], [4, 3, 5]]) == [[-6, 7, -3], [4, 4, 2], [4, 3, 5]]", "assert sort_matrix([[4, 7, 7], [0, 5, -1], [1, -1, 4]]) == [[0, 5, -1], [1, -1, 4], [4, 7, 7]]", "assert sort_matrix([[10, 12, 8], [5, 1, 5], [2, 5, 8]]) == [[5, 1, 5], [2, 5, 8], [10, 12, 8]]", "assert sort_matrix([[3, 8, 13], [11, 9, 6], [3, 6, 4]]) == [[3, 6, 4], [3, 8, 13], [11, 9, 6]]", "assert sort_matrix([[1, 11, 8], [2, 5, 6], [6, 3, 5]]) == [[2, 5, 6], [6, 3, 5], [1, 11, 8]]", "assert sort_matrix([[1, 6, 11], [1, 8, 8], [2, 2, 6]]) == [[2, 2, 6], [1, 8, 8], [1, 6, 11]]", "assert sort_matrix([[9, 4, 8], [10, 7, 2], [1, 3, 2]]) == [[1, 3, 2], [10, 7, 2], [9, 4, 8]]", "assert sort_matrix([[7, 4, 4], [9, 2, 8], [1, 4, 2]]) == [[1, 4, 2], [7, 4, 4], [9, 2, 8]]", "assert sort_matrix([[4, 5, 12], [2, 9, 7], [5, 4, 5]]) == [[5, 4, 5], [2, 9, 7], [4, 5, 12]]", "assert sort_matrix([[3, 9, 4], [7, 3, 6], [3, 1, 9]]) == [[3, 1, 9], [3, 9, 4], [7, 3, 6]]", "assert sort_matrix([[1, 11, 11], [4, 9, 5], [4, 3, 7]]) == [[4, 3, 7], [4, 9, 5], [1, 11, 11]]", "assert sort_matrix([[6, 4, 6], [2, 6, 1], [6, 1, 4]]) == [[2, 6, 1], [6, 1, 4], [6, 4, 6]]", "assert sort_matrix([[9, 11, 11], [1, 4, 1], [4, 1, 8]]) == [[1, 4, 1], [4, 1, 8], [9, 11, 11]]", "assert sort_matrix([[1, 11, 4], [5, 7, 2], [5, 5, 6]]) == [[5, 7, 2], [1, 11, 4], [5, 5, 6]]", "assert sort_matrix([[9, 9, 11], [2, 8, 5], [3, 6, 6]]) == [[2, 8, 5], [3, 6, 6], [9, 9, 11]]", "assert sort_matrix([[3, 3, 4], [5, 1, 6], [2, 6, 4]]) == [[3, 3, 4], [5, 1, 6], [2, 6, 4]]", "assert sort_matrix([[1, 9, 13], [9, 9, 3], [6, 4, 4]]) == [[6, 4, 4], [9, 9, 3], [1, 9, 13]]", "assert sort_matrix([[9, 4, 11], [5, 7, 4], [3, 5, 4]]) == [[3, 5, 4], [5, 7, 4], [9, 4, 11]]", "assert sort_matrix([[5, 8, 12], [1, 3, 2], [6, 4, 8]]) == [[1, 3, 2], [6, 4, 8], [5, 8, 12]]", "assert sort_matrix([[10, 13, 6], [3, 6, 7], [6, 4, 4]]) == [[6, 4, 4], [3, 6, 7], [10, 13, 6]]", "assert sort_matrix([[7, 11, 7], [4, 1, 3], [5, 5, 7]]) == [[4, 1, 3], [5, 5, 7], [7, 11, 7]]", "assert sort_matrix([[9, 9, 10], [10, 2, 7], [5, 6, 9]]) == [[10, 2, 7], [5, 6, 9], [9, 9, 10]]", "assert sort_matrix([[8, 12, 11], [1, 5, 7], [4, 3, 5]]) == [[4, 3, 5], [1, 5, 7], [8, 12, 11]]", "assert sort_matrix([[2, 6, 14], [5, 2, 3], [3, 1, 5]]) == [[3, 1, 5], [5, 2, 3], [2, 6, 14]]", "assert sort_matrix([[6, 3, 5], [7, 5, 3], [6, 6, 7]]) == [[6, 3, 5], [7, 5, 3], [6, 6, 7]]", "assert sort_matrix([[1, 13, 4], [4, 4, 2], [4, 1, 9]]) == [[4, 4, 2], [4, 1, 9], [1, 13, 4]]", "assert sort_matrix([[8, 7, 4], [5, 8, 4], [2, 4, 1]]) == [[2, 4, 1], [5, 8, 4], [8, 7, 4]]", "assert sort_matrix([[4, 8, 9], [5, 4, 4], [2, 5, 6]]) == [[5, 4, 4], [2, 5, 6], [4, 8, 9]]", "assert sort_matrix([[5, 10, 14], [9, 7, 7], [5, 6, 7]]) == [[5, 6, 7], [9, 7, 7], [5, 10, 14]]", "assert sort_matrix([[5, 6, 4], [8, 8, 1], [2, 5, 1]]) == [[2, 5, 1], [5, 6, 4], [8, 8, 1]]", "assert sort_matrix([[5, 12, 12], [3, 5, 3], [5, 3, 1]]) == [[5, 3, 1], [3, 5, 3], [5, 12, 12]]", "assert sort_matrix([[4, 7, 10], [10, 4, 8], [5, 6, 8]]) == [[5, 6, 8], [4, 7, 10], [10, 4, 8]]", "assert sort_matrix([[2, 4, 7], [10, 3, 3], [6, 4, 6]]) == [[2, 4, 7], [10, 3, 3], [6, 4, 6]]", "assert sort_matrix([[5, 5, 6], [11, 9, 3], [1, 3, 9]]) == [[1, 3, 9], [5, 5, 6], [11, 9, 3]]", "assert sort_matrix([[3, 8, 10], [7, 7, 7], [4, 3, 3]]) == [[4, 3, 3], [3, 8, 10], [7, 7, 7]]"], "entry_point": "sort_matrix", "completion": "from typing import *\ndef sort_matrix(matrix):\n    # Validate the input matrix\n    if not isinstance(matrix, list) or not all(isinstance(row, list) for row in matrix):\n        raise ValueError(\"Input must be a list of lists.\")\n    if not all(all(isinstance(num, (int, float)) for num in row) for row in matrix):\n        raise ValueError(\"All elements in the matrix must be numbers.\")\n\n    # Calculate the sum of each row\n    row_sums = [(sum(row), row) for row in matrix]\n\n    # Sort the matrix based on the sum of its rows\n    sorted_matrix = [row for _, row in sorted(row_sums, key=lambda x: x[0])]\n\n    # Return the sorted matrix\n    return sorted_matrix\n\n# Example usage\nprint(sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))  # Output: [[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n", "completions": ["from typing import *\ndef sort_matrix(matrix):\n    # Validate the input matrix\n    if not matrix or not all(isinstance(row, list) for row in matrix):\n        raise ValueError(\"Input must be a list of lists (matrix).\")\n    \n    row_length = len(matrix[0])\n    if not all(len(row) == row_length for row in matrix):\n        raise ValueError(\"All rows in the matrix must have the same length.\")\n    \n    # Calculate the sum of each row\n    row_sums = [(sum(row), row) for row in matrix]\n    \n    # Sort the matrix based on the row sums\n    row_sums.sort(key=lambda x: x[0])\n    \n    # Extract the sorted rows\n    sorted_matrix = [row for _, row in row_sums]\n    \n    return sorted_matrix\n\n# Example usage\nprint(sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))  # Output: [[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n", "from typing import *\ndef sort_matrix(matrix):\n    # Validate the input to ensure it is a matrix with consistent row lengths\n    if not isinstance(matrix, list) or not all(isinstance(row, list) for row in matrix):\n        raise ValueError(\"Input must be a list of lists representing a matrix.\")\n    \n    if not matrix:\n        return matrix\n    \n    row_length = len(matrix[0])\n    if not all(len(row) == row_length for row in matrix):\n        raise ValueError(\"All rows in the matrix must have the same length.\")\n    \n    # Calculate the sum of each row in the matrix\n    row_sums = [(sum(row), row) for row in matrix]\n    \n    # Sort the rows based on the calculated row sums in ascending order\n    row_sums.sort(key=lambda x: x[0])\n    \n    # Extract the sorted rows from the sorted pairs\n    sorted_matrix = [row for _, row in row_sums]\n    \n    # Return the sorted matrix\n    return sorted_matrix\n\n# Example usage\nprint(sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))  # Output: [[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n", "from typing import *\ndef sort_matrix(matrix):\n    # Validate the input matrix\n    if not isinstance(matrix, list) or not all(isinstance(row, list) for row in matrix):\n        raise ValueError(\"Input must be a list of lists.\")\n    if not all(all(isinstance(num, (int, float)) for num in row) for row in matrix):\n        raise ValueError(\"All elements in the matrix must be numerical values.\")\n\n    # Calculate the sum of each row and pair it with the row\n    row_sum_pairs = [(sum(row), row) for row in matrix]\n\n    # Sort the pairs based on the sum\n    row_sum_pairs.sort(key=lambda x: x[0])\n\n    # Extract the sorted rows\n    sorted_matrix = [row for _, row in row_sum_pairs]\n\n    return sorted_matrix\n\n# Example usage\nprint(sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))  # Output: [[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n", "from typing import *\ndef sort_matrix(matrix):\n    # Validate the input matrix\n    if not isinstance(matrix, list) or not all(isinstance(row, list) for row in matrix):\n        raise ValueError(\"Input must be a list of lists.\")\n\n    # Calculate the sum of each row\n    row_sums = [(sum(row), row) for row in matrix]\n\n    # Sort the rows based on the calculated sums\n    row_sums.sort(key=lambda x: x[0])\n\n    # Extract the sorted rows\n    sorted_matrix = [row for _, row in row_sums]\n\n    return sorted_matrix\n\n# Example usage\nprint(sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))  # Output: [[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n", "from typing import *\ndef sort_matrix(matrix):\n    # Input Validation\n    if not isinstance(matrix, list) or not all(isinstance(row, list) for row in matrix):\n        raise ValueError(\"Input must be a list of lists (matrix).\")\n    \n    # Calculate Row Sums and Sort Matrix\n    sorted_matrix = sorted(matrix, key=lambda row: sum(row))\n    \n    # Return Sorted Matrix\n    return sorted_matrix\n\n# Example usage\nprint(sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))  # Output: [[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n", "from typing import *\ndef sort_matrix(matrix):\n    # Validate the input to confirm it is a matrix with numerical values\n    if not isinstance(matrix, list) or not all(isinstance(row, list) for row in matrix):\n        raise ValueError(\"Input must be a list of lists (matrix).\")\n    if not all(all(isinstance(num, (int, float)) for num in row) for row in matrix):\n        raise ValueError(\"All elements in the matrix must be numbers.\")\n\n    # Create a list of tuples where each tuple contains a row and its corresponding sum\n    row_sums = [(row, sum(row)) for row in matrix]\n\n    # Sort the list of tuples based on the sum values in ascending order\n    row_sums.sort(key=lambda x: x[1])\n\n    # Extract the sorted rows from the list of tuples to form the sorted matrix\n    sorted_matrix = [row for row, _ in row_sums]\n\n    # Return the sorted matrix as the output\n    return sorted_matrix\n\n# Example usage\nprint(sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))  # Output: [[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n", "from typing import *\ndef sort_matrix(matrix):\n    # Validate the input matrix\n    if not isinstance(matrix, list) or not all(isinstance(row, list) for row in matrix):\n        raise ValueError(\"Input must be a list of lists.\")\n    if not all(all(isinstance(num, (int, float)) for num in row) for row in matrix):\n        raise ValueError(\"All elements in the matrix must be numbers.\")\n    if len(set(len(row) for row in matrix)) != 1:\n        raise ValueError(\"All rows in the matrix must have the same length.\")\n\n    # Calculate the sum of each row\n    row_sums = [(sum(row), row) for row in matrix]\n\n    # Sort the rows based on the row sums\n    row_sums.sort(key=lambda x: x[0])\n\n    # Extract the sorted rows\n    sorted_matrix = [row for _, row in row_sums]\n\n    return sorted_matrix\n\n# Example usage\nprint(sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))  # Output: [[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n", "from typing import *\ndef sort_matrix(matrix):\n    # Validate the input matrix\n    if not isinstance(matrix, list) or not all(isinstance(row, list) for row in matrix):\n        raise ValueError(\"Input must be a list of lists.\")\n    if not all(all(isinstance(num, (int, float)) for num in row) for row in matrix):\n        raise ValueError(\"All elements in the matrix must be numerical values.\")\n\n    # Calculate the sum of each row\n    row_sums = [(sum(row), row) for row in matrix]\n\n    # Sort the matrix based on the sum of its rows\n    row_sums.sort(key=lambda x: x[0])\n\n    # Return the sorted matrix\n    return [row for _, row in row_sums]\n\n# Example usage\nprint(sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))  # Output: [[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n", "from typing import *\ndef sort_matrix(matrix):\n    # Calculate row sums and pair them with their respective rows\n    row_sums_with_rows = [(sum(row), row) for row in matrix]\n    \n    # Sort the list of tuples based on the row sums in ascending order\n    row_sums_with_rows.sort(key=lambda x: x[0])\n    \n    # Extract the sorted rows\n    sorted_matrix = [row for _, row in row_sums_with_rows]\n    \n    # Return the sorted matrix\n    return sorted_matrix\n\n# Example usage\nprint(sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))  # Output: [[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n", "from typing import *\ndef sort_matrix(matrix):\n    # Validate the input matrix\n    if not isinstance(matrix, list) or not all(isinstance(row, list) for row in matrix):\n        raise ValueError(\"Input must be a list of lists.\")\n    if not all(all(isinstance(num, (int, float)) for num in row) for row in matrix):\n        raise ValueError(\"All elements in the matrix must be numbers.\")\n\n    # Calculate the sum of each row\n    row_sums = [(sum(row), row) for row in matrix]\n\n    # Sort the matrix based on the sum of its rows\n    sorted_matrix = [row for _, row in sorted(row_sums, key=lambda x: x[0])]\n\n    # Return the sorted matrix\n    return sorted_matrix\n\n# Example usage\nprint(sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))  # Output: [[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n"], "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse and validate the input matrix to ensure it is a list of lists with numerical values.\",\n      \"details\": \"Check if the input is a list of lists and each element is a number. Handle cases where the input is not valid.\"\n    },\n    {\n      \"description\": \"Calculate the sum of each row in the matrix.\",\n      \"details\": \"Iterate through each row of the matrix and compute the sum of its elements.\"\n    },\n    {\n      \"description\": \"Sort the matrix based on the sum of its rows in ascending order.\",\n      \"details\": \"Use the calculated row sums to sort the rows of the matrix.\"\n    },\n    {\n      \"description\": \"Return the sorted matrix.\",\n      \"details\": \"Ensure the output is in the same format as the input, a list of lists.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Receive the input matrix and validate its format.\",\n    \"Compute the sum of each row in the matrix.\",\n    \"Sort the matrix rows based on the computed sums in ascending order.\",\n    \"Return the sorted matrix as the output.\"\n  ]\n}\n```", "Round_0": {"code": "def sort_matrix(matrix):\n    # Validate the input matrix\n    if not isinstance(matrix, list) or not all(isinstance(row, list) for row in matrix):\n        raise ValueError(\"Input must be a list of lists.\")\n    if not all(all(isinstance(num, (int, float)) for num in row) for row in matrix):\n        raise ValueError(\"All elements in the matrix must be numbers.\")\n\n    # Calculate the sum of each row\n    row_sums = [(sum(row), row) for row in matrix]\n\n    # Sort the matrix based on the sum of its rows\n    sorted_matrix = [row for _, row in sorted(row_sums, key=lambda x: x[0])]\n\n    # Return the sorted matrix\n    return sorted_matrix\n\n# Example usage\nprint(sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))  # Output: [[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, "session_historys": [{"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse and validate the input to ensure it is a matrix (a list of lists) with consistent row lengths.\",\n      \"goal\": \"Ensure the input is a valid matrix with rows of equal length.\"\n    },\n    {\n      \"description\": \"Calculate the sum of each row in the matrix.\",\n      \"goal\": \"Obtain a list of sums corresponding to each row.\"\n    },\n    {\n      \"description\": \"Sort the matrix based on the calculated row sums in ascending order.\",\n      \"goal\": \"Reorder the rows of the matrix according to their sums.\"\n    },\n    {\n      \"description\": \"Return the sorted matrix as the output.\",\n      \"goal\": \"Provide the final sorted matrix to the user.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Receive the input matrix and validate its structure.\",\n    \"Iterate over each row of the matrix to calculate the sum of its elements.\",\n    \"Pair each row with its corresponding sum to facilitate sorting.\",\n    \"Sort the list of row-sum pairs based on the sums in ascending order.\",\n    \"Extract the sorted rows from the sorted list of pairs.\",\n    \"Return the sorted matrix as the final output.\"\n  ]\n}\n```", "Round_0": {"code": "def sort_matrix(matrix):\n    # Validate the input matrix\n    if not matrix or not all(isinstance(row, list) for row in matrix):\n        raise ValueError(\"Input must be a list of lists (matrix).\")\n    \n    row_length = len(matrix[0])\n    if not all(len(row) == row_length for row in matrix):\n        raise ValueError(\"All rows in the matrix must have the same length.\")\n    \n    # Calculate the sum of each row\n    row_sums = [(sum(row), row) for row in matrix]\n    \n    # Sort the matrix based on the row sums\n    row_sums.sort(key=lambda x: x[0])\n    \n    # Extract the sorted rows\n    sorted_matrix = [row for _, row in row_sums]\n    \n    return sorted_matrix\n\n# Example usage\nprint(sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))  # Output: [[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse and validate the input to ensure it is a matrix (a list of lists) with consistent row lengths.\",\n      \"goal\": \"Ensure the input is a valid matrix.\"\n    },\n    {\n      \"description\": \"Calculate the sum of each row in the matrix.\",\n      \"goal\": \"Obtain a list of sums corresponding to each row.\"\n    },\n    {\n      \"description\": \"Sort the rows of the matrix based on the calculated row sums in ascending order.\",\n      \"goal\": \"Reorder the matrix rows according to their sums.\"\n    },\n    {\n      \"description\": \"Return the sorted matrix as the output.\",\n      \"goal\": \"Provide the final sorted matrix to the user.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Receive the input matrix and validate its structure.\",\n    \"Iterate over each row of the matrix to compute the sum of its elements.\",\n    \"Pair each row with its corresponding sum.\",\n    \"Sort the list of row-sum pairs based on the sums in ascending order.\",\n    \"Extract the sorted rows from the sorted pairs.\",\n    \"Return the sorted matrix.\"\n  ]\n}\n```", "Round_0": {"code": "def sort_matrix(matrix):\n    # Validate the input to ensure it is a matrix with consistent row lengths\n    if not matrix or not all(isinstance(row, list) for row in matrix):\n        raise ValueError(\"Input must be a list of lists representing a matrix.\")\n    \n    row_length = len(matrix[0])\n    if not all(len(row) == row_length for row in matrix):\n        raise ValueError(\"All rows in the matrix must have the same length.\")\n    \n    # Calculate the sum of each row in the matrix\n    row_sums = [(sum(row), row) for row in matrix]\n    \n    # Sort the rows based on the calculated row sums in ascending order\n    row_sums.sort(key=lambda x: x[0])\n    \n    # Extract the sorted rows from the sorted pairs\n    sorted_matrix = [row for _, row in row_sums]\n    \n    # Return the sorted matrix\n    return sorted_matrix\n\n# Example usage\nprint(sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))  # Output: [[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n", "report": "The compilation output of the preceding code is: Input must be a list of lists representing a matrix."}, "Round_1": {"code": "def sort_matrix(matrix):\n    # Validate the input to ensure it is a matrix with consistent row lengths\n    if not isinstance(matrix, list) or not all(isinstance(row, list) for row in matrix):\n        raise ValueError(\"Input must be a list of lists representing a matrix.\")\n    \n    if not matrix:\n        return matrix\n    \n    row_length = len(matrix[0])\n    if not all(len(row) == row_length for row in matrix):\n        raise ValueError(\"All rows in the matrix must have the same length.\")\n    \n    # Calculate the sum of each row in the matrix\n    row_sums = [(sum(row), row) for row in matrix]\n    \n    # Sort the rows based on the calculated row sums in ascending order\n    row_sums.sort(key=lambda x: x[0])\n    \n    # Extract the sorted rows from the sorted pairs\n    sorted_matrix = [row for _, row in row_sums]\n    \n    # Return the sorted matrix\n    return sorted_matrix\n\n# Example usage\nprint(sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))  # Output: [[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse and validate the input matrix to ensure it is a list of lists with numerical values.\",\n      \"goal\": \"Ensure the input is a valid matrix with numerical elements.\"\n    },\n    {\n      \"description\": \"Calculate the sum of each row in the matrix.\",\n      \"goal\": \"Obtain a list of sums corresponding to each row in the matrix.\"\n    },\n    {\n      \"description\": \"Sort the matrix based on the calculated row sums in ascending order.\",\n      \"goal\": \"Reorder the rows of the matrix according to their sums.\"\n    },\n    {\n      \"description\": \"Return the sorted matrix as the output.\",\n      \"goal\": \"Provide the final sorted matrix to the user.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Receive the input matrix and validate its structure and content.\",\n    \"Iterate over each row of the matrix to compute the sum of its elements.\",\n    \"Pair each row with its corresponding sum to facilitate sorting.\",\n    \"Sort the list of row-sum pairs based on the sums in ascending order.\",\n    \"Extract the sorted rows from the sorted list of pairs.\",\n    \"Return the sorted matrix as the final output.\"\n  ]\n}\n```", "Round_0": {"code": "def sort_matrix(matrix):\n    # Validate the input matrix\n    if not isinstance(matrix, list) or not all(isinstance(row, list) for row in matrix):\n        raise ValueError(\"Input must be a list of lists.\")\n    if not all(all(isinstance(num, (int, float)) for num in row) for row in matrix):\n        raise ValueError(\"All elements in the matrix must be numerical values.\")\n\n    # Calculate the sum of each row and pair it with the row\n    row_sum_pairs = [(sum(row), row) for row in matrix]\n\n    # Sort the pairs based on the sum\n    row_sum_pairs.sort(key=lambda x: x[0])\n\n    # Extract the sorted rows\n    sorted_matrix = [row for _, row in row_sum_pairs]\n\n    return sorted_matrix\n\n# Example usage\nprint(sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))  # Output: [[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse and validate the input matrix to ensure it is a list of lists with numerical values.\",\n      \"goal\": \"Ensure the input is a valid matrix with rows of potentially varying lengths.\"\n    },\n    {\n      \"description\": \"Calculate the sum of each row in the matrix.\",\n      \"goal\": \"Obtain a list of sums corresponding to each row in the matrix.\"\n    },\n    {\n      \"description\": \"Sort the rows of the matrix based on the calculated row sums in ascending order.\",\n      \"goal\": \"Reorder the matrix rows so that they are sorted by their row sums.\"\n    },\n    {\n      \"description\": \"Return the sorted matrix as the output.\",\n      \"goal\": \"Provide the final sorted matrix to the user.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Receive the input matrix and validate its structure.\",\n    \"Iterate over each row of the matrix to calculate the sum of its elements.\",\n    \"Pair each row with its corresponding sum to facilitate sorting.\",\n    \"Sort the list of row-sum pairs based on the sums in ascending order.\",\n    \"Extract the sorted rows from the sorted list of pairs.\",\n    \"Return the sorted matrix as the final output.\"\n  ]\n}\n```", "Round_0": {"code": "def sort_matrix(matrix):\n    # Validate the input matrix\n    if not isinstance(matrix, list) or not all(isinstance(row, list) for row in matrix):\n        raise ValueError(\"Input must be a list of lists.\")\n\n    # Calculate the sum of each row\n    row_sums = [(sum(row), row) for row in matrix]\n\n    # Sort the rows based on the calculated sums\n    row_sums.sort(key=lambda x: x[0])\n\n    # Extract the sorted rows\n    sorted_matrix = [row for _, row in row_sums]\n\n    return sorted_matrix\n\n# Example usage\nprint(sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))  # Output: [[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"decomposed_subproblems\": [\n    {\n      \"subproblem\": \"Calculate the sum of each row in the matrix.\",\n      \"description\": \"Iterate through each row of the matrix and compute the sum of its elements.\"\n    },\n    {\n      \"subproblem\": \"Sort the matrix based on the row sums.\",\n      \"description\": \"Use the calculated row sums to sort the rows of the matrix in ascending order.\"\n    },\n    {\n      \"subproblem\": \"Handle matrices of different dimensions.\",\n      \"description\": \"Ensure the solution is flexible and can handle matrices with varying numbers of rows and columns.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Input Validation\",\n      \"description\": \"Verify that the input is a valid matrix (list of lists) and handle any edge cases such as empty matrices.\"\n    },\n    {\n      \"step\": \"Calculate Row Sums\",\n      \"description\": \"Iterate over each row in the matrix and calculate the sum of its elements.\"\n    },\n    {\n      \"step\": \"Sort Matrix\",\n      \"description\": \"Sort the rows of the matrix based on the calculated row sums using a sorting algorithm or built-in function.\"\n    },\n    {\n      \"step\": \"Return Sorted Matrix\",\n      \"description\": \"Output the matrix with rows sorted in ascending order based on their sums.\"\n    }\n  ]\n}\n```", "Round_0": {"code": "def sort_matrix(matrix):\n    # Input Validation\n    if not isinstance(matrix, list) or not all(isinstance(row, list) for row in matrix):\n        raise ValueError(\"Input must be a list of lists (matrix).\")\n    \n    # Calculate Row Sums and Sort Matrix\n    sorted_matrix = sorted(matrix, key=lambda row: sum(row))\n    \n    # Return Sorted Matrix\n    return sorted_matrix\n\n# Example usage\nprint(sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))  # Output: [[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to ensure it is a valid matrix.\",\n      \"details\": \"Check that the input is a list of lists, where each sublist represents a row of the matrix and contains numerical values.\"\n    },\n    {\n      \"description\": \"Calculate the sum of each row in the matrix.\",\n      \"details\": \"Iterate over each row of the matrix and compute the sum of its elements.\"\n    },\n    {\n      \"description\": \"Sort the matrix based on the sum of its rows.\",\n      \"details\": \"Use the calculated row sums to sort the rows of the matrix in ascending order.\"\n    },\n    {\n      \"description\": \"Handle matrices of different dimensions.\",\n      \"details\": \"Ensure that the solution works for matrices with varying numbers of rows and columns.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Validate the input to confirm it is a matrix with numerical values.\",\n    \"For each row in the matrix, calculate the sum of its elements.\",\n    \"Create a list of tuples where each tuple contains a row and its corresponding sum.\",\n    \"Sort the list of tuples based on the sum values in ascending order.\",\n    \"Extract the sorted rows from the list of tuples to form the sorted matrix.\",\n    \"Return the sorted matrix as the output.\"\n  ]\n}\n```", "Round_0": {"code": "def sort_matrix(matrix):\n    # Validate the input to confirm it is a matrix with numerical values\n    if not isinstance(matrix, list) or not all(isinstance(row, list) for row in matrix):\n        raise ValueError(\"Input must be a list of lists (matrix).\")\n    if not all(all(isinstance(num, (int, float)) for num in row) for row in matrix):\n        raise ValueError(\"All elements in the matrix must be numbers.\")\n\n    # Create a list of tuples where each tuple contains a row and its corresponding sum\n    row_sums = [(row, sum(row)) for row in matrix]\n\n    # Sort the list of tuples based on the sum values in ascending order\n    row_sums.sort(key=lambda x: x[1])\n\n    # Extract the sorted rows from the list of tuples to form the sorted matrix\n    sorted_matrix = [row for row, _ in row_sums]\n\n    # Return the sorted matrix as the output\n    return sorted_matrix\n\n# Example usage\nprint(sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))  # Output: [[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse and validate the input matrix to ensure it is a list of lists with numerical values.\",\n      \"goal\": \"Ensure the input is a valid matrix with consistent row lengths and numerical entries.\"\n    },\n    {\n      \"description\": \"Calculate the sum of each row in the matrix.\",\n      \"goal\": \"Obtain a list of sums corresponding to each row in the matrix.\"\n    },\n    {\n      \"description\": \"Sort the rows of the matrix based on the calculated row sums in ascending order.\",\n      \"goal\": \"Reorder the matrix rows so that they are sorted by their row sums.\"\n    },\n    {\n      \"description\": \"Return the sorted matrix as the output.\",\n      \"goal\": \"Provide the final sorted matrix to the user.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Receive the input matrix and validate its structure and contents.\",\n    \"Iterate over each row of the matrix to compute the sum of its elements.\",\n    \"Pair each row with its corresponding sum to facilitate sorting.\",\n    \"Sort the list of row-sum pairs based on the sums in ascending order.\",\n    \"Extract the sorted rows from the sorted list of pairs.\",\n    \"Return the sorted matrix as the final output.\"\n  ]\n}\n```", "Round_0": {"code": "def sort_matrix(matrix):\n    # Validate the input matrix\n    if not isinstance(matrix, list) or not all(isinstance(row, list) for row in matrix):\n        raise ValueError(\"Input must be a list of lists.\")\n    if not all(all(isinstance(num, (int, float)) for num in row) for row in matrix):\n        raise ValueError(\"All elements in the matrix must be numbers.\")\n    if len(set(len(row) for row in matrix)) != 1:\n        raise ValueError(\"All rows in the matrix must have the same length.\")\n\n    # Calculate the sum of each row\n    row_sums = [(sum(row), row) for row in matrix]\n\n    # Sort the rows based on the row sums\n    row_sums.sort(key=lambda x: x[0])\n\n    # Extract the sorted rows\n    sorted_matrix = [row for _, row in row_sums]\n\n    return sorted_matrix\n\n# Example usage\nprint(sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))  # Output: [[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse and validate the input matrix to ensure it is a list of lists with numerical values.\",\n      \"details\": \"Check that the input is a list of lists, and each sublist contains numerical values. Handle any invalid input by raising an appropriate error.\"\n    },\n    {\n      \"description\": \"Calculate the sum of each row in the matrix.\",\n      \"details\": \"Iterate over each row in the matrix and compute the sum of its elements.\"\n    },\n    {\n      \"description\": \"Sort the matrix based on the sum of its rows in ascending order.\",\n      \"details\": \"Use the calculated row sums to sort the matrix, ensuring that rows with smaller sums appear first.\"\n    },\n    {\n      \"description\": \"Return the sorted matrix.\",\n      \"details\": \"Output the matrix after sorting, ensuring it maintains the original structure of a list of lists.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Receive the input matrix and validate its structure and content.\",\n    \"Compute the sum of each row in the matrix.\",\n    \"Sort the matrix using the row sums as the key for sorting.\",\n    \"Return the sorted matrix as the final output.\"\n  ]\n}\n```", "Round_0": {"code": "def sort_matrix(matrix):\n    # Validate the input matrix\n    if not isinstance(matrix, list) or not all(isinstance(row, list) for row in matrix):\n        raise ValueError(\"Input must be a list of lists.\")\n    if not all(all(isinstance(num, (int, float)) for num in row) for row in matrix):\n        raise ValueError(\"All elements in the matrix must be numerical values.\")\n\n    # Calculate the sum of each row\n    row_sums = [(sum(row), row) for row in matrix]\n\n    # Sort the matrix based on the sum of its rows\n    row_sums.sort(key=lambda x: x[0])\n\n    # Return the sorted matrix\n    return [row for _, row in row_sums]\n\n# Example usage\nprint(sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))  # Output: [[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"decomposed_subproblems\": [\n    {\n      \"subproblem\": \"Calculate the sum of each row in the matrix.\",\n      \"description\": \"Iterate through each row of the matrix and compute the sum of its elements.\"\n    },\n    {\n      \"subproblem\": \"Sort the matrix based on the row sums.\",\n      \"description\": \"Use the calculated row sums to sort the rows of the matrix in ascending order.\"\n    },\n    {\n      \"subproblem\": \"Handle matrices of different dimensions.\",\n      \"description\": \"Ensure the solution is flexible and can handle matrices with varying numbers of rows and columns.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Define the function signature.\",\n      \"description\": \"Create a function named 'sort_matrix' that takes a matrix as input.\"\n    },\n    {\n      \"step\": \"Calculate row sums.\",\n      \"description\": \"Iterate over each row of the matrix and calculate the sum of its elements.\"\n    },\n    {\n      \"step\": \"Pair row sums with their respective rows.\",\n      \"description\": \"Create a list of tuples where each tuple contains a row sum and the corresponding row.\"\n    },\n    {\n      \"step\": \"Sort the list of tuples.\",\n      \"description\": \"Sort the list of tuples based on the row sums in ascending order.\"\n    },\n    {\n      \"step\": \"Extract sorted rows.\",\n      \"description\": \"Extract the rows from the sorted list of tuples to form the sorted matrix.\"\n    },\n    {\n      \"step\": \"Return the sorted matrix.\",\n      \"description\": \"Return the matrix with rows sorted by their sums.\"\n    }\n  ]\n}\n```", "Round_0": {"code": "def sort_matrix(matrix):\n    # Calculate row sums and pair them with their respective rows\n    row_sums_with_rows = [(sum(row), row) for row in matrix]\n    \n    # Sort the list of tuples based on the row sums in ascending order\n    row_sums_with_rows.sort(key=lambda x: x[0])\n    \n    # Extract the sorted rows\n    sorted_matrix = [row for _, row in row_sums_with_rows]\n    \n    # Return the sorted matrix\n    return sorted_matrix\n\n# Example usage\nprint(sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))  # Output: [[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse and validate the input matrix to ensure it is a list of lists with numerical values.\",\n      \"details\": \"Check if the input is a list of lists and each element is a number. Handle cases where the input is not valid.\"\n    },\n    {\n      \"description\": \"Calculate the sum of each row in the matrix.\",\n      \"details\": \"Iterate through each row of the matrix and compute the sum of its elements.\"\n    },\n    {\n      \"description\": \"Sort the matrix based on the sum of its rows in ascending order.\",\n      \"details\": \"Use the calculated row sums to sort the rows of the matrix.\"\n    },\n    {\n      \"description\": \"Return the sorted matrix.\",\n      \"details\": \"Ensure the output is in the same format as the input, a list of lists.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Receive the input matrix and validate its format.\",\n    \"Compute the sum of each row in the matrix.\",\n    \"Sort the matrix rows based on the computed sums in ascending order.\",\n    \"Return the sorted matrix as the output.\"\n  ]\n}\n```", "Round_0": {"code": "def sort_matrix(matrix):\n    # Validate the input matrix\n    if not isinstance(matrix, list) or not all(isinstance(row, list) for row in matrix):\n        raise ValueError(\"Input must be a list of lists.\")\n    if not all(all(isinstance(num, (int, float)) for num in row) for row in matrix):\n        raise ValueError(\"All elements in the matrix must be numbers.\")\n\n    # Calculate the sum of each row\n    row_sums = [(sum(row), row) for row in matrix]\n\n    # Sort the matrix based on the sum of its rows\n    sorted_matrix = [row for _, row in sorted(row_sums, key=lambda x: x[0])]\n\n    # Return the sorted matrix\n    return sorted_matrix\n\n# Example usage\nprint(sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))  # Output: [[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}], "test": ["def check(sort_matrix):\n\tassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]", "def check(sort_matrix):\n\tassert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 5, 3], [3, 4, 10], [2, 1, 4]]) == [[2, 1, 4], [1, 5, 3], [3, 4, 10]]", "def check(sort_matrix):\n\tassert sort_matrix([[2, 5, 4], [3, 9, 3], [4, 2, 2]]) == [[4, 2, 2], [2, 5, 4], [3, 9, 3]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 1, 6], [7, 8, 3], [1, 1, 6]]) == [[1, 1, 6], [1, 1, 6], [7, 8, 3]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 3, 7], [2, 6, 10], [1, 3, 1]]) == [[1, 3, 1], [3, 3, 7], [2, 6, 10]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 2, 3], [4, 3, 8], [6, 2, 3]]) == [[3, 2, 3], [6, 2, 3], [4, 3, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 5, 5], [6, 8, 6], [2, 5, 4]]) == [[2, 5, 4], [4, 5, 5], [6, 8, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 2, 3], [3, 1, 4], [1, 2, 4]]) == [[1, 2, 3], [1, 2, 4], [3, 1, 4]]", "def check(sort_matrix):\n\tassert sort_matrix([[2, 2, 5], [4, 6, 9], [5, 2, 5]]) == [[2, 2, 5], [5, 2, 5], [4, 6, 9]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 4, 7], [7, 6, 5], [6, 3, 1]]) == [[6, 3, 1], [3, 4, 7], [7, 6, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 1, 5], [4, 5, 1], [4, 5, 1]]) == [[4, 5, 1], [4, 5, 1], [5, 1, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 1, 8], [7, 2, 10], [1, 3, 5]]) == [[1, 3, 5], [4, 1, 8], [7, 2, 10]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 3, 8], [6, 3, 7], [1, 4, 3]]) == [[1, 4, 3], [1, 3, 8], [6, 3, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 5, 6], [6, 9, 1], [2, 5, 1]]) == [[2, 5, 1], [5, 5, 6], [6, 9, 1]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 2, 2], [5, 5, 3], [5, 1, 1]]) == [[5, 1, 1], [5, 2, 2], [5, 5, 3]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 2, 3], [3, 5, 5], [6, 2, 3]]) == [[1, 2, 3], [6, 2, 3], [3, 5, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 7, 7], [6, 7, 5], [1, 1, 2]]) == [[1, 1, 2], [3, 7, 7], [6, 7, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 1, 5], [2, 5, 1], [5, 6, 5]]) == [[1, 1, 5], [2, 5, 1], [5, 6, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 3, 8], [7, 9, 5], [4, 2, 6]]) == [[4, 2, 6], [6, 3, 8], [7, 9, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 6, 4], [7, 5, 10], [6, 4, 5]]) == [[3, 6, 4], [6, 4, 5], [7, 5, 10]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 3, 7], [3, 5, 3], [3, 3, 3]]) == [[3, 3, 3], [3, 5, 3], [3, 3, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 3, 6], [5, 1, 2], [6, 5, 3]]) == [[5, 1, 2], [6, 5, 3], [6, 3, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[2, 2, 8], [5, 9, 10], [5, 1, 5]]) == [[5, 1, 5], [2, 2, 8], [5, 9, 10]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 3, 5], [3, 8, 2], [1, 5, 2]]) == [[1, 5, 2], [5, 3, 5], [3, 8, 2]]", "def check(sort_matrix):\n\tassert sort_matrix([[2, 6, 8], [1, 9, 2], [5, 2, 4]]) == [[5, 2, 4], [1, 9, 2], [2, 6, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 1, 3], [6, 4, 7], [1, 1, 2]]) == [[1, 1, 2], [1, 1, 3], [6, 4, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 2, 8], [1, 4, 5], [2, 4, 2]]) == [[2, 4, 2], [1, 4, 5], [5, 2, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 2, 4], [6, 4, 4], [2, 6, 6]]) == [[3, 2, 4], [6, 4, 4], [2, 6, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 2, 4], [5, 1, 2], [1, 5, 3]]) == [[5, 1, 2], [1, 5, 3], [5, 2, 4]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 3, 1], [5, 9, 5], [5, 4, 1]]) == [[5, 3, 1], [5, 4, 1], [5, 9, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 2, 6], [1, 6, 5], [5, 1, 3]]) == [[5, 1, 3], [1, 6, 5], [6, 2, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 7, 8], [2, 2, 9], [6, 4, 1]]) == [[6, 4, 1], [2, 2, 9], [6, 7, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[2, 1, 1], [4, 4, 2], [3, 5, 4]]) == [[2, 1, 1], [4, 4, 2], [3, 5, 4]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 4, 4], [3, 4, 7], [4, 5, 3]]) == [[4, 5, 3], [6, 4, 4], [3, 4, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 7, 7], [-6, 7, -6], [5, -2, 3]]) == [[-6, 7, -6], [5, -2, 3], [1, 7, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 4, 5], [2, 4, 0], [5, -4, 3]]) == [[5, -4, 3], [2, 4, 0], [1, 4, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 2, 3], [-6, 6, -7], [6, 1, 5]]) == [[-6, 6, -7], [5, 2, 3], [6, 1, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 3, 4], [0, 6, -2], [5, -3, 6]]) == [[0, 6, -2], [1, 3, 4], [5, -3, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 4, 4], [3, 3, -2], [3, 2, 6]]) == [[3, 3, -2], [3, 4, 4], [3, 2, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 2, 7], [-5, 2, -1], [2, -6, 2]]) == [[-5, 2, -1], [2, -6, 2], [6, 2, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 2, 1], [3, 7, -8], [3, -4, 1]]) == [[3, -4, 1], [3, 7, -8], [1, 2, 1]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 4, 7], [-6, 8, 0], [4, -5, 2]]) == [[4, -5, 2], [-6, 8, 0], [3, 4, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 3, 5], [0, 6, 0], [1, -6, 2]]) == [[1, -6, 2], [0, 6, 0], [4, 3, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 6, 1], [-7, 5, -6], [5, -1, 2]]) == [[-7, 5, -6], [5, -1, 2], [5, 6, 1]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 2, 8], [1, 2, -3], [6, 1, 2]]) == [[1, 2, -3], [6, 1, 2], [3, 2, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 3, 1], [0, 9, -2], [1, -5, 5]]) == [[1, -5, 5], [3, 3, 1], [0, 9, -2]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 7, 1], [-6, 4, -1], [2, -2, 2]]) == [[-6, 4, -1], [2, -2, 2], [5, 7, 1]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 5, 2], [-6, 7, -1], [2, -5, 4]]) == [[-6, 7, -1], [2, -5, 4], [6, 5, 2]]", "def check(sort_matrix):\n\tassert sort_matrix([[2, 6, 7], [-1, 2, -2], [1, -2, 1]]) == [[-1, 2, -2], [1, -2, 1], [2, 6, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 3, 8], [-1, 4, -2], [5, 2, 1]]) == [[-1, 4, -2], [5, 2, 1], [1, 3, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 3, 3], [3, 3, 0], [3, 1, 3]]) == [[3, 3, 0], [3, 1, 3], [6, 3, 3]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 7, 8], [-7, 7, -1], [2, 1, 5]]) == [[-7, 7, -1], [2, 1, 5], [4, 7, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 1, 2], [-3, 8, -9], [5, 3, 6]]) == [[-3, 8, -9], [6, 1, 2], [5, 3, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 4, 3], [-2, 8, -10], [3, 0, 6]]) == [[-2, 8, -10], [3, 0, 6], [3, 4, 3]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 5, 5], [-4, 3, -9], [3, -1, 1]]) == [[-4, 3, -9], [3, -1, 1], [3, 5, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 2, 2], [-2, 1, -8], [5, -5, 1]]) == [[-2, 1, -8], [5, -5, 1], [4, 2, 2]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 4, 7], [-5, 4, -8], [1, 1, 4]]) == [[-5, 4, -8], [1, 1, 4], [5, 4, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 4, 5], [2, 7, -10], [1, 2, 2]]) == [[2, 7, -10], [1, 2, 2], [6, 4, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 7, 6], [2, 1, -4], [5, -6, 4]]) == [[2, 1, -4], [5, -6, 4], [5, 7, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 5, 8], [3, 3, -2], [3, -1, 3]]) == [[3, 3, -2], [3, -1, 3], [5, 5, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 1, 8], [-2, 3, -6], [1, 0, 2]]) == [[-2, 3, -6], [1, 0, 2], [5, 1, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 7, 5], [-4, 9, 0], [2, -4, 2]]) == [[2, -4, 2], [-4, 9, 0], [4, 7, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 5, 6], [2, 1, -2], [1, 1, 3]]) == [[2, 1, -2], [1, 1, 3], [1, 5, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 5, 8], [-3, 9, 0], [4, 3, 3]]) == [[-3, 9, 0], [4, 3, 3], [4, 5, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 4, 4], [1, 6, -5], [5, 0, 2]]) == [[1, 6, -5], [5, 0, 2], [3, 4, 4]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 4, 2], [-6, 7, -3], [4, 3, 5]]) == [[-6, 7, -3], [4, 4, 2], [4, 3, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 7, 7], [0, 5, -1], [1, -1, 4]]) == [[0, 5, -1], [1, -1, 4], [4, 7, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[10, 12, 8], [5, 1, 5], [2, 5, 8]]) == [[5, 1, 5], [2, 5, 8], [10, 12, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 8, 13], [11, 9, 6], [3, 6, 4]]) == [[3, 6, 4], [3, 8, 13], [11, 9, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 11, 8], [2, 5, 6], [6, 3, 5]]) == [[2, 5, 6], [6, 3, 5], [1, 11, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 6, 11], [1, 8, 8], [2, 2, 6]]) == [[2, 2, 6], [1, 8, 8], [1, 6, 11]]", "def check(sort_matrix):\n\tassert sort_matrix([[9, 4, 8], [10, 7, 2], [1, 3, 2]]) == [[1, 3, 2], [10, 7, 2], [9, 4, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[7, 4, 4], [9, 2, 8], [1, 4, 2]]) == [[1, 4, 2], [7, 4, 4], [9, 2, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 5, 12], [2, 9, 7], [5, 4, 5]]) == [[5, 4, 5], [2, 9, 7], [4, 5, 12]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 9, 4], [7, 3, 6], [3, 1, 9]]) == [[3, 1, 9], [3, 9, 4], [7, 3, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 11, 11], [4, 9, 5], [4, 3, 7]]) == [[4, 3, 7], [4, 9, 5], [1, 11, 11]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 4, 6], [2, 6, 1], [6, 1, 4]]) == [[2, 6, 1], [6, 1, 4], [6, 4, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[9, 11, 11], [1, 4, 1], [4, 1, 8]]) == [[1, 4, 1], [4, 1, 8], [9, 11, 11]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 11, 4], [5, 7, 2], [5, 5, 6]]) == [[5, 7, 2], [1, 11, 4], [5, 5, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[9, 9, 11], [2, 8, 5], [3, 6, 6]]) == [[2, 8, 5], [3, 6, 6], [9, 9, 11]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 3, 4], [5, 1, 6], [2, 6, 4]]) == [[3, 3, 4], [5, 1, 6], [2, 6, 4]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 9, 13], [9, 9, 3], [6, 4, 4]]) == [[6, 4, 4], [9, 9, 3], [1, 9, 13]]", "def check(sort_matrix):\n\tassert sort_matrix([[9, 4, 11], [5, 7, 4], [3, 5, 4]]) == [[3, 5, 4], [5, 7, 4], [9, 4, 11]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 8, 12], [1, 3, 2], [6, 4, 8]]) == [[1, 3, 2], [6, 4, 8], [5, 8, 12]]", "def check(sort_matrix):\n\tassert sort_matrix([[10, 13, 6], [3, 6, 7], [6, 4, 4]]) == [[6, 4, 4], [3, 6, 7], [10, 13, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[7, 11, 7], [4, 1, 3], [5, 5, 7]]) == [[4, 1, 3], [5, 5, 7], [7, 11, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[9, 9, 10], [10, 2, 7], [5, 6, 9]]) == [[10, 2, 7], [5, 6, 9], [9, 9, 10]]", "def check(sort_matrix):\n\tassert sort_matrix([[8, 12, 11], [1, 5, 7], [4, 3, 5]]) == [[4, 3, 5], [1, 5, 7], [8, 12, 11]]", "def check(sort_matrix):\n\tassert sort_matrix([[2, 6, 14], [5, 2, 3], [3, 1, 5]]) == [[3, 1, 5], [5, 2, 3], [2, 6, 14]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 3, 5], [7, 5, 3], [6, 6, 7]]) == [[6, 3, 5], [7, 5, 3], [6, 6, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 13, 4], [4, 4, 2], [4, 1, 9]]) == [[4, 4, 2], [4, 1, 9], [1, 13, 4]]", "def check(sort_matrix):\n\tassert sort_matrix([[8, 7, 4], [5, 8, 4], [2, 4, 1]]) == [[2, 4, 1], [5, 8, 4], [8, 7, 4]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 8, 9], [5, 4, 4], [2, 5, 6]]) == [[5, 4, 4], [2, 5, 6], [4, 8, 9]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 10, 14], [9, 7, 7], [5, 6, 7]]) == [[5, 6, 7], [9, 7, 7], [5, 10, 14]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 6, 4], [8, 8, 1], [2, 5, 1]]) == [[2, 5, 1], [5, 6, 4], [8, 8, 1]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 12, 12], [3, 5, 3], [5, 3, 1]]) == [[5, 3, 1], [3, 5, 3], [5, 12, 12]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 7, 10], [10, 4, 8], [5, 6, 8]]) == [[5, 6, 8], [4, 7, 10], [10, 4, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[2, 4, 7], [10, 3, 3], [6, 4, 6]]) == [[2, 4, 7], [10, 3, 3], [6, 4, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 5, 6], [11, 9, 3], [1, 3, 9]]) == [[1, 3, 9], [5, 5, 6], [11, 9, 3]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 8, 10], [7, 7, 7], [4, 3, 3]]) == [[4, 3, 3], [3, 8, 10], [7, 7, 7]]"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 102, 102, 102, 102, 102], "passed": true, "pass": true, "pass_num": 10, "round": 1218, "mutate_method": "rephrase_one", "save_node": false, "parent_index": 792}
