{"task_id": "HumanEval/57", "prompt": "def monotonic(l: list):\t\n'''Return True if list elements are monotonically increasing or decreasing.\n>>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''", "entry_point": "monotonic", "canonical_solution": "    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return False\n", "test": ["def check(monotonic):\n\tassert monotonic([6, 2, 5, 7, 4, 65]) == False", "def check(monotonic):\n\tassert monotonic([3, 3, 7, 4, 3, 64]) == False", "def check(monotonic):\n\tassert monotonic([3, 1, 5, 8]) == False", "def check(monotonic):\n\tassert monotonic([4, 3, 5, 7, 1, 62]) == False", "def check(monotonic):\n\tassert monotonic([4, 4, 1, 1]) == True", "def check(monotonic):\n\tassert monotonic([3, 2, 7, 6]) == False", "def check(monotonic):\n\tassert monotonic([2, 7, 7, 15]) == True", "def check(monotonic):\n\tassert monotonic([4, 7, 7, 1, 1, 57]) == False", "def check(monotonic):\n\tassert monotonic([1, 1, 8, 13]) == True", "def check(monotonic):\n\tassert monotonic([5, 5, 8, 17]) == True", "def check(monotonic):\n\tassert monotonic([2, 22, 8, 7]) == False", "def check(monotonic):\n\tassert monotonic([2, 23, 5, 6]) == False", "def check(monotonic):\n\tassert monotonic([3, 2, 2, 18]) == False", "def check(monotonic):\n\tassert monotonic([2, 2, 2, 6]) == True", "def check(monotonic):\n\tassert monotonic([7, 5, 3, 2]) == True", "def check(monotonic):\n\tassert monotonic([7, 5, 2, -5]) == True", "def check(monotonic):\n\tassert monotonic([6, 19, 9, 12]) == False", "def check(monotonic):\n\tassert monotonic([1, 2, 4, 10]) == True", "def check(monotonic):\n\tassert monotonic([5, 4, 6, 18]) == False", "def check(monotonic):\n\tassert monotonic([6, 1, 7, 3, 4, 56]) == False", "def check(monotonic):\n\tassert monotonic([6, 3, 7, 3, 8, 61]) == False", "def check(monotonic):\n\tassert monotonic([2, 17, 7, 8]) == False", "def check(monotonic):\n\tassert monotonic([5, 1, 4, 5, 3, 59]) == False", "def check(monotonic):\n\tassert monotonic([3, 5, 5, 5, 3, 65]) == False", "def check(monotonic):\n\tassert monotonic([6, 19, 9, 7]) == False", "def check(monotonic):\n\tassert monotonic([1, 16, 9, 7]) == False", "def check(monotonic):\n\tassert monotonic([7, 6, 2, -14]) == True", "def check(monotonic):\n\tassert monotonic([5, 6, 4, 16]) == False", "def check(monotonic):\n\tassert monotonic([1, 6, 5, -10]) == False", "def check(monotonic):\n\tassert monotonic([1, 22, 4, 10]) == False", "def check(monotonic):\n\tassert monotonic([1, 6, 8, 6, 3, 62]) == False", "def check(monotonic):\n\tassert monotonic([1, 5, 1, 6, 4, 62]) == False", "def check(monotonic):\n\tassert monotonic([1, 1, 7, 2, 4, 56]) == False", "def check(monotonic):\n\tassert monotonic([2, 1, 5, 12]) == False", "def check(monotonic):\n\tassert monotonic([1, 3, 1, 4]) == False", "def check(monotonic):\n\tassert monotonic([4, 19, 8, 7]) == False", "def check(monotonic):\n\tassert monotonic([3, 5, 8, 5, 5, 56]) == False", "def check(monotonic):\n\tassert monotonic([1, 3, 6, 25]) == True", "def check(monotonic):\n\tassert monotonic([2, 3, 1, 7]) == False", "def check(monotonic):\n\tassert monotonic([8, 6, 2, 5]) == False", "def check(monotonic):\n\tassert monotonic([6, 3, 6, 2, 8, 62]) == False", "def check(monotonic):\n\tassert monotonic([6, 4, 6, 4]) == False", "def check(monotonic):\n\tassert monotonic([3, 6, 1, 3]) == False", "def check(monotonic):\n\tassert monotonic([4, 2, 5, 7, 6, 62]) == False", "def check(monotonic):\n\tassert monotonic([3, 7, 1, 20]) == False", "def check(monotonic):\n\tassert monotonic([3, 1, 5, 17]) == False", "def check(monotonic):\n\tassert monotonic([5, 5, 7, 5, 5, 57]) == False", "def check(monotonic):\n\tassert monotonic([1, 20, 4, 10]) == False", "def check(monotonic):\n\tassert monotonic([6, 16, 4, 14]) == False", "def check(monotonic):\n\tassert monotonic([3, 17, 2, 14]) == False", "def check(monotonic):\n\tassert monotonic([4, 5, 7, 2, 8, 63]) == False", "def check(monotonic):\n\tassert monotonic([1, 2, 4, 20]) == True", "def check(monotonic):\n\tassert monotonic([3, 3, 3, -5]) == True", "def check(monotonic):\n\tassert monotonic([4, 2, 3, 4]) == False", "def check(monotonic):\n\tassert monotonic([3, 5, 4, 2, 1, 60]) == False", "def check(monotonic):\n\tassert monotonic([6, 4, 7, 24]) == False", "def check(monotonic):\n\tassert monotonic([6, 3, 1, 1, 2, 61]) == False", "def check(monotonic):\n\tassert monotonic([1, 4, 3, -8]) == False", "def check(monotonic):\n\tassert monotonic([2, 6, 3, 5, 10, 63]) == False", "def check(monotonic):\n\tassert monotonic([4, 6, 3, 3, 10, 57]) == False", "def check(monotonic):\n\tassert monotonic([5, 4, 9, 14]) == False", "def check(monotonic):\n\tassert monotonic([1, 3, 5, 17]) == True", "def check(monotonic):\n\tassert monotonic([6, 7, 1, 8]) == False", "def check(monotonic):\n\tassert monotonic([9, 2, 5, -5]) == False", "def check(monotonic):\n\tassert monotonic([3, 2, 5, 1]) == False", "def check(monotonic):\n\tassert monotonic([9, 9, 9, 9]) == True", "def check(monotonic):\n\tassert monotonic([1, 2, 3, 4, 5, 60]) == True", "def check(monotonic):\n\tassert monotonic([6, 2, 5, 6, 3, 62]) == False", "def check(monotonic):\n\tassert monotonic([5, 1, 3, -9]) == False", "def check(monotonic):\n\tassert monotonic([1, 5, 7, 6]) == False", "def check(monotonic):\n\tassert monotonic([1, 24, 9, 12]) == False", "def check(monotonic):\n\tassert monotonic([2, 6, 7, 6, 6, 61]) == False", "def check(monotonic):\n\tassert monotonic([4, 1, 1, 0]) == True", "def check(monotonic):\n\tassert monotonic([2, 1, 3, 3, 3, 65]) == False", "def check(monotonic):\n\tassert monotonic([1, 2, 8, 5, 9, 55]) == False", "def check(monotonic):\n\tassert monotonic([2, 16, 2, 11]) == False", "def check(monotonic):\n\tassert monotonic([6, 16, 3, 15]) == False", "def check(monotonic):\n\tassert monotonic([1, 5, 2, 4, 2, 55]) == False", "def check(monotonic):\n\tassert monotonic([3, 1, 8, 7, 7, 65]) == False", "def check(monotonic):\n\tassert monotonic([2, 20, 2, 5]) == False", "def check(monotonic):\n\tassert monotonic([7, 2, 3, -10]) == False", "def check(monotonic):\n\tassert monotonic([4, 3, 5, 4, 8, 63]) == False", "def check(monotonic):\n\tassert monotonic([7, 2, 1, -12]) == True", "def check(monotonic):\n\tassert monotonic([9, 4, 1, -6]) == True", "def check(monotonic):\n\tassert monotonic([2, 15, 2, 15]) == False", "def check(monotonic):\n\tassert monotonic([6, 2, 4, 4]) == False", "def check(monotonic):\n\tassert monotonic([3, 3, 2, 4]) == False", "def check(monotonic):\n\tassert monotonic([2, 2, 8, 1, 3, 63]) == False", "def check(monotonic):\n\tassert monotonic([2, 2, 8, 12]) == True", "def check(monotonic):\n\tassert monotonic([3, 4, 2, 1]) == False", "def check(monotonic):\n\tassert monotonic([4, 4, 3, 15]) == False", "def check(monotonic):\n\tassert monotonic([2, 6, 5, 3]) == False", "def check(monotonic):\n\tassert monotonic([6, 5, 7, 7, 6, 55]) == False", "def check(monotonic):\n\tassert monotonic([2, 4, 4, 14]) == True", "def check(monotonic):\n\tassert monotonic([5, 4, 8, 5]) == False", "def check(monotonic):\n\tassert monotonic([4, 5, 1, -7]) == False", "def check(monotonic):\n\tassert monotonic([3, 3, 6, 8]) == True", "def check(monotonic):\n\tassert monotonic([9, 5, 5, -14]) == True", "def check(monotonic):\n\tassert monotonic([2, 1, 4, 4, 5, 55]) == False", "def check(monotonic):\n\tassert monotonic([4, 1, 0, -10]) == True", "def check(monotonic):\n\tassert monotonic([5, 5, 7, 21]) == True", "def check(monotonic):\n\tassert monotonic([1, 1, 3, 18]) == True", "def check(monotonic):\n\tassert monotonic([1, 6, 4, -7]) == False", "def check(monotonic):\n\tassert monotonic([4, 3, 4, 17]) == False", "def check(monotonic):\n\tassert monotonic([7, 2, 1, -6]) == True", "def check(monotonic):\n\tassert monotonic([1, 2, 3, 2, 5, 60]) == False", "def check(monotonic):\n\tassert monotonic([5, 2, 5, 2]) == False", "def check(monotonic):\n\tassert monotonic([2, 3, 8, 8]) == True", "def check(monotonic):\n\tassert monotonic([5, 2, 3, 4]) == False", "def check(monotonic):\n\tassert monotonic([8, 3, 2, -15]) == True", "def check(monotonic):\n\tassert monotonic([3, 4, 3, 15]) == False", "def check(monotonic):\n\tassert monotonic([2, 1, 5, 3]) == False", "def check(monotonic):\n\tassert monotonic([2, 4, 3, 19]) == False"], "test_case_list": ["assert monotonic([6, 2, 5, 7, 4, 65]) == False", "assert monotonic([3, 3, 7, 4, 3, 64]) == False", "assert monotonic([3, 1, 5, 8]) == False", "assert monotonic([4, 3, 5, 7, 1, 62]) == False", "assert monotonic([4, 4, 1, 1]) == True", "assert monotonic([3, 2, 7, 6]) == False", "assert monotonic([2, 7, 7, 15]) == True", "assert monotonic([4, 7, 7, 1, 1, 57]) == False", "assert monotonic([1, 1, 8, 13]) == True", "assert monotonic([5, 5, 8, 17]) == True", "assert monotonic([2, 22, 8, 7]) == False", "assert monotonic([2, 23, 5, 6]) == False", "assert monotonic([3, 2, 2, 18]) == False", "assert monotonic([2, 2, 2, 6]) == True", "assert monotonic([7, 5, 3, 2]) == True", "assert monotonic([7, 5, 2, -5]) == True", "assert monotonic([6, 19, 9, 12]) == False", "assert monotonic([1, 2, 4, 10]) == True", "assert monotonic([5, 4, 6, 18]) == False", "assert monotonic([6, 1, 7, 3, 4, 56]) == False", "assert monotonic([6, 3, 7, 3, 8, 61]) == False", "assert monotonic([2, 17, 7, 8]) == False", "assert monotonic([5, 1, 4, 5, 3, 59]) == False", "assert monotonic([3, 5, 5, 5, 3, 65]) == False", "assert monotonic([6, 19, 9, 7]) == False", "assert monotonic([1, 16, 9, 7]) == False", "assert monotonic([7, 6, 2, -14]) == True", "assert monotonic([5, 6, 4, 16]) == False", "assert monotonic([1, 6, 5, -10]) == False", "assert monotonic([1, 22, 4, 10]) == False", "assert monotonic([1, 6, 8, 6, 3, 62]) == False", "assert monotonic([1, 5, 1, 6, 4, 62]) == False", "assert monotonic([1, 1, 7, 2, 4, 56]) == False", "assert monotonic([2, 1, 5, 12]) == False", "assert monotonic([1, 3, 1, 4]) == False", "assert monotonic([4, 19, 8, 7]) == False", "assert monotonic([3, 5, 8, 5, 5, 56]) == False", "assert monotonic([1, 3, 6, 25]) == True", "assert monotonic([2, 3, 1, 7]) == False", "assert monotonic([8, 6, 2, 5]) == False", "assert monotonic([6, 3, 6, 2, 8, 62]) == False", "assert monotonic([6, 4, 6, 4]) == False", "assert monotonic([3, 6, 1, 3]) == False", "assert monotonic([4, 2, 5, 7, 6, 62]) == False", "assert monotonic([3, 7, 1, 20]) == False", "assert monotonic([3, 1, 5, 17]) == False", "assert monotonic([5, 5, 7, 5, 5, 57]) == False", "assert monotonic([1, 20, 4, 10]) == False", "assert monotonic([6, 16, 4, 14]) == False", "assert monotonic([3, 17, 2, 14]) == False", "assert monotonic([4, 5, 7, 2, 8, 63]) == False", "assert monotonic([1, 2, 4, 20]) == True", "assert monotonic([3, 3, 3, -5]) == True", "assert monotonic([4, 2, 3, 4]) == False", "assert monotonic([3, 5, 4, 2, 1, 60]) == False", "assert monotonic([6, 4, 7, 24]) == False", "assert monotonic([6, 3, 1, 1, 2, 61]) == False", "assert monotonic([1, 4, 3, -8]) == False", "assert monotonic([2, 6, 3, 5, 10, 63]) == False", "assert monotonic([4, 6, 3, 3, 10, 57]) == False", "assert monotonic([5, 4, 9, 14]) == False", "assert monotonic([1, 3, 5, 17]) == True", "assert monotonic([6, 7, 1, 8]) == False", "assert monotonic([9, 2, 5, -5]) == False", "assert monotonic([3, 2, 5, 1]) == False", "assert monotonic([9, 9, 9, 9]) == True", "assert monotonic([1, 2, 3, 4, 5, 60]) == True", "assert monotonic([6, 2, 5, 6, 3, 62]) == False", "assert monotonic([5, 1, 3, -9]) == False", "assert monotonic([1, 5, 7, 6]) == False", "assert monotonic([1, 24, 9, 12]) == False", "assert monotonic([2, 6, 7, 6, 6, 61]) == False", "assert monotonic([4, 1, 1, 0]) == True", "assert monotonic([2, 1, 3, 3, 3, 65]) == False", "assert monotonic([1, 2, 8, 5, 9, 55]) == False", "assert monotonic([2, 16, 2, 11]) == False", "assert monotonic([6, 16, 3, 15]) == False", "assert monotonic([1, 5, 2, 4, 2, 55]) == False", "assert monotonic([3, 1, 8, 7, 7, 65]) == False", "assert monotonic([2, 20, 2, 5]) == False", "assert monotonic([7, 2, 3, -10]) == False", "assert monotonic([4, 3, 5, 4, 8, 63]) == False", "assert monotonic([7, 2, 1, -12]) == True", "assert monotonic([9, 4, 1, -6]) == True", "assert monotonic([2, 15, 2, 15]) == False", "assert monotonic([6, 2, 4, 4]) == False", "assert monotonic([3, 3, 2, 4]) == False", "assert monotonic([2, 2, 8, 1, 3, 63]) == False", "assert monotonic([2, 2, 8, 12]) == True", "assert monotonic([3, 4, 2, 1]) == False", "assert monotonic([4, 4, 3, 15]) == False", "assert monotonic([2, 6, 5, 3]) == False", "assert monotonic([6, 5, 7, 7, 6, 55]) == False", "assert monotonic([2, 4, 4, 14]) == True", "assert monotonic([5, 4, 8, 5]) == False", "assert monotonic([4, 5, 1, -7]) == False", "assert monotonic([3, 3, 6, 8]) == True", "assert monotonic([9, 5, 5, -14]) == True", "assert monotonic([2, 1, 4, 4, 5, 55]) == False", "assert monotonic([4, 1, 0, -10]) == True", "assert monotonic([5, 5, 7, 21]) == True", "assert monotonic([1, 1, 3, 18]) == True", "assert monotonic([1, 6, 4, -7]) == False", "assert monotonic([4, 3, 4, 17]) == False", "assert monotonic([7, 2, 1, -6]) == True", "assert monotonic([1, 2, 3, 2, 5, 60]) == False", "assert monotonic([5, 2, 5, 2]) == False", "assert monotonic([2, 3, 8, 8]) == True", "assert monotonic([5, 2, 3, 4]) == False", "assert monotonic([8, 3, 2, -15]) == True", "assert monotonic([3, 4, 3, 15]) == False", "assert monotonic([2, 1, 5, 3]) == False", "assert monotonic([2, 4, 3, 19]) == False"], "nl": "Return True is list elements are monotonically increasing or decreasing.\n    ", "func": "def monotonic(l: list):", "examples": ">>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    ", "repair_prompt": ["def monotonic(l: list):\t\n'''Return True if list elements are monotonically increasing or decreasing.\n>>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''"], "completion": "from typing import *\ndef monotonic(l: list):\n    '''Return True if list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    if len(l) < 2:\n        return True\n    \n    increasing = all(l[i] <= l[i + 1] for i in range(len(l) - 1))\n    decreasing = all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n    \n    return increasing or decreasing", "completions": ["from typing import *\ndef monotonic(l: list):\n    '''Return True if list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    if len(l) < 2:\n        return True\n    \n    increasing = all(l[i] <= l[i + 1] for i in range(len(l) - 1))\n    decreasing = all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n    \n    return increasing or decreasing", "from typing import *\ndef monotonic(l: list):\n    '''Return True if list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    if len(l) < 2:\n        return True\n    \n    increasing = all(l[i] <= l[i + 1] for i in range(len(l) - 1))\n    decreasing = all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n    \n    return increasing or decreasing", "from typing import *\ndef monotonic(l: list):\n    '''Return True if list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    if len(l) < 2:\n        return True\n    \n    increasing = True\n    decreasing = True\n    \n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        if l[i] < l[i - 1]:\n            increasing = False\n    \n    return increasing or decreasing", "from typing import *\ndef monotonic(l: list):\n    '''Return True if list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    if len(l) < 2:\n        return True\n    \n    increasing = all(l[i] <= l[i + 1] for i in range(len(l) - 1))\n    decreasing = all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n    \n    return increasing or decreasing", "from typing import *\ndef monotonic(l: list):\n    '''Return True if list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    if len(l) < 2:\n        return True\n\n    increasing = True\n    decreasing = True\n\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        if l[i] < l[i - 1]:\n            increasing = False\n\n    return increasing or decreasing", "from typing import *\ndef monotonic(l: list):\n    '''Return True if list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    if len(l) < 2:\n        return True\n    \n    increasing = all(l[i] < l[i + 1] for i in range(len(l) - 1))\n    decreasing = all(l[i] > l[i + 1] for i in range(len(l) - 1))\n    \n    return increasing or decreasing", "from typing import *\ndef monotonic(l: list):\n    '''Return True if list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    if len(l) < 2:\n        return True\n    \n    increasing = True\n    decreasing = True\n    \n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        if l[i] < l[i - 1]:\n            increasing = False\n    \n    return increasing or decreasing", "from typing import *\ndef monotonic(l: list):\n    '''Return True if list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    if len(l) < 2:\n        return True\n\n    increasing = True\n    decreasing = True\n\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        if l[i] < l[i - 1]:\n            increasing = False\n\n    return increasing or decreasing", "from typing import *\ndef monotonic(l: list):\n    '''Return True if list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    if len(l) < 2:\n        return True\n\n    increasing = True\n    decreasing = True\n\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        if l[i] < l[i - 1]:\n            increasing = False\n\n    return increasing or decreasing", "from typing import *\ndef monotonic(l: list):\n    '''Return True if list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    if len(l) < 2:\n        return True\n    \n    increasing = all(l[i] <= l[i + 1] for i in range(len(l) - 1))\n    decreasing = all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n    \n    return increasing or decreasing"], "session_history": {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Extract the list from the requirement document.\",\n        \"details\": \"The developer needs to identify and extract the list from the provided docstring example.\"\n      },\n      {\n        \"subproblem\": \"Check for Monotonically Increasing Sequence\",\n        \"details\": \"Determine if the list elements are in strictly increasing order.\"\n      },\n      {\n        \"subproblem\": \"Check for Monotonically Decreasing Sequence\",\n        \"details\": \"Determine if the list elements are in strictly decreasing order.\"\n      },\n      {\n        \"subproblem\": \"Return the Result\",\n        \"details\": \"Based on the checks, return True if the list is monotonically increasing or decreasing, otherwise return False.\"\n      }\n    ],\n    \"high_level_steps\": [\n      {\n        \"step\": \"Parse the requirement to extract the list.\",\n        \"details\": \"Extract the list from the provided docstring example.\"\n      },\n      {\n        \"step\": \"Implement the function to check for monotonically increasing sequence.\",\n        \"details\": \"Compare each element with the next one to ensure each is less than or equal to the next.\"\n      },\n      {\n        \"step\": \"Implement the function to check for monotonically decreasing sequence.\",\n        \"details\": \"Compare each element with the next one to ensure each is greater than or equal to the next.\"\n      },\n      {\n        \"step\": \"Combine the results of both checks.\",\n        \"details\": \"Return True if either the list is monotonically increasing or decreasing, otherwise return False.\"\n      },\n      {\n        \"step\": \"Test the function with provided examples.\",\n        \"details\": \"Validate the function against the examples given in the requirement.\"\n      }\n    ]\n  }\n}\n```", "Round_0": {"code": "def monotonic(l: list):\n    '''Return True if list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    if len(l) < 2:\n        return True\n    \n    increasing = all(l[i] <= l[i + 1] for i in range(len(l) - 1))\n    decreasing = all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n    \n    return increasing or decreasing", "report": "The compilation output of the preceding code is: Code Test Passed."}}, "session_historys": [{"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Extract the list from the requirement document.\",\n        \"details\": \"The developer needs to identify and extract the list from the provided docstring example.\"\n      },\n      {\n        \"subproblem\": \"Check for Monotonically Increasing Sequence\",\n        \"details\": \"Determine if the list elements are in strictly increasing order.\"\n      },\n      {\n        \"subproblem\": \"Check for Monotonically Decreasing Sequence\",\n        \"details\": \"Determine if the list elements are in strictly decreasing order.\"\n      },\n      {\n        \"subproblem\": \"Return the Result\",\n        \"details\": \"Based on the checks, return True if the list is monotonically increasing or decreasing, otherwise return False.\"\n      }\n    ],\n    \"high_level_steps\": [\n      {\n        \"step\": \"Parse the requirement to extract the list.\",\n        \"details\": \"Extract the list from the provided docstring example.\"\n      },\n      {\n        \"step\": \"Implement the function to check for monotonically increasing sequence.\",\n        \"details\": \"Compare each element with the next one to ensure each is less than or equal to the next.\"\n      },\n      {\n        \"step\": \"Implement the function to check for monotonically decreasing sequence.\",\n        \"details\": \"Compare each element with the next one to ensure each is greater than or equal to the next.\"\n      },\n      {\n        \"step\": \"Combine the results of both checks.\",\n        \"details\": \"Return True if either the list is monotonically increasing or decreasing, otherwise return False.\"\n      },\n      {\n        \"step\": \"Test the function with provided examples.\",\n        \"details\": \"Validate the function against the examples given in the requirement.\"\n      }\n    ]\n  }\n}\n```", "Round_0": {"code": "def monotonic(l: list):\n    '''Return True if list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    if len(l) < 2:\n        return True\n    \n    increasing = all(l[i] <= l[i + 1] for i in range(len(l) - 1))\n    decreasing = all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n    \n    return increasing or decreasing", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Extract the list from the requirement document.\",\n        \"details\": \"The developer needs to identify and extract the list from the provided docstring example.\"\n      },\n      {\n        \"subproblem\": \"Check for Monotonically Increasing Sequence\",\n        \"details\": \"Determine if the list elements are in strictly increasing order.\"\n      },\n      {\n        \"subproblem\": \"Check for Monotonically Decreasing Sequence\",\n        \"details\": \"Determine if the list elements are in strictly decreasing order.\"\n      },\n      {\n        \"subproblem\": \"Return the Result\",\n        \"details\": \"Based on the checks, return True if the list is monotonically increasing or decreasing, otherwise return False.\"\n      }\n    ],\n    \"high_level_steps\": [\n      {\n        \"step\": \"Parse the requirement to extract the list.\",\n        \"details\": \"Extract the list from the provided docstring example.\"\n      },\n      {\n        \"step\": \"Implement the function to check for monotonically increasing sequence.\",\n        \"details\": \"Iterate through the list to check if each element is less than or equal to the next element.\"\n      },\n      {\n        \"step\": \"Implement the function to check for monotonically decreasing sequence.\",\n        \"details\": \"Iterate through the list to check if each element is greater than or equal to the next element.\"\n      },\n      {\n        \"step\": \"Combine the results of both checks.\",\n        \"details\": \"Return True if either the list is monotonically increasing or decreasing, otherwise return False.\"\n      },\n      {\n        \"step\": \"Test the function with provided examples.\",\n        \"details\": \"Use the provided examples to verify the correctness of the implementation.\"\n      }\n    ]\n  }\n}\n```", "Round_0": {"code": "def monotonic(l: list):\n    '''Return True if list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    if len(l) < 2:\n        return True\n    \n    increasing = all(l[i] <= l[i + 1] for i in range(len(l) - 1))\n    decreasing = all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n    \n    return increasing or decreasing", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Extract the list from the requirement document.\",\n        \"details\": \"The developer needs to identify and extract the list from the provided docstring example.\"\n      },\n      {\n        \"subproblem\": \"Check for Monotonically Increasing Sequence\",\n        \"details\": \"Determine if the list elements are in strictly increasing order.\"\n      },\n      {\n        \"subproblem\": \"Check for Monotonically Decreasing Sequence\",\n        \"details\": \"Determine if the list elements are in strictly decreasing order.\"\n      },\n      {\n        \"subproblem\": \"Return the Result\",\n        \"details\": \"Based on the checks, return True if the list is monotonically increasing or decreasing, otherwise return False.\"\n      }\n    ],\n    \"high_level_steps\": [\n      {\n        \"step\": \"Parse the requirement to extract the list.\",\n        \"details\": \"Extract the list from the provided docstring example.\"\n      },\n      {\n        \"step\": \"Implement the function to check for monotonically increasing sequence.\",\n        \"details\": \"Iterate through the list and compare each element with the next to ensure each is less than or equal to the next.\"\n      },\n      {\n        \"step\": \"Implement the function to check for monotonically decreasing sequence.\",\n        \"details\": \"Iterate through the list and compare each element with the next to ensure each is greater than or equal to the next.\"\n      },\n      {\n        \"step\": \"Combine the results of both checks.\",\n        \"details\": \"Return True if either the list is monotonically increasing or the list is monotonically decreasing.\"\n      },\n      {\n        \"step\": \"Test the function with provided examples.\",\n        \"details\": \"Use the provided docstring examples to test the function and ensure it meets the requirement.\"\n      }\n    ]\n  }\n}\n```", "Round_0": {"code": "def monotonic(l: list):\n    '''Return True if list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    if len(l) < 2:\n        return True\n    \n    increasing = True\n    decreasing = True\n    \n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        if l[i] < l[i - 1]:\n            increasing = False\n    \n    return increasing or decreasing", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Extract the list from the requirement document.\",\n        \"details\": \"The developer needs to identify and extract the list from the provided docstring example.\"\n      },\n      {\n        \"subproblem\": \"Check for Monotonically Increasing Sequence\",\n        \"details\": \"Determine if the list elements are in strictly increasing order.\"\n      },\n      {\n        \"subproblem\": \"Check for Monotonically Decreasing Sequence\",\n        \"details\": \"Determine if the list elements are in strictly decreasing order.\"\n      },\n      {\n        \"subproblem\": \"Return the Result\",\n        \"details\": \"Based on the checks, return True if the list is monotonically increasing or decreasing, otherwise return False.\"\n      }\n    ],\n    \"high_level_steps\": [\n      {\n        \"step\": \"1. Parse the requirement to extract the list.\",\n        \"details\": \"Extract the list from the provided docstring example.\"\n      },\n      {\n        \"step\": \"2. Implement the function to check for monotonically increasing sequence.\",\n        \"details\": \"Iterate through the list to check if each element is less than or equal to the next element.\"\n      },\n      {\n        \"step\": \"3. Implement the function to check for monotonically decreasing sequence.\",\n        \"details\": \"Iterate through the list to check if each element is greater than or equal to the next element.\"\n      },\n      {\n        \"step\": \"4. Combine the results of both checks.\",\n        \"details\": \"Return True if either the list is monotonically increasing or decreasing, otherwise return False.\"\n      },\n      {\n        \"step\": \"5. Test the function with the provided examples.\",\n        \"details\": \"Ensure the function works as expected with the given examples to satisfy the user requirement.\"\n      }\n    ]\n  }\n}\n```", "Round_0": {"code": "def monotonic(l: list):\n    '''Return True if list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    if len(l) < 2:\n        return True\n    \n    increasing = all(l[i] <= l[i + 1] for i in range(len(l) - 1))\n    decreasing = all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n    \n    return increasing or decreasing", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Extract the list from the requirement document.\",\n        \"details\": \"The developer needs to identify and extract the list from the provided docstring example.\"\n      },\n      {\n        \"subproblem\": \"Check for Monotonically Increasing Sequence\",\n        \"details\": \"Determine if the list elements are in strictly increasing order.\"\n      },\n      {\n        \"subproblem\": \"Check for Monotonically Decreasing Sequence\",\n        \"details\": \"Determine if the list elements are in strictly decreasing order.\"\n      },\n      {\n        \"subproblem\": \"Return the Result\",\n        \"details\": \"Based on the checks, return True if the list is monotonically increasing or decreasing, otherwise return False.\"\n      }\n    ],\n    \"high_level_steps\": [\n      {\n        \"step\": \"Parse the requirement to extract the list.\",\n        \"details\": \"Extract the list from the provided docstring example.\"\n      },\n      {\n        \"step\": \"Implement the function to check for monotonically increasing sequence.\",\n        \"details\": \"Iterate through the list and compare each element with the next to ensure each is less than or equal to the next.\"\n      },\n      {\n        \"step\": \"Implement the function to check for monotonically decreasing sequence.\",\n        \"details\": \"Iterate through the list and compare each element with the next to ensure each is greater than or equal to the next.\"\n      },\n      {\n        \"step\": \"Combine the results of both checks.\",\n        \"details\": \"Use the results of the increasing and decreasing checks to determine the final result.\"\n      },\n      {\n        \"step\": \"Return the final result.\",\n        \"details\": \"Return True if the list is monotonically increasing or decreasing, otherwise return False.\"\n      }\n    ]\n  }\n}\n```", "Round_0": {"code": "def monotonic(l: list):\n    '''Return True if list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    if len(l) < 2:\n        return True\n\n    increasing = True\n    decreasing = True\n\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        if l[i] < l[i - 1]:\n            increasing = False\n\n    return increasing or decreasing", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Extract the list from the requirement document.\",\n        \"details\": \"The developer needs to identify and extract the list from the provided docstring example.\"\n      },\n      {\n        \"subproblem\": \"Check for Monotonically Increasing Sequence\",\n        \"details\": \"Determine if the list elements are in strictly increasing order.\"\n      },\n      {\n        \"subproblem\": \"Check for Monotonically Decreasing Sequence\",\n        \"details\": \"Determine if the list elements are in strictly decreasing order.\"\n      },\n      {\n        \"subproblem\": \"Return the Result\",\n        \"details\": \"Based on the checks, return True if the list is monotonically increasing or decreasing, otherwise return False.\"\n      },\n      {\n        \"subproblem\": \"Implement the Function\",\n        \"details\": \"Translate the plan into a Python function that meets the requirement.\"\n      },\n      {\n        \"subproblem\": \"Test the Function\",\n        \"details\": \"Write test cases to verify the function works as expected.\"\n      }\n    ],\n    \"high_level_steps\": [\n      {\n        \"step\": \"Analyze the Requirement\",\n        \"details\": \"Understand the purpose of the function and the expected behavior.\"\n      },\n      {\n        \"step\": \"Extract the List\",\n        \"details\": \"Identify and extract the list from the provided docstring example.\"\n      },\n      {\n        \"step\": \"Check for Increasing Sequence\",\n        \"details\": \"Iterate through the list to check if each element is less than or equal to the next.\"\n      },\n      {\n        \"step\": \"Check for Decreasing Sequence\",\n        \"details\": \"Iterate through the list to check if each element is greater than or equal to the next.\"\n      },\n      {\n        \"step\": \"Return the Result\",\n        \"details\": \"Based on the checks, return True if the list is monotonically increasing or decreasing, otherwise return False.\"\n      },\n      {\n        \"step\": \"Document the Function\",\n        \"details\": \"Add a docstring to the function to explain its purpose, parameters, and return value.\"\n      },\n      {\n        \"step\": \"Test the", "Round_0": {"code": "def monotonic(l: list):\n    '''Return True if list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    if len(l) < 2:\n        return True\n    \n    increasing = all(l[i] < l[i + 1] for i in range(len(l) - 1))\n    decreasing = all(l[i] > l[i + 1] for i in range(len(l) - 1))\n    \n    return increasing or decreasing", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Extract the list from the requirement document.\",\n        \"details\": \"The developer needs to identify and extract the list from the provided docstring example.\"\n      },\n      {\n        \"subproblem\": \"Check for Monotonically Increasing Sequence\",\n        \"details\": \"Determine if the list elements are in strictly increasing order.\"\n      },\n      {\n        \"subproblem\": \"Check for Monotonically Decreasing Sequence\",\n        \"details\": \"Determine if the list elements are in strictly decreasing order.\"\n      },\n      {\n        \"subproblem\": \"Return the Result\",\n        \"details\": \"Based on the checks, return True if the list is monotonically increasing or decreasing, otherwise return False.\"\n      },\n      {\n        \"subproblem\": \"Implement the Function\",\n        \"details\": \"Translate the plan into a Python function that meets the requirement.\"\n      },\n      {\n        \"subproblem\": \"Test the Function\",\n        \"details\": \"Write test cases to verify the function works as expected and debug if necessary.\"\n      }\n    ],\n    \"high_level_steps\": [\n      {\n        \"step\": \"Analyze the Requirement\",\n        \"details\": \"Understand the purpose of the function and the conditions it needs to check.\"\n      },\n      {\n        \"step\": \"Extract the List\",\n        \"details\": \"Parse the docstring example to get the list to be checked.\"\n      },\n      {\n        \"step\": \"Check Increasing Sequence\",\n        \"details\": \"Iterate through the list to check if each element is less than or equal to the next (for increasing) or greater than or equal to the next (for decreasing).\"\n      },\n      {\n        \"step\": \"Check Decreasing Sequence\",\n        \"details\": \"Similarly, iterate through the list to check if each element is greater than or equal to the next (for decreasing) or less than or equal to the next (for increasing).\"\n      },\n      {\n        \"step\": \"Return the Result\",\n        \"details\": \"Based on the checks, return True if either condition is met, otherwise return False.\"\n      },\n      {\n        \"step\": \"Document the Function\",\n        \"details", "Round_0": {"code": "def monotonic(l: list):\n    '''Return True if list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    if len(l) < 2:\n        return True\n    \n    increasing = True\n    decreasing = True\n    \n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        if l[i] < l[i - 1]:\n            increasing = False\n    \n    return increasing or decreasing", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Extract the list from the requirement document.\",\n        \"details\": \"The developer needs to identify and extract the list from the provided docstring example.\"\n      },\n      {\n        \"subproblem\": \"Check for Monotonically Increasing Sequence\",\n        \"details\": \"Determine if the list elements are in strictly increasing order.\"\n      },\n      {\n        \"subproblem\": \"Check for Monotonically Decreasing Sequence\",\n        \"details\": \"Determine if the list elements are in strictly decreasing order.\"\n      },\n      {\n        \"subproblem\": \"Return the Result\",\n        \"details\": \"Based on the checks for increasing and decreasing sequences, return True if either condition is met, otherwise return False.\"\n      }\n    ],\n    \"high_level_steps\": [\n      {\n        \"step\": \"Parse the requirement to extract the list.\",\n        \"details\": \"Extract the list from the provided docstring example.\"\n      },\n      {\n        \"step\": \"Implement the function to check for monotonically increasing sequence.\",\n        \"details\": \"Iterate through the list and compare each element with the next to ensure each is less than or equal to the next.\"\n      },\n      {\n        \"step\": \"Implement the function to check for monotonically decreasing sequence.\",\n        \"details\": \"Iterate through the list and compare each element with the next to ensure each is greater than or equal to the next.\"\n      },\n      {\n        \"step\": \"Combine the results of both checks.\",\n        \"details\": \"Use the results of the increasing and decreasing checks to determine the final result.\"\n      },\n      {\n        \"step\": \"Return the final result.\",\n        \"details\": \"Return True if the list is monotonically increasing or decreasing, otherwise return False.\"\n      }\n    ]\n  }\n}\n```", "Round_0": {"code": "def monotonic(l: list):\n    '''Return True if list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    if len(l) < 2:\n        return True\n\n    increasing = True\n    decreasing = True\n\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        if l[i] < l[i - 1]:\n            increasing = False\n\n    return increasing or decreasing", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Extract the list from the requirement document.\",\n        \"details\": \"The developer needs to identify and extract the list from the provided docstring example.\"\n      },\n      {\n        \"subproblem\": \"Check for Monotonically Increasing Sequence\",\n        \"details\": \"Determine if the list elements are in strictly increasing order.\"\n      },\n      {\n        \"subproblem\": \"Check for Monotonically Decreasing Sequence\",\n        \"details\": \"Determine if the list elements are in strictly decreasing order.\"\n      },\n      {\n        \"subproblem\": \"Return the Result\",\n        \"details\": \"Based on the checks, return True if the list is monotonically increasing or decreasing, otherwise return False.\"\n      }\n    ],\n    \"high_level_steps\": [\n      {\n        \"step\": \"Parse the requirement to extract the list.\",\n        \"details\": \"Extract the list from the provided docstring example.\"\n      },\n      {\n        \"step\": \"Implement the function to check for monotonically increasing sequence.\",\n        \"details\": \"Iterate through the list and compare each element with the next to ensure each is less than or equal to the next.\"\n      },\n      {\n        \"step\": \"Implement the function to check for monotonically decreasing sequence.\",\n        \"details\": \"Iterate through the list and compare each element with the next to ensure each is greater than or equal to the next.\"\n      },\n      {\n        \"step\": \"Combine the results of both checks.\",\n        \"details\": \"Use the results of the increasing and decreasing checks to determine the final result.\"\n      },\n      {\n        \"step\": \"Return the final result.\",\n        \"details\": \"Return True if the list is monotonically increasing or decreasing, otherwise return False.\"\n      }\n    ]\n  }\n}\n```", "Round_0": {"code": "def monotonic(l: list):\n    '''Return True if list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    if len(l) < 2:\n        return True\n\n    increasing = True\n    decreasing = True\n\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        if l[i] < l[i - 1]:\n            increasing = False\n\n    return increasing or decreasing", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Extract the list from the requirement document.\",\n        \"details\": \"The developer needs to identify and extract the list from the provided docstring example.\"\n      },\n      {\n        \"subproblem\": \"Check for Monotonically Increasing Sequence\",\n        \"details\": \"Determine if the list elements are in strictly increasing order.\"\n      },\n      {\n        \"subproblem\": \"Check for Monotonically Decreasing Sequence\",\n        \"details\": \"Determine if the list elements are in strictly decreasing order.\"\n      },\n      {\n        \"subproblem\": \"Return the Result\",\n        \"details\": \"Based on the checks, return True if the list is monotonically increasing or decreasing, otherwise return False.\"\n      }\n    ],\n    \"high_level_steps\": [\n      {\n        \"step\": \"Parse the requirement to extract the list.\",\n        \"details\": \"Extract the list from the provided docstring example.\"\n      },\n      {\n        \"step\": \"Implement the function to check for monotonically increasing sequence.\",\n        \"details\": \"Compare each element with the next one to ensure each is less than or equal to the next.\"\n      },\n      {\n        \"step\": \"Implement the function to check for monotonically decreasing sequence.\",\n        \"details\": \"Compare each element with the next one to ensure each is greater than or equal to the next.\"\n      },\n      {\n        \"step\": \"Combine the results of both checks.\",\n        \"details\": \"Return True if either the list is monotonically increasing or decreasing, otherwise return False.\"\n      },\n      {\n        \"step\": \"Test the function with provided examples.\",\n        \"details\": \"Validate the function against the examples given in the requirement.\"\n      }\n    ]\n  }\n}\n```", "Round_0": {"code": "def monotonic(l: list):\n    '''Return True if list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    if len(l) < 2:\n        return True\n    \n    increasing = all(l[i] <= l[i + 1] for i in range(len(l) - 1))\n    decreasing = all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n    \n    return increasing or decreasing", "report": "The compilation output of the preceding code is: Code Test Passed."}}], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 0.8673, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, false, true, true, true, true], "pass_test_cases_num": [113, 113, 113, 113, 113, 98, 113, 113, 113, 113], "passed": true, "pass": true, "pass_num": 10, "round": 344, "mutate_method": "condense_two2one", "save_node": true, "parent_index": 255}
