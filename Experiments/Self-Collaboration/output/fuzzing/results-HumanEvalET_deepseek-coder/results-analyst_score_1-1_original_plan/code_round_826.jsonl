{"task_id": "HumanEval/57", "prompt": "def monotonic(l: list):\t\n'''Return True if list elements are monotonically increasing or decreasing. Consider using efficient sorting algorithms to optimize performance with larger datasets.\n>>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''", "entry_point": "monotonic", "canonical_solution": "    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return False\n", "test": ["def check(monotonic):\n\tassert monotonic([6, 2, 5, 7, 4, 65]) == False", "def check(monotonic):\n\tassert monotonic([3, 3, 7, 4, 3, 64]) == False", "def check(monotonic):\n\tassert monotonic([3, 1, 5, 8]) == False", "def check(monotonic):\n\tassert monotonic([4, 3, 5, 7, 1, 62]) == False", "def check(monotonic):\n\tassert monotonic([4, 4, 1, 1]) == True", "def check(monotonic):\n\tassert monotonic([3, 2, 7, 6]) == False", "def check(monotonic):\n\tassert monotonic([2, 7, 7, 15]) == True", "def check(monotonic):\n\tassert monotonic([4, 7, 7, 1, 1, 57]) == False", "def check(monotonic):\n\tassert monotonic([1, 1, 8, 13]) == True", "def check(monotonic):\n\tassert monotonic([5, 5, 8, 17]) == True", "def check(monotonic):\n\tassert monotonic([2, 22, 8, 7]) == False", "def check(monotonic):\n\tassert monotonic([2, 23, 5, 6]) == False", "def check(monotonic):\n\tassert monotonic([3, 2, 2, 18]) == False", "def check(monotonic):\n\tassert monotonic([2, 2, 2, 6]) == True", "def check(monotonic):\n\tassert monotonic([7, 5, 3, 2]) == True", "def check(monotonic):\n\tassert monotonic([7, 5, 2, -5]) == True", "def check(monotonic):\n\tassert monotonic([6, 19, 9, 12]) == False", "def check(monotonic):\n\tassert monotonic([1, 2, 4, 10]) == True", "def check(monotonic):\n\tassert monotonic([5, 4, 6, 18]) == False", "def check(monotonic):\n\tassert monotonic([6, 1, 7, 3, 4, 56]) == False", "def check(monotonic):\n\tassert monotonic([6, 3, 7, 3, 8, 61]) == False", "def check(monotonic):\n\tassert monotonic([2, 17, 7, 8]) == False", "def check(monotonic):\n\tassert monotonic([5, 1, 4, 5, 3, 59]) == False", "def check(monotonic):\n\tassert monotonic([3, 5, 5, 5, 3, 65]) == False", "def check(monotonic):\n\tassert monotonic([6, 19, 9, 7]) == False", "def check(monotonic):\n\tassert monotonic([1, 16, 9, 7]) == False", "def check(monotonic):\n\tassert monotonic([7, 6, 2, -14]) == True", "def check(monotonic):\n\tassert monotonic([5, 6, 4, 16]) == False", "def check(monotonic):\n\tassert monotonic([1, 6, 5, -10]) == False", "def check(monotonic):\n\tassert monotonic([1, 22, 4, 10]) == False", "def check(monotonic):\n\tassert monotonic([1, 6, 8, 6, 3, 62]) == False", "def check(monotonic):\n\tassert monotonic([1, 5, 1, 6, 4, 62]) == False", "def check(monotonic):\n\tassert monotonic([1, 1, 7, 2, 4, 56]) == False", "def check(monotonic):\n\tassert monotonic([2, 1, 5, 12]) == False", "def check(monotonic):\n\tassert monotonic([1, 3, 1, 4]) == False", "def check(monotonic):\n\tassert monotonic([4, 19, 8, 7]) == False", "def check(monotonic):\n\tassert monotonic([3, 5, 8, 5, 5, 56]) == False", "def check(monotonic):\n\tassert monotonic([1, 3, 6, 25]) == True", "def check(monotonic):\n\tassert monotonic([2, 3, 1, 7]) == False", "def check(monotonic):\n\tassert monotonic([8, 6, 2, 5]) == False", "def check(monotonic):\n\tassert monotonic([6, 3, 6, 2, 8, 62]) == False", "def check(monotonic):\n\tassert monotonic([6, 4, 6, 4]) == False", "def check(monotonic):\n\tassert monotonic([3, 6, 1, 3]) == False", "def check(monotonic):\n\tassert monotonic([4, 2, 5, 7, 6, 62]) == False", "def check(monotonic):\n\tassert monotonic([3, 7, 1, 20]) == False", "def check(monotonic):\n\tassert monotonic([3, 1, 5, 17]) == False", "def check(monotonic):\n\tassert monotonic([5, 5, 7, 5, 5, 57]) == False", "def check(monotonic):\n\tassert monotonic([1, 20, 4, 10]) == False", "def check(monotonic):\n\tassert monotonic([6, 16, 4, 14]) == False", "def check(monotonic):\n\tassert monotonic([3, 17, 2, 14]) == False", "def check(monotonic):\n\tassert monotonic([4, 5, 7, 2, 8, 63]) == False", "def check(monotonic):\n\tassert monotonic([1, 2, 4, 20]) == True", "def check(monotonic):\n\tassert monotonic([3, 3, 3, -5]) == True", "def check(monotonic):\n\tassert monotonic([4, 2, 3, 4]) == False", "def check(monotonic):\n\tassert monotonic([3, 5, 4, 2, 1, 60]) == False", "def check(monotonic):\n\tassert monotonic([6, 4, 7, 24]) == False", "def check(monotonic):\n\tassert monotonic([6, 3, 1, 1, 2, 61]) == False", "def check(monotonic):\n\tassert monotonic([1, 4, 3, -8]) == False", "def check(monotonic):\n\tassert monotonic([2, 6, 3, 5, 10, 63]) == False", "def check(monotonic):\n\tassert monotonic([4, 6, 3, 3, 10, 57]) == False", "def check(monotonic):\n\tassert monotonic([5, 4, 9, 14]) == False", "def check(monotonic):\n\tassert monotonic([1, 3, 5, 17]) == True", "def check(monotonic):\n\tassert monotonic([6, 7, 1, 8]) == False", "def check(monotonic):\n\tassert monotonic([9, 2, 5, -5]) == False", "def check(monotonic):\n\tassert monotonic([3, 2, 5, 1]) == False", "def check(monotonic):\n\tassert monotonic([9, 9, 9, 9]) == True", "def check(monotonic):\n\tassert monotonic([1, 2, 3, 4, 5, 60]) == True", "def check(monotonic):\n\tassert monotonic([6, 2, 5, 6, 3, 62]) == False", "def check(monotonic):\n\tassert monotonic([5, 1, 3, -9]) == False", "def check(monotonic):\n\tassert monotonic([1, 5, 7, 6]) == False", "def check(monotonic):\n\tassert monotonic([1, 24, 9, 12]) == False", "def check(monotonic):\n\tassert monotonic([2, 6, 7, 6, 6, 61]) == False", "def check(monotonic):\n\tassert monotonic([4, 1, 1, 0]) == True", "def check(monotonic):\n\tassert monotonic([2, 1, 3, 3, 3, 65]) == False", "def check(monotonic):\n\tassert monotonic([1, 2, 8, 5, 9, 55]) == False", "def check(monotonic):\n\tassert monotonic([2, 16, 2, 11]) == False", "def check(monotonic):\n\tassert monotonic([6, 16, 3, 15]) == False", "def check(monotonic):\n\tassert monotonic([1, 5, 2, 4, 2, 55]) == False", "def check(monotonic):\n\tassert monotonic([3, 1, 8, 7, 7, 65]) == False", "def check(monotonic):\n\tassert monotonic([2, 20, 2, 5]) == False", "def check(monotonic):\n\tassert monotonic([7, 2, 3, -10]) == False", "def check(monotonic):\n\tassert monotonic([4, 3, 5, 4, 8, 63]) == False", "def check(monotonic):\n\tassert monotonic([7, 2, 1, -12]) == True", "def check(monotonic):\n\tassert monotonic([9, 4, 1, -6]) == True", "def check(monotonic):\n\tassert monotonic([2, 15, 2, 15]) == False", "def check(monotonic):\n\tassert monotonic([6, 2, 4, 4]) == False", "def check(monotonic):\n\tassert monotonic([3, 3, 2, 4]) == False", "def check(monotonic):\n\tassert monotonic([2, 2, 8, 1, 3, 63]) == False", "def check(monotonic):\n\tassert monotonic([2, 2, 8, 12]) == True", "def check(monotonic):\n\tassert monotonic([3, 4, 2, 1]) == False", "def check(monotonic):\n\tassert monotonic([4, 4, 3, 15]) == False", "def check(monotonic):\n\tassert monotonic([2, 6, 5, 3]) == False", "def check(monotonic):\n\tassert monotonic([6, 5, 7, 7, 6, 55]) == False", "def check(monotonic):\n\tassert monotonic([2, 4, 4, 14]) == True", "def check(monotonic):\n\tassert monotonic([5, 4, 8, 5]) == False", "def check(monotonic):\n\tassert monotonic([4, 5, 1, -7]) == False", "def check(monotonic):\n\tassert monotonic([3, 3, 6, 8]) == True", "def check(monotonic):\n\tassert monotonic([9, 5, 5, -14]) == True", "def check(monotonic):\n\tassert monotonic([2, 1, 4, 4, 5, 55]) == False", "def check(monotonic):\n\tassert monotonic([4, 1, 0, -10]) == True", "def check(monotonic):\n\tassert monotonic([5, 5, 7, 21]) == True", "def check(monotonic):\n\tassert monotonic([1, 1, 3, 18]) == True", "def check(monotonic):\n\tassert monotonic([1, 6, 4, -7]) == False", "def check(monotonic):\n\tassert monotonic([4, 3, 4, 17]) == False", "def check(monotonic):\n\tassert monotonic([7, 2, 1, -6]) == True", "def check(monotonic):\n\tassert monotonic([1, 2, 3, 2, 5, 60]) == False", "def check(monotonic):\n\tassert monotonic([5, 2, 5, 2]) == False", "def check(monotonic):\n\tassert monotonic([2, 3, 8, 8]) == True", "def check(monotonic):\n\tassert monotonic([5, 2, 3, 4]) == False", "def check(monotonic):\n\tassert monotonic([8, 3, 2, -15]) == True", "def check(monotonic):\n\tassert monotonic([3, 4, 3, 15]) == False", "def check(monotonic):\n\tassert monotonic([2, 1, 5, 3]) == False", "def check(monotonic):\n\tassert monotonic([2, 4, 3, 19]) == False"], "test_case_list": ["assert monotonic([6, 2, 5, 7, 4, 65]) == False", "assert monotonic([3, 3, 7, 4, 3, 64]) == False", "assert monotonic([3, 1, 5, 8]) == False", "assert monotonic([4, 3, 5, 7, 1, 62]) == False", "assert monotonic([4, 4, 1, 1]) == True", "assert monotonic([3, 2, 7, 6]) == False", "assert monotonic([2, 7, 7, 15]) == True", "assert monotonic([4, 7, 7, 1, 1, 57]) == False", "assert monotonic([1, 1, 8, 13]) == True", "assert monotonic([5, 5, 8, 17]) == True", "assert monotonic([2, 22, 8, 7]) == False", "assert monotonic([2, 23, 5, 6]) == False", "assert monotonic([3, 2, 2, 18]) == False", "assert monotonic([2, 2, 2, 6]) == True", "assert monotonic([7, 5, 3, 2]) == True", "assert monotonic([7, 5, 2, -5]) == True", "assert monotonic([6, 19, 9, 12]) == False", "assert monotonic([1, 2, 4, 10]) == True", "assert monotonic([5, 4, 6, 18]) == False", "assert monotonic([6, 1, 7, 3, 4, 56]) == False", "assert monotonic([6, 3, 7, 3, 8, 61]) == False", "assert monotonic([2, 17, 7, 8]) == False", "assert monotonic([5, 1, 4, 5, 3, 59]) == False", "assert monotonic([3, 5, 5, 5, 3, 65]) == False", "assert monotonic([6, 19, 9, 7]) == False", "assert monotonic([1, 16, 9, 7]) == False", "assert monotonic([7, 6, 2, -14]) == True", "assert monotonic([5, 6, 4, 16]) == False", "assert monotonic([1, 6, 5, -10]) == False", "assert monotonic([1, 22, 4, 10]) == False", "assert monotonic([1, 6, 8, 6, 3, 62]) == False", "assert monotonic([1, 5, 1, 6, 4, 62]) == False", "assert monotonic([1, 1, 7, 2, 4, 56]) == False", "assert monotonic([2, 1, 5, 12]) == False", "assert monotonic([1, 3, 1, 4]) == False", "assert monotonic([4, 19, 8, 7]) == False", "assert monotonic([3, 5, 8, 5, 5, 56]) == False", "assert monotonic([1, 3, 6, 25]) == True", "assert monotonic([2, 3, 1, 7]) == False", "assert monotonic([8, 6, 2, 5]) == False", "assert monotonic([6, 3, 6, 2, 8, 62]) == False", "assert monotonic([6, 4, 6, 4]) == False", "assert monotonic([3, 6, 1, 3]) == False", "assert monotonic([4, 2, 5, 7, 6, 62]) == False", "assert monotonic([3, 7, 1, 20]) == False", "assert monotonic([3, 1, 5, 17]) == False", "assert monotonic([5, 5, 7, 5, 5, 57]) == False", "assert monotonic([1, 20, 4, 10]) == False", "assert monotonic([6, 16, 4, 14]) == False", "assert monotonic([3, 17, 2, 14]) == False", "assert monotonic([4, 5, 7, 2, 8, 63]) == False", "assert monotonic([1, 2, 4, 20]) == True", "assert monotonic([3, 3, 3, -5]) == True", "assert monotonic([4, 2, 3, 4]) == False", "assert monotonic([3, 5, 4, 2, 1, 60]) == False", "assert monotonic([6, 4, 7, 24]) == False", "assert monotonic([6, 3, 1, 1, 2, 61]) == False", "assert monotonic([1, 4, 3, -8]) == False", "assert monotonic([2, 6, 3, 5, 10, 63]) == False", "assert monotonic([4, 6, 3, 3, 10, 57]) == False", "assert monotonic([5, 4, 9, 14]) == False", "assert monotonic([1, 3, 5, 17]) == True", "assert monotonic([6, 7, 1, 8]) == False", "assert monotonic([9, 2, 5, -5]) == False", "assert monotonic([3, 2, 5, 1]) == False", "assert monotonic([9, 9, 9, 9]) == True", "assert monotonic([1, 2, 3, 4, 5, 60]) == True", "assert monotonic([6, 2, 5, 6, 3, 62]) == False", "assert monotonic([5, 1, 3, -9]) == False", "assert monotonic([1, 5, 7, 6]) == False", "assert monotonic([1, 24, 9, 12]) == False", "assert monotonic([2, 6, 7, 6, 6, 61]) == False", "assert monotonic([4, 1, 1, 0]) == True", "assert monotonic([2, 1, 3, 3, 3, 65]) == False", "assert monotonic([1, 2, 8, 5, 9, 55]) == False", "assert monotonic([2, 16, 2, 11]) == False", "assert monotonic([6, 16, 3, 15]) == False", "assert monotonic([1, 5, 2, 4, 2, 55]) == False", "assert monotonic([3, 1, 8, 7, 7, 65]) == False", "assert monotonic([2, 20, 2, 5]) == False", "assert monotonic([7, 2, 3, -10]) == False", "assert monotonic([4, 3, 5, 4, 8, 63]) == False", "assert monotonic([7, 2, 1, -12]) == True", "assert monotonic([9, 4, 1, -6]) == True", "assert monotonic([2, 15, 2, 15]) == False", "assert monotonic([6, 2, 4, 4]) == False", "assert monotonic([3, 3, 2, 4]) == False", "assert monotonic([2, 2, 8, 1, 3, 63]) == False", "assert monotonic([2, 2, 8, 12]) == True", "assert monotonic([3, 4, 2, 1]) == False", "assert monotonic([4, 4, 3, 15]) == False", "assert monotonic([2, 6, 5, 3]) == False", "assert monotonic([6, 5, 7, 7, 6, 55]) == False", "assert monotonic([2, 4, 4, 14]) == True", "assert monotonic([5, 4, 8, 5]) == False", "assert monotonic([4, 5, 1, -7]) == False", "assert monotonic([3, 3, 6, 8]) == True", "assert monotonic([9, 5, 5, -14]) == True", "assert monotonic([2, 1, 4, 4, 5, 55]) == False", "assert monotonic([4, 1, 0, -10]) == True", "assert monotonic([5, 5, 7, 21]) == True", "assert monotonic([1, 1, 3, 18]) == True", "assert monotonic([1, 6, 4, -7]) == False", "assert monotonic([4, 3, 4, 17]) == False", "assert monotonic([7, 2, 1, -6]) == True", "assert monotonic([1, 2, 3, 2, 5, 60]) == False", "assert monotonic([5, 2, 5, 2]) == False", "assert monotonic([2, 3, 8, 8]) == True", "assert monotonic([5, 2, 3, 4]) == False", "assert monotonic([8, 3, 2, -15]) == True", "assert monotonic([3, 4, 3, 15]) == False", "assert monotonic([2, 1, 5, 3]) == False", "assert monotonic([2, 4, 3, 19]) == False"], "nl": "Return True is list elements are monotonically increasing or decreasing.\n    ", "func": "def monotonic(l: list):", "examples": ">>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    ", "repair_prompt": ["def monotonic(l: list):\t\n'''Return True if list elements are monotonically increasing or decreasing. Consider using efficient sorting algorithms to optimize performance with larger datasets.\n>>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''"], "completion": "from typing import *\ndef monotonic(l: list):\n    '''Return True if list elements are monotonically increasing or decreasing. Consider using efficient sorting algorithms to optimize performance with larger datasets.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    if len(l) <= 1:\n        return True\n    \n    increasing = decreasing = True\n    \n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        if l[i] < l[i - 1]:\n            increasing = False\n    \n    return increasing or decreasing", "completions": ["from typing import *\ndef monotonic(l: list):\n    '''Return True if list elements are monotonically increasing or decreasing. Consider using efficient sorting algorithms to optimize performance with larger datasets.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    if len(l) <= 1:\n        return True\n    \n    increasing = decreasing = True\n    \n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        elif l[i] < l[i - 1]:\n            increasing = False\n    \n    return increasing or decreasing", "from typing import *\ndef monotonic(l: list):\n    '''Return True if list elements are monotonically increasing or decreasing. Consider using efficient sorting algorithms to optimize performance with larger datasets.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    if len(l) <= 1:\n        return True\n\n    increasing = decreasing = True\n\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        elif l[i] < l[i - 1]:\n            increasing = False\n\n    return increasing or decreasing", "from typing import *\ndef monotonic(l: list):\n    '''Return True if list elements are monotonically increasing or decreasing. Consider using efficient sorting algorithms to optimize performance with larger datasets.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    if len(l) <= 1:\n        return True\n    \n    increasing = decreasing = True\n    \n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        elif l[i] < l[i - 1]:\n            increasing = False\n    \n    return increasing or decreasing", "from typing import *\ndef monotonic(l: list):\n    '''Return True if list elements are monotonically increasing or decreasing. Consider using efficient sorting algorithms to optimize performance with larger datasets.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    if len(l) <= 1:\n        return True\n    \n    increasing = decreasing = True\n    \n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        if l[i] < l[i - 1]:\n            increasing = False\n    \n    return increasing or decreasing", "from typing import *\ndef monotonic(l: list):\n    '''Return True if list elements are monotonically increasing or decreasing. Consider using efficient sorting algorithms to optimize performance with larger datasets.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    if len(l) <= 1:\n        return True\n    \n    increasing = decreasing = True\n    \n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        elif l[i] < l[i - 1]:\n            increasing = False\n    \n    return increasing or decreasing", "from typing import *\ndef monotonic(l: list):\n    '''Return True if list elements are monotonically increasing or decreasing. Consider using efficient sorting algorithms to optimize performance with larger datasets.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    if len(l) <= 1:\n        return True\n    \n    increasing = decreasing = True\n    \n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        if l[i] < l[i - 1]:\n            increasing = False\n    \n    return increasing or decreasing", "from typing import *\ndef is_monotonic_increasing(lst):\n    return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1))\n\ndef is_monotonic_decreasing(lst):\n    return all(lst[i] >= lst[i + 1] for i in range(len(lst) - 1))\n\ndef monotonic(l: list):\n    '''Return True if list elements are monotonically increasing or decreasing. \n    Consider using efficient sorting algorithms to optimize performance with larger datasets.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    return is_monotonic_increasing(l) or is_monotonic_decreasing(l)", "from typing import *\ndef monotonic(l: list) -> bool:\n    '''Return True if list elements are monotonically increasing or decreasing.\n    Consider using efficient sorting algorithms to optimize performance with larger datasets.\n    \n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    if len(l) <= 1:\n        return True\n    \n    increasing = decreasing = True\n    \n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        elif l[i] < l[i - 1]:\n            increasing = False\n    \n    return increasing or decreasing", "from typing import *\ndef monotonic(l: list):\n    '''Return True if list elements are monotonically increasing or decreasing. Consider using efficient sorting algorithms to optimize performance with larger datasets.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    if len(l) <= 1:\n        return True\n    \n    increasing = decreasing = True\n    \n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        elif l[i] < l[i - 1]:\n            increasing = False\n    \n    return increasing or decreasing", "from typing import *\ndef monotonic(l: list):\n    '''Return True if list elements are monotonically increasing or decreasing. Consider using efficient sorting algorithms to optimize performance with larger datasets.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    if len(l) <= 1:\n        return True\n    \n    increasing = decreasing = True\n    \n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        if l[i] < l[i - 1]:\n            increasing = False\n    \n    return increasing or decreasing"], "session_history": {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Analyze the input list to determine if it is monotonically increasing or decreasing.\",\n        \"steps\": [\n          \"Check if the list is empty or has only one element.\",\n          \"Compare each element with the next one to determine the trend (increasing or decreasing).\",\n          \"Continue the comparison until the end of the list or a change in the trend is found.\"\n        ]\n      },\n      {\n        \"subproblem\": \"Implement the logic to check for monotonicity.\",\n        \"steps\": [\n          \"Initialize a flag to track the trend (increasing or decreasing).\",\n          \"Iterate through the list and compare each element with the next one.\",\n          \"Update the flag based on the comparison results.\",\n          \"Return the result based on the flag.\"\n        ]\n      },\n      {\n        \"subproblem\": \"Optimize the implementation for larger datasets.\",\n        \"steps\": [\n          \"Consider using efficient sorting algorithms to optimize performance with larger datasets.\",\n          \"Implement optimizations such as early stopping if a change in trend is detected.\",\n          \"Ensure the implementation handles edge cases and exceptions.\"\n        ]\n      }\n    ],\n    \"high_level_steps\": [\n      \"Receive the input list from the user.\",\n      \"Analyze the list to determine if it is monotonically increasing or decreasing.\",\n      \"Implement the logic to check for monotonicity.\",\n      \"Return the result to the user.\",\n      \"Optimize the implementation for larger datasets.\"\n    ]\n  }\n}\n```", "Round_0": {"code": "def monotonic(l: list):\n    '''Return True if list elements are monotonically increasing or decreasing. Consider using efficient sorting algorithms to optimize performance with larger datasets.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    if len(l) <= 1:\n        return True\n    \n    increasing = decreasing = True\n    \n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        if l[i] < l[i - 1]:\n            increasing = False\n    \n    return increasing or decreasing", "report": "The compilation output of the preceding code is: Code Test Passed."}}, "session_historys": [{"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Analyze the input list to determine if it is monotonically increasing or decreasing.\",\n        \"steps\": [\n          \"Check if the list is empty or has only one element.\",\n          \"Compare each element with the next one to determine the trend (increasing or decreasing).\",\n          \"Continue the comparison until the end of the list or a change in the trend is found.\"\n        ]\n      },\n      {\n        \"subproblem\": \"Implement the logic to check for monotonicity.\",\n        \"steps\": [\n          \"Initialize a flag to track the trend (increasing or decreasing).\",\n          \"Iterate through the list and compare each element with the next one.\",\n          \"Update the flag based on the comparison results.\",\n          \"Return the result based on the flag.\"\n        ]\n      },\n      {\n        \"subproblem\": \"Optimize the implementation for larger datasets.\",\n        \"steps\": [\n          \"Consider using efficient sorting algorithms to optimize performance with larger datasets.\",\n          \"Implement optimizations such as early stopping if a change in trend is detected.\",\n          \"Ensure the implementation handles edge cases and exceptions.\"\n        ]\n      }\n    ],\n    \"high_level_steps\": [\n      \"Receive the input list from the user.\",\n      \"Analyze the list to determine if it is monotonically increasing or decreasing.\",\n      \"Implement the logic to check for monotonicity.\",\n      \"Return the result to the user.\",\n      \"Optimize the implementation for larger datasets.\"\n    ]\n  }\n}\n```", "Round_0": {"code": "def monotonic(l: list):\n    '''Return True if list elements are monotonically increasing or decreasing. Consider using efficient sorting algorithms to optimize performance with larger datasets.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    if len(l) <= 1:\n        return True\n    \n    increasing = decreasing = True\n    \n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        elif l[i] < l[i - 1]:\n            increasing = False\n    \n    return increasing or decreasing", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Analyze the input list to determine if it is monotonically increasing or decreasing.\",\n        \"steps\": [\n          \"Check if the list is empty or has only one element.\",\n          \"Compare each element with the next one to determine the trend (increasing or decreasing).\",\n          \"Continue the comparison until the end of the list or a change in the trend is found.\"\n        ]\n      },\n      {\n        \"subproblem\": \"Implement the logic to check for monotonicity.\",\n        \"steps\": [\n          \"Initialize a flag to track the trend (increasing or decreasing).\",\n          \"Iterate through the list and compare each element with the next one.\",\n          \"Update the flag based on the comparison results.\",\n          \"Return the result based on the flag.\"\n        ]\n      },\n      {\n        \"subproblem\": \"Optimize the implementation for larger datasets.\",\n        \"steps\": [\n          \"Consider using efficient sorting algorithms to optimize performance with larger datasets.\",\n          \"Implement optimizations such as early stopping if a change in trend is detected.\",\n          \"Ensure the implementation handles edge cases and exceptions.\"\n        ]\n      }\n    ],\n    \"high_level_steps\": [\n      \"Receive the input list from the user.\",\n      \"Analyze the list to determine if it is monotonically increasing or decreasing.\",\n      \"Implement the logic to check for monotonicity.\",\n      \"Return the result to the user.\",\n      \"Optimize the implementation for larger datasets.\"\n    ]\n  }\n}\n```", "Round_0": {"code": "def monotonic(l: list):\n    '''Return True if list elements are monotonically increasing or decreasing. Consider using efficient sorting algorithms to optimize performance with larger datasets.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    if len(l) <= 1:\n        return True\n\n    increasing = decreasing = True\n\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        elif l[i] < l[i - 1]:\n            increasing = False\n\n    return increasing or decreasing", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Analyze the input list to determine if it is monotonically increasing or decreasing.\",\n        \"steps\": [\n          \"Check if the list is empty or has only one element.\",\n          \"Compare each element with the next one to determine the trend (increasing or decreasing).\",\n          \"Continue the comparison until the end of the list or a change in the trend is found.\"\n        ]\n      },\n      {\n        \"subproblem\": \"Implement the logic to check for monotonicity.\",\n        \"steps\": [\n          \"Initialize a flag to track the trend (increasing or decreasing).\",\n          \"Iterate through the list and compare each element with the next one.\",\n          \"Update the flag based on the comparison results.\",\n          \"Return the result based on the flag.\"\n        ]\n      },\n      {\n        \"subproblem\": \"Optimize the implementation for larger datasets.\",\n        \"steps\": [\n          \"Consider using efficient sorting algorithms to optimize performance with larger datasets.\",\n          \"Implement optimizations such as early stopping if a change in trend is detected.\",\n          \"Ensure the implementation handles edge cases and exceptions.\"\n        ]\n      }\n    ],\n    \"high_level_steps\": [\n      \"Receive the input list from the user.\",\n      \"Analyze the list to determine if it is monotonically increasing or decreasing.\",\n      \"Implement the logic to check for monotonicity.\",\n      \"Return the result to the user.\",\n      \"Optimize the implementation for larger datasets.\"\n    ]\n  }\n}\n```", "Round_0": {"code": "def monotonic(l: list):\n    '''Return True if list elements are monotonically increasing or decreasing. Consider using efficient sorting algorithms to optimize performance with larger datasets.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    if len(l) <= 1:\n        return True\n    \n    increasing = decreasing = True\n    \n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        elif l[i] < l[i - 1]:\n            increasing = False\n    \n    return increasing or decreasing", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Analyze the input list to determine if it is monotonically increasing or decreasing.\",\n        \"steps\": [\n          \"Check if the list is empty or has only one element.\",\n          \"Compare each element with the next one to determine the trend (increasing or decreasing).\",\n          \"Handle cases where the list has more than one element by iterating through the list and checking the trend.\"\n        ]\n      },\n      {\n        \"subproblem\": \"Implement the logic to check for monotonicity.\",\n        \"steps\": [\n          \"Initialize a flag to track the trend (increasing or decreasing).\",\n          \"Iterate through the list and compare each element with the next one to update the flag accordingly.\",\n          \"Return the result based on the flag.\"\n        ]\n      },\n      {\n        \"subproblem\": \"Optimize the implementation for larger datasets.\",\n        \"steps\": [\n          \"Consider using efficient sorting algorithms to optimize performance with larger datasets.\",\n          \"Implement optimizations such as early stopping or leveraging Python's built-in functions for efficiency.\"\n        ]\n      }\n    ],\n    \"high_level_plan\": [\n      \"Receive the input list from the user.\",\n      \"Analyze the list to determine if it is monotonically increasing or decreasing.\",\n      \"Implement the logic to check for monotonicity.\",\n      \"Return the result to the user.\",\n      \"Optimize the implementation for larger datasets if necessary.\"\n    ]\n  }\n}\n```", "Round_0": {"code": "def monotonic(l: list):\n    '''Return True if list elements are monotonically increasing or decreasing. Consider using efficient sorting algorithms to optimize performance with larger datasets.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    if len(l) <= 1:\n        return True\n    \n    increasing = decreasing = True\n    \n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        if l[i] < l[i - 1]:\n            increasing = False\n    \n    return increasing or decreasing", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Analyze the input list to determine if it is monotonically increasing or decreasing.\",\n        \"steps\": [\n          \"Check if the list is empty or has only one element.\",\n          \"Compare each element with the next one to determine the trend (increasing or decreasing).\",\n          \"Handle cases where the list has more than one element by iterating through the list and checking the trend.\"\n        ]\n      },\n      {\n        \"subproblem\": \"Implement the logic to check for monotonicity.\",\n        \"steps\": [\n          \"Initialize a flag to track the trend (increasing or decreasing).\",\n          \"Iterate through the list and compare each element with the next one to update the flag accordingly.\",\n          \"Return True if the list is found to be monotonically increasing or decreasing, otherwise return False.\"\n        ]\n      },\n      {\n        \"subproblem\": \"Optimize the implementation for larger datasets.\",\n        \"steps\": [\n          \"Consider using efficient sorting algorithms to optimize performance with larger datasets.\",\n          \"Implement optimizations such as early stopping if a trend is found to be inconsistent.\"\n        ]\n      }\n    ],\n    \"high_level_steps\": [\n      \"Receive the input list from the user.\",\n      \"Analyze the list to determine if it is monotonically increasing or decreasing.\",\n      \"Implement the logic to check for monotonicity.\",\n      \"Return the result (True or False) based on the analysis.\",\n      \"Optimize the implementation for larger datasets if necessary.\"\n    ]\n  }\n}\n```", "Round_0": {"code": "def monotonic(l: list):\n    '''Return True if list elements are monotonically increasing or decreasing. Consider using efficient sorting algorithms to optimize performance with larger datasets.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    if len(l) <= 1:\n        return True\n    \n    increasing = decreasing = True\n    \n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        elif l[i] < l[i - 1]:\n            increasing = False\n    \n    return increasing or decreasing", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Analyze the input list to determine if it is monotonically increasing or decreasing.\",\n        \"steps\": [\n          \"Check if the list is empty or has only one element.\",\n          \"Compare each element with the next one to determine the trend (increasing or decreasing).\",\n          \"Continue the comparison until the end of the list or a change in the trend is found.\"\n        ]\n      },\n      {\n        \"subproblem\": \"Implement the logic to check for monotonicity.\",\n        \"steps\": [\n          \"Initialize a flag to track the trend (increasing or decreasing).\",\n          \"Iterate through the list and compare each element with the next one.\",\n          \"Update the flag based on the comparison results.\",\n          \"Return the result based on the flag.\"\n        ]\n      },\n      {\n        \"subproblem\": \"Optimize the implementation for larger datasets.\",\n        \"steps\": [\n          \"Consider using efficient sorting algorithms to optimize performance with larger datasets.\",\n          \"Implement optimizations such as early stopping if a change in trend is detected.\",\n          \"Ensure the implementation handles edge cases and exceptions.\"\n        ]\n      }\n    ],\n    \"high_level_steps\": [\n      \"Receive the input list from the user.\",\n      \"Analyze the list to determine if it is monotonically increasing or decreasing.\",\n      \"Implement the logic to check for monotonicity.\",\n      \"Return the result to the user.\",\n      \"Optimize the implementation for larger datasets.\"\n    ]\n  }\n}\n```", "Round_0": {"code": "def monotonic(l: list):\n    '''Return True if list elements are monotonically increasing or decreasing. Consider using efficient sorting algorithms to optimize performance with larger datasets.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    if len(l) <= 1:\n        return True\n    \n    increasing = decreasing = True\n    \n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        if l[i] < l[i - 1]:\n            increasing = False\n    \n    return increasing or decreasing", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Understand the definition of monotonicity in the context of the list.\",\n        \"details\": \"Monotonically increasing means each element is less than or equal to the next. Monotonically decreasing means each element is greater than or equal to the next.\"\n      },\n      {\n        \"subproblem\": \"Implement a function to check if a list is monotonically increasing.\",\n        \"details\": \"The function should iterate through the list and ensure each element is less than or equal to the next.\"\n      },\n      {\n        \"subproblem\": \"Implement a function to check if a list is monotonically decreasing.\",\n        \"details\": \"The function should iterate through the list and ensure each element is greater than or equal to the next.\"\n      },\n      {\n        \"subproblem\": \"Combine the two functions to check for monotonicity.\",\n        \"details\": \"The main function should use the two subfunctions to determine if the list is monotonically increasing or decreasing.\"\n      },\n      {\n        \"subproblem\": \"Optimize the function for larger datasets.\",\n        \"details\": \"Consider using efficient sorting algorithms to optimize performance with larger datasets.\"\n      }\n    ],\n    \"high_level_steps\": [\n      {\n        \"step\": \"Define the function signature.\",\n        \"details\": \"Define the function `monotonic` with a list parameter.\"\n      },\n      {\n        \"step\": \"Implement the function to check for increasing monotonicity.\",\n        \"details\": \"Create a helper function to check if the list is monotonically increasing.\"\n      },\n      {\n        \"step\": \"Implement the function to check for decreasing monotonicity.\",\n        \"details\": \"Create a helper function to check if the list is monotonically decreasing.\"\n      },\n      {\n        \"step\": \"Combine the monotonicity checks.\",\n        \"details\": \"Use the two helper functions within the main `monotonic` function to return the correct boolean value.\"\n      },\n      {\n        \"step\": \"Test the function with various inputs.\",\n        \"details\": \"Ensure the function works correctly for increasing, decreasing, and non-monotonic lists.\"\n      },\n      {\n        \"step\": \"Optimize the function for larger datasets.\",\n        \"details\": \"Consider implementing optimizations based on the suggestions in the", "Round_0": {"code": "def is_monotonic_increasing(lst):\n    return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1))\n\ndef is_monotonic_decreasing(lst):\n    return all(lst[i] >= lst[i + 1] for i in range(len(lst) - 1))\n\ndef monotonic(l: list):\n    '''Return True if list elements are monotonically increasing or decreasing. \n    Consider using efficient sorting algorithms to optimize performance with larger datasets.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    return is_monotonic_increasing(l) or is_monotonic_decreasing(l)", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Analyze the input list to determine if it is monotonically increasing or decreasing.\",\n        \"steps\": [\n          \"Check if the list is empty or has only one element.\",\n          \"Compare each element with the next one to determine the trend (increasing or decreasing).\",\n          \"Continue the comparison until the end of the list or a change in the trend is found.\"\n        ]\n      },\n      {\n        \"subproblem\": \"Implement the logic to check for monotonicity.\",\n        \"steps\": [\n          \"Initialize a flag to track the trend (increasing or decreasing).\",\n          \"Iterate through the list and compare each element with the next one.\",\n          \"Update the flag based on the comparison results.\",\n          \"Return the result based on the flag.\"\n        ]\n      },\n      {\n        \"subproblem\": \"Optimize the implementation for larger datasets.\",\n        \"steps\": [\n          \"Consider using efficient sorting algorithms to optimize performance.\",\n          \"Implement the logic to handle larger datasets efficiently.\"\n        ]\n      },\n      {\n        \"subproblem\": \"Document the function with a proper docstring.\",\n        \"steps\": [\n          \"Write a clear and concise docstring that describes the function's purpose, parameters, and return value.\",\n          \"Include examples to illustrate the function's usage.\"\n        ]\n      }\n    ],\n    \"high_level_steps\": [\n      \"Understand the user requirement and clarify any ambiguities.\",\n      \"Decompose the requirement into subproblems.\",\n      \"Develop a plan for each subproblem.\",\n      \"Assign tasks to the developer based on the plan.\",\n      \"Monitor the development process and provide guidance as needed.\",\n      \"Review the implementation and ensure it meets the user requirement.\"\n    ]\n  }\n}\n```", "Round_0": {"code": "def monotonic(l: list) -> bool:\n    '''Return True if list elements are monotonically increasing or decreasing.\n    Consider using efficient sorting algorithms to optimize performance with larger datasets.\n    \n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    if len(l) <= 1:\n        return True\n    \n    increasing = decreasing = True\n    \n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        elif l[i] < l[i - 1]:\n            increasing = False\n    \n    return increasing or decreasing", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Analyze the input list to determine if it is monotonically increasing or decreasing.\",\n        \"steps\": [\n          \"Check if the list is empty or has only one element.\",\n          \"Compare each element with the next one to determine the trend (increasing or decreasing).\",\n          \"Handle cases where the list has more than one element by comparing all adjacent pairs.\"\n        ]\n      },\n      {\n        \"subproblem\": \"Implement the logic to check for monotonicity.\",\n        \"steps\": [\n          \"Initialize a flag to track the trend (increasing or decreasing).\",\n          \"Iterate through the list and compare each element with the next one.\",\n          \"Update the flag based on the comparison results.\",\n          \"Return the appropriate boolean value based on the flag.\"\n        ]\n      },\n      {\n        \"subproblem\": \"Optimize the implementation for larger datasets.\",\n        \"steps\": [\n          \"Consider using efficient sorting algorithms to optimize performance with larger datasets.\",\n          \"Implement optimizations such as early stopping if a trend is found.\",\n          \"Ensure the implementation handles edge cases efficiently.\"\n        ]\n      }\n    ],\n    \"high_level_steps\": [\n      \"Receive the input list from the user.\",\n      \"Analyze the list to determine if it is monotonically increasing or decreasing.\",\n      \"Implement the logic to check for monotonicity.\",\n      \"Return the result to the user.\",\n      \"Optimize the implementation for larger datasets.\"\n    ]\n  }\n}\n```", "Round_0": {"code": "def monotonic(l: list):\n    '''Return True if list elements are monotonically increasing or decreasing. Consider using efficient sorting algorithms to optimize performance with larger datasets.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    if len(l) <= 1:\n        return True\n    \n    increasing = decreasing = True\n    \n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        elif l[i] < l[i - 1]:\n            increasing = False\n    \n    return increasing or decreasing", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Analyze the input list to determine if it is monotonically increasing or decreasing.\",\n        \"steps\": [\n          \"Check if the list is empty or has only one element.\",\n          \"Compare each element with the next one to determine the trend (increasing or decreasing).\",\n          \"Continue the comparison until the end of the list or a change in the trend is found.\"\n        ]\n      },\n      {\n        \"subproblem\": \"Implement the logic to check for monotonicity.\",\n        \"steps\": [\n          \"Initialize a flag to track the trend (increasing or decreasing).\",\n          \"Iterate through the list and compare each element with the next one.\",\n          \"Update the flag based on the comparison results.\",\n          \"Return the result based on the flag.\"\n        ]\n      },\n      {\n        \"subproblem\": \"Optimize the implementation for larger datasets.\",\n        \"steps\": [\n          \"Consider using efficient sorting algorithms to optimize performance with larger datasets.\",\n          \"Implement optimizations such as early stopping if a change in trend is detected.\",\n          \"Ensure the implementation handles edge cases and exceptions.\"\n        ]\n      }\n    ],\n    \"high_level_steps\": [\n      \"Receive the input list from the user.\",\n      \"Analyze the list to determine if it is monotonically increasing or decreasing.\",\n      \"Implement the logic to check for monotonicity.\",\n      \"Return the result to the user.\",\n      \"Optimize the implementation for larger datasets.\"\n    ]\n  }\n}\n```", "Round_0": {"code": "def monotonic(l: list):\n    '''Return True if list elements are monotonically increasing or decreasing. Consider using efficient sorting algorithms to optimize performance with larger datasets.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    if len(l) <= 1:\n        return True\n    \n    increasing = decreasing = True\n    \n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        if l[i] < l[i - 1]:\n            increasing = False\n    \n    return increasing or decreasing", "report": "The compilation output of the preceding code is: Code Test Passed."}}], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [113, 113, 113, 113, 113, 113, 113, 113, 113, 113], "passed": true, "pass": true, "pass_num": 10, "round": 826, "mutate_method": "add_1_sentence_at_end", "save_node": false, "parent_index": 567}
