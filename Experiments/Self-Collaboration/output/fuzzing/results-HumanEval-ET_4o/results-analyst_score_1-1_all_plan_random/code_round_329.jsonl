{"task_id": "HumanEval/117", "prompt": "def select_words(s, n):\t\n'''Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Ensure your function handles cases with varying capitalizations correctly.\nExamples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    '''", "entry_point": "select_words", "canonical_solution": "    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n", "test": ["def check(select_words):\n\tassert select_words('eg aqk', 2) == ['aqk']", "def check(select_words):\n\tassert select_words('eoDDPoNuKJnQIcLHcFK', 14) == ['eoDDPoNuKJnQIcLHcFK']", "def check(select_words):\n\tassert select_words('syk', 6) == []", "def check(select_words):\n\tassert select_words('gw', 9) == []", "def check(select_words):\n\tassert select_words('ZpJhNYG', 7) == ['ZpJhNYG']", "def check(select_words):\n\tassert select_words(\"Mary had a little lamb\", 4) == [\"little\"], \"First test error: \" + str(select_words(\"Mary had a little lamb\", 4))", "def check(select_words):\n\tassert select_words('ILkvuFIrW jXOOGXgdSWtd', 10) == ['jXOOGXgdSWtd']", "def check(select_words):\n\tassert select_words('uwnynnkeh', 7) == ['uwnynnkeh']", "def check(select_words):\n\tassert select_words('zGMhBC', 6) == ['zGMhBC']", "def check(select_words):\n\tassert select_words('kfohjsjunakqmmsx', 1) == []", "def check(select_words):\n\tassert select_words('KbpFfWgXZoVjXV', 1) == []", "def check(select_words):\n\tassert select_words('GeLxcZJyRwUsQKBQkanf', 2) == []", "def check(select_words):\n\tassert select_words('kg', 1) == []", "def check(select_words):\n\tassert select_words(\"simple white space\", 2) == [], \"Third test error: \" + str(select_words(\"simple white space\", 2))", "def check(select_words):\n\tassert select_words('xrbpxpncgqufqkq', 6) == []", "def check(select_words):\n\tassert select_words('sqgikswgssxsbwkl', 7) == []", "def check(select_words):\n\tassert select_words('kumJjGm AFFO', 6) == ['kumJjGm']", "def check(select_words):\n\tassert select_words('iJxMQLiIZ', 6) == ['iJxMQLiIZ']", "def check(select_words):\n\tassert select_words('uwebicR RgZrAiEnPkq', 4) == ['uwebicR']", "def check(select_words):\n\tassert select_words('bnXA AjPVh', 5) == []", "def check(select_words):\n\tassert select_words('omnivbqgmavyqdgqssas', 6) == []", "def check(select_words):\n\tassert select_words('fmjizkhknnihqioic', 4) == []", "def check(select_words):\n\tassert select_words('lINKPOlFIImtg', 3) == []", "def check(select_words):\n\tassert select_words('nPxmyTd', 7) == ['nPxmyTd']", "def check(select_words):\n\tassert select_words('yCRgLVwagpjADSN MUkt', 3) == ['MUkt']", "def check(select_words):\n\tassert select_words('mehochzpausf', 2) == []", "def check(select_words):\n\tassert select_words('TcXKTNbOnjCJLzWhlNELbGPc', 22) == ['TcXKTNbOnjCJLzWhlNELbGPc']", "def check(select_words):\n\tassert select_words('EGiDfM', 1) == []", "def check(select_words):\n\tassert select_words('mc', 7) == []", "def check(select_words):\n\tassert select_words('wzx', 5) == []", "def check(select_words):\n\tassert select_words('hgwhtsvqihhm', 11) == ['hgwhtsvqihhm']", "def check(select_words):\n\tassert select_words('xwkxcjffocow', 5) == []", "def check(select_words):\n\tassert select_words('dl', 5) == []", "def check(select_words):\n\tassert select_words('UIOcsXneOjxMkRLvRLSDTV', 4) == []", "def check(select_words):\n\tassert select_words('ABIStgq', 5) == ['ABIStgq']", "def check(select_words):\n\tassert select_words('nb', 2) == ['nb']", "def check(select_words):\n\tassert select_words('ny', 2) == ['ny']", "def check(select_words):\n\tassert select_words('HWCLBC', 6) == ['HWCLBC']", "def check(select_words):\n\tassert select_words('uuh', 6) == []", "def check(select_words):\n\tassert select_words('uoubngttn', 3) == []", "def check(select_words):\n\tassert select_words('g', 5) == []", "def check(select_words):\n\tassert select_words('ffqkhIIChADuzMQIrcFek', 15) == ['ffqkhIIChADuzMQIrcFek']", "def check(select_words):\n\tassert select_words('CbxmADxVZtHArXzwNxnuvda', 19) == ['CbxmADxVZtHArXzwNxnuvda']", "def check(select_words):\n\tassert select_words('aztxoxesjkzqebhrfzw', 3) == []", "def check(select_words):\n\tassert select_words('sqdcPgSPeHfNdISspJa', 16) == ['sqdcPgSPeHfNdISspJa']", "def check(select_words):\n\tassert select_words('zdXc AqKVMGYLrZMPSz', 4) == ['zdXc']", "def check(select_words):\n\tassert select_words('tJzO PnCT', 3) == ['tJzO']", "def check(select_words):\n\tassert select_words('jizrraatfiyetneqergnnbfn', 3) == []", "def check(select_words):\n\tassert select_words('qhwubvrfmwy', 2) == []", "def check(select_words):\n\tassert select_words('dzrmzilzoxn l', 9) == ['dzrmzilzoxn']", "def check(select_words):\n\tassert select_words('ZZcAZzrjekxbP tPNuYXLnOLVv', 10) == ['tPNuYXLnOLVv']", "def check(select_words):\n\tassert select_words('JtsHoq wxvsLQqBXkNpmCTzBWTX', 1) == []", "def check(select_words):\n\tassert select_words('aecdOIhfIbEBTOfoKnT', 1) == []", "def check(select_words):\n\tassert select_words('gLFCSPHHP', 9) == ['gLFCSPHHP']", "def check(select_words):\n\tassert select_words('r s rhhipmt', 6) == ['rhhipmt']", "def check(select_words):\n\tassert select_words('aDqyhePv', 6) == ['aDqyhePv']", "def check(select_words):\n\tassert select_words('tTxmhPuW', 7) == ['tTxmhPuW']", "def check(select_words):\n\tassert select_words('gkaioVYtEtMLxrVq JIIwPCZW', 6) == ['JIIwPCZW']", "def check(select_words):\n\tassert select_words('aru', 5) == []", "def check(select_words):\n\tassert select_words('ySRkkHkfcvgHqOGVfaDTTRf', 1) == []", "def check(select_words):\n\tassert select_words('SNeiILCez', 4) == []", "def check(select_words):\n\tassert select_words('xzzxdz lkmvrvizpz z', 6) == ['xzzxdz']", "def check(select_words):\n\tassert select_words('ySmjGAg', 6) == ['ySmjGAg']", "def check(select_words):\n\tassert select_words('bRJRZC', 3) == []", "def check(select_words):\n\tassert select_words('u', 1) == []", "def check(select_words):\n\tassert select_words('djucfuuizrjfvuzzo', 4) == []", "def check(select_words):\n\tassert select_words('dvYLMt', 6) == ['dvYLMt']", "def check(select_words):\n\tassert select_words('xqvooek icmfdiysshehnyqx', 7) == []", "def check(select_words):\n\tassert select_words('zIdcqeCrTYiDGGjYFC', 15) == ['zIdcqeCrTYiDGGjYFC']", "def check(select_words):\n\tassert select_words('yp', 6) == []", "def check(select_words):\n\tassert select_words('v', 4) == []", "def check(select_words):\n\tassert select_words(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"], \"2nd edge test error: \" + str(select_words(\"a b c d e f\", 1))", "def check(select_words):\n\tassert select_words('afrrguc', 5) == ['afrrguc']", "def check(select_words):\n\tassert select_words('KBDaAtwgkSQhbMcvLn', 16) == ['KBDaAtwgkSQhbMcvLn']", "def check(select_words):\n\tassert select_words('WvvnDCbdBejJOXxALMQUP', 17) == ['WvvnDCbdBejJOXxALMQUP']", "def check(select_words):\n\tassert select_words('IXWOrAdrmmcWXqngDkiVFKXaAWf', 4) == []", "def check(select_words):\n\tassert select_words('nh vu lcakrb', 1) == ['vu']", "def check(select_words):\n\tassert select_words('QOBKeojoDQGT jIZmKXyPl', 8) == ['QOBKeojoDQGT', 'jIZmKXyPl']", "def check(select_words):\n\tassert select_words(\"Uncle sam\", 3) == [\"Uncle\"], \"Fifth test error: \" + str(select_words(\"Uncle sam\", 3))\n\n\n    # Check some edge cases that are easy to work out by hand.", "def check(select_words):\n\tassert select_words('zE sivlrNrHFgwiokUjTMdndl', 5) == []", "def check(select_words):\n\tassert select_words('svMzfBuoveQXEPPIVV', 13) == ['svMzfBuoveQXEPPIVV']", "def check(select_words):\n\tassert select_words('MjRnAErHPguQC', 1) == []", "def check(select_words):\n\tassert select_words('tmchxmttrgfdanq', 3) == []", "def check(select_words):\n\tassert select_words('jezkeorvxnruwhhwzxm', 7) == []", "def check(select_words):\n\tassert select_words('caurfxlpkygqxoknil', 4) == []", "def check(select_words):\n\tassert select_words('RBAY  hmsXCkloLHYheRDQL', 3) == ['RBAY']", "def check(select_words):\n\tassert select_words('prFfoYsafgMfGYYGjsiqTXwL', 21) == ['prFfoYsafgMfGYYGjsiqTXwL']", "def check(select_words):\n\tassert select_words('NSjIbZV', 2) == []", "def check(select_words):\n\tassert select_words('rPKhzIot', 6) == ['rPKhzIot']", "def check(select_words):\n\tassert select_words('ASDVzOVVDEdj J', 1) == ['J']", "def check(select_words):\n\tassert select_words('oKNamFuRSJcV', 9) == ['oKNamFuRSJcV']", "def check(select_words):\n\tassert select_words(' siweqafqot', 5) == []", "def check(select_words):\n\tassert select_words('xdQgsAHI', 5) == []", "def check(select_words):\n\tassert select_words('epzbicjvjcbxmxgfityzzv', 5) == []", "def check(select_words):\n\tassert select_words('GFNxLvGHJnNx', 12) == ['GFNxLvGHJnNx']", "def check(select_words):\n\tassert select_words('hguHoJGaaNwX', 3) == []", "def check(select_words):\n\tassert select_words('cnxdrucrydrcyol', 13) == ['cnxdrucrydrcyol']", "def check(select_words):\n\tassert select_words('choounwx', 5) == ['choounwx']", "def check(select_words):\n\tassert select_words('yue', 2) == []", "def check(select_words):\n\tassert select_words('DDdrgPy', 4) == []", "def check(select_words):\n\tassert select_words('c zsYpMPdmr', 9) == ['zsYpMPdmr']", "def check(select_words):\n\tassert select_words(\"\", 4) == [], \"1st edge test error: \" + str(select_words(\"\", 4))", "def check(select_words):\n\tassert select_words('pzBxlNfcXEsOQzL', 13) == ['pzBxlNfcXEsOQzL']", "def check(select_words):\n\tassert select_words('pWqNDaO zJwlHsqqEYCdDEZtNiL', 3) == []", "def check(select_words):\n\tassert select_words(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"], \"Second test error: \" + str(select_words(\"Mary had a little lamb\", 3))", "def check(select_words):\n\tassert select_words('Reg MuZcF', 4) == ['MuZcF']", "def check(select_words):\n\tassert select_words('lxQnxHVtrUGfoufkLPXu', 16) == ['lxQnxHVtrUGfoufkLPXu']", "def check(select_words):\n\tassert select_words('sl', 6) == []", "def check(select_words):\n\tassert select_words('IFKqNq ', 5) == ['IFKqNq']", "def check(select_words):\n\tassert select_words('lfspeijyudniowk', 1) == []", "def check(select_words):\n\tassert select_words('kogmgdnk', 7) == ['kogmgdnk']", "def check(select_words):\n\tassert select_words('nnchatjackywoavfwfps', 5) == []", "def check(select_words):\n\tassert select_words('d', 2) == []", "def check(select_words):\n\tassert select_words('fjnjvfo aqgasitdiyalwv', 1) == []", "def check(select_words):\n\tassert select_words('IGEmiHg ne YIhrNkjpGfOObqJ', 1) == ['ne']", "def check(select_words):\n\tassert select_words(\"Hello world\", 4) == [\"world\"], \"Fourth test error: \" + str(select_words(\"Hello world\", 4))", "def check(select_words):\n\tassert select_words('jopfxbbvlslmluypcdt', 3) == []", "def check(select_words):\n\tassert select_words('AWrNREXAqD WePeTbIPTS', 4) == []", "def check(select_words):\n\tassert select_words('OWzTDtbfTAEOBLuZPqFdnmnSG', 5) == []", "def check(select_words):\n\tassert select_words('TQzrMVZMngInaglSfwvrbAh', 20) == ['TQzrMVZMngInaglSfwvrbAh']", "def check(select_words):\n\tassert select_words('etdrxwybqi', 1) == []", "def check(select_words):\n\tassert select_words('aVCSziOkLCLGizHcmC', 2) == []", "def check(select_words):\n\tassert select_words('sYlP HUxjpHVfeWBNAvXo', 4) == ['sYlP']", "def check(select_words):\n\tassert select_words('txXxge', 4) == []", "def check(select_words):\n\tassert select_words('kcpieuVjAOaxdpB', 4) == []", "def check(select_words):\n\tassert select_words('oh', 8) == []", "def check(select_words):\n\tassert select_words('bgosvLxdWAWUtCxHgfPugDKQfel', 5) == []", "def check(select_words):\n\tassert select_words('fT LxYLtzO', 6) == ['LxYLtzO']", "def check(select_words):\n\tassert select_words('eywh qxreeexrrhyovpwl', 7) == []", "def check(select_words):\n\tassert select_words('JfStfbdqmygzcqzJvvbivZfDbwg', 26) == ['JfStfbdqmygzcqzJvvbivZfDbwg']", "def check(select_words):\n\tassert select_words('asfwxvbzdfsrymc', 3) == []", "def check(select_words):\n\tassert select_words('nBmjWxiPV', 3) == []", "def check(select_words):\n\tassert select_words('lDqgwtu rM tfTmeKEd', 2) == ['rM']"], "test_case_list": ["assert select_words('eg aqk', 2) == ['aqk']", "assert select_words('eoDDPoNuKJnQIcLHcFK', 14) == ['eoDDPoNuKJnQIcLHcFK']", "assert select_words('syk', 6) == []", "assert select_words('gw', 9) == []", "assert select_words('ZpJhNYG', 7) == ['ZpJhNYG']", "assert select_words(\"Mary had a little lamb\", 4) == [\"little\"], \"First test error: \" + str(select_words(\"Mary had a little lamb\", 4))", "assert select_words('ILkvuFIrW jXOOGXgdSWtd', 10) == ['jXOOGXgdSWtd']", "assert select_words('uwnynnkeh', 7) == ['uwnynnkeh']", "assert select_words('zGMhBC', 6) == ['zGMhBC']", "assert select_words('kfohjsjunakqmmsx', 1) == []", "assert select_words('KbpFfWgXZoVjXV', 1) == []", "assert select_words('GeLxcZJyRwUsQKBQkanf', 2) == []", "assert select_words('kg', 1) == []", "assert select_words(\"simple white space\", 2) == [], \"Third test error: \" + str(select_words(\"simple white space\", 2))", "assert select_words('xrbpxpncgqufqkq', 6) == []", "assert select_words('sqgikswgssxsbwkl', 7) == []", "assert select_words('kumJjGm AFFO', 6) == ['kumJjGm']", "assert select_words('iJxMQLiIZ', 6) == ['iJxMQLiIZ']", "assert select_words('uwebicR RgZrAiEnPkq', 4) == ['uwebicR']", "assert select_words('bnXA AjPVh', 5) == []", "assert select_words('omnivbqgmavyqdgqssas', 6) == []", "assert select_words('fmjizkhknnihqioic', 4) == []", "assert select_words('lINKPOlFIImtg', 3) == []", "assert select_words('nPxmyTd', 7) == ['nPxmyTd']", "assert select_words('yCRgLVwagpjADSN MUkt', 3) == ['MUkt']", "assert select_words('mehochzpausf', 2) == []", "assert select_words('TcXKTNbOnjCJLzWhlNELbGPc', 22) == ['TcXKTNbOnjCJLzWhlNELbGPc']", "assert select_words('EGiDfM', 1) == []", "assert select_words('mc', 7) == []", "assert select_words('wzx', 5) == []", "assert select_words('hgwhtsvqihhm', 11) == ['hgwhtsvqihhm']", "assert select_words('xwkxcjffocow', 5) == []", "assert select_words('dl', 5) == []", "assert select_words('UIOcsXneOjxMkRLvRLSDTV', 4) == []", "assert select_words('ABIStgq', 5) == ['ABIStgq']", "assert select_words('nb', 2) == ['nb']", "assert select_words('ny', 2) == ['ny']", "assert select_words('HWCLBC', 6) == ['HWCLBC']", "assert select_words('uuh', 6) == []", "assert select_words('uoubngttn', 3) == []", "assert select_words('g', 5) == []", "assert select_words('ffqkhIIChADuzMQIrcFek', 15) == ['ffqkhIIChADuzMQIrcFek']", "assert select_words('CbxmADxVZtHArXzwNxnuvda', 19) == ['CbxmADxVZtHArXzwNxnuvda']", "assert select_words('aztxoxesjkzqebhrfzw', 3) == []", "assert select_words('sqdcPgSPeHfNdISspJa', 16) == ['sqdcPgSPeHfNdISspJa']", "assert select_words('zdXc AqKVMGYLrZMPSz', 4) == ['zdXc']", "assert select_words('tJzO PnCT', 3) == ['tJzO']", "assert select_words('jizrraatfiyetneqergnnbfn', 3) == []", "assert select_words('qhwubvrfmwy', 2) == []", "assert select_words('dzrmzilzoxn l', 9) == ['dzrmzilzoxn']", "assert select_words('ZZcAZzrjekxbP tPNuYXLnOLVv', 10) == ['tPNuYXLnOLVv']", "assert select_words('JtsHoq wxvsLQqBXkNpmCTzBWTX', 1) == []", "assert select_words('aecdOIhfIbEBTOfoKnT', 1) == []", "assert select_words('gLFCSPHHP', 9) == ['gLFCSPHHP']", "assert select_words('r s rhhipmt', 6) == ['rhhipmt']", "assert select_words('aDqyhePv', 6) == ['aDqyhePv']", "assert select_words('tTxmhPuW', 7) == ['tTxmhPuW']", "assert select_words('gkaioVYtEtMLxrVq JIIwPCZW', 6) == ['JIIwPCZW']", "assert select_words('aru', 5) == []", "assert select_words('ySRkkHkfcvgHqOGVfaDTTRf', 1) == []", "assert select_words('SNeiILCez', 4) == []", "assert select_words('xzzxdz lkmvrvizpz z', 6) == ['xzzxdz']", "assert select_words('ySmjGAg', 6) == ['ySmjGAg']", "assert select_words('bRJRZC', 3) == []", "assert select_words('u', 1) == []", "assert select_words('djucfuuizrjfvuzzo', 4) == []", "assert select_words('dvYLMt', 6) == ['dvYLMt']", "assert select_words('xqvooek icmfdiysshehnyqx', 7) == []", "assert select_words('zIdcqeCrTYiDGGjYFC', 15) == ['zIdcqeCrTYiDGGjYFC']", "assert select_words('yp', 6) == []", "assert select_words('v', 4) == []", "assert select_words(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"], \"2nd edge test error: \" + str(select_words(\"a b c d e f\", 1))", "assert select_words('afrrguc', 5) == ['afrrguc']", "assert select_words('KBDaAtwgkSQhbMcvLn', 16) == ['KBDaAtwgkSQhbMcvLn']", "assert select_words('WvvnDCbdBejJOXxALMQUP', 17) == ['WvvnDCbdBejJOXxALMQUP']", "assert select_words('IXWOrAdrmmcWXqngDkiVFKXaAWf', 4) == []", "assert select_words('nh vu lcakrb', 1) == ['vu']", "assert select_words('QOBKeojoDQGT jIZmKXyPl', 8) == ['QOBKeojoDQGT', 'jIZmKXyPl']", "assert select_words(\"Uncle sam\", 3) == [\"Uncle\"], \"Fifth test error: \" + str(select_words(\"Uncle sam\", 3))\n\n\n    # Check some edge cases that are easy to work out by hand.", "assert select_words('zE sivlrNrHFgwiokUjTMdndl', 5) == []", "assert select_words('svMzfBuoveQXEPPIVV', 13) == ['svMzfBuoveQXEPPIVV']", "assert select_words('MjRnAErHPguQC', 1) == []", "assert select_words('tmchxmttrgfdanq', 3) == []", "assert select_words('jezkeorvxnruwhhwzxm', 7) == []", "assert select_words('caurfxlpkygqxoknil', 4) == []", "assert select_words('RBAY  hmsXCkloLHYheRDQL', 3) == ['RBAY']", "assert select_words('prFfoYsafgMfGYYGjsiqTXwL', 21) == ['prFfoYsafgMfGYYGjsiqTXwL']", "assert select_words('NSjIbZV', 2) == []", "assert select_words('rPKhzIot', 6) == ['rPKhzIot']", "assert select_words('ASDVzOVVDEdj J', 1) == ['J']", "assert select_words('oKNamFuRSJcV', 9) == ['oKNamFuRSJcV']", "assert select_words(' siweqafqot', 5) == []", "assert select_words('xdQgsAHI', 5) == []", "assert select_words('epzbicjvjcbxmxgfityzzv', 5) == []", "assert select_words('GFNxLvGHJnNx', 12) == ['GFNxLvGHJnNx']", "assert select_words('hguHoJGaaNwX', 3) == []", "assert select_words('cnxdrucrydrcyol', 13) == ['cnxdrucrydrcyol']", "assert select_words('choounwx', 5) == ['choounwx']", "assert select_words('yue', 2) == []", "assert select_words('DDdrgPy', 4) == []", "assert select_words('c zsYpMPdmr', 9) == ['zsYpMPdmr']", "assert select_words(\"\", 4) == [], \"1st edge test error: \" + str(select_words(\"\", 4))", "assert select_words('pzBxlNfcXEsOQzL', 13) == ['pzBxlNfcXEsOQzL']", "assert select_words('pWqNDaO zJwlHsqqEYCdDEZtNiL', 3) == []", "assert select_words(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"], \"Second test error: \" + str(select_words(\"Mary had a little lamb\", 3))", "assert select_words('Reg MuZcF', 4) == ['MuZcF']", "assert select_words('lxQnxHVtrUGfoufkLPXu', 16) == ['lxQnxHVtrUGfoufkLPXu']", "assert select_words('sl', 6) == []", "assert select_words('IFKqNq ', 5) == ['IFKqNq']", "assert select_words('lfspeijyudniowk', 1) == []", "assert select_words('kogmgdnk', 7) == ['kogmgdnk']", "assert select_words('nnchatjackywoavfwfps', 5) == []", "assert select_words('d', 2) == []", "assert select_words('fjnjvfo aqgasitdiyalwv', 1) == []", "assert select_words('IGEmiHg ne YIhrNkjpGfOObqJ', 1) == ['ne']", "assert select_words(\"Hello world\", 4) == [\"world\"], \"Fourth test error: \" + str(select_words(\"Hello world\", 4))", "assert select_words('jopfxbbvlslmluypcdt', 3) == []", "assert select_words('AWrNREXAqD WePeTbIPTS', 4) == []", "assert select_words('OWzTDtbfTAEOBLuZPqFdnmnSG', 5) == []", "assert select_words('TQzrMVZMngInaglSfwvrbAh', 20) == ['TQzrMVZMngInaglSfwvrbAh']", "assert select_words('etdrxwybqi', 1) == []", "assert select_words('aVCSziOkLCLGizHcmC', 2) == []", "assert select_words('sYlP HUxjpHVfeWBNAvXo', 4) == ['sYlP']", "assert select_words('txXxge', 4) == []", "assert select_words('kcpieuVjAOaxdpB', 4) == []", "assert select_words('oh', 8) == []", "assert select_words('bgosvLxdWAWUtCxHgfPugDKQfel', 5) == []", "assert select_words('fT LxYLtzO', 6) == ['LxYLtzO']", "assert select_words('eywh qxreeexrrhyovpwl', 7) == []", "assert select_words('JfStfbdqmygzcqzJvvbivZfDbwg', 26) == ['JfStfbdqmygzcqzJvvbivZfDbwg']", "assert select_words('asfwxvbzdfsrymc', 3) == []", "assert select_words('nBmjWxiPV', 3) == []", "assert select_words('lDqgwtu rM tfTmeKEd', 2) == ['rM']"], "nl": "Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    ", "func": "def select_words(s, n):", "examples": "Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    ", "completion": "def select_words(s, n):\n    # Define a set of consonants\n    consonants = set(\"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\")\n    \n    # Split the input string into a list of words\n    words = s.split()\n    \n    # Initialize an empty list to store words that meet the criteria\n    result = []\n    \n    # Iterate over each word in the list\n    for word in words:\n        # Count the number of consonants in the word\n        consonant_count = sum(1 for char in word if char in consonants)\n        \n        # If the word contains exactly 'n' consonants, add it to the result list\n        if consonant_count == n:\n            result.append(word)\n    \n    # Return the list of words that have exactly 'n' consonants\n    return result\n", "completions": ["def select_words(s, n):\n    def count_consonants(word):\n        consonants = \"bcdfghjklmnpqrstvwxyz\"\n        return sum(1 for char in word.lower() if char in consonants)\n\n    words = s.split()\n    result = [word for word in words if count_consonants(word) == n]\n    return result\n", "def select_words(s, n):\n    # Define a set of consonants\n    consonants = set(\"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\")\n    \n    # Split the input string into a list of words\n    words = s.split()\n    \n    # Initialize a list to store words with exactly n consonants\n    result = []\n    \n    # Iterate over each word in the list\n    for word in words:\n        # Count the number of consonants in the word\n        consonant_count = sum(1 for char in word if char in consonants)\n        \n        # If the count matches 'n', add the word to the result list\n        if consonant_count == n:\n            result.append(word)\n    \n    # Return the list of words that have exactly 'n' consonants\n    return result\n", "def select_words(s, n):\n    # Define a set of consonants\n    consonants = set(\"bcdfghjklmnpqrstvwxyz\")\n\n    # Split the input string into a list of words\n    words = s.split()\n\n    # Initialize the result list\n    result = []\n\n    # Iterate over each word in the list\n    for word in words:\n        # Convert the word to lowercase to handle varying capitalizations\n        lower_word = word.lower()\n\n        # Count the number of consonants in the word\n        consonant_count = sum(1 for char in lower_word if char in consonants)\n\n        # If the count matches 'n', add the word to the result list\n        if consonant_count == n:\n            result.append(word)\n\n    # Return the list of words that have exactly 'n' consonants\n    return result\n", "def select_words(s, n):\n    def count_consonants(word):\n        consonants = \"bcdfghjklmnpqrstvwxyz\"\n        return sum(1 for char in word.lower() if char in consonants)\n\n    words = s.split()\n    result = [word for word in words if count_consonants(word) == n]\n    return result\n", "def select_words(s, n):\n    # Define a set of consonants\n    consonants = set(\"bcdfghjklmnpqrstvwxyz\")\n\n    # Split the input string into a list of words\n    words = s.split()\n\n    # Initialize the result list\n    result = []\n\n    # Iterate over each word in the list\n    for word in words:\n        # Convert the word to lowercase\n        lower_word = word.lower()\n\n        # Count the number of consonants in the word\n        consonant_count = sum(1 for char in lower_word if char in consonants)\n\n        # If the count matches 'n', add the word to the result list\n        if consonant_count == n:\n            result.append(word)\n\n    # Return the list of words that have exactly 'n' consonants\n    return result\n", "def select_words(s, n):\n    def count_consonants(word):\n        consonants = \"bcdfghjklmnpqrstvwxyz\"\n        return sum(1 for char in word.lower() if char in consonants)\n\n    if not s:\n        return []\n\n    words = s.split()\n    result = [word for word in words if count_consonants(word) == n]\n    return result\n", "def select_words(s, n):\n    def count_consonants(word):\n        consonants = set(\"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\")\n        return sum(1 for char in word if char in consonants)\n\n    words = s.split()\n    return [word for word in words if count_consonants(word) == n]\n", "def select_words(s, n):\n    def count_consonants(word):\n        consonants = \"bcdfghjklmnpqrstvwxyz\"\n        return sum(1 for char in word.lower() if char in consonants)\n\n    words = s.split()\n    result = [word for word in words if count_consonants(word) == n]\n    return result\n", "def select_words(s, n):\n    def count_consonants(word):\n        consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n        return sum(1 for char in word if char in consonants)\n\n    words = s.split()\n    result = [word for word in words if count_consonants(word) == n]\n    return result\n", "def select_words(s, n):\n    # Define a set of consonants\n    consonants = set(\"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\")\n    \n    # Split the input string into a list of words\n    words = s.split()\n    \n    # Initialize an empty list to store words that meet the criteria\n    result = []\n    \n    # Iterate over each word in the list\n    for word in words:\n        # Count the number of consonants in the word\n        consonant_count = sum(1 for char in word if char in consonants)\n        \n        # If the word contains exactly 'n' consonants, add it to the result list\n        if consonant_count == n:\n            result.append(word)\n    \n    # Return the list of words that have exactly 'n' consonants\n    return result\n"], "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input string into individual words.\",\n      \"details\": \"Split the string 's' by spaces to get a list of words.\"\n    },\n    {\n      \"description\": \"Identify consonants in a word.\",\n      \"details\": \"Define a set of consonants (both uppercase and lowercase) to check against each character in a word.\"\n    },\n    {\n      \"description\": \"Count the number of consonants in each word.\",\n      \"details\": \"Iterate over each word and count the characters that are consonants using the defined set.\"\n    },\n    {\n      \"description\": \"Filter words based on the consonant count.\",\n      \"details\": \"Select words that have exactly 'n' consonants and maintain their order from the original string.\"\n    },\n    {\n      \"description\": \"Handle edge cases.\",\n      \"details\": \"Ensure the function returns an empty list if the input string is empty or if no words meet the criteria.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Split the input string 's' into a list of words using spaces as delimiters.\",\n    \"Define a set of consonants including both uppercase and lowercase letters.\",\n    \"Initialize an empty list to store words that meet the criteria.\",\n    \"For each word in the list, count the number of consonants by checking each character against the consonant set.\",\n    \"If a word contains exactly 'n' consonants, add it to the result list.\",\n    \"Return the list of words that have exactly 'n' consonants, preserving their original order.\",\n    \"Ensure the function handles an empty input string by returning an empty list.\"\n  ]\n}\n```", "Round_0": {"code": "def select_words(s, n):\n    # Define a set of consonants\n    consonants = set(\"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\")\n    \n    # Split the input string into a list of words\n    words = s.split()\n    \n    # Initialize an empty list to store words that meet the criteria\n    result = []\n    \n    # Iterate over each word in the list\n    for word in words:\n        # Count the number of consonants in the word\n        consonant_count = sum(1 for char in word if char in consonants)\n        \n        # If the word contains exactly 'n' consonants, add it to the result list\n        if consonant_count == n:\n            result.append(word)\n    \n    # Return the list of words that have exactly 'n' consonants\n    return result\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, "session_historys": [{"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input string into individual words.\",\n      \"details\": \"Split the string s by spaces to get a list of words.\"\n    },\n    {\n      \"description\": \"Define a function to count consonants in a word.\",\n      \"details\": \"Create a helper function that takes a word as input and returns the number of consonants in it. Consider both uppercase and lowercase letters.\"\n    },\n    {\n      \"description\": \"Filter words based on consonant count.\",\n      \"details\": \"Iterate over the list of words and use the helper function to filter out words that have exactly n consonants.\"\n    },\n    {\n      \"description\": \"Return the filtered list of words.\",\n      \"details\": \"Ensure the function returns the list of words that meet the criteria, or an empty list if none do.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Receive input string s and natural number n.\",\n    \"Split the string s into a list of words.\",\n    \"Define a helper function to count consonants in a given word.\",\n    \"Iterate over the list of words and apply the helper function to each word.\",\n    \"Collect words that have exactly n consonants into a result list.\",\n    \"Return the result list.\"\n  ]\n}\n```", "Round_0": {"code": "def select_words(s, n):\n    def count_consonants(word):\n        consonants = \"bcdfghjklmnpqrstvwxyz\"\n        return sum(1 for char in word.lower() if char in consonants)\n\n    words = s.split()\n    result = [word for word in words if count_consonants(word) == n]\n    return result\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input string into individual words.\",\n      \"details\": \"Split the string 's' by spaces to get a list of words.\"\n    },\n    {\n      \"description\": \"Identify consonants in a word.\",\n      \"details\": \"Define a set of consonant characters. Consider both uppercase and lowercase letters.\"\n    },\n    {\n      \"description\": \"Count consonants in each word.\",\n      \"details\": \"For each word, iterate through its characters and count how many are consonants.\"\n    },\n    {\n      \"description\": \"Filter words based on consonant count.\",\n      \"details\": \"Select words that have exactly 'n' consonants.\"\n    },\n    {\n      \"description\": \"Return the filtered list of words.\",\n      \"details\": \"Ensure the words are returned in the order they appear in the input string.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Split the input string 's' into a list of words.\",\n    \"Define a set of consonants for comparison.\",\n    \"Iterate over each word in the list:\",\n    \"  - Count the number of consonants in the word.\",\n    \"  - If the count matches 'n', add the word to the result list.\",\n    \"Return the list of words that have exactly 'n' consonants.\"\n  ]\n}\n```", "Round_0": {"code": "def select_words(s, n):\n    # Define a set of consonants\n    consonants = set(\"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\")\n    \n    # Split the input string into a list of words\n    words = s.split()\n    \n    # Initialize a list to store words with exactly n consonants\n    result = []\n    \n    # Iterate over each word in the list\n    for word in words:\n        # Count the number of consonants in the word\n        consonant_count = sum(1 for char in word if char in consonants)\n        \n        # If the count matches 'n', add the word to the result list\n        if consonant_count == n:\n            result.append(word)\n    \n    # Return the list of words that have exactly 'n' consonants\n    return result\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input string into individual words.\",\n      \"details\": \"Split the string 's' by spaces to get a list of words.\"\n    },\n    {\n      \"description\": \"Identify consonants in each word.\",\n      \"details\": \"Define a set of consonants and iterate over each word to count the number of consonants.\"\n    },\n    {\n      \"description\": \"Filter words based on the number of consonants.\",\n      \"details\": \"For each word, check if the number of consonants matches the given number 'n'.\"\n    },\n    {\n      \"description\": \"Handle edge cases.\",\n      \"details\": \"Ensure the function returns an empty list if the input string is empty or if no words match the criteria.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Split the input string 's' into a list of words.\",\n    \"Define a set of consonants for reference.\",\n    \"Iterate over each word in the list:\",\n    \"  - Convert the word to lowercase to handle varying capitalizations.\",\n    \"  - Count the number of consonants in the word.\",\n    \"  - If the count matches 'n', add the word to the result list.\",\n    \"Return the list of words that have exactly 'n' consonants.\"\n  ]\n}\n```", "Round_0": {"code": "def select_words(s, n):\n    # Define a set of consonants\n    consonants = set(\"bcdfghjklmnpqrstvwxyz\")\n\n    # Split the input string into a list of words\n    words = s.split()\n\n    # Initialize the result list\n    result = []\n\n    # Iterate over each word in the list\n    for word in words:\n        # Convert the word to lowercase to handle varying capitalizations\n        lower_word = word.lower()\n\n        # Count the number of consonants in the word\n        consonant_count = sum(1 for char in lower_word if char in consonants)\n\n        # If the count matches 'n', add the word to the result list\n        if consonant_count == n:\n            result.append(word)\n\n    # Return the list of words that have exactly 'n' consonants\n    return result\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Identify and extract individual words from the input string.\",\n      \"details\": \"Split the input string 's' into a list of words using spaces as delimiters.\"\n    },\n    {\n      \"description\": \"Determine the number of consonants in a given word.\",\n      \"details\": \"Create a function to count consonants in a word by iterating over each character and checking if it is a consonant.\"\n    },\n    {\n      \"description\": \"Filter words based on the number of consonants.\",\n      \"details\": \"For each word, use the consonant counting function to check if the word contains exactly 'n' consonants.\"\n    },\n    {\n      \"description\": \"Handle edge cases.\",\n      \"details\": \"Ensure the function returns an empty list if the input string is empty or if no words meet the criteria.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Define the function 'select_words' with parameters 's' (string) and 'n' (natural number).\",\n    \"Split the string 's' into a list of words.\",\n    \"Define a helper function to count consonants in a word.\",\n    \"Iterate over each word in the list and use the helper function to count consonants.\",\n    \"Collect words that have exactly 'n' consonants into a result list.\",\n    \"Return the result list.\"\n  ]\n}\n```", "Round_0": {"code": "def select_words(s, n):\n    def count_consonants(word):\n        consonants = \"bcdfghjklmnpqrstvwxyz\"\n        return sum(1 for char in word.lower() if char in consonants)\n\n    words = s.split()\n    result = [word for word in words if count_consonants(word) == n]\n    return result\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input string into individual words.\",\n      \"details\": \"Split the string 's' by spaces to get a list of words.\"\n    },\n    {\n      \"description\": \"Identify consonants in each word.\",\n      \"details\": \"Define a set of consonants and iterate over each word to count the consonants.\"\n    },\n    {\n      \"description\": \"Filter words based on the number of consonants.\",\n      \"details\": \"For each word, check if the number of consonants matches the given number 'n'.\"\n    },\n    {\n      \"description\": \"Handle edge cases.\",\n      \"details\": \"Ensure the function returns an empty list if the input string is empty or if no words match the criteria.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Split the input string 's' into a list of words using space as a delimiter.\",\n    \"Define a set of consonants for reference.\",\n    \"Iterate over each word in the list:\",\n    \"  - Convert the word to lowercase to handle varying capitalizations.\",\n    \"  - Count the number of consonants in the word.\",\n    \"  - If the count matches 'n', add the word to the result list.\",\n    \"Return the list of words that have exactly 'n' consonants.\"\n  ]\n}\n```", "Round_0": {"code": "def select_words(s, n):\n    # Define a set of consonants\n    consonants = set(\"bcdfghjklmnpqrstvwxyz\")\n\n    # Split the input string into a list of words\n    words = s.split()\n\n    # Initialize the result list\n    result = []\n\n    # Iterate over each word in the list\n    for word in words:\n        # Convert the word to lowercase\n        lower_word = word.lower()\n\n        # Count the number of consonants in the word\n        consonant_count = sum(1 for char in lower_word if char in consonants)\n\n        # If the count matches 'n', add the word to the result list\n        if consonant_count == n:\n            result.append(word)\n\n    # Return the list of words that have exactly 'n' consonants\n    return result\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input string into individual words.\",\n      \"details\": \"Split the string 's' by spaces to get a list of words.\"\n    },\n    {\n      \"description\": \"Define a function to count consonants in a word.\",\n      \"details\": \"Create a helper function that takes a word as input and returns the number of consonants in it.\"\n    },\n    {\n      \"description\": \"Filter words based on consonant count.\",\n      \"details\": \"Iterate over the list of words and use the helper function to filter out words that have exactly 'n' consonants.\"\n    },\n    {\n      \"description\": \"Handle edge cases.\",\n      \"details\": \"Ensure the function returns an empty list if the input string is empty or if no words meet the criteria.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Define the main function 'select_words' that takes a string 's' and a natural number 'n' as inputs.\",\n    \"Split the input string 's' into a list of words.\",\n    \"Define a helper function 'count_consonants' to count the number of consonants in a given word.\",\n    \"Iterate over the list of words and use 'count_consonants' to filter words with exactly 'n' consonants.\",\n    \"Return the filtered list of words.\",\n    \"Ensure the function handles edge cases, such as an empty input string or no matching words.\"\n  ]\n}\n```", "Round_0": {"code": "def select_words(s, n):\n    def count_consonants(word):\n        consonants = \"bcdfghjklmnpqrstvwxyz\"\n        return sum(1 for char in word.lower() if char in consonants)\n\n    if not s:\n        return []\n\n    words = s.split()\n    result = [word for word in words if count_consonants(word) == n]\n    return result\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input string into individual words.\",\n      \"details\": \"Split the string s by spaces to get a list of words.\"\n    },\n    {\n      \"description\": \"Define a function to count consonants in a word.\",\n      \"details\": \"Create a helper function that takes a word as input and returns the number of consonants in it. Consider both uppercase and lowercase letters.\"\n    },\n    {\n      \"description\": \"Filter words based on the number of consonants.\",\n      \"details\": \"Iterate over the list of words and use the helper function to count consonants. Select words that have exactly n consonants.\"\n    },\n    {\n      \"description\": \"Return the filtered list of words.\",\n      \"details\": \"Ensure the words are returned in the order they appear in the input string.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Split the input string s into a list of words.\",\n    \"Implement a helper function to count the number of consonants in a given word.\",\n    \"Iterate over the list of words and use the helper function to filter words with exactly n consonants.\",\n    \"Collect and return the filtered words in a list, maintaining their original order.\"\n  ]\n}\n```", "Round_0": {"code": "def select_words(s, n):\n    def count_consonants(word):\n        consonants = set(\"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\")\n        return sum(1 for char in word if char in consonants)\n\n    words = s.split()\n    return [word for word in words if count_consonants(word) == n]\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Identify and extract words from the input string.\",\n      \"details\": \"Split the input string 's' into individual words using spaces as delimiters.\"\n    },\n    {\n      \"description\": \"Determine the number of consonants in a word.\",\n      \"details\": \"Create a function to count consonants in a given word, considering both uppercase and lowercase letters.\"\n    },\n    {\n      \"description\": \"Filter words based on the number of consonants.\",\n      \"details\": \"Iterate through the list of words and use the consonant-counting function to filter words that have exactly 'n' consonants.\"\n    },\n    {\n      \"description\": \"Return the filtered list of words.\",\n      \"details\": \"Collect and return the words that meet the criteria in the order they appear in the input string.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Split the input string 's' into a list of words.\",\n    \"Define a helper function to count the number of consonants in a word.\",\n    \"Iterate over each word in the list and use the helper function to check if it contains exactly 'n' consonants.\",\n    \"Collect words that meet the criteria into a result list.\",\n    \"Return the result list.\"\n  ]\n}\n```", "Round_0": {"code": "def select_words(s, n):\n    def count_consonants(word):\n        consonants = \"bcdfghjklmnpqrstvwxyz\"\n        return sum(1 for char in word.lower() if char in consonants)\n\n    words = s.split()\n    result = [word for word in words if count_consonants(word) == n]\n    return result\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input string into individual words.\",\n      \"details\": \"Split the input string 's' by spaces to get a list of words.\"\n    },\n    {\n      \"description\": \"Define a function to count consonants in a word.\",\n      \"details\": \"Create a helper function that takes a word as input and returns the number of consonants in it. Consider both uppercase and lowercase letters.\"\n    },\n    {\n      \"description\": \"Filter words based on consonant count.\",\n      \"details\": \"Iterate over the list of words and use the helper function to filter out words that have exactly 'n' consonants.\"\n    },\n    {\n      \"description\": \"Return the filtered list of words.\",\n      \"details\": \"Collect the words that meet the criteria into a list and return it. If no words meet the criteria, return an empty list.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Split the input string 's' into a list of words using spaces as delimiters.\",\n    \"Implement a helper function to count the number of consonants in a given word.\",\n    \"Iterate over the list of words and apply the helper function to each word.\",\n    \"Filter the words that have exactly 'n' consonants and store them in a result list.\",\n    \"Return the result list containing words with exactly 'n' consonants.\"\n  ]\n}\n```", "Round_0": {"code": "def select_words(s, n):\n    def count_consonants(word):\n        consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n        return sum(1 for char in word if char in consonants)\n\n    words = s.split()\n    result = [word for word in words if count_consonants(word) == n]\n    return result\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input string into individual words.\",\n      \"details\": \"Split the string 's' by spaces to get a list of words.\"\n    },\n    {\n      \"description\": \"Identify consonants in a word.\",\n      \"details\": \"Define a set of consonants (both uppercase and lowercase) to check against each character in a word.\"\n    },\n    {\n      \"description\": \"Count the number of consonants in each word.\",\n      \"details\": \"Iterate over each word and count the characters that are consonants using the defined set.\"\n    },\n    {\n      \"description\": \"Filter words based on the consonant count.\",\n      \"details\": \"Select words that have exactly 'n' consonants and maintain their order from the original string.\"\n    },\n    {\n      \"description\": \"Handle edge cases.\",\n      \"details\": \"Ensure the function returns an empty list if the input string is empty or if no words meet the criteria.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Split the input string 's' into a list of words using spaces as delimiters.\",\n    \"Define a set of consonants including both uppercase and lowercase letters.\",\n    \"Initialize an empty list to store words that meet the criteria.\",\n    \"For each word in the list, count the number of consonants by checking each character against the consonant set.\",\n    \"If a word contains exactly 'n' consonants, add it to the result list.\",\n    \"Return the list of words that have exactly 'n' consonants, preserving their original order.\",\n    \"Ensure the function handles an empty input string by returning an empty list.\"\n  ]\n}\n```", "Round_0": {"code": "def select_words(s, n):\n    # Define a set of consonants\n    consonants = set(\"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\")\n    \n    # Split the input string into a list of words\n    words = s.split()\n    \n    # Initialize an empty list to store words that meet the criteria\n    result = []\n    \n    # Iterate over each word in the list\n    for word in words:\n        # Count the number of consonants in the word\n        consonant_count = sum(1 for char in word if char in consonants)\n        \n        # If the word contains exactly 'n' consonants, add it to the result list\n        if consonant_count == n:\n            result.append(word)\n    \n    # Return the list of words that have exactly 'n' consonants\n    return result\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [133, 133, 133, 133, 133, 133, 133, 133, 133, 133], "passed": true, "pass": true, "pass_num": 10, "round": 329, "mutate_method": "add_1_sentence_at_end", "save_node": false, "parent_index": 273}
