{"task_id": "HumanEval/161", "prompt": "def solve(s):\t\n'''You are given a string s.\n    if s[i] is a letter, change its case from lowercase to uppercase or vice versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\nExamples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    '''", "entry_point": "solve", "canonical_solution": "    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n", "test": ["def check(solve):\n\tassert solve(\"#ryv@$l*\") == '#RYV@$L*'", "def check(solve):\n\tassert solve(\"BjdhsNs\") == 'bJDHSnS'", "def check(solve):\n\tassert solve(\"$883%3/\") == '/3%388$'", "def check(solve):\n\tassert solve(\"QnNQfv\") == 'qNnqFV'", "def check(solve):\n\tassert solve(\"o3LWaIl4\") == 'O3lwAiL4'", "def check(solve):\n\tassert solve(\"zt*#m&v\") == 'ZT*#M&V'", "def check(solve):\n\tassert solve(\"wDgT\") == 'WdGt'", "def check(solve):\n\tassert solve(\"ab\") == \"AB\"", "def check(solve):\n\tassert solve(\"=E!NyLi\") == '=e!nYlI'", "def check(solve):\n\tassert solve(\"jZVuQ\") == 'JzvUq'", "def check(solve):\n\tassert solve(\"UKg@xpM~G\") == 'ukG@XPm~g'", "def check(solve):\n\tassert solve(\"%cCcq#\") == '%CcCQ#'", "def check(solve):\n\tassert solve(\"++A^/?xV\") == '++a^/?Xv'", "def check(solve):\n\tassert solve(\"7_%\") == '%_7'", "def check(solve):\n\tassert solve(\"qon\") == 'QON'", "def check(solve):\n\tassert solve(\"giiqdy\") == 'GIIQDY'", "def check(solve):\n\tassert solve(\"~@8%\") == '%8@~'", "def check(solve):\n\tassert solve(\"^@B\") == '^@b'", "def check(solve):\n\tassert solve(\"?UGciW\") == '?ugCIw'", "def check(solve):\n\tassert solve(\"17000556\") == '65500071'", "def check(solve):\n\tassert solve(\"nfl*&=+$@\") == 'NFL*&=+$@'", "def check(solve):\n\tassert solve(\"wSdcA\") == 'WsDCa'", "def check(solve):\n\tassert solve(\"luG9*?%\") == 'LUg9*?%'", "def check(solve):\n\tassert solve(\"5$0!@\") == '@!0$5'", "def check(solve):\n\tassert solve(\"sxFaMa\") == 'SXfAmA'", "def check(solve):\n\tassert solve(\"?ao\") == '?AO'", "def check(solve):\n\tassert solve(\"k&!_\") == 'K&!_'", "def check(solve):\n\tassert solve(\"-|MSfK\") == '-|msFk'", "def check(solve):\n\tassert solve(\"5%@\") == '@%5'", "def check(solve):\n\tassert solve(\"=epet*orq\") == '=EPET*ORQ'", "def check(solve):\n\tassert solve(\"^dHUM-y\") == '^Dhum-Y'", "def check(solve):\n\tassert solve(\"npKwSAD\") == 'NPkWsad'", "def check(solve):\n\tassert solve(\"55=9/9\") == '9/9=55'", "def check(solve):\n\tassert solve(\"#ccc\") == \"#CCC\"\n\n    # Don't remove this line:", "def check(solve):\n\tassert solve(\"*^JOyeSI\") == '*^joYEsi'", "def check(solve):\n\tassert solve(\"yzzdc\") == 'YZZDC'", "def check(solve):\n\tassert solve(\"i!X&/T\") == 'I!x&/t'", "def check(solve):\n\tassert solve(\"mlB-*F\") == 'MLb-*f'", "def check(solve):\n\tassert solve(\"856\") == '658'", "def check(solve):\n\tassert solve(\"ifafP-OoTK%\") == 'IFAFp-oOtk%'", "def check(solve):\n\tassert solve(\"Xug\") == 'xUG'", "def check(solve):\n\tassert solve(\"~2~@0\") == '0@~2~'", "def check(solve):\n\tassert solve(\"UMm:m\") == 'umM:M'", "def check(solve):\n\tassert solve(\"6812832\") == '2382186'", "def check(solve):\n\tassert solve(\"QDF:CXB\") == 'qdf:cxb'", "def check(solve):\n\tassert solve(\"5-=@&*\") == '*&@=-5'", "def check(solve):\n\tassert solve(\"761~^_%~4\") == '4~%_^~167'", "def check(solve):\n\tassert solve(\"#$a^D\") == \"#$A^d\"", "def check(solve):\n\tassert solve(\"4hzTAP_e\") == '4HZtap_E'", "def check(solve):\n\tassert solve(\"2058786\") == '6878502'", "def check(solve):\n\tassert solve(\"yErHfPuhE\") == 'YeRhFpUHe'", "def check(solve):\n\tassert solve(\"*u~\") == '*U~'", "def check(solve):\n\tassert solve(\"g*chm\") == 'G*CHM'", "def check(solve):\n\tassert solve(\"enxhq\") == 'ENXHQ'", "def check(solve):\n\tassert solve(\"ctpx\") == 'CTPX'", "def check(solve):\n\tassert solve(\"j$&Wd\") == 'J$&wD'", "def check(solve):\n\tassert solve(\"ji$rpiwCJ\") == 'JI$RPIWcj'", "def check(solve):\n\tassert solve(\"cjG~zXx\") == 'CJg~ZxX'", "def check(solve):\n\tassert solve(\"dgksb\") == 'DGKSB'", "def check(solve):\n\tassert solve(\"827_~+=6:\") == ':6=+~_728'", "def check(solve):\n\tassert solve(\"vr_d$kBQ\") == 'VR_D$Kbq'", "def check(solve):\n\tassert solve(\"389627754\") == '457726983'", "def check(solve):\n\tassert solve(\"+:#\") == '#:+'", "def check(solve):\n\tassert solve(\"prytYOIw\") == 'PRYTyoiW'", "def check(solve):\n\tassert solve(\"+1/05*!?+\") == '+?!*50/1+'", "def check(solve):\n\tassert solve(\"$u%lZTsz\") == '$U%LztSZ'", "def check(solve):\n\tassert solve(\"qyAKc\") == 'QYakC'", "def check(solve):\n\tassert solve(\"/@-\") == '-@/'", "def check(solve):\n\tassert solve(\"iiyw\") == 'IIYW'", "def check(solve):\n\tassert solve(\"#a@C\") == \"#A@c\"", "def check(solve):\n\tassert solve(\"49623838\") == '83832694'", "def check(solve):\n\tassert solve(\"u:kx!*\") == 'U:KX!*'", "def check(solve):\n\tassert solve(\"gsl\") == 'GSL'", "def check(solve):\n\tassert solve(\"jlycko\") == 'JLYCKO'", "def check(solve):\n\tassert solve(\"MUSKIE\") == 'muskie'", "def check(solve):\n\tassert solve(\":TDr\") == ':tdR'", "def check(solve):\n\tassert solve(\"bkd\") == 'BKD'", "def check(solve):\n\tassert solve(\"DNOZ2XKDMJZSwC$\") == 'dnoz2xkdmjzsWc$'", "def check(solve):\n\tassert solve(\"#6@2\") == \"2@6#\"\n\n    # Check some edge cases that are easy to work out by hand.", "def check(solve):\n\tassert solve(\"n$tkw\") == 'N$TKW'", "def check(solve):\n\tassert solve(\"48954\") == '45984'", "def check(solve):\n\tassert solve(\"LlWj5FD\") == 'lLwJ5fd'", "def check(solve):\n\tassert solve(\"AsDf\") == \"aSdF\"", "def check(solve):\n\tassert solve(\"@!93/5**@\") == '@**5/39!@'", "def check(solve):\n\tassert solve(\"VmVDPkI\") == 'vMvdpKi'", "def check(solve):\n\tassert solve(\"mOn\") == 'MoN'", "def check(solve):\n\tassert solve(\"059646105\") == '501646950'", "def check(solve):\n\tassert solve(\"huo^\") == 'HUO^'", "def check(solve):\n\tassert solve(\"ghgnw\") == 'GHGNW'", "def check(solve):\n\tassert solve(\"gne\") == 'GNE'", "def check(solve):\n\tassert solve(\"~~%==41\") == '14==%~~'", "def check(solve):\n\tassert solve(\"%_uoz/#?L\") == '%_UOZ/#?l'", "def check(solve):\n\tassert solve(\"w@l+zd\") == 'W@L+ZD'", "def check(solve):\n\tassert solve(\"1234\") == \"4321\"", "def check(solve):\n\tassert solve(\"EsvNrg\") == 'eSVnRG'", "def check(solve):\n\tassert solve(\"pstVx\") == 'PSTvX'", "def check(solve):\n\tassert solve(\"kLA#y:NC\") == 'Kla#Y:nc'", "def check(solve):\n\tassert solve(\"ePOjFeuu\") == 'EpoJfEUU'", "def check(solve):\n\tassert solve(\"GPJae+?*a\") == 'gpjAE+?*A'", "def check(solve):\n\tassert solve(\"Uc$$xCSQ0cN~\") == 'uC$$Xcsq0Cn~'", "def check(solve):\n\tassert solve(\"gtvtsr\") == 'GTVTSR'", "def check(solve):\n\tassert solve(\"#AsdfW^45\") == \"#aSDFw^45\"", "def check(solve):\n\tassert solve(\"6971168\") == '8611796'", "def check(solve):\n\tassert solve(\"??rwE\") == '??RWe'", "def check(solve):\n\tassert solve(\"HMYxK\") == 'hmyXk'", "def check(solve):\n\tassert solve(\"gcflna\") == 'GCFLNA'", "def check(solve):\n\tassert solve(\"~+/#\") == '#/+~'", "def check(solve):\n\tassert solve(\"glgh\") == 'GLGH'", "def check(solve):\n\tassert solve(\"?gn~\") == '?GN~'", "def check(solve):\n\tassert solve(\"73713138\") == '83131737'", "def check(solve):\n\tassert solve(\"54138\") == '83145'", "def check(solve):\n\tassert solve(\"oGzZO!NOb@Lty\") == 'OgZzo!noB@lTY'", "def check(solve):\n\tassert solve(\"Q&LKD*BmV\") == 'q&lkd*bMv'", "def check(solve):\n\tassert solve(\"13431299\") == '99213431'", "def check(solve):\n\tassert solve(\"~/uc/@p^h\") == '~/UC/@P^H'", "def check(solve):\n\tassert solve(\"4kqV&&/6+Lc\") == '4KQv&&/6+lC'", "def check(solve):\n\tassert solve(\"fqY\") == 'FQy'", "def check(solve):\n\tassert solve(\"|n*e~bx-\") == '|N*E~BX-'", "def check(solve):\n\tassert solve(\"Pj+3w:31N!s6\") == 'pJ+3W:31n!S6'", "def check(solve):\n\tassert solve(\"++skzZ\") == '++SKZz'", "def check(solve):\n\tassert solve(\"%kmlC*s\") == '%KMLc*S'", "def check(solve):\n\tassert solve(\"232948\") == '849232'", "def check(solve):\n\tassert solve(\"613\") == '316'", "def check(solve):\n\tassert solve(\"!tmFhu\") == '!TMfHU'", "def check(solve):\n\tassert solve(\"+fDs:f\") == '+FdS:F'", "def check(solve):\n\tassert solve(\"XAdrNtUNr\") == 'xaDRnTunR'", "def check(solve):\n\tassert solve(\"cqiau\") == 'CQIAU'", "def check(solve):\n\tassert solve(\"340988\") == '889043'"], "test_case_list": ["assert solve(\"#ryv@$l*\") == '#RYV@$L*'", "assert solve(\"BjdhsNs\") == 'bJDHSnS'", "assert solve(\"$883%3/\") == '/3%388$'", "assert solve(\"QnNQfv\") == 'qNnqFV'", "assert solve(\"o3LWaIl4\") == 'O3lwAiL4'", "assert solve(\"zt*#m&v\") == 'ZT*#M&V'", "assert solve(\"wDgT\") == 'WdGt'", "assert solve(\"ab\") == \"AB\"", "assert solve(\"=E!NyLi\") == '=e!nYlI'", "assert solve(\"jZVuQ\") == 'JzvUq'", "assert solve(\"UKg@xpM~G\") == 'ukG@XPm~g'", "assert solve(\"%cCcq#\") == '%CcCQ#'", "assert solve(\"++A^/?xV\") == '++a^/?Xv'", "assert solve(\"7_%\") == '%_7'", "assert solve(\"qon\") == 'QON'", "assert solve(\"giiqdy\") == 'GIIQDY'", "assert solve(\"~@8%\") == '%8@~'", "assert solve(\"^@B\") == '^@b'", "assert solve(\"?UGciW\") == '?ugCIw'", "assert solve(\"17000556\") == '65500071'", "assert solve(\"nfl*&=+$@\") == 'NFL*&=+$@'", "assert solve(\"wSdcA\") == 'WsDCa'", "assert solve(\"luG9*?%\") == 'LUg9*?%'", "assert solve(\"5$0!@\") == '@!0$5'", "assert solve(\"sxFaMa\") == 'SXfAmA'", "assert solve(\"?ao\") == '?AO'", "assert solve(\"k&!_\") == 'K&!_'", "assert solve(\"-|MSfK\") == '-|msFk'", "assert solve(\"5%@\") == '@%5'", "assert solve(\"=epet*orq\") == '=EPET*ORQ'", "assert solve(\"^dHUM-y\") == '^Dhum-Y'", "assert solve(\"npKwSAD\") == 'NPkWsad'", "assert solve(\"55=9/9\") == '9/9=55'", "assert solve(\"#ccc\") == \"#CCC\"\n\n    # Don't remove this line:", "assert solve(\"*^JOyeSI\") == '*^joYEsi'", "assert solve(\"yzzdc\") == 'YZZDC'", "assert solve(\"i!X&/T\") == 'I!x&/t'", "assert solve(\"mlB-*F\") == 'MLb-*f'", "assert solve(\"856\") == '658'", "assert solve(\"ifafP-OoTK%\") == 'IFAFp-oOtk%'", "assert solve(\"Xug\") == 'xUG'", "assert solve(\"~2~@0\") == '0@~2~'", "assert solve(\"UMm:m\") == 'umM:M'", "assert solve(\"6812832\") == '2382186'", "assert solve(\"QDF:CXB\") == 'qdf:cxb'", "assert solve(\"5-=@&*\") == '*&@=-5'", "assert solve(\"761~^_%~4\") == '4~%_^~167'", "assert solve(\"#$a^D\") == \"#$A^d\"", "assert solve(\"4hzTAP_e\") == '4HZtap_E'", "assert solve(\"2058786\") == '6878502'", "assert solve(\"yErHfPuhE\") == 'YeRhFpUHe'", "assert solve(\"*u~\") == '*U~'", "assert solve(\"g*chm\") == 'G*CHM'", "assert solve(\"enxhq\") == 'ENXHQ'", "assert solve(\"ctpx\") == 'CTPX'", "assert solve(\"j$&Wd\") == 'J$&wD'", "assert solve(\"ji$rpiwCJ\") == 'JI$RPIWcj'", "assert solve(\"cjG~zXx\") == 'CJg~ZxX'", "assert solve(\"dgksb\") == 'DGKSB'", "assert solve(\"827_~+=6:\") == ':6=+~_728'", "assert solve(\"vr_d$kBQ\") == 'VR_D$Kbq'", "assert solve(\"389627754\") == '457726983'", "assert solve(\"+:#\") == '#:+'", "assert solve(\"prytYOIw\") == 'PRYTyoiW'", "assert solve(\"+1/05*!?+\") == '+?!*50/1+'", "assert solve(\"$u%lZTsz\") == '$U%LztSZ'", "assert solve(\"qyAKc\") == 'QYakC'", "assert solve(\"/@-\") == '-@/'", "assert solve(\"iiyw\") == 'IIYW'", "assert solve(\"#a@C\") == \"#A@c\"", "assert solve(\"49623838\") == '83832694'", "assert solve(\"u:kx!*\") == 'U:KX!*'", "assert solve(\"gsl\") == 'GSL'", "assert solve(\"jlycko\") == 'JLYCKO'", "assert solve(\"MUSKIE\") == 'muskie'", "assert solve(\":TDr\") == ':tdR'", "assert solve(\"bkd\") == 'BKD'", "assert solve(\"DNOZ2XKDMJZSwC$\") == 'dnoz2xkdmjzsWc$'", "assert solve(\"#6@2\") == \"2@6#\"\n\n    # Check some edge cases that are easy to work out by hand.", "assert solve(\"n$tkw\") == 'N$TKW'", "assert solve(\"48954\") == '45984'", "assert solve(\"LlWj5FD\") == 'lLwJ5fd'", "assert solve(\"AsDf\") == \"aSdF\"", "assert solve(\"@!93/5**@\") == '@**5/39!@'", "assert solve(\"VmVDPkI\") == 'vMvdpKi'", "assert solve(\"mOn\") == 'MoN'", "assert solve(\"059646105\") == '501646950'", "assert solve(\"huo^\") == 'HUO^'", "assert solve(\"ghgnw\") == 'GHGNW'", "assert solve(\"gne\") == 'GNE'", "assert solve(\"~~%==41\") == '14==%~~'", "assert solve(\"%_uoz/#?L\") == '%_UOZ/#?l'", "assert solve(\"w@l+zd\") == 'W@L+ZD'", "assert solve(\"1234\") == \"4321\"", "assert solve(\"EsvNrg\") == 'eSVnRG'", "assert solve(\"pstVx\") == 'PSTvX'", "assert solve(\"kLA#y:NC\") == 'Kla#Y:nc'", "assert solve(\"ePOjFeuu\") == 'EpoJfEUU'", "assert solve(\"GPJae+?*a\") == 'gpjAE+?*A'", "assert solve(\"Uc$$xCSQ0cN~\") == 'uC$$Xcsq0Cn~'", "assert solve(\"gtvtsr\") == 'GTVTSR'", "assert solve(\"#AsdfW^45\") == \"#aSDFw^45\"", "assert solve(\"6971168\") == '8611796'", "assert solve(\"??rwE\") == '??RWe'", "assert solve(\"HMYxK\") == 'hmyXk'", "assert solve(\"gcflna\") == 'GCFLNA'", "assert solve(\"~+/#\") == '#/+~'", "assert solve(\"glgh\") == 'GLGH'", "assert solve(\"?gn~\") == '?GN~'", "assert solve(\"73713138\") == '83131737'", "assert solve(\"54138\") == '83145'", "assert solve(\"oGzZO!NOb@Lty\") == 'OgZzo!noB@lTY'", "assert solve(\"Q&LKD*BmV\") == 'q&lkd*bMv'", "assert solve(\"13431299\") == '99213431'", "assert solve(\"~/uc/@p^h\") == '~/UC/@P^H'", "assert solve(\"4kqV&&/6+Lc\") == '4KQv&&/6+lC'", "assert solve(\"fqY\") == 'FQy'", "assert solve(\"|n*e~bx-\") == '|N*E~BX-'", "assert solve(\"Pj+3w:31N!s6\") == 'pJ+3W:31n!S6'", "assert solve(\"++skzZ\") == '++SKZz'", "assert solve(\"%kmlC*s\") == '%KMLc*S'", "assert solve(\"232948\") == '849232'", "assert solve(\"613\") == '316'", "assert solve(\"!tmFhu\") == '!TMfHU'", "assert solve(\"+fDs:f\") == '+FdS:F'", "assert solve(\"XAdrNtUNr\") == 'xaDRnTunR'", "assert solve(\"cqiau\") == 'CQIAU'", "assert solve(\"340988\") == '889043'"], "nl": "You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    ", "func": "def solve(s):", "examples": "Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    ", "completion": "def solve(s):\n    has_letters = False\n    result = []\n\n    for char in s:\n        if char.isalpha():\n            has_letters = True\n            result.append(char.swapcase())\n        else:\n            result.append(char)\n\n    if not has_letters:\n        return s[::-1]\n    \n    return ''.join(result)\n", "completions": ["def solve(s):\n    has_letters = False\n    result = []\n\n    for char in s:\n        if char.isalpha():\n            has_letters = True\n            if char.islower():\n                result.append(char.upper())\n            else:\n                result.append(char.lower())\n        else:\n            result.append(char)\n\n    if has_letters:\n        return ''.join(result)\n    else:\n        return s[::-1]\n", "def solve(s):\n    has_letter = False\n    result = []\n\n    for char in s:\n        if char.isalpha():\n            has_letter = True\n            if char.islower():\n                result.append(char.upper())\n            else:\n                result.append(char.lower())\n        else:\n            result.append(char)\n\n    if not has_letter:\n        result.reverse()\n\n    return ''.join(result)\n", "def solve(s):\n    # Check if the string contains any alphabetic characters\n    contains_letter = any(char.isalpha() for char in s)\n    \n    if contains_letter:\n        # If alphabetic characters are present, change their case\n        result = ''.join(char.swapcase() if char.isalpha() else char for char in s)\n    else:\n        # If no alphabetic characters are present, reverse the string\n        result = s[::-1]\n    \n    return result\n", "def solve(s):\n    has_letter = False\n    result = []\n\n    for char in s:\n        if char.isalpha():\n            has_letter = True\n            if char.islower():\n                result.append(char.upper())\n            else:\n                result.append(char.lower())\n        else:\n            result.append(char)\n\n    if not has_letter:\n        return s[::-1]\n    \n    return ''.join(result)\n", "def solve(s):\n    contains_letter = False\n    result = []\n\n    for char in s:\n        if char.isalpha():\n            contains_letter = True\n            if char.islower():\n                result.append(char.upper())\n            else:\n                result.append(char.lower())\n        else:\n            result.append(char)\n\n    if contains_letter:\n        return ''.join(result)\n    else:\n        return s[::-1]\n", "def solve(s):\n    # Check for the presence of letters in the string\n    contains_letter = any(char.isalpha() for char in s)\n    \n    # Process the string based on the presence of letters\n    if contains_letter:\n        # Change the case of each letter in the string\n        result = ''.join(char.swapcase() if char.isalpha() else char for char in s)\n    else:\n        # Reverse the string if it contains no letters\n        result = s[::-1]\n    \n    # Return the processed string\n    return result\n", "def solve(s):\n    has_letters = False\n    result = []\n\n    for char in s:\n        if char.isalpha():\n            has_letters = True\n            if char.islower():\n                result.append(char.upper())\n            else:\n                result.append(char.lower())\n        else:\n            result.append(char)\n\n    if has_letters:\n        return ''.join(result)\n    else:\n        return s[::-1]\n", "def solve(s):\n    has_letters = False\n    result = []\n\n    for char in s:\n        if char.isalpha():\n            has_letters = True\n            if char.islower():\n                result.append(char.upper())\n            else:\n                result.append(char.lower())\n        else:\n            result.append(char)\n\n    if has_letters:\n        return ''.join(result)\n    else:\n        return s[::-1]\n", "def solve(s):\n    # Check if the string contains any letters\n    contains_letter = any(c.isalpha() for c in s)\n    \n    if contains_letter:\n        # If letters are present, change the case of each letter\n        result = ''.join(c.swapcase() if c.isalpha() else c for c in s)\n    else:\n        # If no letters are present, reverse the string\n        result = s[::-1]\n    \n    return result\n\n# Examples\nprint(solve(\"1234\"))  # Output: \"4321\"\nprint(solve(\"ab\"))    # Output: \"AB\"\nprint(solve(\"#a@C\"))  # Output: \"#A@c\"\n", "def solve(s):\n    has_letters = False\n    result = []\n\n    for char in s:\n        if char.isalpha():\n            has_letters = True\n            result.append(char.swapcase())\n        else:\n            result.append(char)\n\n    if not has_letters:\n        return s[::-1]\n    \n    return ''.join(result)\n"], "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Identify if the string contains any letters.\",\n      \"details\": \"Iterate through the string to check for the presence of any alphabetic characters.\"\n    },\n    {\n      \"description\": \"Change the case of each letter in the string.\",\n      \"details\": \"For each character in the string, if it is a letter, change its case using appropriate string methods.\"\n    },\n    {\n      \"description\": \"Reverse the string if it contains no letters.\",\n      \"details\": \"If no letters are found in the string, reverse the entire string.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Step 1: Initialize a flag to check for the presence of letters in the string.\",\n    \"Step 2: Iterate through each character in the string.\",\n    \"Step 3: For each character, check if it is a letter.\",\n    \"Step 4: If it is a letter, change its case and set the flag to true.\",\n    \"Step 5: If the character is not a letter, keep it unchanged.\",\n    \"Step 6: After iterating through the string, check the flag.\",\n    \"Step 7: If the flag is false (no letters found), reverse the string.\",\n    \"Step 8: Return the modified string.\"\n  ]\n}\n```", "Round_0": {"code": "def solve(s):\n    has_letters = False\n    result = []\n\n    for char in s:\n        if char.isalpha():\n            has_letters = True\n            result.append(char.swapcase())\n        else:\n            result.append(char)\n\n    if not has_letters:\n        return s[::-1]\n    \n    return ''.join(result)\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, "session_historys": [{"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Identify if the string contains any letters.\",\n      \"details\": \"Check each character in the string to determine if it is a letter.\"\n    },\n    {\n      \"description\": \"Change the case of each letter in the string.\",\n      \"details\": \"For each letter, if it is lowercase, convert it to uppercase, and vice versa.\"\n    },\n    {\n      \"description\": \"Reverse the string if it contains no letters.\",\n      \"details\": \"If no letters are found in the string, reverse the entire string.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Initialize a flag to check for the presence of letters in the string.\",\n    \"Iterate through each character in the string:\",\n    \"  - If the character is a letter, toggle its case and set the flag to true.\",\n    \"  - If the character is not a letter, keep it unchanged.\",\n    \"After processing all characters, check the flag:\",\n    \"  - If the flag is true, return the modified string with toggled cases.\",\n    \"  - If the flag is false, return the reversed string.\"\n  ]\n}\n```", "Round_0": {"code": "def solve(s):\n    has_letters = False\n    result = []\n\n    for char in s:\n        if char.isalpha():\n            has_letters = True\n            if char.islower():\n                result.append(char.upper())\n            else:\n                result.append(char.lower())\n        else:\n            result.append(char)\n\n    if has_letters:\n        return ''.join(result)\n    else:\n        return s[::-1]\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"decomposed_subproblems\": [\n    {\n      \"subproblem\": \"Identify if the string contains any letters.\",\n      \"description\": \"Check each character in the string to determine if it is a letter.\"\n    },\n    {\n      \"subproblem\": \"Change the case of each letter in the string.\",\n      \"description\": \"For each letter, convert lowercase to uppercase and vice versa.\"\n    },\n    {\n      \"subproblem\": \"Reverse the string if it contains no letters.\",\n      \"description\": \"If no letters are found, reverse the entire string.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Initialize a flag to track the presence of letters.\",\n      \"description\": \"Set a boolean flag to false initially to indicate no letters found.\"\n    },\n    {\n      \"step\": \"Iterate through each character in the string.\",\n      \"description\": \"Use a loop to process each character individually.\"\n    },\n    {\n      \"step\": \"Check if the character is a letter.\",\n      \"description\": \"Use a conditional statement to check if the character is alphabetic.\"\n    },\n    {\n      \"step\": \"Change the case of the letter if found.\",\n      \"description\": \"If the character is a letter, toggle its case and set the flag to true.\"\n    },\n    {\n      \"step\": \"Append the processed character to a result string.\",\n      \"description\": \"Build the result string by appending each processed character.\"\n    },\n    {\n      \"step\": \"Reverse the result string if no letters were found.\",\n      \"description\": \"If the flag remains false, reverse the result string before returning.\"\n    },\n    {\n      \"step\": \"Return the final result string.\",\n      \"description\": \"Output the processed string as the function's return value.\"\n    }\n  ]\n}\n```", "Round_0": {"code": "def solve(s):\n    has_letter = False\n    result = []\n\n    for char in s:\n        if char.isalpha():\n            has_letter = True\n            if char.islower():\n                result.append(char.upper())\n            else:\n                result.append(char.lower())\n        else:\n            result.append(char)\n\n    if not has_letter:\n        result.reverse()\n\n    return ''.join(result)\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"decomposed_subproblems\": [\n    \"Identify if the string contains any letters.\",\n    \"If the string contains letters, iterate through each character and change its case if it is a letter.\",\n    \"If the string does not contain any letters, reverse the string.\"\n  ],\n  \"high_level_plan\": [\n    \"Check if the string contains any alphabetic characters.\",\n    \"If alphabetic characters are present, iterate through the string:\",\n    \"  - For each character, check if it is a letter.\",\n    \"  - If it is a letter, change its case.\",\n    \"  - If it is not a letter, keep it unchanged.\",\n    \"If no alphabetic characters are present, reverse the entire string.\",\n    \"Return the modified string.\"\n  ]\n}\n```", "Round_0": {"code": "def solve(s):\n    # Check if the string contains any alphabetic characters\n    contains_letter = any(char.isalpha() for char in s)\n    \n    if contains_letter:\n        # If alphabetic characters are present, change their case\n        result = ''.join(char.swapcase() if char.isalpha() else char for char in s)\n    else:\n        # If no alphabetic characters are present, reverse the string\n        result = s[::-1]\n    \n    return result\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"decomposed_subproblems\": [\n    {\n      \"subproblem\": \"Identify if the string contains any letters.\",\n      \"description\": \"Check each character in the string to determine if it is a letter.\"\n    },\n    {\n      \"subproblem\": \"Change the case of each letter in the string.\",\n      \"description\": \"For each letter, convert lowercase to uppercase and vice versa.\"\n    },\n    {\n      \"subproblem\": \"Reverse the string if it contains no letters.\",\n      \"description\": \"If no letters are found, reverse the entire string.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Initialize a flag to track the presence of letters.\",\n      \"description\": \"Set a boolean flag to false initially to indicate no letters found.\"\n    },\n    {\n      \"step\": \"Iterate through each character in the string.\",\n      \"description\": \"Loop through the string to check each character.\"\n    },\n    {\n      \"step\": \"Check if the character is a letter.\",\n      \"description\": \"Use a condition to determine if the character is a letter and update the flag.\"\n    },\n    {\n      \"step\": \"Change the case of the letter if found.\",\n      \"description\": \"If the character is a letter, change its case and append to the result.\"\n    },\n    {\n      \"step\": \"Reverse the string if no letters are found.\",\n      \"description\": \"If the flag remains false after iteration, reverse the string.\"\n    },\n    {\n      \"step\": \"Return the processed string.\",\n      \"description\": \"Output the final string after processing.\"\n    }\n  ]\n}\n```", "Round_0": {"code": "def solve(s):\n    has_letter = False\n    result = []\n\n    for char in s:\n        if char.isalpha():\n            has_letter = True\n            if char.islower():\n                result.append(char.upper())\n            else:\n                result.append(char.lower())\n        else:\n            result.append(char)\n\n    if not has_letter:\n        return s[::-1]\n    \n    return ''.join(result)\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Identify if the string contains any letters.\",\n      \"details\": \"Check each character in the string to determine if it is a letter.\"\n    },\n    {\n      \"description\": \"Change the case of each letter in the string.\",\n      \"details\": \"For each letter, if it is lowercase, convert it to uppercase, and vice versa.\"\n    },\n    {\n      \"description\": \"Reverse the string if it contains no letters.\",\n      \"details\": \"If no letters are found in the string, reverse the entire string.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Initialize a flag to track if the string contains any letters.\",\n    \"Iterate over each character in the string:\",\n    \"  - If the character is a letter, toggle its case and set the flag to true.\",\n    \"  - If the character is not a letter, leave it unchanged.\",\n    \"After processing all characters, check the flag:\",\n    \"  - If the flag is true, return the modified string with toggled cases.\",\n    \"  - If the flag is false, return the reversed string.\"\n  ]\n}\n```", "Round_0": {"code": "def solve(s):\n    contains_letter = False\n    result = []\n\n    for char in s:\n        if char.isalpha():\n            contains_letter = True\n            if char.islower():\n                result.append(char.upper())\n            else:\n                result.append(char.lower())\n        else:\n            result.append(char)\n\n    if contains_letter:\n        return ''.join(result)\n    else:\n        return s[::-1]\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Identify if the string contains any letters.\",\n      \"goal\": \"Determine if there are any alphabetic characters in the string.\"\n    },\n    {\n      \"description\": \"Change the case of each letter in the string.\",\n      \"goal\": \"For each letter, convert lowercase to uppercase and vice versa.\"\n    },\n    {\n      \"description\": \"Reverse the string if it contains no letters.\",\n      \"goal\": \"If no alphabetic characters are found, reverse the entire string.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Check for the presence of letters in the string.\",\n      \"action\": \"Iterate through the string to see if any character is a letter.\"\n    },\n    {\n      \"step\": \"Process the string based on the presence of letters.\",\n      \"action\": \"If letters are present, change their case. Otherwise, reverse the string.\"\n    },\n    {\n      \"step\": \"Return the processed string.\",\n      \"action\": \"Output the modified string as per the above conditions.\"\n    }\n  ]\n}\n```", "Round_0": {"code": "def solve(s):\n    # Check for the presence of letters in the string\n    contains_letter = any(char.isalpha() for char in s)\n    \n    # Process the string based on the presence of letters\n    if contains_letter:\n        # Change the case of each letter in the string\n        result = ''.join(char.swapcase() if char.isalpha() else char for char in s)\n    else:\n        # Reverse the string if it contains no letters\n        result = s[::-1]\n    \n    # Return the processed string\n    return result\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Identify if the string contains any letters.\",\n      \"details\": \"Check each character in the string to determine if it is a letter.\"\n    },\n    {\n      \"description\": \"Change the case of each letter in the string.\",\n      \"details\": \"For each letter, if it is lowercase, convert it to uppercase, and vice versa.\"\n    },\n    {\n      \"description\": \"Reverse the string if it contains no letters.\",\n      \"details\": \"If no letters are found in the string, reverse the entire string.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Initialize a flag to check for the presence of letters in the string.\",\n    \"Iterate through each character in the string:\",\n    \"  - If the character is a letter, toggle its case and set the flag to true.\",\n    \"  - If the character is not a letter, leave it unchanged.\",\n    \"After iterating through the string, check the flag:\",\n    \"  - If the flag is true, return the modified string with toggled cases.\",\n    \"  - If the flag is false, return the reversed string.\"\n  ]\n}\n```", "Round_0": {"code": "def solve(s):\n    has_letters = False\n    result = []\n\n    for char in s:\n        if char.isalpha():\n            has_letters = True\n            if char.islower():\n                result.append(char.upper())\n            else:\n                result.append(char.lower())\n        else:\n            result.append(char)\n\n    if has_letters:\n        return ''.join(result)\n    else:\n        return s[::-1]\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Identify if the string contains any letters.\",\n      \"details\": \"Check each character in the string to determine if it is a letter.\"\n    },\n    {\n      \"description\": \"Change the case of each letter in the string.\",\n      \"details\": \"For each letter, if it is lowercase, convert it to uppercase, and vice versa.\"\n    },\n    {\n      \"description\": \"Reverse the string if it contains no letters.\",\n      \"details\": \"If no letters are found in the string, reverse the entire string.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Initialize a flag to track if any letters are found in the string.\",\n    \"Iterate over each character in the string:\",\n    \"  - If the character is a letter, change its case and set the flag to true.\",\n    \"  - If the character is not a letter, keep it unchanged.\",\n    \"After processing all characters, check the flag:\",\n    \"  - If the flag is true, return the modified string with case changes.\",\n    \"  - If the flag is false, return the reversed string.\"\n  ]\n}\n```", "Round_0": {"code": "def solve(s):\n    has_letters = False\n    result = []\n\n    for char in s:\n        if char.isalpha():\n            has_letters = True\n            if char.islower():\n                result.append(char.upper())\n            else:\n                result.append(char.lower())\n        else:\n            result.append(char)\n\n    if has_letters:\n        return ''.join(result)\n    else:\n        return s[::-1]\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"decomposed_subproblems\": [\n    \"Identify if the string contains any letters.\",\n    \"If the string contains letters, iterate through each character and change its case if it is a letter.\",\n    \"If the string does not contain any letters, reverse the string.\"\n  ],\n  \"high_level_plan\": [\n    \"Check if the string contains any letters using a loop or a built-in function.\",\n    \"If letters are present, iterate through each character:\",\n    \"  - Check if the character is a letter.\",\n    \"  - If it is a letter, change its case.\",\n    \"  - If it is not a letter, keep it unchanged.\",\n    \"If no letters are present, reverse the entire string.\",\n    \"Return the modified string.\"\n  ]\n}\n```", "Round_0": {"code": "def solve(s):\n    # Check if the string contains any letters\n    contains_letter = any(c.isalpha() for c in s)\n    \n    if contains_letter:\n        # If letters are present, change the case of each letter\n        result = ''.join(c.swapcase() if c.isalpha() else c for c in s)\n    else:\n        # If no letters are present, reverse the string\n        result = s[::-1]\n    \n    return result\n\n# Examples\nprint(solve(\"1234\"))  # Output: \"4321\"\nprint(solve(\"ab\"))    # Output: \"AB\"\nprint(solve(\"#a@C\"))  # Output: \"#A@c\"\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Identify if the string contains any letters.\",\n      \"details\": \"Iterate through the string to check for the presence of any alphabetic characters.\"\n    },\n    {\n      \"description\": \"Change the case of each letter in the string.\",\n      \"details\": \"For each character in the string, if it is a letter, change its case using appropriate string methods.\"\n    },\n    {\n      \"description\": \"Reverse the string if it contains no letters.\",\n      \"details\": \"If no letters are found in the string, reverse the entire string.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Step 1: Initialize a flag to check for the presence of letters in the string.\",\n    \"Step 2: Iterate through each character in the string.\",\n    \"Step 3: For each character, check if it is a letter.\",\n    \"Step 4: If it is a letter, change its case and set the flag to true.\",\n    \"Step 5: If the character is not a letter, keep it unchanged.\",\n    \"Step 6: After iterating through the string, check the flag.\",\n    \"Step 7: If the flag is false (no letters found), reverse the string.\",\n    \"Step 8: Return the modified string.\"\n  ]\n}\n```", "Round_0": {"code": "def solve(s):\n    has_letters = False\n    result = []\n\n    for char in s:\n        if char.isalpha():\n            has_letters = True\n            result.append(char.swapcase())\n        else:\n            result.append(char)\n\n    if not has_letters:\n        return s[::-1]\n    \n    return ''.join(result)\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [128, 128, 128, 128, 128, 128, 128, 128, 128, 128], "passed": true, "pass": true, "pass_num": 10, "round": 531, "mutate_method": "rephrase_one", "save_node": false, "parent_index": 133}
