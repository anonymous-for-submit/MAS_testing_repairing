{"task_id": "HumanEval/117", "prompt": "def select_words(s, n):\t\n'''Given a string s and a natural number n, you have been tasked to implement a function that returns a list of all words from string s that contain exactly n consonants, in order these words appear in the string s. If the string s is empty then the function should return an empty list. Note: you may assume the input string contains only letters and spaces.\nExamples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    '''", "entry_point": "select_words", "canonical_solution": "    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n", "test": ["def check(select_words):\n\tassert select_words('eg aqk', 2) == ['aqk']", "def check(select_words):\n\tassert select_words('eoDDPoNuKJnQIcLHcFK', 14) == ['eoDDPoNuKJnQIcLHcFK']", "def check(select_words):\n\tassert select_words('syk', 6) == []", "def check(select_words):\n\tassert select_words('gw', 9) == []", "def check(select_words):\n\tassert select_words('ZpJhNYG', 7) == ['ZpJhNYG']", "def check(select_words):\n\tassert select_words(\"Mary had a little lamb\", 4) == [\"little\"], \"First test error: \" + str(select_words(\"Mary had a little lamb\", 4))", "def check(select_words):\n\tassert select_words('ILkvuFIrW jXOOGXgdSWtd', 10) == ['jXOOGXgdSWtd']", "def check(select_words):\n\tassert select_words('uwnynnkeh', 7) == ['uwnynnkeh']", "def check(select_words):\n\tassert select_words('zGMhBC', 6) == ['zGMhBC']", "def check(select_words):\n\tassert select_words('kfohjsjunakqmmsx', 1) == []", "def check(select_words):\n\tassert select_words('KbpFfWgXZoVjXV', 1) == []", "def check(select_words):\n\tassert select_words('GeLxcZJyRwUsQKBQkanf', 2) == []", "def check(select_words):\n\tassert select_words('kg', 1) == []", "def check(select_words):\n\tassert select_words(\"simple white space\", 2) == [], \"Third test error: \" + str(select_words(\"simple white space\", 2))", "def check(select_words):\n\tassert select_words('xrbpxpncgqufqkq', 6) == []", "def check(select_words):\n\tassert select_words('sqgikswgssxsbwkl', 7) == []", "def check(select_words):\n\tassert select_words('kumJjGm AFFO', 6) == ['kumJjGm']", "def check(select_words):\n\tassert select_words('iJxMQLiIZ', 6) == ['iJxMQLiIZ']", "def check(select_words):\n\tassert select_words('uwebicR RgZrAiEnPkq', 4) == ['uwebicR']", "def check(select_words):\n\tassert select_words('bnXA AjPVh', 5) == []", "def check(select_words):\n\tassert select_words('omnivbqgmavyqdgqssas', 6) == []", "def check(select_words):\n\tassert select_words('fmjizkhknnihqioic', 4) == []", "def check(select_words):\n\tassert select_words('lINKPOlFIImtg', 3) == []", "def check(select_words):\n\tassert select_words('nPxmyTd', 7) == ['nPxmyTd']", "def check(select_words):\n\tassert select_words('yCRgLVwagpjADSN MUkt', 3) == ['MUkt']", "def check(select_words):\n\tassert select_words('mehochzpausf', 2) == []", "def check(select_words):\n\tassert select_words('TcXKTNbOnjCJLzWhlNELbGPc', 22) == ['TcXKTNbOnjCJLzWhlNELbGPc']", "def check(select_words):\n\tassert select_words('EGiDfM', 1) == []", "def check(select_words):\n\tassert select_words('mc', 7) == []", "def check(select_words):\n\tassert select_words('wzx', 5) == []", "def check(select_words):\n\tassert select_words('hgwhtsvqihhm', 11) == ['hgwhtsvqihhm']", "def check(select_words):\n\tassert select_words('xwkxcjffocow', 5) == []", "def check(select_words):\n\tassert select_words('dl', 5) == []", "def check(select_words):\n\tassert select_words('UIOcsXneOjxMkRLvRLSDTV', 4) == []", "def check(select_words):\n\tassert select_words('ABIStgq', 5) == ['ABIStgq']", "def check(select_words):\n\tassert select_words('nb', 2) == ['nb']", "def check(select_words):\n\tassert select_words('ny', 2) == ['ny']", "def check(select_words):\n\tassert select_words('HWCLBC', 6) == ['HWCLBC']", "def check(select_words):\n\tassert select_words('uuh', 6) == []", "def check(select_words):\n\tassert select_words('uoubngttn', 3) == []", "def check(select_words):\n\tassert select_words('g', 5) == []", "def check(select_words):\n\tassert select_words('ffqkhIIChADuzMQIrcFek', 15) == ['ffqkhIIChADuzMQIrcFek']", "def check(select_words):\n\tassert select_words('CbxmADxVZtHArXzwNxnuvda', 19) == ['CbxmADxVZtHArXzwNxnuvda']", "def check(select_words):\n\tassert select_words('aztxoxesjkzqebhrfzw', 3) == []", "def check(select_words):\n\tassert select_words('sqdcPgSPeHfNdISspJa', 16) == ['sqdcPgSPeHfNdISspJa']", "def check(select_words):\n\tassert select_words('zdXc AqKVMGYLrZMPSz', 4) == ['zdXc']", "def check(select_words):\n\tassert select_words('tJzO PnCT', 3) == ['tJzO']", "def check(select_words):\n\tassert select_words('jizrraatfiyetneqergnnbfn', 3) == []", "def check(select_words):\n\tassert select_words('qhwubvrfmwy', 2) == []", "def check(select_words):\n\tassert select_words('dzrmzilzoxn l', 9) == ['dzrmzilzoxn']", "def check(select_words):\n\tassert select_words('ZZcAZzrjekxbP tPNuYXLnOLVv', 10) == ['tPNuYXLnOLVv']", "def check(select_words):\n\tassert select_words('JtsHoq wxvsLQqBXkNpmCTzBWTX', 1) == []", "def check(select_words):\n\tassert select_words('aecdOIhfIbEBTOfoKnT', 1) == []", "def check(select_words):\n\tassert select_words('gLFCSPHHP', 9) == ['gLFCSPHHP']", "def check(select_words):\n\tassert select_words('r s rhhipmt', 6) == ['rhhipmt']", "def check(select_words):\n\tassert select_words('aDqyhePv', 6) == ['aDqyhePv']", "def check(select_words):\n\tassert select_words('tTxmhPuW', 7) == ['tTxmhPuW']", "def check(select_words):\n\tassert select_words('gkaioVYtEtMLxrVq JIIwPCZW', 6) == ['JIIwPCZW']", "def check(select_words):\n\tassert select_words('aru', 5) == []", "def check(select_words):\n\tassert select_words('ySRkkHkfcvgHqOGVfaDTTRf', 1) == []", "def check(select_words):\n\tassert select_words('SNeiILCez', 4) == []", "def check(select_words):\n\tassert select_words('xzzxdz lkmvrvizpz z', 6) == ['xzzxdz']", "def check(select_words):\n\tassert select_words('ySmjGAg', 6) == ['ySmjGAg']", "def check(select_words):\n\tassert select_words('bRJRZC', 3) == []", "def check(select_words):\n\tassert select_words('u', 1) == []", "def check(select_words):\n\tassert select_words('djucfuuizrjfvuzzo', 4) == []", "def check(select_words):\n\tassert select_words('dvYLMt', 6) == ['dvYLMt']", "def check(select_words):\n\tassert select_words('xqvooek icmfdiysshehnyqx', 7) == []", "def check(select_words):\n\tassert select_words('zIdcqeCrTYiDGGjYFC', 15) == ['zIdcqeCrTYiDGGjYFC']", "def check(select_words):\n\tassert select_words('yp', 6) == []", "def check(select_words):\n\tassert select_words('v', 4) == []", "def check(select_words):\n\tassert select_words(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"], \"2nd edge test error: \" + str(select_words(\"a b c d e f\", 1))", "def check(select_words):\n\tassert select_words('afrrguc', 5) == ['afrrguc']", "def check(select_words):\n\tassert select_words('KBDaAtwgkSQhbMcvLn', 16) == ['KBDaAtwgkSQhbMcvLn']", "def check(select_words):\n\tassert select_words('WvvnDCbdBejJOXxALMQUP', 17) == ['WvvnDCbdBejJOXxALMQUP']", "def check(select_words):\n\tassert select_words('IXWOrAdrmmcWXqngDkiVFKXaAWf', 4) == []", "def check(select_words):\n\tassert select_words('nh vu lcakrb', 1) == ['vu']", "def check(select_words):\n\tassert select_words('QOBKeojoDQGT jIZmKXyPl', 8) == ['QOBKeojoDQGT', 'jIZmKXyPl']", "def check(select_words):\n\tassert select_words(\"Uncle sam\", 3) == [\"Uncle\"], \"Fifth test error: \" + str(select_words(\"Uncle sam\", 3))\n\n\n    # Check some edge cases that are easy to work out by hand.", "def check(select_words):\n\tassert select_words('zE sivlrNrHFgwiokUjTMdndl', 5) == []", "def check(select_words):\n\tassert select_words('svMzfBuoveQXEPPIVV', 13) == ['svMzfBuoveQXEPPIVV']", "def check(select_words):\n\tassert select_words('MjRnAErHPguQC', 1) == []", "def check(select_words):\n\tassert select_words('tmchxmttrgfdanq', 3) == []", "def check(select_words):\n\tassert select_words('jezkeorvxnruwhhwzxm', 7) == []", "def check(select_words):\n\tassert select_words('caurfxlpkygqxoknil', 4) == []", "def check(select_words):\n\tassert select_words('RBAY  hmsXCkloLHYheRDQL', 3) == ['RBAY']", "def check(select_words):\n\tassert select_words('prFfoYsafgMfGYYGjsiqTXwL', 21) == ['prFfoYsafgMfGYYGjsiqTXwL']", "def check(select_words):\n\tassert select_words('NSjIbZV', 2) == []", "def check(select_words):\n\tassert select_words('rPKhzIot', 6) == ['rPKhzIot']", "def check(select_words):\n\tassert select_words('ASDVzOVVDEdj J', 1) == ['J']", "def check(select_words):\n\tassert select_words('oKNamFuRSJcV', 9) == ['oKNamFuRSJcV']", "def check(select_words):\n\tassert select_words(' siweqafqot', 5) == []", "def check(select_words):\n\tassert select_words('xdQgsAHI', 5) == []", "def check(select_words):\n\tassert select_words('epzbicjvjcbxmxgfityzzv', 5) == []", "def check(select_words):\n\tassert select_words('GFNxLvGHJnNx', 12) == ['GFNxLvGHJnNx']", "def check(select_words):\n\tassert select_words('hguHoJGaaNwX', 3) == []", "def check(select_words):\n\tassert select_words('cnxdrucrydrcyol', 13) == ['cnxdrucrydrcyol']", "def check(select_words):\n\tassert select_words('choounwx', 5) == ['choounwx']", "def check(select_words):\n\tassert select_words('yue', 2) == []", "def check(select_words):\n\tassert select_words('DDdrgPy', 4) == []", "def check(select_words):\n\tassert select_words('c zsYpMPdmr', 9) == ['zsYpMPdmr']", "def check(select_words):\n\tassert select_words(\"\", 4) == [], \"1st edge test error: \" + str(select_words(\"\", 4))", "def check(select_words):\n\tassert select_words('pzBxlNfcXEsOQzL', 13) == ['pzBxlNfcXEsOQzL']", "def check(select_words):\n\tassert select_words('pWqNDaO zJwlHsqqEYCdDEZtNiL', 3) == []", "def check(select_words):\n\tassert select_words(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"], \"Second test error: \" + str(select_words(\"Mary had a little lamb\", 3))", "def check(select_words):\n\tassert select_words('Reg MuZcF', 4) == ['MuZcF']", "def check(select_words):\n\tassert select_words('lxQnxHVtrUGfoufkLPXu', 16) == ['lxQnxHVtrUGfoufkLPXu']", "def check(select_words):\n\tassert select_words('sl', 6) == []", "def check(select_words):\n\tassert select_words('IFKqNq ', 5) == ['IFKqNq']", "def check(select_words):\n\tassert select_words('lfspeijyudniowk', 1) == []", "def check(select_words):\n\tassert select_words('kogmgdnk', 7) == ['kogmgdnk']", "def check(select_words):\n\tassert select_words('nnchatjackywoavfwfps', 5) == []", "def check(select_words):\n\tassert select_words('d', 2) == []", "def check(select_words):\n\tassert select_words('fjnjvfo aqgasitdiyalwv', 1) == []", "def check(select_words):\n\tassert select_words('IGEmiHg ne YIhrNkjpGfOObqJ', 1) == ['ne']", "def check(select_words):\n\tassert select_words(\"Hello world\", 4) == [\"world\"], \"Fourth test error: \" + str(select_words(\"Hello world\", 4))", "def check(select_words):\n\tassert select_words('jopfxbbvlslmluypcdt', 3) == []", "def check(select_words):\n\tassert select_words('AWrNREXAqD WePeTbIPTS', 4) == []", "def check(select_words):\n\tassert select_words('OWzTDtbfTAEOBLuZPqFdnmnSG', 5) == []", "def check(select_words):\n\tassert select_words('TQzrMVZMngInaglSfwvrbAh', 20) == ['TQzrMVZMngInaglSfwvrbAh']", "def check(select_words):\n\tassert select_words('etdrxwybqi', 1) == []", "def check(select_words):\n\tassert select_words('aVCSziOkLCLGizHcmC', 2) == []", "def check(select_words):\n\tassert select_words('sYlP HUxjpHVfeWBNAvXo', 4) == ['sYlP']", "def check(select_words):\n\tassert select_words('txXxge', 4) == []", "def check(select_words):\n\tassert select_words('kcpieuVjAOaxdpB', 4) == []", "def check(select_words):\n\tassert select_words('oh', 8) == []", "def check(select_words):\n\tassert select_words('bgosvLxdWAWUtCxHgfPugDKQfel', 5) == []", "def check(select_words):\n\tassert select_words('fT LxYLtzO', 6) == ['LxYLtzO']", "def check(select_words):\n\tassert select_words('eywh qxreeexrrhyovpwl', 7) == []", "def check(select_words):\n\tassert select_words('JfStfbdqmygzcqzJvvbivZfDbwg', 26) == ['JfStfbdqmygzcqzJvvbivZfDbwg']", "def check(select_words):\n\tassert select_words('asfwxvbzdfsrymc', 3) == []", "def check(select_words):\n\tassert select_words('nBmjWxiPV', 3) == []", "def check(select_words):\n\tassert select_words('lDqgwtu rM tfTmeKEd', 2) == ['rM']"], "test_case_list": ["assert select_words('eg aqk', 2) == ['aqk']", "assert select_words('eoDDPoNuKJnQIcLHcFK', 14) == ['eoDDPoNuKJnQIcLHcFK']", "assert select_words('syk', 6) == []", "assert select_words('gw', 9) == []", "assert select_words('ZpJhNYG', 7) == ['ZpJhNYG']", "assert select_words(\"Mary had a little lamb\", 4) == [\"little\"], \"First test error: \" + str(select_words(\"Mary had a little lamb\", 4))", "assert select_words('ILkvuFIrW jXOOGXgdSWtd', 10) == ['jXOOGXgdSWtd']", "assert select_words('uwnynnkeh', 7) == ['uwnynnkeh']", "assert select_words('zGMhBC', 6) == ['zGMhBC']", "assert select_words('kfohjsjunakqmmsx', 1) == []", "assert select_words('KbpFfWgXZoVjXV', 1) == []", "assert select_words('GeLxcZJyRwUsQKBQkanf', 2) == []", "assert select_words('kg', 1) == []", "assert select_words(\"simple white space\", 2) == [], \"Third test error: \" + str(select_words(\"simple white space\", 2))", "assert select_words('xrbpxpncgqufqkq', 6) == []", "assert select_words('sqgikswgssxsbwkl', 7) == []", "assert select_words('kumJjGm AFFO', 6) == ['kumJjGm']", "assert select_words('iJxMQLiIZ', 6) == ['iJxMQLiIZ']", "assert select_words('uwebicR RgZrAiEnPkq', 4) == ['uwebicR']", "assert select_words('bnXA AjPVh', 5) == []", "assert select_words('omnivbqgmavyqdgqssas', 6) == []", "assert select_words('fmjizkhknnihqioic', 4) == []", "assert select_words('lINKPOlFIImtg', 3) == []", "assert select_words('nPxmyTd', 7) == ['nPxmyTd']", "assert select_words('yCRgLVwagpjADSN MUkt', 3) == ['MUkt']", "assert select_words('mehochzpausf', 2) == []", "assert select_words('TcXKTNbOnjCJLzWhlNELbGPc', 22) == ['TcXKTNbOnjCJLzWhlNELbGPc']", "assert select_words('EGiDfM', 1) == []", "assert select_words('mc', 7) == []", "assert select_words('wzx', 5) == []", "assert select_words('hgwhtsvqihhm', 11) == ['hgwhtsvqihhm']", "assert select_words('xwkxcjffocow', 5) == []", "assert select_words('dl', 5) == []", "assert select_words('UIOcsXneOjxMkRLvRLSDTV', 4) == []", "assert select_words('ABIStgq', 5) == ['ABIStgq']", "assert select_words('nb', 2) == ['nb']", "assert select_words('ny', 2) == ['ny']", "assert select_words('HWCLBC', 6) == ['HWCLBC']", "assert select_words('uuh', 6) == []", "assert select_words('uoubngttn', 3) == []", "assert select_words('g', 5) == []", "assert select_words('ffqkhIIChADuzMQIrcFek', 15) == ['ffqkhIIChADuzMQIrcFek']", "assert select_words('CbxmADxVZtHArXzwNxnuvda', 19) == ['CbxmADxVZtHArXzwNxnuvda']", "assert select_words('aztxoxesjkzqebhrfzw', 3) == []", "assert select_words('sqdcPgSPeHfNdISspJa', 16) == ['sqdcPgSPeHfNdISspJa']", "assert select_words('zdXc AqKVMGYLrZMPSz', 4) == ['zdXc']", "assert select_words('tJzO PnCT', 3) == ['tJzO']", "assert select_words('jizrraatfiyetneqergnnbfn', 3) == []", "assert select_words('qhwubvrfmwy', 2) == []", "assert select_words('dzrmzilzoxn l', 9) == ['dzrmzilzoxn']", "assert select_words('ZZcAZzrjekxbP tPNuYXLnOLVv', 10) == ['tPNuYXLnOLVv']", "assert select_words('JtsHoq wxvsLQqBXkNpmCTzBWTX', 1) == []", "assert select_words('aecdOIhfIbEBTOfoKnT', 1) == []", "assert select_words('gLFCSPHHP', 9) == ['gLFCSPHHP']", "assert select_words('r s rhhipmt', 6) == ['rhhipmt']", "assert select_words('aDqyhePv', 6) == ['aDqyhePv']", "assert select_words('tTxmhPuW', 7) == ['tTxmhPuW']", "assert select_words('gkaioVYtEtMLxrVq JIIwPCZW', 6) == ['JIIwPCZW']", "assert select_words('aru', 5) == []", "assert select_words('ySRkkHkfcvgHqOGVfaDTTRf', 1) == []", "assert select_words('SNeiILCez', 4) == []", "assert select_words('xzzxdz lkmvrvizpz z', 6) == ['xzzxdz']", "assert select_words('ySmjGAg', 6) == ['ySmjGAg']", "assert select_words('bRJRZC', 3) == []", "assert select_words('u', 1) == []", "assert select_words('djucfuuizrjfvuzzo', 4) == []", "assert select_words('dvYLMt', 6) == ['dvYLMt']", "assert select_words('xqvooek icmfdiysshehnyqx', 7) == []", "assert select_words('zIdcqeCrTYiDGGjYFC', 15) == ['zIdcqeCrTYiDGGjYFC']", "assert select_words('yp', 6) == []", "assert select_words('v', 4) == []", "assert select_words(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"], \"2nd edge test error: \" + str(select_words(\"a b c d e f\", 1))", "assert select_words('afrrguc', 5) == ['afrrguc']", "assert select_words('KBDaAtwgkSQhbMcvLn', 16) == ['KBDaAtwgkSQhbMcvLn']", "assert select_words('WvvnDCbdBejJOXxALMQUP', 17) == ['WvvnDCbdBejJOXxALMQUP']", "assert select_words('IXWOrAdrmmcWXqngDkiVFKXaAWf', 4) == []", "assert select_words('nh vu lcakrb', 1) == ['vu']", "assert select_words('QOBKeojoDQGT jIZmKXyPl', 8) == ['QOBKeojoDQGT', 'jIZmKXyPl']", "assert select_words(\"Uncle sam\", 3) == [\"Uncle\"], \"Fifth test error: \" + str(select_words(\"Uncle sam\", 3))\n\n\n    # Check some edge cases that are easy to work out by hand.", "assert select_words('zE sivlrNrHFgwiokUjTMdndl', 5) == []", "assert select_words('svMzfBuoveQXEPPIVV', 13) == ['svMzfBuoveQXEPPIVV']", "assert select_words('MjRnAErHPguQC', 1) == []", "assert select_words('tmchxmttrgfdanq', 3) == []", "assert select_words('jezkeorvxnruwhhwzxm', 7) == []", "assert select_words('caurfxlpkygqxoknil', 4) == []", "assert select_words('RBAY  hmsXCkloLHYheRDQL', 3) == ['RBAY']", "assert select_words('prFfoYsafgMfGYYGjsiqTXwL', 21) == ['prFfoYsafgMfGYYGjsiqTXwL']", "assert select_words('NSjIbZV', 2) == []", "assert select_words('rPKhzIot', 6) == ['rPKhzIot']", "assert select_words('ASDVzOVVDEdj J', 1) == ['J']", "assert select_words('oKNamFuRSJcV', 9) == ['oKNamFuRSJcV']", "assert select_words(' siweqafqot', 5) == []", "assert select_words('xdQgsAHI', 5) == []", "assert select_words('epzbicjvjcbxmxgfityzzv', 5) == []", "assert select_words('GFNxLvGHJnNx', 12) == ['GFNxLvGHJnNx']", "assert select_words('hguHoJGaaNwX', 3) == []", "assert select_words('cnxdrucrydrcyol', 13) == ['cnxdrucrydrcyol']", "assert select_words('choounwx', 5) == ['choounwx']", "assert select_words('yue', 2) == []", "assert select_words('DDdrgPy', 4) == []", "assert select_words('c zsYpMPdmr', 9) == ['zsYpMPdmr']", "assert select_words(\"\", 4) == [], \"1st edge test error: \" + str(select_words(\"\", 4))", "assert select_words('pzBxlNfcXEsOQzL', 13) == ['pzBxlNfcXEsOQzL']", "assert select_words('pWqNDaO zJwlHsqqEYCdDEZtNiL', 3) == []", "assert select_words(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"], \"Second test error: \" + str(select_words(\"Mary had a little lamb\", 3))", "assert select_words('Reg MuZcF', 4) == ['MuZcF']", "assert select_words('lxQnxHVtrUGfoufkLPXu', 16) == ['lxQnxHVtrUGfoufkLPXu']", "assert select_words('sl', 6) == []", "assert select_words('IFKqNq ', 5) == ['IFKqNq']", "assert select_words('lfspeijyudniowk', 1) == []", "assert select_words('kogmgdnk', 7) == ['kogmgdnk']", "assert select_words('nnchatjackywoavfwfps', 5) == []", "assert select_words('d', 2) == []", "assert select_words('fjnjvfo aqgasitdiyalwv', 1) == []", "assert select_words('IGEmiHg ne YIhrNkjpGfOObqJ', 1) == ['ne']", "assert select_words(\"Hello world\", 4) == [\"world\"], \"Fourth test error: \" + str(select_words(\"Hello world\", 4))", "assert select_words('jopfxbbvlslmluypcdt', 3) == []", "assert select_words('AWrNREXAqD WePeTbIPTS', 4) == []", "assert select_words('OWzTDtbfTAEOBLuZPqFdnmnSG', 5) == []", "assert select_words('TQzrMVZMngInaglSfwvrbAh', 20) == ['TQzrMVZMngInaglSfwvrbAh']", "assert select_words('etdrxwybqi', 1) == []", "assert select_words('aVCSziOkLCLGizHcmC', 2) == []", "assert select_words('sYlP HUxjpHVfeWBNAvXo', 4) == ['sYlP']", "assert select_words('txXxge', 4) == []", "assert select_words('kcpieuVjAOaxdpB', 4) == []", "assert select_words('oh', 8) == []", "assert select_words('bgosvLxdWAWUtCxHgfPugDKQfel', 5) == []", "assert select_words('fT LxYLtzO', 6) == ['LxYLtzO']", "assert select_words('eywh qxreeexrrhyovpwl', 7) == []", "assert select_words('JfStfbdqmygzcqzJvvbivZfDbwg', 26) == ['JfStfbdqmygzcqzJvvbivZfDbwg']", "assert select_words('asfwxvbzdfsrymc', 3) == []", "assert select_words('nBmjWxiPV', 3) == []", "assert select_words('lDqgwtu rM tfTmeKEd', 2) == ['rM']"], "nl": "Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    ", "func": "def select_words(s, n):", "examples": "Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    ", "completion": "def select_words(s, n):\n    '''Given a string s and a natural number n, you have been tasked to implement a function that returns a list of all words from string s that contain exactly n consonants, in order these words appear in the string s. If the string s is empty then the function should return an empty list. Note: you may assume the input string contains only letters and spaces.\n    Examples:\n        select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n        select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n        select_words(\"simple white space\", 2) ==> []\n        select_words(\"Hello world\", 4) ==> [\"world\"]\n        select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    '''\n    \n    # Input validation\n    if not s:\n        return []\n    \n    # Helper function to count consonants in a word\n    def count_consonants(word):\n        vowels = set('aeiouAEIOU')\n        return sum(1 for char in word if char.isalpha() and char not in vowels)\n    \n    # Word extraction\n    words = s.split()\n    \n    # Filter words based on consonant count\n    result = [word for word in words if count_consonants(word) == n]\n    \n    # Return result\n    return result\n", "completions": ["def select_words(s, n):\n    def count_consonants(word):\n        consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n        return sum(1 for char in word if char in consonants)\n\n    words = s.split()\n    result = [word for word in words if count_consonants(word) == n]\n    return result\n\n# Examples\nprint(select_words(\"Mary had a little lamb\", 4))  # [\"little\"]\nprint(select_words(\"Mary had a little lamb\", 3))  # [\"Mary\", \"lamb\"]\nprint(select_words(\"simple white space\", 2))      # []\nprint(select_words(\"Hello world\", 4))             # [\"world\"]\nprint(select_words(\"Uncle sam\", 3))               # [\"Uncle\"]\n", "def select_words(s, n):\n    # Step 1: Split the input string 's' into a list of words using the split() method.\n    words = s.split()\n    \n    # Step 2: Define a helper function to check if a character is a consonant.\n    def is_consonant(char):\n        vowels = 'aeiouAEIOU'\n        return char.isalpha() and char not in vowels\n    \n    # Step 3: Iterate over each word in the list and count the number of consonants using the helper function.\n    result = []\n    for word in words:\n        consonant_count = sum(1 for char in word if is_consonant(char))\n        \n        # Step 4: Compare the consonant count of each word with the given number 'n'.\n        if consonant_count == n:\n            # Step 5: Collect words with exactly 'n' consonants into a result list.\n            result.append(word)\n    \n    # Step 6: Return the result list.\n    return result\n", "def select_words(s, n):\n    def count_consonants(word):\n        vowels = set('aeiouAEIOU')\n        return sum(1 for char in word if char.isalpha() and char not in vowels)\n\n    words = s.split()\n    result = []\n\n    for word in words:\n        if count_consonants(word) == n:\n            result.append(word)\n\n    return result\n\n# Example usage:\n# print(select_words(\"Mary had a little lamb\", 4))  # Output: [\"little\"]\n# print(select_words(\"Mary had a little lamb\", 3))  # Output: [\"Mary\", \"lamb\"]\n# print(select_words(\"simple white space\", 2))      # Output: []\n# print(select_words(\"Hello world\", 4))             # Output: [\"world\"]\n# print(select_words(\"Uncle sam\", 3))               # Output: [\"Uncle\"]\n", "def select_words(s, n):\n    def count_consonants(word):\n        consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n        return sum(1 for char in word if char in consonants)\n\n    words = s.split()\n    filtered_words = [word for word in words if count_consonants(word) == n]\n    return filtered_words\n", "def select_words(s, n):\n    def count_consonants(word):\n        consonants = set(\"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\")\n        return sum(1 for char in word if char in consonants)\n\n    words = s.split()\n    result = [word for word in words if count_consonants(word) == n]\n    return result\n", "def select_words(s, n):\n    def count_consonants(word):\n        consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n        return sum(1 for char in word if char in consonants)\n\n    words = s.split()\n    result = [word for word in words if count_consonants(word) == n]\n    return result\n", "def select_words(s, n):\n    # Step 1: Split the input string 's' into a list of words using the split() method.\n    words = s.split()\n    \n    # Step 2: Define a set of consonants for reference.\n    consonants = set(\"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\")\n    \n    # Step 3: Create a helper function to count consonants in a word.\n    def count_consonants(word):\n        return sum(1 for char in word if char in consonants)\n    \n    # Step 4: Initialize an empty list to store words with exactly 'n' consonants.\n    result = []\n    \n    # Step 5: Iterate over each word in the list of words.\n    for word in words:\n        # Use the helper function to count consonants.\n        if count_consonants(word) == n:\n            # If the count matches 'n', append the word to the result list.\n            result.append(word)\n    \n    # Step 6: Return the result list containing words with exactly 'n' consonants.\n    return result\n", "def select_words(s, n):\n    # Define a set of consonants\n    consonants = set(\"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\")\n    \n    # Split the input string into a list of words\n    words = s.split()\n    \n    # Initialize an empty list to store words that meet the criteria\n    result = []\n    \n    # Iterate over each word in the list of words\n    for word in words:\n        # Count the number of consonants in the current word\n        consonant_count = sum(1 for char in word if char in consonants)\n        \n        # If the count matches 'n', add the word to the result list\n        if consonant_count == n:\n            result.append(word)\n    \n    # Return the list of words that have exactly 'n' consonants\n    return result\n", "def select_words(s, n):\n    def count_consonants(word):\n        vowels = set('aeiouAEIOU')\n        return sum(1 for char in word if char.isalpha() and char not in vowels)\n\n    words = s.split()\n    result = [word for word in words if count_consonants(word) == n]\n    return result\n", "def select_words(s, n):\n    '''Given a string s and a natural number n, you have been tasked to implement a function that returns a list of all words from string s that contain exactly n consonants, in order these words appear in the string s. If the string s is empty then the function should return an empty list. Note: you may assume the input string contains only letters and spaces.\n    Examples:\n        select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n        select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n        select_words(\"simple white space\", 2) ==> []\n        select_words(\"Hello world\", 4) ==> [\"world\"]\n        select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    '''\n    \n    # Input validation\n    if not s:\n        return []\n    \n    # Helper function to count consonants in a word\n    def count_consonants(word):\n        vowels = set('aeiouAEIOU')\n        return sum(1 for char in word if char.isalpha() and char not in vowels)\n    \n    # Word extraction\n    words = s.split()\n    \n    # Filter words based on consonant count\n    result = [word for word in words if count_consonants(word) == n]\n    \n    # Return result\n    return result\n"], "session_history": {"plan": "```json\n{\n  \"decomposition\": [\n    {\n      \"subproblem\": \"Identify words in the string\",\n      \"description\": \"Split the input string into individual words using spaces as delimiters.\"\n    },\n    {\n      \"subproblem\": \"Count consonants in each word\",\n      \"description\": \"For each word, count the number of consonants it contains. Consonants are all letters except 'a', 'e', 'i', 'o', 'u'.\"\n    },\n    {\n      \"subproblem\": \"Filter words based on consonant count\",\n      \"description\": \"Select words that have exactly 'n' consonants.\"\n    },\n    {\n      \"subproblem\": \"Return the result\",\n      \"description\": \"Return a list of words that meet the criteria, maintaining their order of appearance in the original string.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Input validation\",\n      \"description\": \"Ensure the input string 's' and natural number 'n' are valid. If 's' is empty, return an empty list.\"\n    },\n    {\n      \"step\": \"Word extraction\",\n      \"description\": \"Split the string 's' into words using the split method.\"\n    },\n    {\n      \"step\": \"Consonant counting\",\n      \"description\": \"Iterate over each word and count the consonants using a helper function.\"\n    },\n    {\n      \"step\": \"Filter words\",\n      \"description\": \"Create a list of words that have exactly 'n' consonants.\"\n    },\n    {\n      \"step\": \"Return result\",\n      \"description\": \"Return the list of filtered words.\"\n    }\n  ]\n}\n```", "Round_0": {"code": "def select_words(s, n):\n    '''Given a string s and a natural number n, you have been tasked to implement a function that returns a list of all words from string s that contain exactly n consonants, in order these words appear in the string s. If the string s is empty then the function should return an empty list. Note: you may assume the input string contains only letters and spaces.\n    Examples:\n        select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n        select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n        select_words(\"simple white space\", 2) ==> []\n        select_words(\"Hello world\", 4) ==> [\"world\"]\n        select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    '''\n    \n    # Input validation\n    if not s:\n        return []\n    \n    # Helper function to count consonants in a word\n    def count_consonants(word):\n        vowels = set('aeiouAEIOU')\n        return sum(1 for char in word if char.isalpha() and char not in vowels)\n    \n    # Word extraction\n    words = s.split()\n    \n    # Filter words based on consonant count\n    result = [word for word in words if count_consonants(word) == n]\n    \n    # Return result\n    return result\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, "session_historys": [{"plan": "```json\n{\n  \"decomposition\": [\n    \"Identify and extract individual words from the input string.\",\n    \"Define a method to count consonants in a given word.\",\n    \"Filter words based on the number of consonants matching the given number n.\",\n    \"Return the filtered list of words.\"\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Extract Words\",\n      \"description\": \"Split the input string into a list of words using spaces as delimiters.\"\n    },\n    {\n      \"step\": \"Count Consonants\",\n      \"description\": \"Create a function to count consonants in a word by iterating through each character and checking if it is a consonant.\"\n    },\n    {\n      \"step\": \"Filter Words\",\n      \"description\": \"Iterate through the list of words and apply the consonant counting function. Select words where the count of consonants equals n.\"\n    },\n    {\n      \"step\": \"Return Result\",\n      \"description\": \"Return the list of words that meet the criteria.\"\n    }\n  ]\n}\n```", "Round_0": {"code": "def select_words(s, n):\n    def count_consonants(word):\n        consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n        return sum(1 for char in word if char in consonants)\n\n    words = s.split()\n    result = [word for word in words if count_consonants(word) == n]\n    return result\n\n# Examples\nprint(select_words(\"Mary had a little lamb\", 4))  # [\"little\"]\nprint(select_words(\"Mary had a little lamb\", 3))  # [\"Mary\", \"lamb\"]\nprint(select_words(\"simple white space\", 2))      # []\nprint(select_words(\"Hello world\", 4))             # [\"world\"]\nprint(select_words(\"Uncle sam\", 3))               # [\"Uncle\"]\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"decomposed_subproblems\": [\n    {\n      \"subproblem\": \"Parse the input string into individual words.\",\n      \"description\": \"Split the input string 's' into a list of words using spaces as delimiters.\"\n    },\n    {\n      \"subproblem\": \"Identify consonants in each word.\",\n      \"description\": \"For each word, determine which characters are consonants. Consonants are all alphabetic characters that are not vowels (a, e, i, o, u).\"\n    },\n    {\n      \"subproblem\": \"Count consonants in each word.\",\n      \"description\": \"For each word, count the number of consonants identified in the previous step.\"\n    },\n    {\n      \"subproblem\": \"Filter words based on consonant count.\",\n      \"description\": \"Select words that have exactly 'n' consonants and store them in a list.\"\n    },\n    {\n      \"subproblem\": \"Return the result.\",\n      \"description\": \"Return the list of words that meet the consonant count criteria. If no words meet the criteria, return an empty list.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Step 1: Split the input string 's' into a list of words using the split() method.\",\n    \"Step 2: Define a helper function to check if a character is a consonant.\",\n    \"Step 3: Iterate over each word in the list and count the number of consonants using the helper function.\",\n    \"Step 4: Compare the consonant count of each word with the given number 'n'.\",\n    \"Step 5: Collect words with exactly 'n' consonants into a result list.\",\n    \"Step 6: Return the result list.\"\n  ]\n}\n```", "Round_0": {"code": "def select_words(s, n):\n    # Step 1: Split the input string 's' into a list of words using the split() method.\n    words = s.split()\n    \n    # Step 2: Define a helper function to check if a character is a consonant.\n    def is_consonant(char):\n        vowels = 'aeiouAEIOU'\n        return char.isalpha() and char not in vowels\n    \n    # Step 3: Iterate over each word in the list and count the number of consonants using the helper function.\n    result = []\n    for word in words:\n        consonant_count = sum(1 for char in word if is_consonant(char))\n        \n        # Step 4: Compare the consonant count of each word with the given number 'n'.\n        if consonant_count == n:\n            # Step 5: Collect words with exactly 'n' consonants into a result list.\n            result.append(word)\n    \n    # Step 6: Return the result list.\n    return result\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"decomposed_subproblems\": [\n    \"Identify and extract individual words from the input string.\",\n    \"Define a method to count the number of consonants in a given word.\",\n    \"Iterate through each word and apply the consonant counting method.\",\n    \"Collect words that have exactly n consonants.\",\n    \"Return the collected words in the order they appear in the input string.\"\n  ],\n  \"high_level_plan\": [\n    \"Split the input string into a list of words using spaces as delimiters.\",\n    \"Create a helper function to count consonants in a word. Consider letters that are not vowels (a, e, i, o, u) as consonants.\",\n    \"Initialize an empty list to store words that meet the criteria.\",\n    \"Loop through each word in the list of words:\",\n    \"  - Use the helper function to count the consonants in the current word.\",\n    \"  - If the count matches the given number n, add the word to the result list.\",\n    \"Return the result list containing words with exactly n consonants.\"\n  ]\n}\n```", "Round_0": {"code": "def select_words(s, n):\n    def count_consonants(word):\n        vowels = set('aeiouAEIOU')\n        return sum(1 for char in word if char.isalpha() and char not in vowels)\n\n    words = s.split()\n    result = []\n\n    for word in words:\n        if count_consonants(word) == n:\n            result.append(word)\n\n    return result\n\n# Example usage:\n# print(select_words(\"Mary had a little lamb\", 4))  # Output: [\"little\"]\n# print(select_words(\"Mary had a little lamb\", 3))  # Output: [\"Mary\", \"lamb\"]\n# print(select_words(\"simple white space\", 2))      # Output: []\n# print(select_words(\"Hello world\", 4))             # Output: [\"world\"]\n# print(select_words(\"Uncle sam\", 3))               # Output: [\"Uncle\"]\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"decomposition\": [\n    \"Identify and extract individual words from the input string.\",\n    \"Define a method to count consonants in a given word.\",\n    \"Filter words based on the number of consonants matching the given number n.\",\n    \"Return the filtered list of words.\"\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Extract Words\",\n      \"description\": \"Split the input string s into a list of words using spaces as delimiters.\"\n    },\n    {\n      \"step\": \"Count Consonants\",\n      \"description\": \"Create a function to count consonants in a word by iterating through each character and checking if it is a consonant.\"\n    },\n    {\n      \"step\": \"Filter Words\",\n      \"description\": \"Iterate through the list of words and use the consonant counting function to filter words that have exactly n consonants.\"\n    },\n    {\n      \"step\": \"Return Result\",\n      \"description\": \"Return the list of filtered words that meet the requirement.\"\n    }\n  ]\n}\n```", "Round_0": {"code": "def select_words(s, n):\n    def count_consonants(word):\n        consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n        return sum(1 for char in word if char in consonants)\n\n    words = s.split()\n    filtered_words = [word for word in words if count_consonants(word) == n]\n    return filtered_words\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"decomposed_subproblems\": [\n    \"Identify and extract individual words from the input string.\",\n    \"Determine the number of consonants in each word.\",\n    \"Filter words based on the specified number of consonants.\",\n    \"Return the list of words that meet the criteria.\"\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Extract Words\",\n      \"description\": \"Split the input string into individual words using spaces as delimiters.\"\n    },\n    {\n      \"step\": \"Count Consonants\",\n      \"description\": \"For each word, count the number of consonants by iterating through each character and checking if it is a consonant.\"\n    },\n    {\n      \"step\": \"Filter Words\",\n      \"description\": \"Compare the consonant count of each word with the given number n and filter out words that do not match.\"\n    },\n    {\n      \"step\": \"Return Result\",\n      \"description\": \"Compile and return a list of words that have exactly n consonants, maintaining their original order.\"\n    }\n  ]\n}\n```", "Round_0": {"code": "def select_words(s, n):\n    def count_consonants(word):\n        consonants = set(\"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\")\n        return sum(1 for char in word if char in consonants)\n\n    words = s.split()\n    result = [word for word in words if count_consonants(word) == n]\n    return result\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"decomposition\": [\n    \"Identify and extract individual words from the input string.\",\n    \"Define a method to count consonants in a given word.\",\n    \"Filter words based on the number of consonants matching the given number n.\",\n    \"Return the filtered list of words.\"\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Extract Words\",\n      \"description\": \"Split the input string into a list of words using spaces as delimiters.\"\n    },\n    {\n      \"step\": \"Count Consonants\",\n      \"description\": \"Create a function to count consonants in a word by iterating through each character and checking if it is a consonant.\"\n    },\n    {\n      \"step\": \"Filter Words\",\n      \"description\": \"Iterate through the list of words and apply the consonant counting function. Select words that have exactly n consonants.\"\n    },\n    {\n      \"step\": \"Return Result\",\n      \"description\": \"Return the list of words that meet the criteria. If no words meet the criteria, return an empty list.\"\n    }\n  ]\n}\n```", "Round_0": {"code": "def select_words(s, n):\n    def count_consonants(word):\n        consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n        return sum(1 for char in word if char in consonants)\n\n    words = s.split()\n    result = [word for word in words if count_consonants(word) == n]\n    return result\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"decomposed_subproblems\": [\n    {\n      \"subproblem\": \"Parse the input string into individual words.\",\n      \"description\": \"Split the input string 's' into a list of words using spaces as delimiters.\"\n    },\n    {\n      \"subproblem\": \"Identify consonants in each word.\",\n      \"description\": \"Define a set of consonant characters and create a function to count the number of consonants in a given word.\"\n    },\n    {\n      \"subproblem\": \"Filter words based on consonant count.\",\n      \"description\": \"Iterate through the list of words and select those that have exactly 'n' consonants.\"\n    },\n    {\n      \"subproblem\": \"Return the filtered list of words.\",\n      \"description\": \"Compile the selected words into a list and return it as the output.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Step 1: Split the input string 's' into a list of words using the split() method.\",\n    \"Step 2: Define a set of consonants for reference.\",\n    \"Step 3: Create a helper function to count consonants in a word by iterating over each character and checking if it is in the consonant set.\",\n    \"Step 4: Initialize an empty list to store words with exactly 'n' consonants.\",\n    \"Step 5: Iterate over each word in the list of words, use the helper function to count consonants, and if the count matches 'n', append the word to the result list.\",\n    \"Step 6: Return the result list containing words with exactly 'n' consonants.\"\n  ]\n}\n```", "Round_0": {"code": "def select_words(s, n):\n    # Step 1: Split the input string 's' into a list of words using the split() method.\n    words = s.split()\n    \n    # Step 2: Define a set of consonants for reference.\n    consonants = set(\"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\")\n    \n    # Step 3: Create a helper function to count consonants in a word.\n    def count_consonants(word):\n        return sum(1 for char in word if char in consonants)\n    \n    # Step 4: Initialize an empty list to store words with exactly 'n' consonants.\n    result = []\n    \n    # Step 5: Iterate over each word in the list of words.\n    for word in words:\n        # Use the helper function to count consonants.\n        if count_consonants(word) == n:\n            # If the count matches 'n', append the word to the result list.\n            result.append(word)\n    \n    # Step 6: Return the result list containing words with exactly 'n' consonants.\n    return result\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input string to extract individual words.\",\n      \"details\": \"Split the string 's' by spaces to get a list of words.\"\n    },\n    {\n      \"description\": \"Identify consonants in the English alphabet.\",\n      \"details\": \"Define a set of consonants, which are all alphabetic characters except vowels (a, e, i, o, u).\"\n    },\n    {\n      \"description\": \"Count the number of consonants in each word.\",\n      \"details\": \"For each word, iterate through its characters and count how many are consonants.\"\n    },\n    {\n      \"description\": \"Filter words based on the consonant count.\",\n      \"details\": \"Select words that have exactly 'n' consonants.\"\n    },\n    {\n      \"description\": \"Return the filtered list of words.\",\n      \"details\": \"Ensure the words are returned in the order they appear in the input string.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Split the input string 's' into a list of words using spaces as delimiters.\",\n    \"Define a set of consonants for reference.\",\n    \"Initialize an empty list to store words that meet the criteria.\",\n    \"Iterate over each word in the list of words:\",\n    \"  - Count the number of consonants in the current word.\",\n    \"  - If the count matches 'n', add the word to the result list.\",\n    \"Return the list of words that have exactly 'n' consonants.\"\n  ]\n}\n```", "Round_0": {"code": "def select_words(s, n):\n    # Define a set of consonants\n    consonants = set(\"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\")\n    \n    # Split the input string into a list of words\n    words = s.split()\n    \n    # Initialize an empty list to store words that meet the criteria\n    result = []\n    \n    # Iterate over each word in the list of words\n    for word in words:\n        # Count the number of consonants in the current word\n        consonant_count = sum(1 for char in word if char in consonants)\n        \n        # If the count matches 'n', add the word to the result list\n        if consonant_count == n:\n            result.append(word)\n    \n    # Return the list of words that have exactly 'n' consonants\n    return result\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"decomposition\": [\n    \"Identify and extract individual words from the input string.\",\n    \"Define a method to count the number of consonants in a given word.\",\n    \"Filter the list of words to include only those with exactly n consonants.\",\n    \"Return the filtered list of words in the order they appear in the input string.\"\n  ],\n  \"high_level_plan\": [\n    \"Step 1: Split the input string into a list of words using spaces as delimiters.\",\n    \"Step 2: Create a helper function to count consonants in a word. Consider letters that are not vowels (a, e, i, o, u) as consonants.\",\n    \"Step 3: Iterate over the list of words and use the helper function to count consonants in each word.\",\n    \"Step 4: Collect words that have exactly n consonants into a new list.\",\n    \"Step 5: Return the new list of words.\"\n  ]\n}\n```", "Round_0": {"code": "def select_words(s, n):\n    def count_consonants(word):\n        vowels = set('aeiouAEIOU')\n        return sum(1 for char in word if char.isalpha() and char not in vowels)\n\n    words = s.split()\n    result = [word for word in words if count_consonants(word) == n]\n    return result\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"decomposition\": [\n    {\n      \"subproblem\": \"Identify words in the string\",\n      \"description\": \"Split the input string into individual words using spaces as delimiters.\"\n    },\n    {\n      \"subproblem\": \"Count consonants in each word\",\n      \"description\": \"For each word, count the number of consonants it contains. Consonants are all letters except 'a', 'e', 'i', 'o', 'u'.\"\n    },\n    {\n      \"subproblem\": \"Filter words based on consonant count\",\n      \"description\": \"Select words that have exactly 'n' consonants.\"\n    },\n    {\n      \"subproblem\": \"Return the result\",\n      \"description\": \"Return a list of words that meet the criteria, maintaining their order of appearance in the original string.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Input validation\",\n      \"description\": \"Ensure the input string 's' and natural number 'n' are valid. If 's' is empty, return an empty list.\"\n    },\n    {\n      \"step\": \"Word extraction\",\n      \"description\": \"Split the string 's' into words using the split method.\"\n    },\n    {\n      \"step\": \"Consonant counting\",\n      \"description\": \"Iterate over each word and count the consonants using a helper function.\"\n    },\n    {\n      \"step\": \"Filter words\",\n      \"description\": \"Create a list of words that have exactly 'n' consonants.\"\n    },\n    {\n      \"step\": \"Return result\",\n      \"description\": \"Return the list of filtered words.\"\n    }\n  ]\n}\n```", "Round_0": {"code": "def select_words(s, n):\n    '''Given a string s and a natural number n, you have been tasked to implement a function that returns a list of all words from string s that contain exactly n consonants, in order these words appear in the string s. If the string s is empty then the function should return an empty list. Note: you may assume the input string contains only letters and spaces.\n    Examples:\n        select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n        select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n        select_words(\"simple white space\", 2) ==> []\n        select_words(\"Hello world\", 4) ==> [\"world\"]\n        select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    '''\n    \n    # Input validation\n    if not s:\n        return []\n    \n    # Helper function to count consonants in a word\n    def count_consonants(word):\n        vowels = set('aeiouAEIOU')\n        return sum(1 for char in word if char.isalpha() and char not in vowels)\n    \n    # Word extraction\n    words = s.split()\n    \n    # Filter words based on consonant count\n    result = [word for word in words if count_consonants(word) == n]\n    \n    # Return result\n    return result\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [133, 133, 133, 133, 133, 133, 133, 133, 133, 133], "passed": true, "pass": true, "pass_num": 10, "round": 200, "mutate_method": "condense_two2one", "save_node": false, "parent_index": 198}
