{"task_id": "HumanEval/70", "prompt": "def strange_sort_list(lst):\t\n'''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n    Ensure that the original list's order is not altered in the process of retrieval.\nExamples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''", "entry_point": "strange_sort_list", "canonical_solution": "    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res\n", "test": ["def check(strange_sort_list):\n\tassert strange_sort_list([5, 1, 6, 3, 2]) == [1, 6, 2, 5, 3]", "def check(strange_sort_list):\n\tassert strange_sort_list([1, 2, 1, 3, 5, 8, -8, -4]) == [-8, 8, -4, 5, 1, 3, 1, 2]", "def check(strange_sort_list):\n\tassert strange_sort_list([8, 8, 8, 6, 12, 5]) == [5, 12, 6, 8, 8, 8]", "def check(strange_sort_list):\n\tassert strange_sort_list([5, 6, 4, 6, 6]) == [4, 6, 5, 6, 6]", "def check(strange_sort_list):\n\tassert strange_sort_list([9, 3, 5, 7]) == [3, 9, 5, 7]", "def check(strange_sort_list):\n\tassert strange_sort_list([6, 6, 2, 12, 13]) == [2, 13, 6, 12, 6]", "def check(strange_sort_list):\n\tassert strange_sort_list([3, 2, 4, 9, 9, 6, 7, 4]) == [2, 9, 3, 9, 4, 7, 4, 6]", "def check(strange_sort_list):\n\tassert strange_sort_list([1, 11, 9, 10, 9]) == [1, 11, 9, 10, 9]", "def check(strange_sort_list):\n\tassert strange_sort_list([4, 4, 5, 1, 4]) == [1, 5, 4, 4, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([6, 3, 1, 6, 10]) == [1, 10, 3, 6, 6]", "def check(strange_sort_list):\n\tassert strange_sort_list([2, 5, 3, 4, 9, 11, 2, 3]) == [2, 11, 2, 9, 3, 5, 3, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([9, 8, 5, 2]) == [2, 9, 5, 8]", "def check(strange_sort_list):\n\tassert strange_sort_list([5, 2, 7, 5, 2, 4, -3, -1]) == [-3, 7, -1, 5, 2, 5, 2, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([6, 2, 5, 5]) == [2, 6, 5, 5]", "def check(strange_sort_list):\n\tassert strange_sort_list([10, 10, 2, 11, 10]) == [2, 11, 10, 10, 10]", "def check(strange_sort_list):\n\tassert strange_sort_list([5, 9, 4, 2]) == [2, 9, 4, 5]", "def check(strange_sort_list):\n\tassert strange_sort_list([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]", "def check(strange_sort_list):\n\tassert strange_sort_list([5, 2, 2, 1]) == [1, 5, 2, 2]", "def check(strange_sort_list):\n\tassert strange_sort_list([8, 2, 9, 9]) == [2, 9, 8, 9]", "def check(strange_sort_list):\n\tassert strange_sort_list([2, 2, 6, 8, 6]) == [2, 8, 2, 6, 6]", "def check(strange_sort_list):\n\tassert strange_sort_list([2, 1, 8, 9, 2, 4, 8, 6]) == [1, 9, 2, 8, 2, 8, 4, 6]", "def check(strange_sort_list):\n\tassert strange_sort_list([]) == []", "def check(strange_sort_list):\n\tassert strange_sort_list([6, 2, 1, 4]) == [1, 6, 2, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([7, 2, 5, 8, 7, 2]) == [2, 8, 2, 7, 5, 7]", "def check(strange_sort_list):\n\tassert strange_sort_list([3, 4, 1, 7, 4, 6, 3, 12]) == [1, 12, 3, 7, 3, 6, 4, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([4, 4, 8, 8]) == [4, 8, 4, 8]", "def check(strange_sort_list):\n\tassert strange_sort_list([111111]) == [111111]\n\n    # Check some edge cases that are easy to work out by hand.", "def check(strange_sort_list):\n\tassert strange_sort_list([8, 4, 9, 7]) == [4, 9, 7, 8]", "def check(strange_sort_list):\n\tassert strange_sort_list([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]", "def check(strange_sort_list):\n\tassert strange_sort_list([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]", "def check(strange_sort_list):\n\tassert strange_sort_list([1, 6, 6, 3]) == [1, 6, 3, 6]", "def check(strange_sort_list):\n\tassert strange_sort_list([1, 6, 5, 7, 3, 2, -7, -6]) == [-7, 7, -6, 6, 1, 5, 2, 3]", "def check(strange_sort_list):\n\tassert strange_sort_list([4, 8, 10, 4, 4]) == [4, 10, 4, 8, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([6, 4, 4, 8]) == [4, 8, 4, 6]", "def check(strange_sort_list):\n\tassert strange_sort_list([3, 1, 3, 4, 10, 3, 9, 5]) == [1, 10, 3, 9, 3, 5, 3, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([4, 6, 4, 7, 7, 3, -1, -7]) == [-7, 7, -1, 7, 3, 6, 4, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([2, 6, 4, 2, 9, 5, -1, -6]) == [-6, 9, -1, 6, 2, 5, 2, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([1, 5, 7, 3, 8, 6]) == [1, 8, 3, 7, 5, 6]", "def check(strange_sort_list):\n\tassert strange_sort_list([3, 7, 1, 7, 4]) == [1, 7, 3, 7, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([4, 7, 6, 6, 1, 4, -2, -5]) == [-5, 7, -2, 6, 1, 6, 4, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([9, 3, 2, 5, 14]) == [2, 14, 3, 9, 5]", "def check(strange_sort_list):\n\tassert strange_sort_list([4, 10, 10, 4, 13]) == [4, 13, 4, 10, 10]", "def check(strange_sort_list):\n\tassert strange_sort_list([2, 4, 3, 4]) == [2, 4, 3, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([1, 1, 6, 7, 14]) == [1, 14, 1, 7, 6]", "def check(strange_sort_list):\n\tassert strange_sort_list([3, 5, 7, 8, 5]) == [3, 8, 5, 7, 5]", "def check(strange_sort_list):\n\tassert strange_sort_list([5, 1, 7, 5, 8]) == [1, 8, 5, 7, 5]", "def check(strange_sort_list):\n\tassert strange_sort_list([5, 6, 8, 1, 3, 1, 10, 5]) == [1, 10, 1, 8, 3, 6, 5, 5]", "def check(strange_sort_list):\n\tassert strange_sort_list([10, 4, 7, 9]) == [4, 10, 7, 9]", "def check(strange_sort_list):\n\tassert strange_sort_list([6, 2, 7, 5]) == [2, 7, 5, 6]", "def check(strange_sort_list):\n\tassert strange_sort_list([5, 4, 5, 1, 7, 2, -3, -8]) == [-8, 7, -3, 5, 1, 5, 2, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([1, 3, 7, 3, 9, 11, 4, 6]) == [1, 11, 3, 9, 3, 7, 4, 6]", "def check(strange_sort_list):\n\tassert strange_sort_list([2, 3, 2, 2, 7, 7, 2, 7]) == [2, 7, 2, 7, 2, 7, 2, 3]", "def check(strange_sort_list):\n\tassert strange_sort_list([3, 1, 3, 4]) == [1, 4, 3, 3]", "def check(strange_sort_list):\n\tassert strange_sort_list([1, 1, 3, 6, 3, 10, -6, -1]) == [-6, 10, -1, 6, 1, 3, 1, 3]", "def check(strange_sort_list):\n\tassert strange_sort_list([2, 3, 7, 5, 4, 10, -6, -9]) == [-9, 10, -6, 7, 2, 5, 3, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([5, 4, 2, 5, 12, 5]) == [2, 12, 4, 5, 5, 5]", "def check(strange_sort_list):\n\tassert strange_sort_list([1, 4, 1, 4, 8]) == [1, 8, 1, 4, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([1, 2, 7, 3]) == [1, 7, 2, 3]", "def check(strange_sort_list):\n\tassert strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]", "def check(strange_sort_list):\n\tassert strange_sort_list([3, 4, 3, 7, 9]) == [3, 9, 3, 7, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([9, 3, 9, 1]) == [1, 9, 3, 9]", "def check(strange_sort_list):\n\tassert strange_sort_list([7, 9, 2, 6, 4]) == [2, 9, 4, 7, 6]", "def check(strange_sort_list):\n\tassert strange_sort_list([2, 2, 4, 4, 7, 4]) == [2, 7, 2, 4, 4, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([6, 7, 4, 5, 14, 5]) == [4, 14, 5, 7, 5, 6]", "def check(strange_sort_list):\n\tassert strange_sort_list([7, 4, 2, 4, 14, 5]) == [2, 14, 4, 7, 4, 5]", "def check(strange_sort_list):\n\tassert strange_sort_list([10, 11, 9, 6, 12]) == [6, 12, 9, 11, 10]", "def check(strange_sort_list):\n\tassert strange_sort_list([4, 5, 2, 2]) == [2, 5, 2, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([1, 1, 1, 2, 1]) == [1, 2, 1, 1, 1]", "def check(strange_sort_list):\n\tassert strange_sort_list([5, 1, 7, 2, 10, 7, 5, 5]) == [1, 10, 2, 7, 5, 7, 5, 5]", "def check(strange_sort_list):\n\tassert strange_sort_list([2, 3, 6, 3, 8, 3, 7, 4]) == [2, 8, 3, 7, 3, 6, 3, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([4, 6, 1, 1]) == [1, 6, 1, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([3, 1, 3, 6, 3, 10, 7, 13]) == [1, 13, 3, 10, 3, 7, 3, 6]", "def check(strange_sort_list):\n\tassert strange_sort_list([1, 4, 5, 8]) == [1, 8, 4, 5]", "def check(strange_sort_list):\n\tassert strange_sort_list([3, 2, 3, 2]) == [2, 3, 2, 3]", "def check(strange_sort_list):\n\tassert strange_sort_list([4, 9, 7, 9]) == [4, 9, 7, 9]", "def check(strange_sort_list):\n\tassert strange_sort_list([7, 1, 4, 13, 10]) == [1, 13, 4, 10, 7]", "def check(strange_sort_list):\n\tassert strange_sort_list([2, 3, 6, 6]) == [2, 6, 3, 6]", "def check(strange_sort_list):\n\tassert strange_sort_list([1, 3, 5, 4, 9, 1, -9, -10]) == [-10, 9, -9, 5, 1, 4, 1, 3]", "def check(strange_sort_list):\n\tassert strange_sort_list([5, 5, 5, 8, 14]) == [5, 14, 5, 8, 5]", "def check(strange_sort_list):\n\tassert strange_sort_list([8, 9, 2, 8]) == [2, 9, 8, 8]", "def check(strange_sort_list):\n\tassert strange_sort_list([4, 4, 5, 11, 8, 4]) == [4, 11, 4, 8, 4, 5]", "def check(strange_sort_list):\n\tassert strange_sort_list([2, 2, 5, 6, 6, 10, -4, -6]) == [-6, 10, -4, 6, 2, 6, 2, 5]", "def check(strange_sort_list):\n\tassert strange_sort_list([1, 6, 12, 6, 9, 6]) == [1, 12, 6, 9, 6, 6]", "def check(strange_sort_list):\n\tassert strange_sort_list([1, 1, 1, 5, 5, 9, -7, -8]) == [-8, 9, -7, 5, 1, 5, 1, 1]", "def check(strange_sort_list):\n\tassert strange_sort_list([3, 4, 3, 5, 7]) == [3, 7, 3, 5, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([3, 5, 2, 4, 3, 6, -3, 0]) == [-3, 6, 0, 5, 2, 4, 3, 3]", "def check(strange_sort_list):\n\tassert strange_sort_list([8, 3, 9, 5, 5]) == [3, 9, 5, 8, 5]", "def check(strange_sort_list):\n\tassert strange_sort_list([1, 4, 6, 5, 10, 7, 5, 3]) == [1, 10, 3, 7, 4, 6, 5, 5]", "def check(strange_sort_list):\n\tassert strange_sort_list([4, 2, 9, 6, 5, 1]) == [1, 9, 2, 6, 4, 5]", "def check(strange_sort_list):\n\tassert strange_sort_list([5, 5, 5, 6, 2]) == [2, 6, 5, 5, 5]", "def check(strange_sort_list):\n\tassert strange_sort_list([1, 1, 6, 1, 4]) == [1, 6, 1, 4, 1]", "def check(strange_sort_list):\n\tassert strange_sort_list([7, 2, 6, 11, 10]) == [2, 11, 6, 10, 7]", "def check(strange_sort_list):\n\tassert strange_sort_list([4, 1, 8, 7, 9, 3, 12, 5]) == [1, 12, 3, 9, 4, 8, 5, 7]", "def check(strange_sort_list):\n\tassert strange_sort_list([10, 7, 5, 3]) == [3, 10, 5, 7]", "def check(strange_sort_list):\n\tassert strange_sort_list([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]", "def check(strange_sort_list):\n\tassert strange_sort_list([5, 6, 6, 9]) == [5, 9, 6, 6]", "def check(strange_sort_list):\n\tassert strange_sort_list([7, 8, 12, 11, 11, 5]) == [5, 12, 7, 11, 8, 11]", "def check(strange_sort_list):\n\tassert strange_sort_list([2, 2, 4, 7, 2, 6, 6, 3]) == [2, 7, 2, 6, 2, 6, 3, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]", "def check(strange_sort_list):\n\tassert strange_sort_list([8, 6, 12, 4, 4, 4]) == [4, 12, 4, 8, 4, 6]", "def check(strange_sort_list):\n\tassert strange_sort_list([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]", "def check(strange_sort_list):\n\tassert strange_sort_list([6, 2, 5, 1]) == [1, 6, 2, 5]", "def check(strange_sort_list):\n\tassert strange_sort_list([1, 7, 9, 11, 4]) == [1, 11, 4, 9, 7]", "def check(strange_sort_list):\n\tassert strange_sort_list([2, 7, 12, 13, 8, 2]) == [2, 13, 2, 12, 7, 8]", "def check(strange_sort_list):\n\tassert strange_sort_list([4, 7, 7, 1, 10, 3, 0, -6]) == [-6, 10, 0, 7, 1, 7, 3, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([4, 9, 6, 8, 11, 3]) == [3, 11, 4, 9, 6, 8]", "def check(strange_sort_list):\n\tassert strange_sort_list([4, 3, 1, 6]) == [1, 6, 3, 4]"], "test_case_list": ["assert strange_sort_list([5, 1, 6, 3, 2]) == [1, 6, 2, 5, 3]", "assert strange_sort_list([1, 2, 1, 3, 5, 8, -8, -4]) == [-8, 8, -4, 5, 1, 3, 1, 2]", "assert strange_sort_list([8, 8, 8, 6, 12, 5]) == [5, 12, 6, 8, 8, 8]", "assert strange_sort_list([5, 6, 4, 6, 6]) == [4, 6, 5, 6, 6]", "assert strange_sort_list([9, 3, 5, 7]) == [3, 9, 5, 7]", "assert strange_sort_list([6, 6, 2, 12, 13]) == [2, 13, 6, 12, 6]", "assert strange_sort_list([3, 2, 4, 9, 9, 6, 7, 4]) == [2, 9, 3, 9, 4, 7, 4, 6]", "assert strange_sort_list([1, 11, 9, 10, 9]) == [1, 11, 9, 10, 9]", "assert strange_sort_list([4, 4, 5, 1, 4]) == [1, 5, 4, 4, 4]", "assert strange_sort_list([6, 3, 1, 6, 10]) == [1, 10, 3, 6, 6]", "assert strange_sort_list([2, 5, 3, 4, 9, 11, 2, 3]) == [2, 11, 2, 9, 3, 5, 3, 4]", "assert strange_sort_list([9, 8, 5, 2]) == [2, 9, 5, 8]", "assert strange_sort_list([5, 2, 7, 5, 2, 4, -3, -1]) == [-3, 7, -1, 5, 2, 5, 2, 4]", "assert strange_sort_list([6, 2, 5, 5]) == [2, 6, 5, 5]", "assert strange_sort_list([10, 10, 2, 11, 10]) == [2, 11, 10, 10, 10]", "assert strange_sort_list([5, 9, 4, 2]) == [2, 9, 4, 5]", "assert strange_sort_list([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]", "assert strange_sort_list([5, 2, 2, 1]) == [1, 5, 2, 2]", "assert strange_sort_list([8, 2, 9, 9]) == [2, 9, 8, 9]", "assert strange_sort_list([2, 2, 6, 8, 6]) == [2, 8, 2, 6, 6]", "assert strange_sort_list([2, 1, 8, 9, 2, 4, 8, 6]) == [1, 9, 2, 8, 2, 8, 4, 6]", "assert strange_sort_list([]) == []", "assert strange_sort_list([6, 2, 1, 4]) == [1, 6, 2, 4]", "assert strange_sort_list([7, 2, 5, 8, 7, 2]) == [2, 8, 2, 7, 5, 7]", "assert strange_sort_list([3, 4, 1, 7, 4, 6, 3, 12]) == [1, 12, 3, 7, 3, 6, 4, 4]", "assert strange_sort_list([4, 4, 8, 8]) == [4, 8, 4, 8]", "assert strange_sort_list([111111]) == [111111]\n\n    # Check some edge cases that are easy to work out by hand.", "assert strange_sort_list([8, 4, 9, 7]) == [4, 9, 7, 8]", "assert strange_sort_list([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]", "assert strange_sort_list([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]", "assert strange_sort_list([1, 6, 6, 3]) == [1, 6, 3, 6]", "assert strange_sort_list([1, 6, 5, 7, 3, 2, -7, -6]) == [-7, 7, -6, 6, 1, 5, 2, 3]", "assert strange_sort_list([4, 8, 10, 4, 4]) == [4, 10, 4, 8, 4]", "assert strange_sort_list([6, 4, 4, 8]) == [4, 8, 4, 6]", "assert strange_sort_list([3, 1, 3, 4, 10, 3, 9, 5]) == [1, 10, 3, 9, 3, 5, 3, 4]", "assert strange_sort_list([4, 6, 4, 7, 7, 3, -1, -7]) == [-7, 7, -1, 7, 3, 6, 4, 4]", "assert strange_sort_list([2, 6, 4, 2, 9, 5, -1, -6]) == [-6, 9, -1, 6, 2, 5, 2, 4]", "assert strange_sort_list([1, 5, 7, 3, 8, 6]) == [1, 8, 3, 7, 5, 6]", "assert strange_sort_list([3, 7, 1, 7, 4]) == [1, 7, 3, 7, 4]", "assert strange_sort_list([4, 7, 6, 6, 1, 4, -2, -5]) == [-5, 7, -2, 6, 1, 6, 4, 4]", "assert strange_sort_list([9, 3, 2, 5, 14]) == [2, 14, 3, 9, 5]", "assert strange_sort_list([4, 10, 10, 4, 13]) == [4, 13, 4, 10, 10]", "assert strange_sort_list([2, 4, 3, 4]) == [2, 4, 3, 4]", "assert strange_sort_list([1, 1, 6, 7, 14]) == [1, 14, 1, 7, 6]", "assert strange_sort_list([3, 5, 7, 8, 5]) == [3, 8, 5, 7, 5]", "assert strange_sort_list([5, 1, 7, 5, 8]) == [1, 8, 5, 7, 5]", "assert strange_sort_list([5, 6, 8, 1, 3, 1, 10, 5]) == [1, 10, 1, 8, 3, 6, 5, 5]", "assert strange_sort_list([10, 4, 7, 9]) == [4, 10, 7, 9]", "assert strange_sort_list([6, 2, 7, 5]) == [2, 7, 5, 6]", "assert strange_sort_list([5, 4, 5, 1, 7, 2, -3, -8]) == [-8, 7, -3, 5, 1, 5, 2, 4]", "assert strange_sort_list([1, 3, 7, 3, 9, 11, 4, 6]) == [1, 11, 3, 9, 3, 7, 4, 6]", "assert strange_sort_list([2, 3, 2, 2, 7, 7, 2, 7]) == [2, 7, 2, 7, 2, 7, 2, 3]", "assert strange_sort_list([3, 1, 3, 4]) == [1, 4, 3, 3]", "assert strange_sort_list([1, 1, 3, 6, 3, 10, -6, -1]) == [-6, 10, -1, 6, 1, 3, 1, 3]", "assert strange_sort_list([2, 3, 7, 5, 4, 10, -6, -9]) == [-9, 10, -6, 7, 2, 5, 3, 4]", "assert strange_sort_list([5, 4, 2, 5, 12, 5]) == [2, 12, 4, 5, 5, 5]", "assert strange_sort_list([1, 4, 1, 4, 8]) == [1, 8, 1, 4, 4]", "assert strange_sort_list([1, 2, 7, 3]) == [1, 7, 2, 3]", "assert strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]", "assert strange_sort_list([3, 4, 3, 7, 9]) == [3, 9, 3, 7, 4]", "assert strange_sort_list([9, 3, 9, 1]) == [1, 9, 3, 9]", "assert strange_sort_list([7, 9, 2, 6, 4]) == [2, 9, 4, 7, 6]", "assert strange_sort_list([2, 2, 4, 4, 7, 4]) == [2, 7, 2, 4, 4, 4]", "assert strange_sort_list([6, 7, 4, 5, 14, 5]) == [4, 14, 5, 7, 5, 6]", "assert strange_sort_list([7, 4, 2, 4, 14, 5]) == [2, 14, 4, 7, 4, 5]", "assert strange_sort_list([10, 11, 9, 6, 12]) == [6, 12, 9, 11, 10]", "assert strange_sort_list([4, 5, 2, 2]) == [2, 5, 2, 4]", "assert strange_sort_list([1, 1, 1, 2, 1]) == [1, 2, 1, 1, 1]", "assert strange_sort_list([5, 1, 7, 2, 10, 7, 5, 5]) == [1, 10, 2, 7, 5, 7, 5, 5]", "assert strange_sort_list([2, 3, 6, 3, 8, 3, 7, 4]) == [2, 8, 3, 7, 3, 6, 3, 4]", "assert strange_sort_list([4, 6, 1, 1]) == [1, 6, 1, 4]", "assert strange_sort_list([3, 1, 3, 6, 3, 10, 7, 13]) == [1, 13, 3, 10, 3, 7, 3, 6]", "assert strange_sort_list([1, 4, 5, 8]) == [1, 8, 4, 5]", "assert strange_sort_list([3, 2, 3, 2]) == [2, 3, 2, 3]", "assert strange_sort_list([4, 9, 7, 9]) == [4, 9, 7, 9]", "assert strange_sort_list([7, 1, 4, 13, 10]) == [1, 13, 4, 10, 7]", "assert strange_sort_list([2, 3, 6, 6]) == [2, 6, 3, 6]", "assert strange_sort_list([1, 3, 5, 4, 9, 1, -9, -10]) == [-10, 9, -9, 5, 1, 4, 1, 3]", "assert strange_sort_list([5, 5, 5, 8, 14]) == [5, 14, 5, 8, 5]", "assert strange_sort_list([8, 9, 2, 8]) == [2, 9, 8, 8]", "assert strange_sort_list([4, 4, 5, 11, 8, 4]) == [4, 11, 4, 8, 4, 5]", "assert strange_sort_list([2, 2, 5, 6, 6, 10, -4, -6]) == [-6, 10, -4, 6, 2, 6, 2, 5]", "assert strange_sort_list([1, 6, 12, 6, 9, 6]) == [1, 12, 6, 9, 6, 6]", "assert strange_sort_list([1, 1, 1, 5, 5, 9, -7, -8]) == [-8, 9, -7, 5, 1, 5, 1, 1]", "assert strange_sort_list([3, 4, 3, 5, 7]) == [3, 7, 3, 5, 4]", "assert strange_sort_list([3, 5, 2, 4, 3, 6, -3, 0]) == [-3, 6, 0, 5, 2, 4, 3, 3]", "assert strange_sort_list([8, 3, 9, 5, 5]) == [3, 9, 5, 8, 5]", "assert strange_sort_list([1, 4, 6, 5, 10, 7, 5, 3]) == [1, 10, 3, 7, 4, 6, 5, 5]", "assert strange_sort_list([4, 2, 9, 6, 5, 1]) == [1, 9, 2, 6, 4, 5]", "assert strange_sort_list([5, 5, 5, 6, 2]) == [2, 6, 5, 5, 5]", "assert strange_sort_list([1, 1, 6, 1, 4]) == [1, 6, 1, 4, 1]", "assert strange_sort_list([7, 2, 6, 11, 10]) == [2, 11, 6, 10, 7]", "assert strange_sort_list([4, 1, 8, 7, 9, 3, 12, 5]) == [1, 12, 3, 9, 4, 8, 5, 7]", "assert strange_sort_list([10, 7, 5, 3]) == [3, 10, 5, 7]", "assert strange_sort_list([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]", "assert strange_sort_list([5, 6, 6, 9]) == [5, 9, 6, 6]", "assert strange_sort_list([7, 8, 12, 11, 11, 5]) == [5, 12, 7, 11, 8, 11]", "assert strange_sort_list([2, 2, 4, 7, 2, 6, 6, 3]) == [2, 7, 2, 6, 2, 6, 3, 4]", "assert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert strange_sort_list([8, 6, 12, 4, 4, 4]) == [4, 12, 4, 8, 4, 6]", "assert strange_sort_list([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]", "assert strange_sort_list([6, 2, 5, 1]) == [1, 6, 2, 5]", "assert strange_sort_list([1, 7, 9, 11, 4]) == [1, 11, 4, 9, 7]", "assert strange_sort_list([2, 7, 12, 13, 8, 2]) == [2, 13, 2, 12, 7, 8]", "assert strange_sort_list([4, 7, 7, 1, 10, 3, 0, -6]) == [-6, 10, 0, 7, 1, 7, 3, 4]", "assert strange_sort_list([4, 9, 6, 8, 11, 3]) == [3, 11, 4, 9, 6, 8]", "assert strange_sort_list([4, 3, 1, 6]) == [1, 6, 3, 4]"], "nl": "\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    ", "func": "def strange_sort_list(lst):", "examples": "Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    ", "completion": "def strange_sort_list(lst):\n    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n    Ensure that the original list's order is not altered in the process of retrieval.\n    Examples:\n        strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n        strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n        strange_sort_list([]) == []\n    \"\"\"\n    result = []\n    lst_copy = lst[:]\n    \n    while lst_copy:\n        min_val = min(lst_copy)\n        result.append(min_val)\n        lst_copy.remove(min_val)\n        \n        if lst_copy:\n            max_val = max(lst_copy)\n            result.append(max_val)\n            lst_copy.remove(max_val)\n    \n    return result\n", "completions": ["def strange_sort_list(lst):\n    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n    Ensure that the original list's order is not altered in the process of retrieval.\n    Examples:\n        strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n        strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n        strange_sort_list([]) == []\n    \"\"\"\n    result = []\n    lst_copy = lst[:]\n    \n    while lst_copy:\n        min_val = min(lst_copy)\n        result.append(min_val)\n        lst_copy.remove(min_val)\n        \n        if lst_copy:\n            max_val = max(lst_copy)\n            result.append(max_val)\n            lst_copy.remove(max_val)\n    \n    return result\n", "def strange_sort_list(lst):\n    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n    Ensure that the original list's order is not altered in the process of retrieval.\n    Examples:\n        strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n        strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n        strange_sort_list([]) == []\n    \"\"\"\n    result = []\n    lst_copy = lst[:]\n    \n    while lst_copy:\n        min_val = min(lst_copy)\n        result.append(min_val)\n        lst_copy.remove(min_val)\n        \n        if lst_copy:\n            max_val = max(lst_copy)\n            result.append(max_val)\n            lst_copy.remove(max_val)\n    \n    return result\n", "def strange_sort_list(lst):\n    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n    Ensure that the original list's order is not altered in the process of retrieval.\n    Examples:\n        strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n        strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n        strange_sort_list([]) == []\n    \"\"\"\n    # Create a copy of the input list to preserve the original order\n    lst_copy = lst[:]\n    result = []\n\n    # While the copied list is not empty, perform the following steps\n    while lst_copy:\n        # Find the minimum value in the list, append it to the result, and remove it from the list\n        min_value = min(lst_copy)\n        result.append(min_value)\n        lst_copy.remove(min_value)\n\n        # If the list is not empty, find the maximum value, append it to the result, and remove it from the list\n        if lst_copy:\n            max_value = max(lst_copy)\n            result.append(max_value)\n            lst_copy.remove(max_value)\n\n    return result\n", "def strange_sort_list(lst):\n    result = []\n    lst_copy = lst[:]\n    \n    while lst_copy:\n        min_val = min(lst_copy)\n        result.append(min_val)\n        lst_copy.remove(min_val)\n        \n        if lst_copy:\n            max_val = max(lst_copy)\n            result.append(max_val)\n            lst_copy.remove(max_val)\n    \n    return result\n", "def strange_sort_list(lst):\n    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n    Ensure that the original list's order is not altered in the process of retrieval.\n    Examples:\n        strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n        strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n        strange_sort_list([]) == []\n    \"\"\"\n    lst_copy = lst[:]\n    result = []\n    \n    while lst_copy:\n        min_val = min(lst_copy)\n        result.append(min_val)\n        lst_copy.remove(min_val)\n        \n        if lst_copy:\n            max_val = max(lst_copy)\n            result.append(max_val)\n            lst_copy.remove(max_val)\n    \n    return result\n", "def strange_sort_list(lst):\n    result = []\n    temp_lst = lst[:]\n    \n    while temp_lst:\n        min_val = min(temp_lst)\n        result.append(min_val)\n        temp_lst.remove(min_val)\n        \n        if temp_lst:\n            max_val = max(temp_lst)\n            result.append(max_val)\n            temp_lst.remove(max_val)\n    \n    return result\n", "def strange_sort_list(lst):\n    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n    Ensure that the original list's order is not altered in the process of retrieval.\n    Examples:\n        strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n        strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n        strange_sort_list([]) == []\n    \"\"\"\n    result = []\n    lst_copy = lst[:]\n    \n    while lst_copy:\n        min_val = min(lst_copy)\n        result.append(min_val)\n        lst_copy.remove(min_val)\n        \n        if lst_copy:\n            max_val = max(lst_copy)\n            result.append(max_val)\n            lst_copy.remove(max_val)\n    \n    return result\n", "def strange_sort_list(lst):\n    result = []\n    while lst:\n        min_val = min(lst)\n        result.append(min_val)\n        lst.remove(min_val)\n        if lst:\n            max_val = max(lst)\n            result.append(max_val)\n            lst.remove(max_val)\n    return result\n", "def strange_sort_list(lst):\n    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n    Ensure that the original list's order is not altered in the process of retrieval.\n    Examples:\n        strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n        strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n        strange_sort_list([]) == []\n    \"\"\"\n    result = []\n    lst_copy = lst[:]\n    \n    while lst_copy:\n        min_val = min(lst_copy)\n        result.append(min_val)\n        lst_copy.remove(min_val)\n        \n        if lst_copy:\n            max_val = max(lst_copy)\n            result.append(max_val)\n            lst_copy.remove(max_val)\n    \n    return result\n", "def strange_sort_list(lst):\n    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n    Ensure that the original list's order is not altered in the process of retrieval.\n    Examples:\n        strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n        strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n        strange_sort_list([]) == []\n    \"\"\"\n    result = []\n    lst_copy = lst[:]\n    \n    while lst_copy:\n        min_val = min(lst_copy)\n        result.append(min_val)\n        lst_copy.remove(min_val)\n        \n        if lst_copy:\n            max_val = max(lst_copy)\n            result.append(max_val)\n            lst_copy.remove(max_val)\n    \n    return result\n"], "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Identify the minimum and maximum values in the list.\",\n      \"details\": \"Determine how to find the minimum and maximum values from a list of integers.\"\n    },\n    {\n      \"description\": \"Alternate between selecting the minimum and maximum values.\",\n      \"details\": \"Create a mechanism to alternate between selecting the minimum and maximum values from the remaining integers in the list.\"\n    },\n    {\n      \"description\": \"Ensure the original list's order is not altered.\",\n      \"details\": \"Implement a method to retrieve values without modifying the original list's order.\"\n    },\n    {\n      \"description\": \"Handle edge cases.\",\n      \"details\": \"Consider scenarios such as an empty list or a list with identical elements.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Initialize an empty list to store the result.\",\n    \"While the original list is not empty, perform the following steps:\",\n    \"Find the minimum value in the list and append it to the result list.\",\n    \"Remove the minimum value from the list.\",\n    \"If the list is not empty, find the maximum value in the list and append it to the result list.\",\n    \"Remove the maximum value from the list.\",\n    \"Repeat the process until all elements are processed.\",\n    \"Return the result list.\"\n  ]\n}\n```", "Round_0": {"code": "def strange_sort_list(lst):\n    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n    Ensure that the original list's order is not altered in the process of retrieval.\n    Examples:\n        strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n        strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n        strange_sort_list([]) == []\n    \"\"\"\n    result = []\n    lst_copy = lst[:]\n    \n    while lst_copy:\n        min_val = min(lst_copy)\n        result.append(min_val)\n        lst_copy.remove(min_val)\n        \n        if lst_copy:\n            max_val = max(lst_copy)\n            result.append(max_val)\n            lst_copy.remove(max_val)\n    \n    return result\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, "session_historys": [{"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Identify the minimum and maximum values in the list.\",\n      \"details\": \"Determine how to find the minimum and maximum values from a list of integers.\"\n    },\n    {\n      \"description\": \"Alternate between selecting the minimum and maximum values.\",\n      \"details\": \"Create a mechanism to alternate between selecting the minimum and maximum values from the remaining integers in the list.\"\n    },\n    {\n      \"description\": \"Ensure the original list's order is not altered.\",\n      \"details\": \"Implement a method to retrieve values without modifying the original list's order.\"\n    },\n    {\n      \"description\": \"Handle edge cases.\",\n      \"details\": \"Consider scenarios such as an empty list or a list with identical elements.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Initialize an empty list to store the result.\",\n    \"While the original list is not empty, perform the following steps:\",\n    \"Find the minimum value in the list and append it to the result list.\",\n    \"Remove the minimum value from the list.\",\n    \"If the list is not empty, find the maximum value in the list and append it to the result list.\",\n    \"Remove the maximum value from the list.\",\n    \"Repeat the process until all elements are processed.\",\n    \"Return the result list.\"\n  ]\n}\n```", "Round_0": {"code": "def strange_sort_list(lst):\n    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n    Ensure that the original list's order is not altered in the process of retrieval.\n    Examples:\n        strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n        strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n        strange_sort_list([]) == []\n    \"\"\"\n    result = []\n    lst_copy = lst[:]\n    \n    while lst_copy:\n        min_val = min(lst_copy)\n        result.append(min_val)\n        lst_copy.remove(min_val)\n        \n        if lst_copy:\n            max_val = max(lst_copy)\n            result.append(max_val)\n            lst_copy.remove(max_val)\n    \n    return result\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Identify the minimum and maximum values in the list.\",\n      \"details\": \"Determine how to find the minimum and maximum values from a list of integers.\"\n    },\n    {\n      \"description\": \"Alternate between selecting the minimum and maximum values.\",\n      \"details\": \"Create a mechanism to alternate between selecting the minimum and maximum values from the remaining integers in the list.\"\n    },\n    {\n      \"description\": \"Ensure the original list's order is not altered.\",\n      \"details\": \"Implement a method to retrieve values without modifying the original list's order.\"\n    },\n    {\n      \"description\": \"Handle edge cases.\",\n      \"details\": \"Consider scenarios such as an empty list or a list with identical elements.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Initialize an empty list to store the result.\",\n    \"While the original list is not empty, perform the following steps:\",\n    \"Find the minimum value in the list and append it to the result list.\",\n    \"Remove the minimum value from the list.\",\n    \"If the list is not empty, find the maximum value in the list and append it to the result list.\",\n    \"Remove the maximum value from the list.\",\n    \"Repeat the process until all elements are processed.\",\n    \"Return the result list.\"\n  ]\n}\n```", "Round_0": {"code": "def strange_sort_list(lst):\n    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n    Ensure that the original list's order is not altered in the process of retrieval.\n    Examples:\n        strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n        strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n        strange_sort_list([]) == []\n    \"\"\"\n    result = []\n    lst_copy = lst[:]\n    \n    while lst_copy:\n        min_val = min(lst_copy)\n        result.append(min_val)\n        lst_copy.remove(min_val)\n        \n        if lst_copy:\n            max_val = max(lst_copy)\n            result.append(max_val)\n            lst_copy.remove(max_val)\n    \n    return result\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Identify the minimum and maximum values in the list.\",\n      \"details\": \"Iterate through the list to find the minimum and maximum values.\"\n    },\n    {\n      \"description\": \"Alternate between selecting the minimum and maximum values from the remaining list.\",\n      \"details\": \"After selecting a value, remove it from the list and repeat the process until the list is empty.\"\n    },\n    {\n      \"description\": \"Ensure the original list's order is not altered.\",\n      \"details\": \"Work with a copy of the list to preserve the original order.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Create a copy of the input list to preserve the original order.\",\n    \"Initialize an empty list to store the result.\",\n    \"While the copied list is not empty, perform the following steps:\",\n    \"  a. Find the minimum value in the list, append it to the result, and remove it from the list.\",\n    \"  b. If the list is not empty, find the maximum value, append it to the result, and remove it from the list.\",\n    \"Return the result list.\"\n  ]\n}\n```", "Round_0": {"code": "def strange_sort_list(lst):\n    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n    Ensure that the original list's order is not altered in the process of retrieval.\n    Examples:\n        strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n        strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n        strange_sort_list([]) == []\n    \"\"\"\n    # Create a copy of the input list to preserve the original order\n    lst_copy = lst[:]\n    result = []\n\n    # While the copied list is not empty, perform the following steps\n    while lst_copy:\n        # Find the minimum value in the list, append it to the result, and remove it from the list\n        min_value = min(lst_copy)\n        result.append(min_value)\n        lst_copy.remove(min_value)\n\n        # If the list is not empty, find the maximum value, append it to the result, and remove it from the list\n        if lst_copy:\n            max_value = max(lst_copy)\n            result.append(max_value)\n            lst_copy.remove(max_value)\n\n    return result\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Identify the minimum and maximum values in the list.\",\n      \"details\": \"Determine how to find the minimum and maximum values from a list of integers.\"\n    },\n    {\n      \"description\": \"Alternate between selecting the minimum and maximum values.\",\n      \"details\": \"Create a mechanism to alternate between selecting the minimum and maximum values from the remaining integers in the list.\"\n    },\n    {\n      \"description\": \"Ensure the original list's order is not altered.\",\n      \"details\": \"Implement a method to retrieve values without modifying the original list's order.\"\n    },\n    {\n      \"description\": \"Handle edge cases.\",\n      \"details\": \"Consider scenarios such as an empty list or a list with identical elements.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Initialize an empty list to store the result.\",\n    \"While the original list is not empty, perform the following steps:\",\n    \"  - Find the minimum value in the list and append it to the result list.\",\n    \"  - Remove the minimum value from the list.\",\n    \"  - If the list is not empty, find the maximum value in the list and append it to the result list.\",\n    \"  - Remove the maximum value from the list.\",\n    \"Return the result list.\"\n  ]\n}\n```", "Round_0": {"code": "def strange_sort_list(lst):\n    result = []\n    lst_copy = lst[:]\n    \n    while lst_copy:\n        min_val = min(lst_copy)\n        result.append(min_val)\n        lst_copy.remove(min_val)\n        \n        if lst_copy:\n            max_val = max(lst_copy)\n            result.append(max_val)\n            lst_copy.remove(max_val)\n    \n    return result\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Identify the minimum and maximum values in the list.\",\n      \"details\": \"Iterate through the list to find the minimum and maximum values.\"\n    },\n    {\n      \"description\": \"Alternate between selecting the minimum and maximum values from the remaining list.\",\n      \"details\": \"After selecting a value, remove it from the list and repeat the process with the remaining elements.\"\n    },\n    {\n      \"description\": \"Ensure the original list's order is not altered during the process.\",\n      \"details\": \"Work with a copy of the list to preserve the original order.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Create a copy of the input list to preserve the original order.\",\n    \"Initialize an empty list to store the result.\",\n    \"While the copied list is not empty, perform the following steps:\",\n    \"  a. Find the minimum value in the list, append it to the result, and remove it from the list.\",\n    \"  b. If the list is not empty, find the maximum value in the list, append it to the result, and remove it from the list.\",\n    \"Return the result list.\"\n  ]\n}\n```", "Round_0": {"code": "def strange_sort_list(lst):\n    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n    Ensure that the original list's order is not altered in the process of retrieval.\n    Examples:\n        strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n        strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n        strange_sort_list([]) == []\n    \"\"\"\n    lst_copy = lst[:]\n    result = []\n    \n    while lst_copy:\n        min_val = min(lst_copy)\n        result.append(min_val)\n        lst_copy.remove(min_val)\n        \n        if lst_copy:\n            max_val = max(lst_copy)\n            result.append(max_val)\n            lst_copy.remove(max_val)\n    \n    return result\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Identify the minimum and maximum values in the list.\",\n      \"details\": \"Determine how to find the minimum and maximum values from a list of integers.\"\n    },\n    {\n      \"description\": \"Alternate between selecting the minimum and maximum values.\",\n      \"details\": \"Create a mechanism to alternate between selecting the minimum and maximum values from the remaining integers in the list.\"\n    },\n    {\n      \"description\": \"Ensure the original list's order is not altered.\",\n      \"details\": \"Implement a method to retrieve values without modifying the original list's order.\"\n    },\n    {\n      \"description\": \"Handle edge cases.\",\n      \"details\": \"Consider scenarios such as an empty list or a list with identical elements.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Initialize an empty list to store the result.\",\n    \"While the original list is not empty, perform the following steps:\",\n    \"Find the minimum value in the list and append it to the result list.\",\n    \"Remove the minimum value from the list.\",\n    \"If the list is not empty, find the maximum value in the list and append it to the result list.\",\n    \"Remove the maximum value from the list.\",\n    \"Repeat the process until all elements are transferred to the result list.\",\n    \"Return the result list.\"\n  ]\n}\n```", "Round_0": {"code": "def strange_sort_list(lst):\n    result = []\n    temp_lst = lst[:]\n    \n    while temp_lst:\n        min_val = min(temp_lst)\n        result.append(min_val)\n        temp_lst.remove(min_val)\n        \n        if temp_lst:\n            max_val = max(temp_lst)\n            result.append(max_val)\n            temp_lst.remove(max_val)\n    \n    return result\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Identify the minimum and maximum values in the list.\",\n      \"details\": \"Determine how to find the minimum and maximum values from a list of integers.\"\n    },\n    {\n      \"description\": \"Alternate between selecting the minimum and maximum values.\",\n      \"details\": \"Create a mechanism to alternate between selecting the minimum and maximum values from the remaining integers in the list.\"\n    },\n    {\n      \"description\": \"Ensure the original list's order is not altered.\",\n      \"details\": \"Implement a method to retrieve values without modifying the original list's order.\"\n    },\n    {\n      \"description\": \"Handle edge cases.\",\n      \"details\": \"Consider scenarios such as an empty list or a list with identical elements.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Initialize an empty list to store the result.\",\n    \"While the original list is not empty, perform the following steps:\",\n    \"  - Find the minimum value in the list and append it to the result list.\",\n    \"  - Remove the minimum value from the list.\",\n    \"  - If the list is not empty, find the maximum value in the list and append it to the result list.\",\n    \"  - Remove the maximum value from the list.\",\n    \"Return the result list.\"\n  ]\n}\n```", "Round_0": {"code": "def strange_sort_list(lst):\n    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n    Ensure that the original list's order is not altered in the process of retrieval.\n    Examples:\n        strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n        strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n        strange_sort_list([]) == []\n    \"\"\"\n    result = []\n    lst_copy = lst[:]\n    \n    while lst_copy:\n        min_val = min(lst_copy)\n        result.append(min_val)\n        lst_copy.remove(min_val)\n        \n        if lst_copy:\n            max_val = max(lst_copy)\n            result.append(max_val)\n            lst_copy.remove(max_val)\n    \n    return result\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Identify the minimum and maximum values in the list.\",\n      \"details\": \"Determine how to find the minimum and maximum values from a list of integers.\"\n    },\n    {\n      \"description\": \"Alternate between selecting the minimum and maximum values.\",\n      \"details\": \"Create a mechanism to switch between selecting the minimum and maximum values from the remaining integers.\"\n    },\n    {\n      \"description\": \"Ensure the original list's order is not altered.\",\n      \"details\": \"Implement a method to retrieve values without modifying the original list's order.\"\n    },\n    {\n      \"description\": \"Handle edge cases.\",\n      \"details\": \"Consider scenarios such as an empty list or a list with identical elements.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Initialize an empty list to store the result.\",\n    \"While the input list is not empty, perform the following steps:\",\n    \"  - Find and append the minimum value from the list to the result list.\",\n    \"  - Remove the selected minimum value from the list.\",\n    \"  - If the list is not empty, find and append the maximum value from the list to the result list.\",\n    \"  - Remove the selected maximum value from the list.\",\n    \"Return the result list.\"\n  ]\n}\n```", "Round_0": {"code": "def strange_sort_list(lst):\n    result = []\n    while lst:\n        min_val = min(lst)\n        result.append(min_val)\n        lst.remove(min_val)\n        if lst:\n            max_val = max(lst)\n            result.append(max_val)\n            lst.remove(max_val)\n    return result\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Identify the minimum and maximum values in the list.\",\n      \"details\": \"Determine how to find the minimum and maximum values from a list of integers.\"\n    },\n    {\n      \"description\": \"Alternate between selecting the minimum and maximum values.\",\n      \"details\": \"Create a mechanism to switch between selecting the minimum and maximum values from the remaining integers.\"\n    },\n    {\n      \"description\": \"Ensure the original list's order is not altered.\",\n      \"details\": \"Implement a method to retrieve values without modifying the original list.\"\n    },\n    {\n      \"description\": \"Handle edge cases such as empty lists or lists with identical elements.\",\n      \"details\": \"Consider scenarios where the list is empty or all elements are the same.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Initialize an empty list to store the result.\",\n    \"While the original list is not empty, perform the following steps:\",\n    \"Find the minimum value from the list and append it to the result list.\",\n    \"Remove the minimum value from the list.\",\n    \"If the list is not empty, find the maximum value from the list and append it to the result list.\",\n    \"Remove the maximum value from the list.\",\n    \"Repeat the process until all elements are transferred to the result list.\",\n    \"Return the result list.\"\n  ]\n}\n```", "Round_0": {"code": "def strange_sort_list(lst):\n    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n    Ensure that the original list's order is not altered in the process of retrieval.\n    Examples:\n        strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n        strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n        strange_sort_list([]) == []\n    \"\"\"\n    result = []\n    lst_copy = lst[:]\n    \n    while lst_copy:\n        min_val = min(lst_copy)\n        result.append(min_val)\n        lst_copy.remove(min_val)\n        \n        if lst_copy:\n            max_val = max(lst_copy)\n            result.append(max_val)\n            lst_copy.remove(max_val)\n    \n    return result\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Identify the minimum and maximum values in the list.\",\n      \"details\": \"Determine how to find the minimum and maximum values from a list of integers.\"\n    },\n    {\n      \"description\": \"Alternate between selecting the minimum and maximum values.\",\n      \"details\": \"Create a mechanism to alternate between selecting the minimum and maximum values from the remaining integers in the list.\"\n    },\n    {\n      \"description\": \"Ensure the original list's order is not altered.\",\n      \"details\": \"Implement a method to retrieve values without modifying the original list's order.\"\n    },\n    {\n      \"description\": \"Handle edge cases.\",\n      \"details\": \"Consider scenarios such as an empty list or a list with identical elements.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Initialize an empty list to store the result.\",\n    \"While the original list is not empty, perform the following steps:\",\n    \"Find the minimum value in the list and append it to the result list.\",\n    \"Remove the minimum value from the list.\",\n    \"If the list is not empty, find the maximum value in the list and append it to the result list.\",\n    \"Remove the maximum value from the list.\",\n    \"Repeat the process until all elements are processed.\",\n    \"Return the result list.\"\n  ]\n}\n```", "Round_0": {"code": "def strange_sort_list(lst):\n    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n    Ensure that the original list's order is not altered in the process of retrieval.\n    Examples:\n        strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n        strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n        strange_sort_list([]) == []\n    \"\"\"\n    result = []\n    lst_copy = lst[:]\n    \n    while lst_copy:\n        min_val = min(lst_copy)\n        result.append(min_val)\n        lst_copy.remove(min_val)\n        \n        if lst_copy:\n            max_val = max(lst_copy)\n            result.append(max_val)\n            lst_copy.remove(max_val)\n    \n    return result\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [107, 107, 107, 107, 107, 107, 107, 107, 107, 107], "passed": true, "pass": true, "pass_num": 10, "round": 499, "mutate_method": "add_1_sentence_at_end", "save_node": false, "parent_index": 307}
