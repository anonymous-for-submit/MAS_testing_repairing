{"task_id": "HumanEval/56", "prompt": "def correct_bracketing(brackets: str):\t\n'''brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    The brackets must be properly nested and closed in the correct order.\n>>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    '''", "entry_point": "correct_bracketing", "canonical_solution": "    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n", "test": ["def check(correct_bracketing):\n\tassert correct_bracketing(\"<\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<>\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<><>>>><<\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<>>>>>\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<>>><<<\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\">><<>>>><<>>>>\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\">>>>><<\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<<><>><<><>>\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\">><>><>\") == False", "def check(correct_bracketing):\n\tassert not correct_bracketing(\">\")", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<<><>><<><>><>\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<><><<<><><>><>><<><><<>>>\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<><><>\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\"><<<><<<\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<><><><<><>><>\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<<<<<><>\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<><><<><>><><><><<><>><><><><<><>><>\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<>><>\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"><<<>>>>>>>><<><<\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\">>>><<><<<\") == False", "def check(correct_bracketing):\n\tassert not correct_bracketing(\"><<>\")", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<><<><>>\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\">\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<<<>\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\">><<<\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"><<><><>\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<><>>>>><><>>><\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<<><>><<><>><><><<<><><>><>><<><><<>>>\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\">>>\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<>><<><<><><><>><>>\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\">><<<>><<<<><\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\">>>><<<<\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<<<<>><<>\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<>\")", "def check(correct_bracketing):\n\tassert correct_bracketing(\">>>><<<>><><><>><<><\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<><>\") == True", "def check(correct_bracketing):\n\tassert not correct_bracketing(\"<\")", "def check(correct_bracketing):\n\tassert correct_bracketing(\"\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\"><<<>><>\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<>>><>\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<<<>><>><\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"><><>>\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<>>><>>>>>><><<\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<>>><<<>>>>>><><>><>\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<><><<<><><>><>><<><><<>>>\")", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<><<><>><><><<<><><>><>><<><><<>>>\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<<<\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\">>><><><<<>><\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<<><>><><><<<><><>><>><<><><<>>>\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<<><>>\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<><><<><>><><><><<><>><>\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<><><<><>><>\")", "def check(correct_bracketing):\n\tassert correct_bracketing(\"><<<><\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<><><<>>>><<<<<>\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\">><<><>>><><\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\">>><>>><\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"><><<><\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"><>>><<\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<><><<><>><>\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\"><<\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<<><>>\")", "def check(correct_bracketing):\n\tassert correct_bracketing(\">><>><><\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"><>><\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\">><\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<><><<><>><><<><>>\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\">>><<<>><><<<>>><><\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<<><>><><><<<><><>><>><<><><<>>><><><<><>><>\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<<<>>\") == False", "def check(correct_bracketing):\n\tassert not correct_bracketing(\"<><><<><>><>><<>\")", "def check(correct_bracketing):\n\tassert not correct_bracketing(\"<<<<\")", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<<><>><>\") == True", "def check(correct_bracketing):\n\tassert not correct_bracketing(\"<<>\")", "def check(correct_bracketing):\n\tassert correct_bracketing(\"><<><>>\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"><>>><<>>><<<\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<<><>><<><>><><><<><>><>\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<>><<><\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<<><\") == False", "def check(correct_bracketing):\n\tassert not correct_bracketing(\"<><><<><>><>>><>\")", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<>><<<<><><>><>\") == False", "def check(correct_bracketing):\n\tassert not correct_bracketing(\"<<<><>>>>\")", "def check(correct_bracketing):\n\tassert correct_bracketing(\">>>><><<<>>\") == False"], "test_case_list": ["assert correct_bracketing(\"<\") == False", "assert correct_bracketing(\"<>\") == True", "assert correct_bracketing(\"<><>>>><<\") == False", "assert correct_bracketing(\"<>>>>>\") == False", "assert correct_bracketing(\"<>>><<<\") == False", "assert correct_bracketing(\">><<>>>><<>>>>\") == False", "assert correct_bracketing(\">>>>><<\") == False", "assert correct_bracketing(\"<<><>><<><>>\") == True", "assert correct_bracketing(\">><>><>\") == False", "assert not correct_bracketing(\">\")", "assert correct_bracketing(\"<<><>><<><>><>\") == True", "assert correct_bracketing(\"<><><<<><><>><>><<><><<>>>\") == True", "assert correct_bracketing(\"<><><>\") == True", "assert correct_bracketing(\"><<<><<<\") == False", "assert correct_bracketing(\"<><><><<><>><>\") == True", "assert correct_bracketing(\"<<<<<><>\") == False", "assert correct_bracketing(\"<><><<><>><><><><<><>><><><><<><>><>\") == True", "assert correct_bracketing(\"<>><>\") == False", "assert correct_bracketing(\"><<<>>>>>>>><<><<\") == False", "assert correct_bracketing(\">>>><<><<<\") == False", "assert not correct_bracketing(\"><<>\")", "assert correct_bracketing(\"<><<><>>\") == True", "assert correct_bracketing(\">\") == False", "assert correct_bracketing(\"<<<>\") == False", "assert correct_bracketing(\">><<<\") == False", "assert correct_bracketing(\"><<><><>\") == False", "assert correct_bracketing(\"<><>>>>><><>>><\") == False", "assert correct_bracketing(\"<<><>><<><>><><><<<><><>><>><<><><<>>>\") == True", "assert correct_bracketing(\">>>\") == False", "assert correct_bracketing(\"<>><<><<><><><>><>>\") == False", "assert correct_bracketing(\">><<<>><<<<><\") == False", "assert correct_bracketing(\">>>><<<<\") == False", "assert correct_bracketing(\"<<<<>><<>\") == False", "assert correct_bracketing(\"<>\")", "assert correct_bracketing(\">>>><<<>><><><>><<><\") == False", "assert correct_bracketing(\"<><>\") == True", "assert not correct_bracketing(\"<\")", "assert correct_bracketing(\"\") == True", "assert correct_bracketing(\"><<<>><>\") == False", "assert correct_bracketing(\"<>>><>\") == False", "assert correct_bracketing(\"<<<>><>><\") == False", "assert correct_bracketing(\"><><>>\") == False", "assert correct_bracketing(\"<>>><>>>>>><><<\") == False", "assert correct_bracketing(\"<>>><<<>>>>>><><>><>\") == False", "assert correct_bracketing(\"<><><<<><><>><>><<><><<>>>\")", "assert correct_bracketing(\"<><<><>><><><<<><><>><>><<><><<>>>\") == True", "assert correct_bracketing(\"<<<\") == False", "assert correct_bracketing(\">>><><><<<>><\") == False", "assert correct_bracketing(\"<<><>><><><<<><><>><>><<><><<>>>\") == True", "assert correct_bracketing(\"<<><>>\") == True", "assert correct_bracketing(\"<><><<><>><><><><<><>><>\") == True", "assert correct_bracketing(\"<><><<><>><>\")", "assert correct_bracketing(\"><<<><\") == False", "assert correct_bracketing(\"<><><<>>>><<<<<>\") == False", "assert correct_bracketing(\">><<><>>><><\") == False", "assert correct_bracketing(\">>><>>><\") == False", "assert correct_bracketing(\"><><<><\") == False", "assert correct_bracketing(\"><>>><<\") == False", "assert correct_bracketing(\"<><><<><>><>\") == True", "assert correct_bracketing(\"><<\") == False", "assert correct_bracketing(\"<<><>>\")", "assert correct_bracketing(\">><>><><\") == False", "assert correct_bracketing(\"><>><\") == False", "assert correct_bracketing(\">><\") == False", "assert correct_bracketing(\"<><><<><>><><<><>>\") == True", "assert correct_bracketing(\">>><<<>><><<<>>><><\") == False", "assert correct_bracketing(\"<<><>><><><<<><><>><>><<><><<>>><><><<><>><>\") == True", "assert correct_bracketing(\"<<<>>\") == False", "assert not correct_bracketing(\"<><><<><>><>><<>\")", "assert not correct_bracketing(\"<<<<\")", "assert correct_bracketing(\"<<><>><>\") == True", "assert not correct_bracketing(\"<<>\")", "assert correct_bracketing(\"><<><>>\") == False", "assert correct_bracketing(\"><>>><<>>><<<\") == False", "assert correct_bracketing(\"<<><>><<><>><><><<><>><>\") == True", "assert correct_bracketing(\"<>><<><\") == False", "assert correct_bracketing(\"<<><\") == False", "assert not correct_bracketing(\"<><><<><>><>>><>\")", "assert correct_bracketing(\"<>><<<<><><>><>\") == False", "assert not correct_bracketing(\"<<<><>>>>\")", "assert correct_bracketing(\">>>><><<<>>\") == False"], "nl": " brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    ", "func": "def correct_bracketing(brackets: str):", "examples": ">>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    ", "completion": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\"\n    brackets is a string of \"<\" and \">\".\n    Return True if every opening bracket has a corresponding closing bracket.\n    The brackets must be properly nested and closed in the correct order.\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    if not brackets:\n        return True\n\n    counter = 0\n    for char in brackets:\n        if char == '<':\n            counter += 1\n        elif char == '>':\n            counter -= 1\n        if counter < 0:\n            return False\n\n    return counter == 0\n", "completions": ["def correct_bracketing(brackets: str) -> bool:\n    counter = 0\n    for char in brackets:\n        if char == '<':\n            counter += 1\n        elif char == '>':\n            counter -= 1\n        if counter < 0:\n            return False\n    return counter == 0\n", "def correct_bracketing(brackets: str) -> bool:\n    counter = 0\n    for char in brackets:\n        if char == '<':\n            counter += 1\n        elif char == '>':\n            counter -= 1\n        if counter < 0:\n            return False\n    return counter == 0\n", "def correct_bracketing(brackets: str) -> bool:\n    # Validate input to ensure it only contains '<' and '>'\n    if not all(c in '<>' for c in brackets):\n        raise ValueError(\"Input string can only contain '<' and '>' characters.\")\n    \n    # Initialize a counter to track the balance of opening and closing brackets\n    counter = 0\n    \n    # Iterate through each character in the string\n    for char in brackets:\n        if char == '<':\n            counter += 1\n        elif char == '>':\n            counter -= 1\n        \n        # Check if the counter becomes negative, indicating an unmatched closing bracket\n        if counter < 0:\n            return False\n    \n    # Check if the counter is zero after iteration\n    return counter == 0\n", "def correct_bracketing(brackets: str) -> bool:\n    counter = 0\n    for char in brackets:\n        if char == '<':\n            counter += 1\n        elif char == '>':\n            counter -= 1\n        if counter < 0:\n            return False\n    return counter == 0\n", "def correct_bracketing(brackets: str) -> bool:\n    \"\"\"\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    The brackets must be properly nested and closed in the correct order.\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    if not brackets:\n        return True\n\n    counter = 0\n\n    for char in brackets:\n        if char == '<':\n            counter += 1\n        elif char == '>':\n            counter -= 1\n\n        if counter < 0:\n            return False\n\n    return counter == 0\n", "def correct_bracketing(brackets: str) -> bool:\n    counter = 0\n    for char in brackets:\n        if char == '<':\n            counter += 1\n        elif char == '>':\n            counter -= 1\n        if counter < 0:\n            return False\n    return counter == 0\n", "def correct_bracketing(brackets: str) -> bool:\n    \"\"\"\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    The brackets must be properly nested and closed in the correct order.\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    # Check if the input string is empty\n    if not brackets:\n        return True\n    \n    # Initialize a counter\n    counter = 0\n    \n    # Iterate through each character in the string\n    for char in brackets:\n        # Process opening brackets\n        if char == '<':\n            counter += 1\n        # Process closing brackets\n        elif char == '>':\n            counter -= 1\n            if counter < 0:\n                return False\n    \n    # Check final counter value\n    return counter == 0\n", "def correct_bracketing(brackets: str) -> bool:\n    counter = 0\n    for char in brackets:\n        if char == '<':\n            counter += 1\n        elif char == '>':\n            counter -= 1\n        if counter < 0:\n            return False\n    return counter == 0\n", "def correct_bracketing(brackets: str) -> bool:\n    # Validate the input to ensure it only contains '<' and '>' characters\n    if any(char not in '<>' for char in brackets):\n        raise ValueError(\"Input string can only contain '<' and '>' characters.\")\n    \n    # Initialize a counter to track the balance of opening and closing brackets\n    counter = 0\n    \n    # Iterate through each character in the string\n    for char in brackets:\n        if char == '<':\n            counter += 1\n        elif char == '>':\n            counter -= 1\n        \n        # Check if the counter becomes negative, indicating an unmatched closing bracket\n        if counter < 0:\n            return False\n    \n    # Check if the counter is zero, indicating all brackets are properly matched and nested\n    return counter == 0\n", "def correct_bracketing(brackets: str) -> bool:\n    \"\"\"\n    brackets is a string of \"<\" and \">\".\n    Return True if every opening bracket has a corresponding closing bracket.\n    The brackets must be properly nested and closed in the correct order.\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    if not brackets:\n        return True\n\n    counter = 0\n    for char in brackets:\n        if char == '<':\n            counter += 1\n        elif char == '>':\n            counter -= 1\n        if counter < 0:\n            return False\n\n    return counter == 0\n"], "session_history": {"plan": "```json\n{\n  \"decomposed_subproblems\": [\n    \"Check if the input string is empty. If it is, return True as there are no brackets to match.\",\n    \"Initialize a counter to keep track of the number of unmatched opening brackets.\",\n    \"Iterate through each character in the string:\",\n    \"If the character is an opening bracket '<', increment the counter.\",\n    \"If the character is a closing bracket '>', decrement the counter.\",\n    \"If the counter becomes negative at any point, return False as there is a closing bracket without a matching opening bracket.\",\n    \"After iterating through the string, check if the counter is zero. If it is, return True as all opening brackets have matching closing brackets.\",\n    \"If the counter is not zero, return False as there are unmatched opening brackets.\"\n  ],\n  \"high_level_plan\": [\n    \"Define the function correct_bracketing with a parameter brackets.\",\n    \"Check if the input string is empty and return True if it is.\",\n    \"Initialize a counter to zero.\",\n    \"Loop through each character in the input string:\",\n    \"Update the counter based on whether the character is '<' or '>'.\",\n    \"Check if the counter becomes negative during iteration and return False if it does.\",\n    \"After the loop, check if the counter is zero and return True if it is.\",\n    \"Return False if the counter is not zero after the loop.\"\n  ]\n}\n```", "Round_0": {"code": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\"\n    brackets is a string of \"<\" and \">\".\n    Return True if every opening bracket has a corresponding closing bracket.\n    The brackets must be properly nested and closed in the correct order.\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    if not brackets:\n        return True\n\n    counter = 0\n    for char in brackets:\n        if char == '<':\n            counter += 1\n        elif char == '>':\n            counter -= 1\n        if counter < 0:\n            return False\n\n    return counter == 0\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, "session_historys": [{"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Initialize a counter to track the balance of opening and closing brackets.\",\n      \"details\": \"This counter will increase for each '<' and decrease for each '>'.\"\n    },\n    {\n      \"description\": \"Iterate through each character in the input string.\",\n      \"details\": \"For each character, update the counter based on whether it is an opening or closing bracket.\"\n    },\n    {\n      \"description\": \"Check for immediate imbalance during iteration.\",\n      \"details\": \"If the counter becomes negative at any point, return False immediately as it indicates a closing bracket without a matching opening bracket.\"\n    },\n    {\n      \"description\": \"Check the final balance of the counter after iteration.\",\n      \"details\": \"If the counter is zero, return True, indicating all brackets are properly matched and nested. Otherwise, return False.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Initialize a counter to zero.\",\n    \"Loop through each character in the input string:\",\n    \"  - If the character is '<', increment the counter.\",\n    \"  - If the character is '>', decrement the counter.\",\n    \"  - If the counter is negative at any point, return False.\",\n    \"After the loop, check if the counter is zero:\",\n    \"  - If it is zero, return True.\",\n    \"  - Otherwise, return False.\"\n  ]\n}\n```", "Round_0": {"code": "def correct_bracketing(brackets: str) -> bool:\n    counter = 0\n    for char in brackets:\n        if char == '<':\n            counter += 1\n        elif char == '>':\n            counter -= 1\n        if counter < 0:\n            return False\n    return counter == 0\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    \"Identify and initialize a counter to track the balance of opening and closing brackets.\",\n    \"Iterate through each character in the input string.\",\n    \"For each character, determine if it is an opening bracket '<' or a closing bracket '>'.\",\n    \"Adjust the counter: increment for an opening bracket and decrement for a closing bracket.\",\n    \"Check if the counter ever becomes negative during iteration, indicating an unmatched closing bracket.\",\n    \"After iteration, ensure the counter is zero, confirming all brackets are properly matched and nested.\"\n  ],\n  \"high_level_plan\": [\n    \"Initialize a counter to zero.\",\n    \"Loop through each character in the input string:\",\n    \"  - If the character is '<', increment the counter.\",\n    \"  - If the character is '>', decrement the counter.\",\n    \"  - If the counter becomes negative at any point, return False immediately.\",\n    \"After the loop, check if the counter is zero:\",\n    \"  - If it is zero, return True, indicating all brackets are matched and nested correctly.\",\n    \"  - If it is not zero, return False, indicating unmatched opening brackets.\"\n  ]\n}\n```", "Round_0": {"code": "def correct_bracketing(brackets: str) -> bool:\n    counter = 0\n    for char in brackets:\n        if char == '<':\n            counter += 1\n        elif char == '>':\n            counter -= 1\n        if counter < 0:\n            return False\n    return counter == 0\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    \"1. Validate the input to ensure it only contains '<' and '>' characters.\",\n    \"2. Initialize a counter to track the balance of opening and closing brackets.\",\n    \"3. Iterate through each character in the string:\",\n    \"   a. If the character is '<', increment the counter.\",\n    \"   b. If the character is '>', decrement the counter.\",\n    \"4. During iteration, check if the counter becomes negative, indicating an unmatched closing bracket.\",\n    \"5. After iteration, check if the counter is zero, indicating all brackets are properly matched and nested.\"\n  ],\n  \"high_level_plan\": [\n    \"1. Define a function 'correct_bracketing' that takes a string 'brackets' as input.\",\n    \"2. Implement input validation to ensure the string only contains '<' and '>'.\",\n    \"3. Initialize a counter to zero to track the balance of brackets.\",\n    \"4. Loop through each character in the string:\",\n    \"   a. If the character is '<', increment the counter.\",\n    \"   b. If the character is '>', decrement the counter.\",\n    \"   c. If the counter becomes negative at any point, return False immediately.\",\n    \"5. After the loop, check if the counter is zero:\",\n    \"   a. If it is zero, return True, indicating all brackets are matched and nested correctly.\",\n    \"   b. If it is not zero, return False, indicating unmatched brackets.\"\n  ]\n}\n```", "Round_0": {"code": "def correct_bracketing(brackets: str) -> bool:\n    # Validate input to ensure it only contains '<' and '>'\n    if not all(c in '<>' for c in brackets):\n        raise ValueError(\"Input string can only contain '<' and '>' characters.\")\n    \n    # Initialize a counter to track the balance of opening and closing brackets\n    counter = 0\n    \n    # Iterate through each character in the string\n    for char in brackets:\n        if char == '<':\n            counter += 1\n        elif char == '>':\n            counter -= 1\n        \n        # Check if the counter becomes negative, indicating an unmatched closing bracket\n        if counter < 0:\n            return False\n    \n    # Check if the counter is zero after iteration\n    return counter == 0\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Initialize a counter to track the balance of opening and closing brackets.\",\n      \"details\": \"This counter will increase for each '<' and decrease for each '>'.\"\n    },\n    {\n      \"description\": \"Iterate through each character in the string.\",\n      \"details\": \"For each character, update the counter based on whether it is an opening or closing bracket.\"\n    },\n    {\n      \"description\": \"Check for immediate imbalance.\",\n      \"details\": \"If the counter becomes negative at any point during iteration, return False immediately.\"\n    },\n    {\n      \"description\": \"Check final balance.\",\n      \"details\": \"After iterating through the string, ensure the counter is zero to confirm all brackets are properly closed.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Initialize a counter to zero.\",\n    \"Loop through each character in the input string:\",\n    \"  - If the character is '<', increment the counter.\",\n    \"  - If the character is '>', decrement the counter.\",\n    \"  - If the counter is negative at any point, return False.\",\n    \"After the loop, check if the counter is zero.\",\n    \"Return True if the counter is zero, otherwise return False.\"\n  ]\n}\n```", "Round_0": {"code": "def correct_bracketing(brackets: str) -> bool:\n    counter = 0\n    for char in brackets:\n        if char == '<':\n            counter += 1\n        elif char == '>':\n            counter -= 1\n        if counter < 0:\n            return False\n    return counter == 0\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"decomposed_subproblems\": [\n    {\n      \"subproblem\": \"Check if the input string is empty\",\n      \"description\": \"If the string is empty, return True as there are no brackets to match.\"\n    },\n    {\n      \"subproblem\": \"Initialize a counter for open brackets\",\n      \"description\": \"Use a counter to keep track of the number of '<' brackets encountered.\"\n    },\n    {\n      \"subproblem\": \"Iterate through each character in the string\",\n      \"description\": \"Loop through each character to process the brackets.\"\n    },\n    {\n      \"subproblem\": \"Update the counter based on the bracket type\",\n      \"description\": \"Increment the counter for '<' and decrement for '>'.\"\n    },\n    {\n      \"subproblem\": \"Check for negative counter values\",\n      \"description\": \"If the counter becomes negative, return False as it indicates a closing bracket without a matching opening bracket.\"\n    },\n    {\n      \"subproblem\": \"Check the final counter value\",\n      \"description\": \"After processing all characters, return True if the counter is zero, indicating all brackets are properly matched and nested.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Define the function correct_bracketing with a parameter brackets.\",\n    \"Check if the input string is empty and return True if it is.\",\n    \"Initialize a counter to zero to track open brackets.\",\n    \"Iterate through each character in the input string.\",\n    \"For each '<' character, increment the counter.\",\n    \"For each '>' character, decrement the counter.\",\n    \"If the counter becomes negative at any point, return False.\",\n    \"After the loop, check if the counter is zero.\",\n    \"Return True if the counter is zero, otherwise return False.\"\n  ]\n}\n```", "Round_0": {"code": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\"\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    The brackets must be properly nested and closed in the correct order.\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    if not brackets:\n        return True\n\n    counter = 0\n\n    for char in brackets:\n        if char == '<':\n            counter += 1\n        elif char == '>':\n            counter -= 1\n\n        if counter < 0:\n            return False\n\n    return counter == 0\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Initialize a counter to track the balance of opening and closing brackets.\",\n      \"details\": \"This counter will be incremented for each '<' and decremented for each '>'.\"\n    },\n    {\n      \"description\": \"Iterate through each character in the input string.\",\n      \"details\": \"For each character, update the counter based on whether it is an opening or closing bracket.\"\n    },\n    {\n      \"description\": \"Check for immediate imbalance during iteration.\",\n      \"details\": \"If the counter becomes negative at any point, return False immediately as it indicates a closing bracket without a matching opening bracket.\"\n    },\n    {\n      \"description\": \"Check the final balance of the counter after iteration.\",\n      \"details\": \"If the counter is zero, return True, indicating all brackets are properly matched and nested. Otherwise, return False.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Initialize a counter to zero.\",\n    \"Loop through each character in the input string:\",\n    \"  - If the character is '<', increment the counter.\",\n    \"  - If the character is '>', decrement the counter.\",\n    \"  - If the counter is negative at any point, return False.\",\n    \"After the loop, check if the counter is zero:\",\n    \"  - If it is zero, return True.\",\n    \"  - Otherwise, return False.\"\n  ]\n}\n```", "Round_0": {"code": "def correct_bracketing(brackets: str) -> bool:\n    counter = 0\n    for char in brackets:\n        if char == '<':\n            counter += 1\n        elif char == '>':\n            counter -= 1\n        if counter < 0:\n            return False\n    return counter == 0\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"decomposed_subproblems\": [\n    {\n      \"subproblem\": \"Check if the string is empty\",\n      \"description\": \"If the input string is empty, return True as there are no brackets to match.\"\n    },\n    {\n      \"subproblem\": \"Initialize a counter\",\n      \"description\": \"Set up a counter to keep track of the number of unmatched opening brackets.\"\n    },\n    {\n      \"subproblem\": \"Iterate through the string\",\n      \"description\": \"Loop through each character in the string to process the brackets.\"\n    },\n    {\n      \"subproblem\": \"Process opening brackets\",\n      \"description\": \"Increment the counter for each opening bracket '<'.\"\n    },\n    {\n      \"subproblem\": \"Process closing brackets\",\n      \"description\": \"Decrement the counter for each closing bracket '>'. If the counter goes below zero, return False as it indicates a closing bracket without a matching opening bracket.\"\n    },\n    {\n      \"subproblem\": \"Check final counter value\",\n      \"description\": \"After processing all characters, check if the counter is zero. If it is, return True as all brackets are properly matched and nested. Otherwise, return False.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Check if the input string is empty and return True if it is.\",\n    \"Initialize a counter to zero.\",\n    \"Iterate through each character in the string.\",\n    \"For each '<', increment the counter.\",\n    \"For each '>', decrement the counter and check if it goes below zero. If it does, return False.\",\n    \"After the loop, check if the counter is zero. Return True if it is, otherwise return False.\"\n  ]\n}\n```", "Round_0": {"code": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\"\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    The brackets must be properly nested and closed in the correct order.\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    # Check if the input string is empty\n    if not brackets:\n        return True\n    \n    # Initialize a counter\n    counter = 0\n    \n    # Iterate through each character in the string\n    for char in brackets:\n        # Process opening brackets\n        if char == '<':\n            counter += 1\n        # Process closing brackets\n        elif char == '>':\n            counter -= 1\n            if counter < 0:\n                return False\n    \n    # Check final counter value\n    return counter == 0\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Initialize a counter to track the balance of opening and closing brackets.\",\n      \"details\": \"This counter will increase for each '<' and decrease for each '>'.\"\n    },\n    {\n      \"description\": \"Iterate through each character in the string.\",\n      \"details\": \"For each character, update the counter based on whether it is an opening or closing bracket.\"\n    },\n    {\n      \"description\": \"Check for immediate imbalance.\",\n      \"details\": \"If at any point the counter becomes negative, return False immediately as it indicates a closing bracket without a matching opening bracket.\"\n    },\n    {\n      \"description\": \"Check for overall balance after iteration.\",\n      \"details\": \"After processing all characters, ensure the counter is zero, indicating all opening brackets have been properly closed.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Initialize a counter to zero.\",\n    \"Loop through each character in the input string:\",\n    \"  - If the character is '<', increment the counter.\",\n    \"  - If the character is '>', decrement the counter.\",\n    \"  - If the counter becomes negative at any point, return False.\",\n    \"After the loop, check if the counter is zero.\",\n    \"Return True if the counter is zero, otherwise return False.\"\n  ]\n}\n```", "Round_0": {"code": "def correct_bracketing(brackets: str) -> bool:\n    counter = 0\n    for char in brackets:\n        if char == '<':\n            counter += 1\n        elif char == '>':\n            counter -= 1\n        if counter < 0:\n            return False\n    return counter == 0\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    \"1. Validate the input to ensure it only contains '<' and '>' characters.\",\n    \"2. Initialize a counter to track the balance of opening and closing brackets.\",\n    \"3. Iterate through each character in the string:\",\n    \"   a. If the character is '<', increment the counter.\",\n    \"   b. If the character is '>', decrement the counter.\",\n    \"4. During iteration, check if the counter becomes negative, which indicates an unmatched closing bracket.\",\n    \"5. After iteration, check if the counter is zero, which indicates all brackets are properly matched and nested.\"\n  ],\n  \"high_level_plan\": [\n    \"1. Define a function 'correct_bracketing' that takes a string 'brackets' as input.\",\n    \"2. Implement input validation to ensure the string only contains '<' and '>'.\",\n    \"3. Initialize a counter to zero to track the balance of brackets.\",\n    \"4. Loop through each character in the string:\",\n    \"   a. If the character is '<', increment the counter.\",\n    \"   b. If the character is '>', decrement the counter.\",\n    \"   c. If the counter becomes negative at any point, return False immediately.\",\n    \"5. After the loop, check if the counter is zero:\",\n    \"   a. If it is zero, return True indicating all brackets are matched.\",\n    \"   b. If it is not zero, return False indicating unmatched brackets.\"\n  ]\n}\n```", "Round_0": {"code": "def correct_bracketing(brackets: str) -> bool:\n    # Validate the input to ensure it only contains '<' and '>' characters\n    if any(char not in '<>' for char in brackets):\n        raise ValueError(\"Input string can only contain '<' and '>' characters.\")\n    \n    # Initialize a counter to track the balance of opening and closing brackets\n    counter = 0\n    \n    # Iterate through each character in the string\n    for char in brackets:\n        if char == '<':\n            counter += 1\n        elif char == '>':\n            counter -= 1\n        \n        # Check if the counter becomes negative, indicating an unmatched closing bracket\n        if counter < 0:\n            return False\n    \n    # Check if the counter is zero, indicating all brackets are properly matched and nested\n    return counter == 0\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"decomposed_subproblems\": [\n    \"Check if the input string is empty. If it is, return True as there are no brackets to match.\",\n    \"Initialize a counter to keep track of the number of unmatched opening brackets.\",\n    \"Iterate through each character in the string:\",\n    \"If the character is an opening bracket '<', increment the counter.\",\n    \"If the character is a closing bracket '>', decrement the counter.\",\n    \"If the counter becomes negative at any point, return False as there is a closing bracket without a matching opening bracket.\",\n    \"After iterating through the string, check if the counter is zero. If it is, return True as all opening brackets have matching closing brackets.\",\n    \"If the counter is not zero, return False as there are unmatched opening brackets.\"\n  ],\n  \"high_level_plan\": [\n    \"Define the function correct_bracketing with a parameter brackets.\",\n    \"Check if the input string is empty and return True if it is.\",\n    \"Initialize a counter to zero.\",\n    \"Loop through each character in the input string:\",\n    \"Update the counter based on whether the character is '<' or '>'.\",\n    \"Check if the counter becomes negative during iteration and return False if it does.\",\n    \"After the loop, check if the counter is zero and return True if it is.\",\n    \"Return False if the counter is not zero after the loop.\"\n  ]\n}\n```", "Round_0": {"code": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\"\n    brackets is a string of \"<\" and \">\".\n    Return True if every opening bracket has a corresponding closing bracket.\n    The brackets must be properly nested and closed in the correct order.\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    if not brackets:\n        return True\n\n    counter = 0\n    for char in brackets:\n        if char == '<':\n            counter += 1\n        elif char == '>':\n            counter -= 1\n        if counter < 0:\n            return False\n\n    return counter == 0\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [81, 81, 81, 81, 81, 81, 81, 81, 81, 81], "passed": true, "pass": true, "pass_num": 10, "round": 229, "mutate_method": "add_1_sentence_at_end", "save_node": false, "parent_index": 49}
