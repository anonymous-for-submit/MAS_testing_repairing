{"task_id": "HumanEval/56", "prompt": "def correct_bracketing(brackets: str):\t\n'''brackets is a string of \"<\" and \">\". return True if every opening bracket has a corresponding closing bracket. Ensure that the brackets are correctly nested, with no unmatched pairs.\n>>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    '''", "entry_point": "correct_bracketing", "canonical_solution": "    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n", "test": ["def check(correct_bracketing):\n\tassert correct_bracketing(\"<\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<>\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<><>>>><<\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<>>>>>\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<>>><<<\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\">><<>>>><<>>>>\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\">>>>><<\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<<><>><<><>>\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\">><>><>\") == False", "def check(correct_bracketing):\n\tassert not correct_bracketing(\">\")", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<<><>><<><>><>\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<><><<<><><>><>><<><><<>>>\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<><><>\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\"><<<><<<\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<><><><<><>><>\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<<<<<><>\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<><><<><>><><><><<><>><><><><<><>><>\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<>><>\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"><<<>>>>>>>><<><<\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\">>>><<><<<\") == False", "def check(correct_bracketing):\n\tassert not correct_bracketing(\"><<>\")", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<><<><>>\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\">\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<<<>\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\">><<<\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"><<><><>\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<><>>>>><><>>><\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<<><>><<><>><><><<<><><>><>><<><><<>>>\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\">>>\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<>><<><<><><><>><>>\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\">><<<>><<<<><\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\">>>><<<<\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<<<<>><<>\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<>\")", "def check(correct_bracketing):\n\tassert correct_bracketing(\">>>><<<>><><><>><<><\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<><>\") == True", "def check(correct_bracketing):\n\tassert not correct_bracketing(\"<\")", "def check(correct_bracketing):\n\tassert correct_bracketing(\"\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\"><<<>><>\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<>>><>\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<<<>><>><\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"><><>>\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<>>><>>>>>><><<\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<>>><<<>>>>>><><>><>\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<><><<<><><>><>><<><><<>>>\")", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<><<><>><><><<<><><>><>><<><><<>>>\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<<<\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\">>><><><<<>><\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<<><>><><><<<><><>><>><<><><<>>>\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<<><>>\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<><><<><>><><><><<><>><>\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<><><<><>><>\")", "def check(correct_bracketing):\n\tassert correct_bracketing(\"><<<><\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<><><<>>>><<<<<>\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\">><<><>>><><\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\">>><>>><\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"><><<><\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"><>>><<\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<><><<><>><>\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\"><<\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<<><>>\")", "def check(correct_bracketing):\n\tassert correct_bracketing(\">><>><><\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"><>><\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\">><\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<><><<><>><><<><>>\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\">>><<<>><><<<>>><><\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<<><>><><><<<><><>><>><<><><<>>><><><<><>><>\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<<<>>\") == False", "def check(correct_bracketing):\n\tassert not correct_bracketing(\"<><><<><>><>><<>\")", "def check(correct_bracketing):\n\tassert not correct_bracketing(\"<<<<\")", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<<><>><>\") == True", "def check(correct_bracketing):\n\tassert not correct_bracketing(\"<<>\")", "def check(correct_bracketing):\n\tassert correct_bracketing(\"><<><>>\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"><>>><<>>><<<\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<<><>><<><>><><><<><>><>\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<>><<><\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<<><\") == False", "def check(correct_bracketing):\n\tassert not correct_bracketing(\"<><><<><>><>>><>\")", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<>><<<<><><>><>\") == False", "def check(correct_bracketing):\n\tassert not correct_bracketing(\"<<<><>>>>\")", "def check(correct_bracketing):\n\tassert correct_bracketing(\">>>><><<<>>\") == False"], "test_case_list": ["assert correct_bracketing(\"<\") == False", "assert correct_bracketing(\"<>\") == True", "assert correct_bracketing(\"<><>>>><<\") == False", "assert correct_bracketing(\"<>>>>>\") == False", "assert correct_bracketing(\"<>>><<<\") == False", "assert correct_bracketing(\">><<>>>><<>>>>\") == False", "assert correct_bracketing(\">>>>><<\") == False", "assert correct_bracketing(\"<<><>><<><>>\") == True", "assert correct_bracketing(\">><>><>\") == False", "assert not correct_bracketing(\">\")", "assert correct_bracketing(\"<<><>><<><>><>\") == True", "assert correct_bracketing(\"<><><<<><><>><>><<><><<>>>\") == True", "assert correct_bracketing(\"<><><>\") == True", "assert correct_bracketing(\"><<<><<<\") == False", "assert correct_bracketing(\"<><><><<><>><>\") == True", "assert correct_bracketing(\"<<<<<><>\") == False", "assert correct_bracketing(\"<><><<><>><><><><<><>><><><><<><>><>\") == True", "assert correct_bracketing(\"<>><>\") == False", "assert correct_bracketing(\"><<<>>>>>>>><<><<\") == False", "assert correct_bracketing(\">>>><<><<<\") == False", "assert not correct_bracketing(\"><<>\")", "assert correct_bracketing(\"<><<><>>\") == True", "assert correct_bracketing(\">\") == False", "assert correct_bracketing(\"<<<>\") == False", "assert correct_bracketing(\">><<<\") == False", "assert correct_bracketing(\"><<><><>\") == False", "assert correct_bracketing(\"<><>>>>><><>>><\") == False", "assert correct_bracketing(\"<<><>><<><>><><><<<><><>><>><<><><<>>>\") == True", "assert correct_bracketing(\">>>\") == False", "assert correct_bracketing(\"<>><<><<><><><>><>>\") == False", "assert correct_bracketing(\">><<<>><<<<><\") == False", "assert correct_bracketing(\">>>><<<<\") == False", "assert correct_bracketing(\"<<<<>><<>\") == False", "assert correct_bracketing(\"<>\")", "assert correct_bracketing(\">>>><<<>><><><>><<><\") == False", "assert correct_bracketing(\"<><>\") == True", "assert not correct_bracketing(\"<\")", "assert correct_bracketing(\"\") == True", "assert correct_bracketing(\"><<<>><>\") == False", "assert correct_bracketing(\"<>>><>\") == False", "assert correct_bracketing(\"<<<>><>><\") == False", "assert correct_bracketing(\"><><>>\") == False", "assert correct_bracketing(\"<>>><>>>>>><><<\") == False", "assert correct_bracketing(\"<>>><<<>>>>>><><>><>\") == False", "assert correct_bracketing(\"<><><<<><><>><>><<><><<>>>\")", "assert correct_bracketing(\"<><<><>><><><<<><><>><>><<><><<>>>\") == True", "assert correct_bracketing(\"<<<\") == False", "assert correct_bracketing(\">>><><><<<>><\") == False", "assert correct_bracketing(\"<<><>><><><<<><><>><>><<><><<>>>\") == True", "assert correct_bracketing(\"<<><>>\") == True", "assert correct_bracketing(\"<><><<><>><><><><<><>><>\") == True", "assert correct_bracketing(\"<><><<><>><>\")", "assert correct_bracketing(\"><<<><\") == False", "assert correct_bracketing(\"<><><<>>>><<<<<>\") == False", "assert correct_bracketing(\">><<><>>><><\") == False", "assert correct_bracketing(\">>><>>><\") == False", "assert correct_bracketing(\"><><<><\") == False", "assert correct_bracketing(\"><>>><<\") == False", "assert correct_bracketing(\"<><><<><>><>\") == True", "assert correct_bracketing(\"><<\") == False", "assert correct_bracketing(\"<<><>>\")", "assert correct_bracketing(\">><>><><\") == False", "assert correct_bracketing(\"><>><\") == False", "assert correct_bracketing(\">><\") == False", "assert correct_bracketing(\"<><><<><>><><<><>>\") == True", "assert correct_bracketing(\">>><<<>><><<<>>><><\") == False", "assert correct_bracketing(\"<<><>><><><<<><><>><>><<><><<>>><><><<><>><>\") == True", "assert correct_bracketing(\"<<<>>\") == False", "assert not correct_bracketing(\"<><><<><>><>><<>\")", "assert not correct_bracketing(\"<<<<\")", "assert correct_bracketing(\"<<><>><>\") == True", "assert not correct_bracketing(\"<<>\")", "assert correct_bracketing(\"><<><>>\") == False", "assert correct_bracketing(\"><>>><<>>><<<\") == False", "assert correct_bracketing(\"<<><>><<><>><><><<><>><>\") == True", "assert correct_bracketing(\"<>><<><\") == False", "assert correct_bracketing(\"<<><\") == False", "assert not correct_bracketing(\"<><><<><>><>>><>\")", "assert correct_bracketing(\"<>><<<<><><>><>\") == False", "assert not correct_bracketing(\"<<<><>>>>\")", "assert correct_bracketing(\">>>><><<<>>\") == False"], "nl": " brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    ", "func": "def correct_bracketing(brackets: str):", "examples": ">>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    ", "completion": "def correct_bracketing(brackets: str) -> bool:\n    balance = 0\n    for char in brackets:\n        if char == '<':\n            balance += 1\n        elif char == '>':\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0\n", "completions": ["def correct_bracketing(brackets: str) -> bool:\n    balance = 0\n    for char in brackets:\n        if char == '<':\n            balance += 1\n        elif char == '>':\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0\n", "def correct_bracketing(brackets: str) -> bool:\n    counter = 0\n    for char in brackets:\n        if char == '<':\n            counter += 1\n        elif char == '>':\n            counter -= 1\n        if counter < 0:\n            return False\n    return counter == 0\n", "def correct_bracketing(brackets: str) -> bool:\n    counter = 0\n    for char in brackets:\n        if char == '<':\n            counter += 1\n        elif char == '>':\n            counter -= 1\n        if counter < 0:\n            return False\n    return counter == 0\n", "def correct_bracketing(brackets: str) -> bool:\n    counter = 0\n    for char in brackets:\n        if char == '<':\n            counter += 1\n        elif char == '>':\n            counter -= 1\n        if counter < 0:\n            return False\n    return counter == 0\n", "def correct_bracketing(brackets: str) -> bool:\n    counter = 0\n    for char in brackets:\n        if char == '<':\n            counter += 1\n        elif char == '>':\n            counter -= 1\n        if counter < 0:\n            return False\n    return counter == 0\n", "def correct_bracketing(brackets: str) -> bool:\n    counter = 0\n    for char in brackets:\n        if char == '<':\n            counter += 1\n        elif char == '>':\n            counter -= 1\n        if counter < 0:\n            return False\n    return counter == 0\n", "def correct_bracketing(brackets: str) -> bool:\n    counter = 0\n    for char in brackets:\n        if char == '<':\n            counter += 1\n        elif char == '>':\n            counter -= 1\n        if counter < 0:\n            return False\n    return counter == 0\n", "def correct_bracketing(brackets: str) -> bool:\n    counter = 0\n    for char in brackets:\n        if char == '<':\n            counter += 1\n        elif char == '>':\n            counter -= 1\n        if counter < 0:\n            return False\n    return counter == 0\n", "def correct_bracketing(brackets: str) -> bool:\n    counter = 0\n    for char in brackets:\n        if char == '<':\n            counter += 1\n        elif char == '>':\n            counter -= 1\n        if counter < 0:\n            return False\n    return counter == 0\n", "def correct_bracketing(brackets: str) -> bool:\n    balance = 0\n    for char in brackets:\n        if char == '<':\n            balance += 1\n        elif char == '>':\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0\n"], "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    \"Identify and count the number of opening brackets '<' and closing brackets '>' in the string.\",\n    \"Ensure that at no point in the string does the number of closing brackets '>' exceed the number of opening brackets '<'.\",\n    \"Verify that the total number of opening brackets '<' matches the total number of closing brackets '>'.\"\n  ],\n  \"high_level_plan\": [\n    \"Initialize a counter to track the balance of opening and closing brackets.\",\n    \"Iterate through each character in the string:\",\n    \"  - If the character is an opening bracket '<', increment the counter.\",\n    \"  - If the character is a closing bracket '>', decrement the counter.\",\n    \"  - If the counter becomes negative at any point, return False immediately (indicating an unmatched closing bracket).\",\n    \"After iterating through the string, check if the counter is zero.\",\n    \"Return True if the counter is zero (indicating all brackets are matched and correctly nested), otherwise return False.\"\n  ]\n}\n```", "Round_0": {"code": "def correct_bracketing(brackets: str) -> bool:\n    balance = 0\n    for char in brackets:\n        if char == '<':\n            balance += 1\n        elif char == '>':\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, "session_historys": [{"plan": "```json\n{\n  \"subproblems\": [\n    \"Identify and count the number of opening brackets '<' and closing brackets '>' in the string.\",\n    \"Ensure that at no point in the string does the number of closing brackets '>' exceed the number of opening brackets '<'.\",\n    \"Verify that the total number of opening brackets '<' matches the total number of closing brackets '>'.\"\n  ],\n  \"high_level_plan\": [\n    \"Initialize a counter to track the balance of opening and closing brackets.\",\n    \"Iterate through each character in the string:\",\n    \"  - If the character is an opening bracket '<', increment the counter.\",\n    \"  - If the character is a closing bracket '>', decrement the counter.\",\n    \"  - If the counter becomes negative at any point, return False immediately (indicating an unmatched closing bracket).\",\n    \"After iterating through the string, check if the counter is zero.\",\n    \"  - If the counter is zero, return True (indicating all brackets are matched and correctly nested).\",\n    \"  - If the counter is not zero, return False (indicating unmatched opening brackets).\"\n  ]\n}\n```", "Round_0": {"code": "def correct_bracketing(brackets: str) -> bool:\n    balance = 0\n    for char in brackets:\n        if char == '<':\n            balance += 1\n        elif char == '>':\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Initialize a counter to track the balance of opening and closing brackets.\",\n      \"details\": \"This counter will be incremented for each '<' and decremented for each '>'.\"\n    },\n    {\n      \"description\": \"Iterate through each character in the input string.\",\n      \"details\": \"For each character, update the counter based on whether it is an opening or closing bracket.\"\n    },\n    {\n      \"description\": \"Check for immediate imbalance during iteration.\",\n      \"details\": \"If the counter becomes negative at any point, return False immediately as it indicates a closing bracket without a matching opening bracket.\"\n    },\n    {\n      \"description\": \"Check the final balance of the counter after iteration.\",\n      \"details\": \"If the counter is zero, return True, indicating all brackets are matched and correctly nested. Otherwise, return False.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Initialize a counter to zero.\",\n    \"Loop through each character in the input string:\",\n    \"  - If the character is '<', increment the counter.\",\n    \"  - If the character is '>', decrement the counter.\",\n    \"  - If the counter becomes negative, return False immediately.\",\n    \"After the loop, check if the counter is zero.\",\n    \"Return True if the counter is zero, otherwise return False.\"\n  ]\n}\n```", "Round_0": {"code": "def correct_bracketing(brackets: str) -> bool:\n    counter = 0\n    for char in brackets:\n        if char == '<':\n            counter += 1\n        elif char == '>':\n            counter -= 1\n        if counter < 0:\n            return False\n    return counter == 0\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Initialize a counter to track the balance of opening and closing brackets.\",\n      \"details\": \"This counter will increase for each '<' and decrease for each '>'.\"\n    },\n    {\n      \"description\": \"Iterate through each character in the input string.\",\n      \"details\": \"For each character, update the counter based on whether it is an opening or closing bracket.\"\n    },\n    {\n      \"description\": \"Check for immediate imbalance during iteration.\",\n      \"details\": \"If the counter becomes negative at any point, return False immediately as it indicates a closing bracket without a matching opening bracket.\"\n    },\n    {\n      \"description\": \"Check the final balance of the counter after iteration.\",\n      \"details\": \"If the counter is zero, return True, indicating all brackets are correctly matched and nested. Otherwise, return False.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Initialize a counter to zero.\",\n    \"Loop through each character in the input string:\",\n    \"  - If the character is '<', increment the counter.\",\n    \"  - If the character is '>', decrement the counter.\",\n    \"  - If the counter becomes negative, return False immediately.\",\n    \"After the loop, check if the counter is zero:\",\n    \"  - If it is zero, return True.\",\n    \"  - Otherwise, return False.\"\n  ]\n}\n```", "Round_0": {"code": "def correct_bracketing(brackets: str) -> bool:\n    counter = 0\n    for char in brackets:\n        if char == '<':\n            counter += 1\n        elif char == '>':\n            counter -= 1\n        if counter < 0:\n            return False\n    return counter == 0\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"decomposed_subproblems\": [\n    {\n      \"subproblem\": \"Initialize a counter to track the balance of brackets.\",\n      \"description\": \"This counter will help determine if the brackets are correctly nested and matched.\"\n    },\n    {\n      \"subproblem\": \"Iterate through each character in the string.\",\n      \"description\": \"Process each bracket to update the counter accordingly.\"\n    },\n    {\n      \"subproblem\": \"Update the counter for each bracket.\",\n      \"description\": \"Increment the counter for '<' and decrement for '>'.\"\n    },\n    {\n      \"subproblem\": \"Check the counter during iteration.\",\n      \"description\": \"If the counter becomes negative at any point, return False immediately.\"\n    },\n    {\n      \"subproblem\": \"Check the final value of the counter after iteration.\",\n      \"description\": \"If the counter is zero, return True; otherwise, return False.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Initialize a counter to zero.\",\n    \"Iterate through each character in the input string.\",\n    \"For each '<', increment the counter.\",\n    \"For each '>', decrement the counter.\",\n    \"If the counter is negative at any point, return False.\",\n    \"After iteration, check if the counter is zero.\",\n    \"Return True if the counter is zero, otherwise return False.\"\n  ]\n}\n```", "Round_0": {"code": "def correct_bracketing(brackets: str) -> bool:\n    counter = 0\n    for char in brackets:\n        if char == '<':\n            counter += 1\n        elif char == '>':\n            counter -= 1\n        if counter < 0:\n            return False\n    return counter == 0\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Initialize a counter to track the balance of opening and closing brackets.\",\n      \"details\": \"This counter will be incremented for each '<' and decremented for each '>'.\"\n    },\n    {\n      \"description\": \"Iterate through each character in the input string.\",\n      \"details\": \"For each character, update the counter based on whether it is an opening or closing bracket.\"\n    },\n    {\n      \"description\": \"Check for early closure.\",\n      \"details\": \"If the counter becomes negative at any point during iteration, return False immediately as it indicates an unmatched closing bracket.\"\n    },\n    {\n      \"description\": \"Check final balance.\",\n      \"details\": \"After iterating through the string, ensure the counter is zero to confirm all brackets are matched and properly nested.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Initialize a counter to zero.\",\n    \"Loop through each character in the input string:\",\n    \"  - If the character is '<', increment the counter.\",\n    \"  - If the character is '>', decrement the counter.\",\n    \"  - If the counter is negative at any point, return False.\",\n    \"After the loop, check if the counter is zero:\",\n    \"  - If it is zero, return True.\",\n    \"  - Otherwise, return False.\"\n  ]\n}\n```", "Round_0": {"code": "def correct_bracketing(brackets: str) -> bool:\n    counter = 0\n    for char in brackets:\n        if char == '<':\n            counter += 1\n        elif char == '>':\n            counter -= 1\n        if counter < 0:\n            return False\n    return counter == 0\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    \"Identify and count the number of opening brackets '<' and closing brackets '>'.\",\n    \"Ensure that at no point in the string do closing brackets '>' exceed opening brackets '<'.\",\n    \"Verify that the total number of opening brackets '<' matches the total number of closing brackets '>'.\"\n  ],\n  \"high_level_plan\": [\n    \"Initialize a counter to track the balance of opening and closing brackets.\",\n    \"Iterate through each character in the string:\",\n    \"  - If the character is an opening bracket '<', increment the counter.\",\n    \"  - If the character is a closing bracket '>', decrement the counter.\",\n    \"  - If the counter becomes negative at any point, return False immediately (indicating unmatched closing bracket).\",\n    \"After iterating through the string, check if the counter is zero.\",\n    \"  - If the counter is zero, return True (indicating all brackets are matched and correctly nested).\",\n    \"  - If the counter is not zero, return False (indicating unmatched opening brackets).\"\n  ]\n}\n```", "Round_0": {"code": "def correct_bracketing(brackets: str) -> bool:\n    counter = 0\n    for char in brackets:\n        if char == '<':\n            counter += 1\n        elif char == '>':\n            counter -= 1\n        if counter < 0:\n            return False\n    return counter == 0\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Initialize a counter to track the balance of opening and closing brackets.\",\n      \"details\": \"This counter will be incremented for each '<' and decremented for each '>'.\"\n    },\n    {\n      \"description\": \"Iterate through each character in the input string.\",\n      \"details\": \"For each character, update the counter based on whether it is an opening or closing bracket.\"\n    },\n    {\n      \"description\": \"Check for early closure.\",\n      \"details\": \"If the counter becomes negative at any point during iteration, return False immediately as it indicates a closing bracket without a matching opening bracket.\"\n    },\n    {\n      \"description\": \"Check final balance.\",\n      \"details\": \"After iterating through the string, ensure the counter is zero, indicating all opening brackets have matching closing brackets.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Initialize a counter to zero.\",\n    \"Loop through each character in the input string:\",\n    \"  - If the character is '<', increment the counter.\",\n    \"  - If the character is '>', decrement the counter.\",\n    \"  - If the counter is negative at any point, return False.\",\n    \"After the loop, check if the counter is zero.\",\n    \"Return True if the counter is zero, otherwise return False.\"\n  ]\n}\n```", "Round_0": {"code": "def correct_bracketing(brackets: str) -> bool:\n    counter = 0\n    for char in brackets:\n        if char == '<':\n            counter += 1\n        elif char == '>':\n            counter -= 1\n        if counter < 0:\n            return False\n    return counter == 0\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Initialize a counter to track the balance of opening and closing brackets.\",\n      \"details\": \"This counter will increase for each '<' and decrease for each '>'.\"\n    },\n    {\n      \"description\": \"Iterate through each character in the input string.\",\n      \"details\": \"For each character, update the counter based on whether it is an opening or closing bracket.\"\n    },\n    {\n      \"description\": \"Check for immediate imbalance during iteration.\",\n      \"details\": \"If the counter becomes negative at any point, return False immediately as it indicates a closing bracket without a matching opening bracket.\"\n    },\n    {\n      \"description\": \"Check the final balance of the counter after iteration.\",\n      \"details\": \"If the counter is zero, return True, indicating all brackets are matched and correctly nested. Otherwise, return False.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Initialize a counter to zero.\",\n    \"Loop through each character in the input string:\",\n    \"  - If the character is '<', increment the counter.\",\n    \"  - If the character is '>', decrement the counter.\",\n    \"  - If the counter is negative at any point, return False.\",\n    \"After the loop, check if the counter is zero.\",\n    \"Return True if the counter is zero, otherwise return False.\"\n  ]\n}\n```", "Round_0": {"code": "def correct_bracketing(brackets: str) -> bool:\n    counter = 0\n    for char in brackets:\n        if char == '<':\n            counter += 1\n        elif char == '>':\n            counter -= 1\n        if counter < 0:\n            return False\n    return counter == 0\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Initialize a counter to track the balance of opening and closing brackets.\",\n      \"details\": \"This counter will increase for each '<' and decrease for each '>'.\"\n    },\n    {\n      \"description\": \"Iterate through each character in the input string.\",\n      \"details\": \"For each character, update the counter based on whether it is an opening or closing bracket.\"\n    },\n    {\n      \"description\": \"Check for immediate imbalance during iteration.\",\n      \"details\": \"If the counter becomes negative at any point, return False immediately as it indicates a closing bracket without a matching opening bracket.\"\n    },\n    {\n      \"description\": \"Check the final balance of the counter after iteration.\",\n      \"details\": \"If the counter is zero, return True, indicating all brackets are matched and correctly nested. Otherwise, return False.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Initialize a counter to zero.\",\n    \"Loop through each character in the input string:\",\n    \"  - If the character is '<', increment the counter.\",\n    \"  - If the character is '>', decrement the counter.\",\n    \"  - If the counter is negative at any point, return False.\",\n    \"After the loop, check if the counter is zero.\",\n    \"Return True if the counter is zero, otherwise return False.\"\n  ]\n}\n```", "Round_0": {"code": "def correct_bracketing(brackets: str) -> bool:\n    counter = 0\n    for char in brackets:\n        if char == '<':\n            counter += 1\n        elif char == '>':\n            counter -= 1\n        if counter < 0:\n            return False\n    return counter == 0\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    \"Identify and count the number of opening brackets '<' and closing brackets '>' in the string.\",\n    \"Ensure that at no point in the string does the number of closing brackets '>' exceed the number of opening brackets '<'.\",\n    \"Verify that the total number of opening brackets '<' matches the total number of closing brackets '>'.\"\n  ],\n  \"high_level_plan\": [\n    \"Initialize a counter to track the balance of opening and closing brackets.\",\n    \"Iterate through each character in the string:\",\n    \"  - If the character is an opening bracket '<', increment the counter.\",\n    \"  - If the character is a closing bracket '>', decrement the counter.\",\n    \"  - If the counter becomes negative at any point, return False immediately (indicating an unmatched closing bracket).\",\n    \"After iterating through the string, check if the counter is zero.\",\n    \"Return True if the counter is zero (indicating all brackets are matched and correctly nested), otherwise return False.\"\n  ]\n}\n```", "Round_0": {"code": "def correct_bracketing(brackets: str) -> bool:\n    balance = 0\n    for char in brackets:\n        if char == '<':\n            balance += 1\n        elif char == '>':\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [81, 81, 81, 81, 81, 81, 81, 81, 81, 81], "passed": true, "pass": true, "pass_num": 10, "round": 914, "mutate_method": "add_1_sentence_at_end", "save_node": false, "parent_index": 603}
