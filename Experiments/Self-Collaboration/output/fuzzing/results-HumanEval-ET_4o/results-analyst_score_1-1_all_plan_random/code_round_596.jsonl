{"task_id": "HumanEval/56", "prompt": "def correct_bracketing(brackets: str):\t\n'''brackets is a string of \"<\" and \">\"; return True if every opening bracket has a corresponding closing bracket.\n>>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    '''", "entry_point": "correct_bracketing", "canonical_solution": "    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n", "test": ["def check(correct_bracketing):\n\tassert correct_bracketing(\"<\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<>\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<><>>>><<\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<>>>>>\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<>>><<<\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\">><<>>>><<>>>>\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\">>>>><<\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<<><>><<><>>\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\">><>><>\") == False", "def check(correct_bracketing):\n\tassert not correct_bracketing(\">\")", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<<><>><<><>><>\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<><><<<><><>><>><<><><<>>>\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<><><>\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\"><<<><<<\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<><><><<><>><>\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<<<<<><>\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<><><<><>><><><><<><>><><><><<><>><>\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<>><>\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"><<<>>>>>>>><<><<\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\">>>><<><<<\") == False", "def check(correct_bracketing):\n\tassert not correct_bracketing(\"><<>\")", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<><<><>>\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\">\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<<<>\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\">><<<\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"><<><><>\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<><>>>>><><>>><\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<<><>><<><>><><><<<><><>><>><<><><<>>>\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\">>>\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<>><<><<><><><>><>>\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\">><<<>><<<<><\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\">>>><<<<\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<<<<>><<>\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<>\")", "def check(correct_bracketing):\n\tassert correct_bracketing(\">>>><<<>><><><>><<><\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<><>\") == True", "def check(correct_bracketing):\n\tassert not correct_bracketing(\"<\")", "def check(correct_bracketing):\n\tassert correct_bracketing(\"\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\"><<<>><>\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<>>><>\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<<<>><>><\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"><><>>\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<>>><>>>>>><><<\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<>>><<<>>>>>><><>><>\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<><><<<><><>><>><<><><<>>>\")", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<><<><>><><><<<><><>><>><<><><<>>>\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<<<\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\">>><><><<<>><\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<<><>><><><<<><><>><>><<><><<>>>\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<<><>>\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<><><<><>><><><><<><>><>\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<><><<><>><>\")", "def check(correct_bracketing):\n\tassert correct_bracketing(\"><<<><\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<><><<>>>><<<<<>\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\">><<><>>><><\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\">>><>>><\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"><><<><\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"><>>><<\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<><><<><>><>\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\"><<\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<<><>>\")", "def check(correct_bracketing):\n\tassert correct_bracketing(\">><>><><\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"><>><\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\">><\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<><><<><>><><<><>>\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\">>><<<>><><<<>>><><\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<<><>><><><<<><><>><>><<><><<>>><><><<><>><>\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<<<>>\") == False", "def check(correct_bracketing):\n\tassert not correct_bracketing(\"<><><<><>><>><<>\")", "def check(correct_bracketing):\n\tassert not correct_bracketing(\"<<<<\")", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<<><>><>\") == True", "def check(correct_bracketing):\n\tassert not correct_bracketing(\"<<>\")", "def check(correct_bracketing):\n\tassert correct_bracketing(\"><<><>>\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"><>>><<>>><<<\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<<><>><<><>><><><<><>><>\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<>><<><\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<<><\") == False", "def check(correct_bracketing):\n\tassert not correct_bracketing(\"<><><<><>><>>><>\")", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<>><<<<><><>><>\") == False", "def check(correct_bracketing):\n\tassert not correct_bracketing(\"<<<><>>>>\")", "def check(correct_bracketing):\n\tassert correct_bracketing(\">>>><><<<>>\") == False"], "test_case_list": ["assert correct_bracketing(\"<\") == False", "assert correct_bracketing(\"<>\") == True", "assert correct_bracketing(\"<><>>>><<\") == False", "assert correct_bracketing(\"<>>>>>\") == False", "assert correct_bracketing(\"<>>><<<\") == False", "assert correct_bracketing(\">><<>>>><<>>>>\") == False", "assert correct_bracketing(\">>>>><<\") == False", "assert correct_bracketing(\"<<><>><<><>>\") == True", "assert correct_bracketing(\">><>><>\") == False", "assert not correct_bracketing(\">\")", "assert correct_bracketing(\"<<><>><<><>><>\") == True", "assert correct_bracketing(\"<><><<<><><>><>><<><><<>>>\") == True", "assert correct_bracketing(\"<><><>\") == True", "assert correct_bracketing(\"><<<><<<\") == False", "assert correct_bracketing(\"<><><><<><>><>\") == True", "assert correct_bracketing(\"<<<<<><>\") == False", "assert correct_bracketing(\"<><><<><>><><><><<><>><><><><<><>><>\") == True", "assert correct_bracketing(\"<>><>\") == False", "assert correct_bracketing(\"><<<>>>>>>>><<><<\") == False", "assert correct_bracketing(\">>>><<><<<\") == False", "assert not correct_bracketing(\"><<>\")", "assert correct_bracketing(\"<><<><>>\") == True", "assert correct_bracketing(\">\") == False", "assert correct_bracketing(\"<<<>\") == False", "assert correct_bracketing(\">><<<\") == False", "assert correct_bracketing(\"><<><><>\") == False", "assert correct_bracketing(\"<><>>>>><><>>><\") == False", "assert correct_bracketing(\"<<><>><<><>><><><<<><><>><>><<><><<>>>\") == True", "assert correct_bracketing(\">>>\") == False", "assert correct_bracketing(\"<>><<><<><><><>><>>\") == False", "assert correct_bracketing(\">><<<>><<<<><\") == False", "assert correct_bracketing(\">>>><<<<\") == False", "assert correct_bracketing(\"<<<<>><<>\") == False", "assert correct_bracketing(\"<>\")", "assert correct_bracketing(\">>>><<<>><><><>><<><\") == False", "assert correct_bracketing(\"<><>\") == True", "assert not correct_bracketing(\"<\")", "assert correct_bracketing(\"\") == True", "assert correct_bracketing(\"><<<>><>\") == False", "assert correct_bracketing(\"<>>><>\") == False", "assert correct_bracketing(\"<<<>><>><\") == False", "assert correct_bracketing(\"><><>>\") == False", "assert correct_bracketing(\"<>>><>>>>>><><<\") == False", "assert correct_bracketing(\"<>>><<<>>>>>><><>><>\") == False", "assert correct_bracketing(\"<><><<<><><>><>><<><><<>>>\")", "assert correct_bracketing(\"<><<><>><><><<<><><>><>><<><><<>>>\") == True", "assert correct_bracketing(\"<<<\") == False", "assert correct_bracketing(\">>><><><<<>><\") == False", "assert correct_bracketing(\"<<><>><><><<<><><>><>><<><><<>>>\") == True", "assert correct_bracketing(\"<<><>>\") == True", "assert correct_bracketing(\"<><><<><>><><><><<><>><>\") == True", "assert correct_bracketing(\"<><><<><>><>\")", "assert correct_bracketing(\"><<<><\") == False", "assert correct_bracketing(\"<><><<>>>><<<<<>\") == False", "assert correct_bracketing(\">><<><>>><><\") == False", "assert correct_bracketing(\">>><>>><\") == False", "assert correct_bracketing(\"><><<><\") == False", "assert correct_bracketing(\"><>>><<\") == False", "assert correct_bracketing(\"<><><<><>><>\") == True", "assert correct_bracketing(\"><<\") == False", "assert correct_bracketing(\"<<><>>\")", "assert correct_bracketing(\">><>><><\") == False", "assert correct_bracketing(\"><>><\") == False", "assert correct_bracketing(\">><\") == False", "assert correct_bracketing(\"<><><<><>><><<><>>\") == True", "assert correct_bracketing(\">>><<<>><><<<>>><><\") == False", "assert correct_bracketing(\"<<><>><><><<<><><>><>><<><><<>>><><><<><>><>\") == True", "assert correct_bracketing(\"<<<>>\") == False", "assert not correct_bracketing(\"<><><<><>><>><<>\")", "assert not correct_bracketing(\"<<<<\")", "assert correct_bracketing(\"<<><>><>\") == True", "assert not correct_bracketing(\"<<>\")", "assert correct_bracketing(\"><<><>>\") == False", "assert correct_bracketing(\"><>>><<>>><<<\") == False", "assert correct_bracketing(\"<<><>><<><>><><><<><>><>\") == True", "assert correct_bracketing(\"<>><<><\") == False", "assert correct_bracketing(\"<<><\") == False", "assert not correct_bracketing(\"<><><<><>><>>><>\")", "assert correct_bracketing(\"<>><<<<><><>><>\") == False", "assert not correct_bracketing(\"<<<><>>>>\")", "assert correct_bracketing(\">>>><><<<>>\") == False"], "nl": " brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    ", "func": "def correct_bracketing(brackets: str):", "examples": ">>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    ", "completion": "def correct_bracketing(brackets: str) -> bool:\n    counter = 0\n    for char in brackets:\n        if char == '<':\n            counter += 1\n        elif char == '>':\n            counter -= 1\n        if counter < 0:\n            return False\n    return counter == 0\n", "completions": ["def correct_bracketing(brackets: str) -> bool:\n    \"\"\"\n    brackets is a string of \"<\" and \">\"; return True if every opening bracket has a corresponding closing bracket.\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    counter = 0\n    for char in brackets:\n        if char == '<':\n            counter += 1\n        elif char == '>':\n            counter -= 1\n        if counter < 0:\n            return False\n    return counter == 0\n", "def correct_bracketing(brackets: str) -> bool:\n    counter = 0\n    for char in brackets:\n        if char == '<':\n            counter += 1\n        elif char == '>':\n            counter -= 1\n        if counter < 0:\n            return False\n    return counter == 0\n", "def correct_bracketing(brackets: str) -> bool:\n    \"\"\"\n    brackets is a string of \"<\" and \">\"; return True if every opening bracket has a corresponding closing bracket.\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    counter = 0\n    for char in brackets:\n        if char == '<':\n            counter += 1\n        elif char == '>':\n            counter -= 1\n        if counter < 0:\n            return False\n    return counter == 0\n", "def correct_bracketing(brackets: str) -> bool:\n    \"\"\"\n    brackets is a string of \"<\" and \">\"; return True if every opening bracket has a corresponding closing bracket.\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    counter = 0\n    for char in brackets:\n        if char == '<':\n            counter += 1\n        elif char == '>':\n            counter -= 1\n        if counter < 0:\n            return False\n    return counter == 0\n", "def correct_bracketing(brackets: str) -> bool:\n    counter = 0\n    for char in brackets:\n        if char == '<':\n            counter += 1\n        elif char == '>':\n            counter -= 1\n        if counter < 0:\n            return False\n    return counter == 0\n", "def correct_bracketing(brackets: str) -> bool:\n    unmatched_opening = 0\n    \n    for char in brackets:\n        if char == '<':\n            unmatched_opening += 1\n        elif char == '>':\n            if unmatched_opening > 0:\n                unmatched_opening -= 1\n            else:\n                return False\n    \n    return unmatched_opening == 0\n", "def correct_bracketing(brackets: str) -> bool:\n    opening_count = 0\n\n    for char in brackets:\n        if char == '<':\n            opening_count += 1\n        elif char == '>':\n            if opening_count > 0:\n                opening_count -= 1\n            else:\n                return False\n\n    return opening_count == 0\n", "def correct_bracketing(brackets: str) -> bool:\n    \"\"\"\n    brackets is a string of \"<\" and \">\"; return True if every opening bracket has a corresponding closing bracket.\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    counter = 0\n    for char in brackets:\n        if char == '<':\n            counter += 1\n        elif char == '>':\n            counter -= 1\n        if counter < 0:\n            return False\n    return counter == 0\n", "def correct_bracketing(brackets: str) -> bool:\n    opening_count = 0\n    closing_count = 0\n\n    for char in brackets:\n        if char == '<':\n            opening_count += 1\n        elif char == '>':\n            if opening_count == 0:\n                return False\n            closing_count += 1\n            opening_count -= 1\n\n    return opening_count == 0\n", "def correct_bracketing(brackets: str) -> bool:\n    counter = 0\n    for char in brackets:\n        if char == '<':\n            counter += 1\n        elif char == '>':\n            counter -= 1\n        if counter < 0:\n            return False\n    return counter == 0\n"], "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Initialize a counter to track the balance of opening and closing brackets.\",\n      \"details\": \"The counter will increase for each '<' and decrease for each '>'.\"\n    },\n    {\n      \"description\": \"Iterate through each character in the input string.\",\n      \"details\": \"For each character, update the counter based on whether it is an opening or closing bracket.\"\n    },\n    {\n      \"description\": \"Check the counter during iteration.\",\n      \"details\": \"If the counter becomes negative at any point, return False immediately as it indicates a closing bracket without a matching opening bracket.\"\n    },\n    {\n      \"description\": \"Check the final value of the counter after iteration.\",\n      \"details\": \"If the counter is zero, return True, indicating all opening brackets have matching closing brackets. Otherwise, return False.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Initialize a counter to zero.\",\n    \"Loop through each character in the input string:\",\n    \"  - If the character is '<', increment the counter.\",\n    \"  - If the character is '>', decrement the counter.\",\n    \"  - If the counter is negative, return False.\",\n    \"After the loop, check if the counter is zero:\",\n    \"  - If it is zero, return True.\",\n    \"  - Otherwise, return False.\"\n  ]\n}\n```", "Round_0": {"code": "def correct_bracketing(brackets: str) -> bool:\n    counter = 0\n    for char in brackets:\n        if char == '<':\n            counter += 1\n        elif char == '>':\n            counter -= 1\n        if counter < 0:\n            return False\n    return counter == 0\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, "session_historys": [{"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Initialize a counter to track the balance of opening and closing brackets.\",\n      \"details\": \"This counter will increase for each '<' and decrease for each '>'.\"\n    },\n    {\n      \"description\": \"Iterate through each character in the input string.\",\n      \"details\": \"For each character, update the counter based on whether it is an opening or closing bracket.\"\n    },\n    {\n      \"description\": \"Check for negative counter values during iteration.\",\n      \"details\": \"If the counter becomes negative, it indicates a closing bracket without a matching opening bracket, so return False.\"\n    },\n    {\n      \"description\": \"Check the final value of the counter after iteration.\",\n      \"details\": \"If the counter is zero, all opening brackets have matching closing brackets, so return True. Otherwise, return False.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Initialize a counter to zero.\",\n    \"Loop through each character in the input string.\",\n    \"For each '<', increment the counter.\",\n    \"For each '>', decrement the counter.\",\n    \"If the counter becomes negative at any point, return False.\",\n    \"After the loop, check if the counter is zero.\",\n    \"Return True if the counter is zero, otherwise return False.\"\n  ]\n}\n```", "Round_0": {"code": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\"\n    brackets is a string of \"<\" and \">\"; return True if every opening bracket has a corresponding closing bracket.\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    counter = 0\n    for char in brackets:\n        if char == '<':\n            counter += 1\n        elif char == '>':\n            counter -= 1\n        if counter < 0:\n            return False\n    return counter == 0\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Initialize a counter to track the balance of opening and closing brackets.\",\n      \"details\": \"This counter will be incremented for each opening bracket '<' and decremented for each closing bracket '>'.\"\n    },\n    {\n      \"description\": \"Iterate through each character in the input string.\",\n      \"details\": \"For each character, update the counter based on whether it is an opening or closing bracket.\"\n    },\n    {\n      \"description\": \"Check for negative counter values during iteration.\",\n      \"details\": \"If the counter becomes negative at any point, it indicates a closing bracket without a matching opening bracket, and the function should return False.\"\n    },\n    {\n      \"description\": \"Check the final value of the counter after iteration.\",\n      \"details\": \"If the counter is zero, it means all opening brackets have matching closing brackets, and the function should return True. Otherwise, return False.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Initialize a counter to zero.\",\n    \"Loop through each character in the input string:\",\n    \"  - If the character is '<', increment the counter.\",\n    \"  - If the character is '>', decrement the counter.\",\n    \"  - If the counter becomes negative, return False immediately.\",\n    \"After the loop, check the counter:\",\n    \"  - If the counter is zero, return True.\",\n    \"  - Otherwise, return False.\"\n  ]\n}\n```", "Round_0": {"code": "def correct_bracketing(brackets: str) -> bool:\n    counter = 0\n    for char in brackets:\n        if char == '<':\n            counter += 1\n        elif char == '>':\n            counter -= 1\n        if counter < 0:\n            return False\n    return counter == 0\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"decomposed_subproblems\": [\n    {\n      \"subproblem\": \"Initialize a counter to track the balance of brackets.\",\n      \"description\": \"Set up a variable to keep track of the number of unmatched opening brackets.\"\n    },\n    {\n      \"subproblem\": \"Iterate through each character in the string.\",\n      \"description\": \"Loop through the string to process each bracket one by one.\"\n    },\n    {\n      \"subproblem\": \"Update the counter based on the type of bracket.\",\n      \"description\": \"Increment the counter for an opening bracket '<' and decrement for a closing bracket '>'.\"\n    },\n    {\n      \"subproblem\": \"Check for negative counter values during iteration.\",\n      \"description\": \"If the counter becomes negative, it indicates a closing bracket without a preceding opening bracket.\"\n    },\n    {\n      \"subproblem\": \"Verify the final counter value after iteration.\",\n      \"description\": \"Ensure the counter is zero at the end, indicating all opening brackets have matching closing brackets.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Initialize a counter to zero.\",\n    \"Iterate through each character in the input string.\",\n    \"For each character, update the counter: increment for '<' and decrement for '>'.\",\n    \"If the counter becomes negative at any point, return False.\",\n    \"After the loop, check if the counter is zero. If it is, return True; otherwise, return False.\"\n  ]\n}\n```", "Round_0": {"code": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\"\n    brackets is a string of \"<\" and \">\"; return True if every opening bracket has a corresponding closing bracket.\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    counter = 0\n    for char in brackets:\n        if char == '<':\n            counter += 1\n        elif char == '>':\n            counter -= 1\n        if counter < 0:\n            return False\n    return counter == 0\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Initialize a counter to track the balance of opening and closing brackets.\",\n      \"details\": \"This counter will increase for each '<' and decrease for each '>'.\"\n    },\n    {\n      \"description\": \"Iterate through each character in the input string.\",\n      \"details\": \"For each character, update the counter based on whether it is an opening or closing bracket.\"\n    },\n    {\n      \"description\": \"Check the counter during iteration.\",\n      \"details\": \"If the counter becomes negative at any point, it indicates a closing bracket without a matching opening bracket.\"\n    },\n    {\n      \"description\": \"Check the final value of the counter after iteration.\",\n      \"details\": \"If the counter is zero, all opening brackets have matching closing brackets; otherwise, they do not.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Initialize a counter to zero.\",\n    \"Loop through each character in the input string:\",\n    \"  - If the character is '<', increment the counter.\",\n    \"  - If the character is '>', decrement the counter.\",\n    \"  - If the counter is negative, return False immediately.\",\n    \"After the loop, check if the counter is zero:\",\n    \"  - If it is zero, return True.\",\n    \"  - Otherwise, return False.\"\n  ]\n}\n```", "Round_0": {"code": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\"\n    brackets is a string of \"<\" and \">\"; return True if every opening bracket has a corresponding closing bracket.\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    counter = 0\n    for char in brackets:\n        if char == '<':\n            counter += 1\n        elif char == '>':\n            counter -= 1\n        if counter < 0:\n            return False\n    return counter == 0\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Initialize a counter to track the balance of opening and closing brackets.\",\n      \"details\": \"This counter will be incremented for each '<' and decremented for each '>'.\"\n    },\n    {\n      \"description\": \"Iterate through each character in the input string.\",\n      \"details\": \"For each character, update the counter based on whether it is an opening or closing bracket.\"\n    },\n    {\n      \"description\": \"Check for negative counter values during iteration.\",\n      \"details\": \"If the counter becomes negative at any point, it indicates a closing bracket without a matching opening bracket, and the function should return False.\"\n    },\n    {\n      \"description\": \"Check the final value of the counter after iteration.\",\n      \"details\": \"If the counter is zero, all opening brackets have matching closing brackets, and the function should return True. Otherwise, return False.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Initialize a counter to zero.\",\n    \"Loop through each character in the input string:\",\n    \"  - If the character is '<', increment the counter.\",\n    \"  - If the character is '>', decrement the counter.\",\n    \"  - If the counter becomes negative, return False immediately.\",\n    \"After the loop, check if the counter is zero:\",\n    \"  - If it is zero, return True.\",\n    \"  - Otherwise, return False.\"\n  ]\n}\n```", "Round_0": {"code": "def correct_bracketing(brackets: str) -> bool:\n    counter = 0\n    for char in brackets:\n        if char == '<':\n            counter += 1\n        elif char == '>':\n            counter -= 1\n        if counter < 0:\n            return False\n    return counter == 0\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Identify and count the number of opening brackets '<' in the string.\",\n      \"goal\": \"Keep track of the number of unmatched opening brackets.\"\n    },\n    {\n      \"description\": \"Identify and count the number of closing brackets '>' in the string.\",\n      \"goal\": \"Ensure each closing bracket has a corresponding unmatched opening bracket.\"\n    },\n    {\n      \"description\": \"Check the sequence of brackets to ensure that at no point do closing brackets exceed opening brackets.\",\n      \"goal\": \"Maintain a valid sequence where every closing bracket has a preceding unmatched opening bracket.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Initialize a counter to keep track of unmatched opening brackets.\",\n    \"Iterate through each character in the string:\",\n    \"  - If the character is an opening bracket '<', increment the counter.\",\n    \"  - If the character is a closing bracket '>', check the counter:\",\n    \"    - If the counter is greater than zero, decrement the counter (valid match).\",\n    \"    - If the counter is zero, return False (invalid sequence).\",\n    \"After iterating through the string, check the counter:\",\n    \"  - If the counter is zero, return True (all brackets matched).\",\n    \"  - If the counter is greater than zero, return False (unmatched opening brackets remain).\"\n  ]\n}\n```", "Round_0": {"code": "def correct_bracketing(brackets: str) -> bool:\n    unmatched_opening = 0\n    \n    for char in brackets:\n        if char == '<':\n            unmatched_opening += 1\n        elif char == '>':\n            if unmatched_opening > 0:\n                unmatched_opening -= 1\n            else:\n                return False\n    \n    return unmatched_opening == 0\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"decomposed_subproblems\": [\n    {\n      \"subproblem\": \"Initialize counters for opening and closing brackets.\",\n      \"description\": \"Set up variables to keep track of the number of '<' and '>' encountered in the string.\"\n    },\n    {\n      \"subproblem\": \"Iterate through the string of brackets.\",\n      \"description\": \"Loop through each character in the input string to process the brackets one by one.\"\n    },\n    {\n      \"subproblem\": \"Update counters based on bracket type.\",\n      \"description\": \"Increment the opening bracket counter for '<' and decrement it for '>' if there is a corresponding opening bracket.\"\n    },\n    {\n      \"subproblem\": \"Check for invalid closing brackets.\",\n      \"description\": \"If a closing bracket '>' is encountered without a preceding opening bracket '<', return False.\"\n    },\n    {\n      \"subproblem\": \"Verify all opening brackets are closed.\",\n      \"description\": \"After processing the string, check if the opening bracket counter is zero to ensure all brackets are correctly closed.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Initialize two counters: one for opening brackets and one for closing brackets.\",\n    \"Loop through each character in the input string.\",\n    \"For each '<', increment the opening bracket counter.\",\n    \"For each '>', check if the opening bracket counter is greater than zero. If so, decrement the opening bracket counter; otherwise, return False.\",\n    \"After the loop, check if the opening bracket counter is zero. If it is, return True; otherwise, return False.\"\n  ]\n}\n```", "Round_0": {"code": "def correct_bracketing(brackets: str) -> bool:\n    opening_count = 0\n\n    for char in brackets:\n        if char == '<':\n            opening_count += 1\n        elif char == '>':\n            if opening_count > 0:\n                opening_count -= 1\n            else:\n                return False\n\n    return opening_count == 0\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Initialize a counter to track the balance of opening and closing brackets.\",\n      \"details\": \"This counter will be incremented for each '<' and decremented for each '>'.\"\n    },\n    {\n      \"description\": \"Iterate through each character in the input string.\",\n      \"details\": \"For each character, update the counter based on whether it is an opening or closing bracket.\"\n    },\n    {\n      \"description\": \"Check the counter during iteration.\",\n      \"details\": \"If the counter becomes negative at any point, return False immediately as it indicates a closing bracket without a matching opening bracket.\"\n    },\n    {\n      \"description\": \"Check the final value of the counter after iteration.\",\n      \"details\": \"If the counter is zero, return True, indicating all opening brackets have matching closing brackets. Otherwise, return False.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Initialize a counter to zero.\",\n    \"Loop through each character in the input string:\",\n    \"  - If the character is '<', increment the counter.\",\n    \"  - If the character is '>', decrement the counter.\",\n    \"  - If the counter is negative, return False.\",\n    \"After the loop, check if the counter is zero:\",\n    \"  - If it is zero, return True.\",\n    \"  - Otherwise, return False.\"\n  ]\n}\n```", "Round_0": {"code": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\"\n    brackets is a string of \"<\" and \">\"; return True if every opening bracket has a corresponding closing bracket.\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    counter = 0\n    for char in brackets:\n        if char == '<':\n            counter += 1\n        elif char == '>':\n            counter -= 1\n        if counter < 0:\n            return False\n    return counter == 0\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"decomposed_subproblems\": [\n    {\n      \"subproblem\": \"Initialize counters for opening and closing brackets.\",\n      \"description\": \"Set up variables to keep track of the number of '<' and '>' encountered in the string.\"\n    },\n    {\n      \"subproblem\": \"Iterate through the string of brackets.\",\n      \"description\": \"Loop through each character in the input string to process the brackets one by one.\"\n    },\n    {\n      \"subproblem\": \"Update counters based on bracket type.\",\n      \"description\": \"For each '<', increment the opening bracket counter. For each '>', check if there is an unmatched opening bracket and update the closing bracket counter accordingly.\"\n    },\n    {\n      \"subproblem\": \"Check for unmatched opening brackets.\",\n      \"description\": \"Ensure that at no point does the closing bracket counter exceed the opening bracket counter, which would indicate an unmatched closing bracket.\"\n    },\n    {\n      \"subproblem\": \"Verify all brackets are matched.\",\n      \"description\": \"After processing the entire string, check if the opening and closing bracket counters are equal, indicating all brackets are correctly matched.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Initialize two counters: one for opening brackets and one for closing brackets.\",\n    \"Loop through each character in the input string.\",\n    \"For each character, update the counters based on whether it is an opening or closing bracket.\",\n    \"Ensure that the closing bracket counter never exceeds the opening bracket counter during iteration.\",\n    \"After the loop, check if the opening and closing bracket counters are equal.\",\n    \"Return True if they are equal, otherwise return False.\"\n  ]\n}\n```", "Round_0": {"code": "def correct_bracketing(brackets: str) -> bool:\n    opening_count = 0\n    closing_count = 0\n\n    for char in brackets:\n        if char == '<':\n            opening_count += 1\n        elif char == '>':\n            if opening_count == 0:\n                return False\n            closing_count += 1\n            opening_count -= 1\n\n    return opening_count == 0\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Initialize a counter to track the balance of opening and closing brackets.\",\n      \"details\": \"The counter will increase for each '<' and decrease for each '>'.\"\n    },\n    {\n      \"description\": \"Iterate through each character in the input string.\",\n      \"details\": \"For each character, update the counter based on whether it is an opening or closing bracket.\"\n    },\n    {\n      \"description\": \"Check the counter during iteration.\",\n      \"details\": \"If the counter becomes negative at any point, return False immediately as it indicates a closing bracket without a matching opening bracket.\"\n    },\n    {\n      \"description\": \"Check the final value of the counter after iteration.\",\n      \"details\": \"If the counter is zero, return True, indicating all opening brackets have matching closing brackets. Otherwise, return False.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Initialize a counter to zero.\",\n    \"Loop through each character in the input string:\",\n    \"  - If the character is '<', increment the counter.\",\n    \"  - If the character is '>', decrement the counter.\",\n    \"  - If the counter is negative, return False.\",\n    \"After the loop, check if the counter is zero:\",\n    \"  - If it is zero, return True.\",\n    \"  - Otherwise, return False.\"\n  ]\n}\n```", "Round_0": {"code": "def correct_bracketing(brackets: str) -> bool:\n    counter = 0\n    for char in brackets:\n        if char == '<':\n            counter += 1\n        elif char == '>':\n            counter -= 1\n        if counter < 0:\n            return False\n    return counter == 0\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [81, 81, 81, 81, 81, 81, 81, 81, 81, 81], "passed": true, "pass": true, "pass_num": 10, "round": 596, "mutate_method": "condense_two2one", "save_node": false, "parent_index": 372}
