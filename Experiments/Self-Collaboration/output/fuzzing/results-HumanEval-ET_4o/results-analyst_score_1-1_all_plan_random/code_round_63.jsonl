{"task_id": "HumanEval/70", "prompt": "def strange_sort_list(lst):\t\n'''Given list of integers, return list in strange order. Unusual sorting occurs when you begin with the smallest value, then the greatest of the rest of the numbers, and continue alternating in this manner.\nExamples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''", "entry_point": "strange_sort_list", "canonical_solution": "    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res\n", "test": ["def check(strange_sort_list):\n\tassert strange_sort_list([5, 1, 6, 3, 2]) == [1, 6, 2, 5, 3]", "def check(strange_sort_list):\n\tassert strange_sort_list([1, 2, 1, 3, 5, 8, -8, -4]) == [-8, 8, -4, 5, 1, 3, 1, 2]", "def check(strange_sort_list):\n\tassert strange_sort_list([8, 8, 8, 6, 12, 5]) == [5, 12, 6, 8, 8, 8]", "def check(strange_sort_list):\n\tassert strange_sort_list([5, 6, 4, 6, 6]) == [4, 6, 5, 6, 6]", "def check(strange_sort_list):\n\tassert strange_sort_list([9, 3, 5, 7]) == [3, 9, 5, 7]", "def check(strange_sort_list):\n\tassert strange_sort_list([6, 6, 2, 12, 13]) == [2, 13, 6, 12, 6]", "def check(strange_sort_list):\n\tassert strange_sort_list([3, 2, 4, 9, 9, 6, 7, 4]) == [2, 9, 3, 9, 4, 7, 4, 6]", "def check(strange_sort_list):\n\tassert strange_sort_list([1, 11, 9, 10, 9]) == [1, 11, 9, 10, 9]", "def check(strange_sort_list):\n\tassert strange_sort_list([4, 4, 5, 1, 4]) == [1, 5, 4, 4, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([6, 3, 1, 6, 10]) == [1, 10, 3, 6, 6]", "def check(strange_sort_list):\n\tassert strange_sort_list([2, 5, 3, 4, 9, 11, 2, 3]) == [2, 11, 2, 9, 3, 5, 3, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([9, 8, 5, 2]) == [2, 9, 5, 8]", "def check(strange_sort_list):\n\tassert strange_sort_list([5, 2, 7, 5, 2, 4, -3, -1]) == [-3, 7, -1, 5, 2, 5, 2, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([6, 2, 5, 5]) == [2, 6, 5, 5]", "def check(strange_sort_list):\n\tassert strange_sort_list([10, 10, 2, 11, 10]) == [2, 11, 10, 10, 10]", "def check(strange_sort_list):\n\tassert strange_sort_list([5, 9, 4, 2]) == [2, 9, 4, 5]", "def check(strange_sort_list):\n\tassert strange_sort_list([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]", "def check(strange_sort_list):\n\tassert strange_sort_list([5, 2, 2, 1]) == [1, 5, 2, 2]", "def check(strange_sort_list):\n\tassert strange_sort_list([8, 2, 9, 9]) == [2, 9, 8, 9]", "def check(strange_sort_list):\n\tassert strange_sort_list([2, 2, 6, 8, 6]) == [2, 8, 2, 6, 6]", "def check(strange_sort_list):\n\tassert strange_sort_list([2, 1, 8, 9, 2, 4, 8, 6]) == [1, 9, 2, 8, 2, 8, 4, 6]", "def check(strange_sort_list):\n\tassert strange_sort_list([]) == []", "def check(strange_sort_list):\n\tassert strange_sort_list([6, 2, 1, 4]) == [1, 6, 2, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([7, 2, 5, 8, 7, 2]) == [2, 8, 2, 7, 5, 7]", "def check(strange_sort_list):\n\tassert strange_sort_list([3, 4, 1, 7, 4, 6, 3, 12]) == [1, 12, 3, 7, 3, 6, 4, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([4, 4, 8, 8]) == [4, 8, 4, 8]", "def check(strange_sort_list):\n\tassert strange_sort_list([111111]) == [111111]\n\n    # Check some edge cases that are easy to work out by hand.", "def check(strange_sort_list):\n\tassert strange_sort_list([8, 4, 9, 7]) == [4, 9, 7, 8]", "def check(strange_sort_list):\n\tassert strange_sort_list([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]", "def check(strange_sort_list):\n\tassert strange_sort_list([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]", "def check(strange_sort_list):\n\tassert strange_sort_list([1, 6, 6, 3]) == [1, 6, 3, 6]", "def check(strange_sort_list):\n\tassert strange_sort_list([1, 6, 5, 7, 3, 2, -7, -6]) == [-7, 7, -6, 6, 1, 5, 2, 3]", "def check(strange_sort_list):\n\tassert strange_sort_list([4, 8, 10, 4, 4]) == [4, 10, 4, 8, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([6, 4, 4, 8]) == [4, 8, 4, 6]", "def check(strange_sort_list):\n\tassert strange_sort_list([3, 1, 3, 4, 10, 3, 9, 5]) == [1, 10, 3, 9, 3, 5, 3, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([4, 6, 4, 7, 7, 3, -1, -7]) == [-7, 7, -1, 7, 3, 6, 4, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([2, 6, 4, 2, 9, 5, -1, -6]) == [-6, 9, -1, 6, 2, 5, 2, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([1, 5, 7, 3, 8, 6]) == [1, 8, 3, 7, 5, 6]", "def check(strange_sort_list):\n\tassert strange_sort_list([3, 7, 1, 7, 4]) == [1, 7, 3, 7, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([4, 7, 6, 6, 1, 4, -2, -5]) == [-5, 7, -2, 6, 1, 6, 4, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([9, 3, 2, 5, 14]) == [2, 14, 3, 9, 5]", "def check(strange_sort_list):\n\tassert strange_sort_list([4, 10, 10, 4, 13]) == [4, 13, 4, 10, 10]", "def check(strange_sort_list):\n\tassert strange_sort_list([2, 4, 3, 4]) == [2, 4, 3, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([1, 1, 6, 7, 14]) == [1, 14, 1, 7, 6]", "def check(strange_sort_list):\n\tassert strange_sort_list([3, 5, 7, 8, 5]) == [3, 8, 5, 7, 5]", "def check(strange_sort_list):\n\tassert strange_sort_list([5, 1, 7, 5, 8]) == [1, 8, 5, 7, 5]", "def check(strange_sort_list):\n\tassert strange_sort_list([5, 6, 8, 1, 3, 1, 10, 5]) == [1, 10, 1, 8, 3, 6, 5, 5]", "def check(strange_sort_list):\n\tassert strange_sort_list([10, 4, 7, 9]) == [4, 10, 7, 9]", "def check(strange_sort_list):\n\tassert strange_sort_list([6, 2, 7, 5]) == [2, 7, 5, 6]", "def check(strange_sort_list):\n\tassert strange_sort_list([5, 4, 5, 1, 7, 2, -3, -8]) == [-8, 7, -3, 5, 1, 5, 2, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([1, 3, 7, 3, 9, 11, 4, 6]) == [1, 11, 3, 9, 3, 7, 4, 6]", "def check(strange_sort_list):\n\tassert strange_sort_list([2, 3, 2, 2, 7, 7, 2, 7]) == [2, 7, 2, 7, 2, 7, 2, 3]", "def check(strange_sort_list):\n\tassert strange_sort_list([3, 1, 3, 4]) == [1, 4, 3, 3]", "def check(strange_sort_list):\n\tassert strange_sort_list([1, 1, 3, 6, 3, 10, -6, -1]) == [-6, 10, -1, 6, 1, 3, 1, 3]", "def check(strange_sort_list):\n\tassert strange_sort_list([2, 3, 7, 5, 4, 10, -6, -9]) == [-9, 10, -6, 7, 2, 5, 3, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([5, 4, 2, 5, 12, 5]) == [2, 12, 4, 5, 5, 5]", "def check(strange_sort_list):\n\tassert strange_sort_list([1, 4, 1, 4, 8]) == [1, 8, 1, 4, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([1, 2, 7, 3]) == [1, 7, 2, 3]", "def check(strange_sort_list):\n\tassert strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]", "def check(strange_sort_list):\n\tassert strange_sort_list([3, 4, 3, 7, 9]) == [3, 9, 3, 7, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([9, 3, 9, 1]) == [1, 9, 3, 9]", "def check(strange_sort_list):\n\tassert strange_sort_list([7, 9, 2, 6, 4]) == [2, 9, 4, 7, 6]", "def check(strange_sort_list):\n\tassert strange_sort_list([2, 2, 4, 4, 7, 4]) == [2, 7, 2, 4, 4, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([6, 7, 4, 5, 14, 5]) == [4, 14, 5, 7, 5, 6]", "def check(strange_sort_list):\n\tassert strange_sort_list([7, 4, 2, 4, 14, 5]) == [2, 14, 4, 7, 4, 5]", "def check(strange_sort_list):\n\tassert strange_sort_list([10, 11, 9, 6, 12]) == [6, 12, 9, 11, 10]", "def check(strange_sort_list):\n\tassert strange_sort_list([4, 5, 2, 2]) == [2, 5, 2, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([1, 1, 1, 2, 1]) == [1, 2, 1, 1, 1]", "def check(strange_sort_list):\n\tassert strange_sort_list([5, 1, 7, 2, 10, 7, 5, 5]) == [1, 10, 2, 7, 5, 7, 5, 5]", "def check(strange_sort_list):\n\tassert strange_sort_list([2, 3, 6, 3, 8, 3, 7, 4]) == [2, 8, 3, 7, 3, 6, 3, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([4, 6, 1, 1]) == [1, 6, 1, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([3, 1, 3, 6, 3, 10, 7, 13]) == [1, 13, 3, 10, 3, 7, 3, 6]", "def check(strange_sort_list):\n\tassert strange_sort_list([1, 4, 5, 8]) == [1, 8, 4, 5]", "def check(strange_sort_list):\n\tassert strange_sort_list([3, 2, 3, 2]) == [2, 3, 2, 3]", "def check(strange_sort_list):\n\tassert strange_sort_list([4, 9, 7, 9]) == [4, 9, 7, 9]", "def check(strange_sort_list):\n\tassert strange_sort_list([7, 1, 4, 13, 10]) == [1, 13, 4, 10, 7]", "def check(strange_sort_list):\n\tassert strange_sort_list([2, 3, 6, 6]) == [2, 6, 3, 6]", "def check(strange_sort_list):\n\tassert strange_sort_list([1, 3, 5, 4, 9, 1, -9, -10]) == [-10, 9, -9, 5, 1, 4, 1, 3]", "def check(strange_sort_list):\n\tassert strange_sort_list([5, 5, 5, 8, 14]) == [5, 14, 5, 8, 5]", "def check(strange_sort_list):\n\tassert strange_sort_list([8, 9, 2, 8]) == [2, 9, 8, 8]", "def check(strange_sort_list):\n\tassert strange_sort_list([4, 4, 5, 11, 8, 4]) == [4, 11, 4, 8, 4, 5]", "def check(strange_sort_list):\n\tassert strange_sort_list([2, 2, 5, 6, 6, 10, -4, -6]) == [-6, 10, -4, 6, 2, 6, 2, 5]", "def check(strange_sort_list):\n\tassert strange_sort_list([1, 6, 12, 6, 9, 6]) == [1, 12, 6, 9, 6, 6]", "def check(strange_sort_list):\n\tassert strange_sort_list([1, 1, 1, 5, 5, 9, -7, -8]) == [-8, 9, -7, 5, 1, 5, 1, 1]", "def check(strange_sort_list):\n\tassert strange_sort_list([3, 4, 3, 5, 7]) == [3, 7, 3, 5, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([3, 5, 2, 4, 3, 6, -3, 0]) == [-3, 6, 0, 5, 2, 4, 3, 3]", "def check(strange_sort_list):\n\tassert strange_sort_list([8, 3, 9, 5, 5]) == [3, 9, 5, 8, 5]", "def check(strange_sort_list):\n\tassert strange_sort_list([1, 4, 6, 5, 10, 7, 5, 3]) == [1, 10, 3, 7, 4, 6, 5, 5]", "def check(strange_sort_list):\n\tassert strange_sort_list([4, 2, 9, 6, 5, 1]) == [1, 9, 2, 6, 4, 5]", "def check(strange_sort_list):\n\tassert strange_sort_list([5, 5, 5, 6, 2]) == [2, 6, 5, 5, 5]", "def check(strange_sort_list):\n\tassert strange_sort_list([1, 1, 6, 1, 4]) == [1, 6, 1, 4, 1]", "def check(strange_sort_list):\n\tassert strange_sort_list([7, 2, 6, 11, 10]) == [2, 11, 6, 10, 7]", "def check(strange_sort_list):\n\tassert strange_sort_list([4, 1, 8, 7, 9, 3, 12, 5]) == [1, 12, 3, 9, 4, 8, 5, 7]", "def check(strange_sort_list):\n\tassert strange_sort_list([10, 7, 5, 3]) == [3, 10, 5, 7]", "def check(strange_sort_list):\n\tassert strange_sort_list([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]", "def check(strange_sort_list):\n\tassert strange_sort_list([5, 6, 6, 9]) == [5, 9, 6, 6]", "def check(strange_sort_list):\n\tassert strange_sort_list([7, 8, 12, 11, 11, 5]) == [5, 12, 7, 11, 8, 11]", "def check(strange_sort_list):\n\tassert strange_sort_list([2, 2, 4, 7, 2, 6, 6, 3]) == [2, 7, 2, 6, 2, 6, 3, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]", "def check(strange_sort_list):\n\tassert strange_sort_list([8, 6, 12, 4, 4, 4]) == [4, 12, 4, 8, 4, 6]", "def check(strange_sort_list):\n\tassert strange_sort_list([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]", "def check(strange_sort_list):\n\tassert strange_sort_list([6, 2, 5, 1]) == [1, 6, 2, 5]", "def check(strange_sort_list):\n\tassert strange_sort_list([1, 7, 9, 11, 4]) == [1, 11, 4, 9, 7]", "def check(strange_sort_list):\n\tassert strange_sort_list([2, 7, 12, 13, 8, 2]) == [2, 13, 2, 12, 7, 8]", "def check(strange_sort_list):\n\tassert strange_sort_list([4, 7, 7, 1, 10, 3, 0, -6]) == [-6, 10, 0, 7, 1, 7, 3, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([4, 9, 6, 8, 11, 3]) == [3, 11, 4, 9, 6, 8]", "def check(strange_sort_list):\n\tassert strange_sort_list([4, 3, 1, 6]) == [1, 6, 3, 4]"], "test_case_list": ["assert strange_sort_list([5, 1, 6, 3, 2]) == [1, 6, 2, 5, 3]", "assert strange_sort_list([1, 2, 1, 3, 5, 8, -8, -4]) == [-8, 8, -4, 5, 1, 3, 1, 2]", "assert strange_sort_list([8, 8, 8, 6, 12, 5]) == [5, 12, 6, 8, 8, 8]", "assert strange_sort_list([5, 6, 4, 6, 6]) == [4, 6, 5, 6, 6]", "assert strange_sort_list([9, 3, 5, 7]) == [3, 9, 5, 7]", "assert strange_sort_list([6, 6, 2, 12, 13]) == [2, 13, 6, 12, 6]", "assert strange_sort_list([3, 2, 4, 9, 9, 6, 7, 4]) == [2, 9, 3, 9, 4, 7, 4, 6]", "assert strange_sort_list([1, 11, 9, 10, 9]) == [1, 11, 9, 10, 9]", "assert strange_sort_list([4, 4, 5, 1, 4]) == [1, 5, 4, 4, 4]", "assert strange_sort_list([6, 3, 1, 6, 10]) == [1, 10, 3, 6, 6]", "assert strange_sort_list([2, 5, 3, 4, 9, 11, 2, 3]) == [2, 11, 2, 9, 3, 5, 3, 4]", "assert strange_sort_list([9, 8, 5, 2]) == [2, 9, 5, 8]", "assert strange_sort_list([5, 2, 7, 5, 2, 4, -3, -1]) == [-3, 7, -1, 5, 2, 5, 2, 4]", "assert strange_sort_list([6, 2, 5, 5]) == [2, 6, 5, 5]", "assert strange_sort_list([10, 10, 2, 11, 10]) == [2, 11, 10, 10, 10]", "assert strange_sort_list([5, 9, 4, 2]) == [2, 9, 4, 5]", "assert strange_sort_list([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]", "assert strange_sort_list([5, 2, 2, 1]) == [1, 5, 2, 2]", "assert strange_sort_list([8, 2, 9, 9]) == [2, 9, 8, 9]", "assert strange_sort_list([2, 2, 6, 8, 6]) == [2, 8, 2, 6, 6]", "assert strange_sort_list([2, 1, 8, 9, 2, 4, 8, 6]) == [1, 9, 2, 8, 2, 8, 4, 6]", "assert strange_sort_list([]) == []", "assert strange_sort_list([6, 2, 1, 4]) == [1, 6, 2, 4]", "assert strange_sort_list([7, 2, 5, 8, 7, 2]) == [2, 8, 2, 7, 5, 7]", "assert strange_sort_list([3, 4, 1, 7, 4, 6, 3, 12]) == [1, 12, 3, 7, 3, 6, 4, 4]", "assert strange_sort_list([4, 4, 8, 8]) == [4, 8, 4, 8]", "assert strange_sort_list([111111]) == [111111]\n\n    # Check some edge cases that are easy to work out by hand.", "assert strange_sort_list([8, 4, 9, 7]) == [4, 9, 7, 8]", "assert strange_sort_list([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]", "assert strange_sort_list([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]", "assert strange_sort_list([1, 6, 6, 3]) == [1, 6, 3, 6]", "assert strange_sort_list([1, 6, 5, 7, 3, 2, -7, -6]) == [-7, 7, -6, 6, 1, 5, 2, 3]", "assert strange_sort_list([4, 8, 10, 4, 4]) == [4, 10, 4, 8, 4]", "assert strange_sort_list([6, 4, 4, 8]) == [4, 8, 4, 6]", "assert strange_sort_list([3, 1, 3, 4, 10, 3, 9, 5]) == [1, 10, 3, 9, 3, 5, 3, 4]", "assert strange_sort_list([4, 6, 4, 7, 7, 3, -1, -7]) == [-7, 7, -1, 7, 3, 6, 4, 4]", "assert strange_sort_list([2, 6, 4, 2, 9, 5, -1, -6]) == [-6, 9, -1, 6, 2, 5, 2, 4]", "assert strange_sort_list([1, 5, 7, 3, 8, 6]) == [1, 8, 3, 7, 5, 6]", "assert strange_sort_list([3, 7, 1, 7, 4]) == [1, 7, 3, 7, 4]", "assert strange_sort_list([4, 7, 6, 6, 1, 4, -2, -5]) == [-5, 7, -2, 6, 1, 6, 4, 4]", "assert strange_sort_list([9, 3, 2, 5, 14]) == [2, 14, 3, 9, 5]", "assert strange_sort_list([4, 10, 10, 4, 13]) == [4, 13, 4, 10, 10]", "assert strange_sort_list([2, 4, 3, 4]) == [2, 4, 3, 4]", "assert strange_sort_list([1, 1, 6, 7, 14]) == [1, 14, 1, 7, 6]", "assert strange_sort_list([3, 5, 7, 8, 5]) == [3, 8, 5, 7, 5]", "assert strange_sort_list([5, 1, 7, 5, 8]) == [1, 8, 5, 7, 5]", "assert strange_sort_list([5, 6, 8, 1, 3, 1, 10, 5]) == [1, 10, 1, 8, 3, 6, 5, 5]", "assert strange_sort_list([10, 4, 7, 9]) == [4, 10, 7, 9]", "assert strange_sort_list([6, 2, 7, 5]) == [2, 7, 5, 6]", "assert strange_sort_list([5, 4, 5, 1, 7, 2, -3, -8]) == [-8, 7, -3, 5, 1, 5, 2, 4]", "assert strange_sort_list([1, 3, 7, 3, 9, 11, 4, 6]) == [1, 11, 3, 9, 3, 7, 4, 6]", "assert strange_sort_list([2, 3, 2, 2, 7, 7, 2, 7]) == [2, 7, 2, 7, 2, 7, 2, 3]", "assert strange_sort_list([3, 1, 3, 4]) == [1, 4, 3, 3]", "assert strange_sort_list([1, 1, 3, 6, 3, 10, -6, -1]) == [-6, 10, -1, 6, 1, 3, 1, 3]", "assert strange_sort_list([2, 3, 7, 5, 4, 10, -6, -9]) == [-9, 10, -6, 7, 2, 5, 3, 4]", "assert strange_sort_list([5, 4, 2, 5, 12, 5]) == [2, 12, 4, 5, 5, 5]", "assert strange_sort_list([1, 4, 1, 4, 8]) == [1, 8, 1, 4, 4]", "assert strange_sort_list([1, 2, 7, 3]) == [1, 7, 2, 3]", "assert strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]", "assert strange_sort_list([3, 4, 3, 7, 9]) == [3, 9, 3, 7, 4]", "assert strange_sort_list([9, 3, 9, 1]) == [1, 9, 3, 9]", "assert strange_sort_list([7, 9, 2, 6, 4]) == [2, 9, 4, 7, 6]", "assert strange_sort_list([2, 2, 4, 4, 7, 4]) == [2, 7, 2, 4, 4, 4]", "assert strange_sort_list([6, 7, 4, 5, 14, 5]) == [4, 14, 5, 7, 5, 6]", "assert strange_sort_list([7, 4, 2, 4, 14, 5]) == [2, 14, 4, 7, 4, 5]", "assert strange_sort_list([10, 11, 9, 6, 12]) == [6, 12, 9, 11, 10]", "assert strange_sort_list([4, 5, 2, 2]) == [2, 5, 2, 4]", "assert strange_sort_list([1, 1, 1, 2, 1]) == [1, 2, 1, 1, 1]", "assert strange_sort_list([5, 1, 7, 2, 10, 7, 5, 5]) == [1, 10, 2, 7, 5, 7, 5, 5]", "assert strange_sort_list([2, 3, 6, 3, 8, 3, 7, 4]) == [2, 8, 3, 7, 3, 6, 3, 4]", "assert strange_sort_list([4, 6, 1, 1]) == [1, 6, 1, 4]", "assert strange_sort_list([3, 1, 3, 6, 3, 10, 7, 13]) == [1, 13, 3, 10, 3, 7, 3, 6]", "assert strange_sort_list([1, 4, 5, 8]) == [1, 8, 4, 5]", "assert strange_sort_list([3, 2, 3, 2]) == [2, 3, 2, 3]", "assert strange_sort_list([4, 9, 7, 9]) == [4, 9, 7, 9]", "assert strange_sort_list([7, 1, 4, 13, 10]) == [1, 13, 4, 10, 7]", "assert strange_sort_list([2, 3, 6, 6]) == [2, 6, 3, 6]", "assert strange_sort_list([1, 3, 5, 4, 9, 1, -9, -10]) == [-10, 9, -9, 5, 1, 4, 1, 3]", "assert strange_sort_list([5, 5, 5, 8, 14]) == [5, 14, 5, 8, 5]", "assert strange_sort_list([8, 9, 2, 8]) == [2, 9, 8, 8]", "assert strange_sort_list([4, 4, 5, 11, 8, 4]) == [4, 11, 4, 8, 4, 5]", "assert strange_sort_list([2, 2, 5, 6, 6, 10, -4, -6]) == [-6, 10, -4, 6, 2, 6, 2, 5]", "assert strange_sort_list([1, 6, 12, 6, 9, 6]) == [1, 12, 6, 9, 6, 6]", "assert strange_sort_list([1, 1, 1, 5, 5, 9, -7, -8]) == [-8, 9, -7, 5, 1, 5, 1, 1]", "assert strange_sort_list([3, 4, 3, 5, 7]) == [3, 7, 3, 5, 4]", "assert strange_sort_list([3, 5, 2, 4, 3, 6, -3, 0]) == [-3, 6, 0, 5, 2, 4, 3, 3]", "assert strange_sort_list([8, 3, 9, 5, 5]) == [3, 9, 5, 8, 5]", "assert strange_sort_list([1, 4, 6, 5, 10, 7, 5, 3]) == [1, 10, 3, 7, 4, 6, 5, 5]", "assert strange_sort_list([4, 2, 9, 6, 5, 1]) == [1, 9, 2, 6, 4, 5]", "assert strange_sort_list([5, 5, 5, 6, 2]) == [2, 6, 5, 5, 5]", "assert strange_sort_list([1, 1, 6, 1, 4]) == [1, 6, 1, 4, 1]", "assert strange_sort_list([7, 2, 6, 11, 10]) == [2, 11, 6, 10, 7]", "assert strange_sort_list([4, 1, 8, 7, 9, 3, 12, 5]) == [1, 12, 3, 9, 4, 8, 5, 7]", "assert strange_sort_list([10, 7, 5, 3]) == [3, 10, 5, 7]", "assert strange_sort_list([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]", "assert strange_sort_list([5, 6, 6, 9]) == [5, 9, 6, 6]", "assert strange_sort_list([7, 8, 12, 11, 11, 5]) == [5, 12, 7, 11, 8, 11]", "assert strange_sort_list([2, 2, 4, 7, 2, 6, 6, 3]) == [2, 7, 2, 6, 2, 6, 3, 4]", "assert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert strange_sort_list([8, 6, 12, 4, 4, 4]) == [4, 12, 4, 8, 4, 6]", "assert strange_sort_list([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]", "assert strange_sort_list([6, 2, 5, 1]) == [1, 6, 2, 5]", "assert strange_sort_list([1, 7, 9, 11, 4]) == [1, 11, 4, 9, 7]", "assert strange_sort_list([2, 7, 12, 13, 8, 2]) == [2, 13, 2, 12, 7, 8]", "assert strange_sort_list([4, 7, 7, 1, 10, 3, 0, -6]) == [-6, 10, 0, 7, 1, 7, 3, 4]", "assert strange_sort_list([4, 9, 6, 8, 11, 3]) == [3, 11, 4, 9, 6, 8]", "assert strange_sort_list([4, 3, 1, 6]) == [1, 6, 3, 4]"], "nl": "\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    ", "func": "def strange_sort_list(lst):", "examples": "Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    ", "completion": "def strange_sort_list(lst):\n    '''Given list of integers, return list in strange order. Unusual sorting occurs when you begin with the smallest value, then the greatest of the rest of the numbers, and continue alternating in this manner.\n    Examples:\n        strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n        strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n        strange_sort_list([]) == []\n    '''\n    # Sort the list in ascending order\n    lst.sort()\n    \n    # Initialize two pointers\n    start = 0\n    end = len(lst) - 1\n    \n    # Create an empty result list\n    result = []\n    \n    # While there are elements between the two pointers\n    while start <= end:\n        # Append the element at the start pointer\n        result.append(lst[start])\n        start += 1\n        \n        # Check if the start pointer is still less than or equal to the end pointer\n        if start <= end:\n            # Append the element at the end pointer\n            result.append(lst[end])\n            end -= 1\n    \n    return result\n", "completions": ["def strange_sort_list(lst):\n    '''Given list of integers, return list in strange order. Unusual sorting occurs when you begin with the smallest value, then the greatest of the rest of the numbers, and continue alternating in this manner.\n    Examples:\n        strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n        strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n        strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n\n    result = []\n    while lst:\n        smallest = min(lst)\n        result.append(smallest)\n        lst.remove(smallest)\n\n        if lst:\n            largest = max(lst)\n            result.append(largest)\n            lst.remove(largest)\n\n    return result\n", "def strange_sort_list(lst):\n    '''Given list of integers, return list in strange order. Unusual sorting occurs when you begin with the smallest value, then the greatest of the rest of the numbers, and continue alternating in this manner.\n    Examples:\n        strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n        strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n        strange_sort_list([]) == []\n    '''\n    # Sort the input list\n    lst.sort()\n    \n    # Initialize two pointers\n    left = 0\n    right = len(lst) - 1\n    \n    # Create an empty result list\n    result = []\n    \n    # Alternate between smallest and largest\n    while left <= right:\n        result.append(lst[left])\n        left += 1\n        if left <= right:\n            result.append(lst[right])\n            right -= 1\n    \n    return result\n", "def strange_sort_list(lst):\n    '''Given list of integers, return list in strange order. Unusual sorting occurs when you begin with the smallest value, then the greatest of the rest of the numbers, and continue alternating in this manner.\n    Examples:\n        strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n        strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n        strange_sort_list([]) == []\n    '''\n    # Sort the input list\n    sorted_lst = sorted(lst)\n    \n    # Initialize pointers\n    left = 0\n    right = len(sorted_lst) - 1\n    \n    # Create an empty result list\n    result = []\n    \n    # Alternate between smallest and largest remaining elements\n    while left <= right:\n        # Add the smallest element\n        result.append(sorted_lst[left])\n        left += 1\n        \n        # Add the largest element if there are elements remaining\n        if left <= right:\n            result.append(sorted_lst[right])\n            right -= 1\n    \n    return result\n", "def strange_sort_list(lst):\n    '''Given list of integers, return list in strange order. Unusual sorting occurs when you begin with the smallest value, then the greatest of the rest of the numbers, and continue alternating in this manner.\n    Examples:\n        strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n        strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n        strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n\n    lst.sort()\n    result = []\n    start, end = 0, len(lst) - 1\n\n    while start <= end:\n        result.append(lst[start])\n        start += 1\n        if start <= end:\n            result.append(lst[end])\n            end -= 1\n\n    return result\n", "def strange_sort_list(lst):\n    '''Given list of integers, return list in strange order. Unusual sorting occurs when you begin with the smallest value, then the greatest of the rest of the numbers, and continue alternating in this manner.\n    Examples:\n        strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n        strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n        strange_sort_list([]) == []\n    '''\n    # Sort the input list\n    lst.sort()\n    \n    # Initialize pointers\n    left = 0\n    right = len(lst) - 1\n    \n    # Create an empty result list\n    result = []\n    \n    # Alternate between smallest and largest\n    while left <= right:\n        if left == right:\n            result.append(lst[left])\n        else:\n            result.append(lst[left])\n            result.append(lst[right])\n        left += 1\n        right -= 1\n    \n    return result\n", "def strange_sort_list(lst):\n    '''Given list of integers, return list in strange order. Unusual sorting occurs when you begin with the smallest value, then the greatest of the rest of the numbers, and continue alternating in this manner.\n    Examples:\n        strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n        strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n        strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n\n    result = []\n    lst.sort()\n\n    while lst:\n        result.append(lst.pop(0))  # Add the smallest element\n        if lst:\n            result.append(lst.pop(-1))  # Add the largest element\n\n    return result\n", "def strange_sort_list(lst):\n    '''Given list of integers, return list in strange order. Unusual sorting occurs when you begin with the smallest value, then the greatest of the rest of the numbers, and continue alternating in this manner.\n    Examples:\n        strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n        strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n        strange_sort_list([]) == []\n    '''\n    # Sort the input list\n    lst.sort()\n    \n    # Initialize two pointers\n    left = 0\n    right = len(lst) - 1\n    \n    # Create an empty result list\n    result = []\n    \n    # Alternate between smallest and largest elements\n    while left <= right:\n        result.append(lst[left])\n        left += 1\n        if left <= right:\n            result.append(lst[right])\n            right -= 1\n    \n    return result\n", "def strange_sort_list(lst):\n    '''Given list of integers, return list in strange order. Unusual sorting occurs when you begin with the smallest value, then the greatest of the rest of the numbers, and continue alternating in this manner.\n    Examples:\n        strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n        strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n        strange_sort_list([]) == []\n    '''\n    # Sort the input list\n    sorted_lst = sorted(lst)\n    \n    # Initialize pointers\n    left = 0\n    right = len(sorted_lst) - 1\n    \n    # Create an empty result list\n    result = []\n    \n    # Alternate between smallest and largest remaining elements\n    while left <= right:\n        result.append(sorted_lst[left])\n        left += 1\n        if left <= right:\n            result.append(sorted_lst[right])\n            right -= 1\n    \n    return result\n", "def strange_sort_list(lst):\n    '''Given list of integers, return list in strange order. Unusual sorting occurs when you begin with the smallest value, then the greatest of the rest of the numbers, and continue alternating in this manner.\n    Examples:\n        strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n        strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n        strange_sort_list([]) == []\n    '''\n    # Sort the list of integers in ascending order\n    sorted_lst = sorted(lst)\n    \n    # Initialize two pointers: one at the start (smallest) and one at the end (largest) of the sorted list\n    start = 0\n    end = len(sorted_lst) - 1\n    \n    # Create an empty result list to store the elements in the strange order\n    result = []\n    \n    # While there are elements remaining between the two pointers\n    while start <= end:\n        # Append the element at the start pointer to the result list\n        result.append(sorted_lst[start])\n        # Move the start pointer one step forward\n        start += 1\n        \n        # If the start pointer is still less than or equal to the end pointer, append the element at the end pointer to the result list\n        if start <= end:\n            result.append(sorted_lst[end])\n            # Move the end pointer one step backward\n            end -= 1\n    \n    # Return the result list\n    return result\n", "def strange_sort_list(lst):\n    '''Given list of integers, return list in strange order. Unusual sorting occurs when you begin with the smallest value, then the greatest of the rest of the numbers, and continue alternating in this manner.\n    Examples:\n        strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n        strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n        strange_sort_list([]) == []\n    '''\n    # Sort the list in ascending order\n    lst.sort()\n    \n    # Initialize two pointers\n    start = 0\n    end = len(lst) - 1\n    \n    # Create an empty result list\n    result = []\n    \n    # While there are elements between the two pointers\n    while start <= end:\n        # Append the element at the start pointer\n        result.append(lst[start])\n        start += 1\n        \n        # Check if the start pointer is still less than or equal to the end pointer\n        if start <= end:\n            # Append the element at the end pointer\n            result.append(lst[end])\n            end -= 1\n    \n    return result\n"], "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    \"Identify the smallest and largest elements in the list.\",\n    \"Alternate between selecting the smallest and largest remaining elements.\",\n    \"Continue the process until all elements are selected.\"\n  ],\n  \"high_level_plan\": [\n    \"Sort the list of integers in ascending order.\",\n    \"Initialize two pointers: one at the start (smallest) and one at the end (largest) of the sorted list.\",\n    \"Create an empty result list to store the elements in the strange order.\",\n    \"While there are elements between the two pointers:\",\n    \"  - Append the element at the start pointer to the result list.\",\n    \"  - Move the start pointer one step forward.\",\n    \"  - Check if the start pointer is still less than or equal to the end pointer.\",\n    \"  - If so, append the element at the end pointer to the result list.\",\n    \"  - Move the end pointer one step backward.\",\n    \"Return the result list.\"\n  ]\n}\n```", "Round_0": {"code": "def strange_sort_list(lst):\n    '''Given list of integers, return list in strange order. Unusual sorting occurs when you begin with the smallest value, then the greatest of the rest of the numbers, and continue alternating in this manner.\n    Examples:\n        strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n        strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n        strange_sort_list([]) == []\n    '''\n    # Sort the list in ascending order\n    lst.sort()\n    \n    # Initialize two pointers\n    start = 0\n    end = len(lst) - 1\n    \n    # Create an empty result list\n    result = []\n    \n    # While there are elements between the two pointers\n    while start <= end:\n        # Append the element at the start pointer\n        result.append(lst[start])\n        start += 1\n        \n        # Check if the start pointer is still less than or equal to the end pointer\n        if start <= end:\n            # Append the element at the end pointer\n            result.append(lst[end])\n            end -= 1\n    \n    return result\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, "session_historys": [{"plan": "```json\n{\n  \"decomposition\": [\n    \"Identify the smallest value in the list.\",\n    \"Identify the largest value in the remaining list after removing the smallest value.\",\n    \"Alternate between selecting the smallest and largest values from the remaining list until all elements are sorted.\"\n  ],\n  \"high_level_plan\": [\n    \"Step 1: Check if the list is empty. If yes, return an empty list.\",\n    \"Step 2: Initialize an empty list to store the result.\",\n    \"Step 3: While the original list is not empty, perform the following:\",\n    \"  - Find the smallest value in the list and append it to the result list.\",\n    \"  - Remove the smallest value from the list.\",\n    \"  - If the list is not empty, find the largest value in the list and append it to the result list.\",\n    \"  - Remove the largest value from the list.\",\n    \"Step 4: Return the result list.\"\n  ]\n}\n```", "Round_0": {"code": "def strange_sort_list(lst):\n    '''Given list of integers, return list in strange order. Unusual sorting occurs when you begin with the smallest value, then the greatest of the rest of the numbers, and continue alternating in this manner.\n    Examples:\n        strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n        strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n        strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n\n    result = []\n    while lst:\n        smallest = min(lst)\n        result.append(smallest)\n        lst.remove(smallest)\n\n        if lst:\n            largest = max(lst)\n            result.append(largest)\n            lst.remove(largest)\n\n    return result\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Identify the smallest and largest elements in the list.\",\n      \"details\": \"Sort the list to easily access the smallest and largest elements.\"\n    },\n    {\n      \"description\": \"Alternate between selecting the smallest and largest remaining elements.\",\n      \"details\": \"Use two pointers or indices to track the smallest and largest elements that have not yet been added to the result list.\"\n    },\n    {\n      \"description\": \"Construct the result list based on the alternating selection.\",\n      \"details\": \"Iteratively add the selected smallest and largest elements to the result list until all elements are used.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Sort the input list to facilitate easy access to smallest and largest elements.\",\n    \"Initialize two pointers: one at the start (smallest) and one at the end (largest) of the sorted list.\",\n    \"Create an empty result list to store the elements in the required order.\",\n    \"While there are elements remaining between the two pointers:\",\n    \"  - Add the element at the smallest pointer to the result list.\",\n    \"  - Move the smallest pointer forward.\",\n    \"  - If there are still elements remaining, add the element at the largest pointer to the result list.\",\n    \"  - Move the largest pointer backward.\",\n    \"Return the result list.\"\n  ]\n}\n```", "Round_0": {"code": "def strange_sort_list(lst):\n    '''Given list of integers, return list in strange order. Unusual sorting occurs when you begin with the smallest value, then the greatest of the rest of the numbers, and continue alternating in this manner.\n    Examples:\n        strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n        strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n        strange_sort_list([]) == []\n    '''\n    # Sort the input list\n    lst.sort()\n    \n    # Initialize two pointers\n    left = 0\n    right = len(lst) - 1\n    \n    # Create an empty result list\n    result = []\n    \n    # Alternate between smallest and largest\n    while left <= right:\n        result.append(lst[left])\n        left += 1\n        if left <= right:\n            result.append(lst[right])\n            right -= 1\n    \n    return result\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Identify the smallest and largest elements in the list.\",\n      \"details\": \"Sort the list to easily access the smallest and largest elements.\"\n    },\n    {\n      \"description\": \"Alternate between selecting the smallest and largest remaining elements.\",\n      \"details\": \"Use two pointers or indices to track the smallest and largest elements that have not yet been added to the result list.\"\n    },\n    {\n      \"description\": \"Construct the result list based on the alternating selection.\",\n      \"details\": \"Iteratively add the smallest and largest elements to the result list until all elements are used.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Sort the input list to facilitate easy access to smallest and largest elements.\",\n    \"Initialize two pointers: one at the start (smallest) and one at the end (largest) of the sorted list.\",\n    \"Create an empty result list to store the elements in the required strange order.\",\n    \"While there are elements remaining between the two pointers:\",\n    \"  - Add the element at the smallest pointer to the result list.\",\n    \"  - Move the smallest pointer one step forward.\",\n    \"  - If there are still elements remaining, add the element at the largest pointer to the result list.\",\n    \"  - Move the largest pointer one step backward.\",\n    \"Return the result list.\"\n  ]\n}\n```", "Round_0": {"code": "def strange_sort_list(lst):\n    '''Given list of integers, return list in strange order. Unusual sorting occurs when you begin with the smallest value, then the greatest of the rest of the numbers, and continue alternating in this manner.\n    Examples:\n        strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n        strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n        strange_sort_list([]) == []\n    '''\n    # Sort the input list\n    sorted_lst = sorted(lst)\n    \n    # Initialize pointers\n    left = 0\n    right = len(sorted_lst) - 1\n    \n    # Create an empty result list\n    result = []\n    \n    # Alternate between smallest and largest remaining elements\n    while left <= right:\n        # Add the smallest element\n        result.append(sorted_lst[left])\n        left += 1\n        \n        # Add the largest element if there are elements remaining\n        if left <= right:\n            result.append(sorted_lst[right])\n            right -= 1\n    \n    return result\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"decomposed_subproblems\": [\n    \"Identify the smallest and largest elements in the list.\",\n    \"Alternate between selecting the smallest and largest remaining elements.\",\n    \"Continue the process until all elements are selected.\"\n  ],\n  \"high_level_plan\": [\n    \"Step 1: Check if the input list is empty. If it is, return an empty list.\",\n    \"Step 2: Initialize two pointers or indices, one for the start of the list and one for the end.\",\n    \"Step 3: Create an empty result list to store the sorted elements.\",\n    \"Step 4: Use a loop to iterate until the start pointer is greater than the end pointer.\",\n    \"Step 5: In each iteration, append the element at the start pointer to the result list, then increment the start pointer.\",\n    \"Step 6: Check if the start pointer is still less than or equal to the end pointer. If so, append the element at the end pointer to the result list, then decrement the end pointer.\",\n    \"Step 7: Repeat steps 4 to 6 until all elements are added to the result list.\",\n    \"Step 8: Return the result list.\"\n  ]\n}\n```", "Round_0": {"code": "def strange_sort_list(lst):\n    '''Given list of integers, return list in strange order. Unusual sorting occurs when you begin with the smallest value, then the greatest of the rest of the numbers, and continue alternating in this manner.\n    Examples:\n        strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n        strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n        strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n\n    lst.sort()\n    result = []\n    start, end = 0, len(lst) - 1\n\n    while start <= end:\n        result.append(lst[start])\n        start += 1\n        if start <= end:\n            result.append(lst[end])\n            end -= 1\n\n    return result\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Identify the smallest and largest elements in the list.\",\n      \"details\": \"Sort the list to easily access the smallest and largest elements.\"\n    },\n    {\n      \"description\": \"Alternate between selecting the smallest and largest remaining elements.\",\n      \"details\": \"Use two pointers or indices to track the smallest and largest elements that have not yet been added to the result list.\"\n    },\n    {\n      \"description\": \"Construct the result list based on the alternating selection.\",\n      \"details\": \"Iteratively add the smallest and largest elements to the result list until all elements are used.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Sort the input list to facilitate easy access to smallest and largest elements.\",\n    \"Initialize two pointers: one at the start (smallest) and one at the end (largest) of the sorted list.\",\n    \"Create an empty result list to store the elements in the required strange order.\",\n    \"Iterate over the list, alternating between adding the element at the smallest pointer and the largest pointer to the result list.\",\n    \"After adding an element, move the respective pointer inward (increment the smallest pointer or decrement the largest pointer).\",\n    \"Continue the process until all elements from the original list are added to the result list.\",\n    \"Return the result list as the final output.\"\n  ]\n}\n```", "Round_0": {"code": "def strange_sort_list(lst):\n    '''Given list of integers, return list in strange order. Unusual sorting occurs when you begin with the smallest value, then the greatest of the rest of the numbers, and continue alternating in this manner.\n    Examples:\n        strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n        strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n        strange_sort_list([]) == []\n    '''\n    # Sort the input list\n    lst.sort()\n    \n    # Initialize pointers\n    left = 0\n    right = len(lst) - 1\n    \n    # Create an empty result list\n    result = []\n    \n    # Alternate between smallest and largest\n    while left <= right:\n        if left == right:\n            result.append(lst[left])\n        else:\n            result.append(lst[left])\n            result.append(lst[right])\n        left += 1\n        right -= 1\n    \n    return result\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"decomposition\": [\n    \"Identify the smallest value in the list.\",\n    \"Identify the largest value in the remaining list.\",\n    \"Alternate between selecting the smallest and largest values from the remaining list until all elements are sorted.\"\n  ],\n  \"high_level_plan\": [\n    \"Step 1: Check if the list is empty. If so, return an empty list.\",\n    \"Step 2: Initialize two pointers or indices to track the smallest and largest values.\",\n    \"Step 3: Create a loop to iterate over the list until all elements are sorted.\",\n    \"Step 4: In each iteration, find the smallest value from the remaining unsorted elements and add it to the result list.\",\n    \"Step 5: Find the largest value from the remaining unsorted elements and add it to the result list.\",\n    \"Step 6: Repeat steps 4 and 5 until all elements are added to the result list.\",\n    \"Step 7: Return the result list.\"\n  ]\n}\n```", "Round_0": {"code": "def strange_sort_list(lst):\n    '''Given list of integers, return list in strange order. Unusual sorting occurs when you begin with the smallest value, then the greatest of the rest of the numbers, and continue alternating in this manner.\n    Examples:\n        strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n        strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n        strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n\n    result = []\n    lst.sort()\n\n    while lst:\n        result.append(lst.pop(0))  # Add the smallest element\n        if lst:\n            result.append(lst.pop(-1))  # Add the largest element\n\n    return result\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Identify the smallest and largest elements in the list.\",\n      \"details\": \"Sort the list to easily access the smallest and largest elements.\"\n    },\n    {\n      \"description\": \"Alternate between selecting the smallest and largest remaining elements.\",\n      \"details\": \"Use two pointers or indices to track the smallest and largest elements that have not yet been added to the result list.\"\n    },\n    {\n      \"description\": \"Construct the result list based on the alternating selection.\",\n      \"details\": \"Iteratively add the smallest and largest elements to the result list until all elements are used.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Sort the input list to facilitate easy access to smallest and largest elements.\",\n    \"Initialize two pointers: one at the start (smallest) and one at the end (largest) of the sorted list.\",\n    \"Create an empty result list to store the elements in the required strange order.\",\n    \"While there are elements remaining between the two pointers:\",\n    \"  - Add the element at the smallest pointer to the result list and move the pointer forward.\",\n    \"  - If there are still elements remaining, add the element at the largest pointer to the result list and move the pointer backward.\",\n    \"Return the result list.\"\n  ]\n}\n```", "Round_0": {"code": "def strange_sort_list(lst):\n    '''Given list of integers, return list in strange order. Unusual sorting occurs when you begin with the smallest value, then the greatest of the rest of the numbers, and continue alternating in this manner.\n    Examples:\n        strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n        strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n        strange_sort_list([]) == []\n    '''\n    # Sort the input list\n    lst.sort()\n    \n    # Initialize two pointers\n    left = 0\n    right = len(lst) - 1\n    \n    # Create an empty result list\n    result = []\n    \n    # Alternate between smallest and largest elements\n    while left <= right:\n        result.append(lst[left])\n        left += 1\n        if left <= right:\n            result.append(lst[right])\n            right -= 1\n    \n    return result\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Identify the smallest and largest elements in the list.\",\n      \"details\": \"Sort the list to easily access the smallest and largest elements.\"\n    },\n    {\n      \"description\": \"Alternate between selecting the smallest and largest remaining elements.\",\n      \"details\": \"Use two pointers or indices to track the smallest and largest elements that have not yet been added to the result list.\"\n    },\n    {\n      \"description\": \"Construct the result list based on the alternating selection.\",\n      \"details\": \"Iteratively add the selected elements to the result list until all elements are used.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Sort the input list to facilitate easy access to smallest and largest elements.\",\n    \"Initialize two pointers: one at the start (smallest) and one at the end (largest) of the sorted list.\",\n    \"Create an empty result list to store the elements in the required order.\",\n    \"Iterate over the list, alternating between adding the element at the smallest pointer and the largest pointer to the result list.\",\n    \"After adding an element, move the respective pointer inward (increment the smallest pointer or decrement the largest pointer).\",\n    \"Continue the process until all elements from the original list are added to the result list.\",\n    \"Return the result list.\"\n  ]\n}\n```", "Round_0": {"code": "def strange_sort_list(lst):\n    '''Given list of integers, return list in strange order. Unusual sorting occurs when you begin with the smallest value, then the greatest of the rest of the numbers, and continue alternating in this manner.\n    Examples:\n        strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n        strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n        strange_sort_list([]) == []\n    '''\n    # Sort the input list\n    sorted_lst = sorted(lst)\n    \n    # Initialize pointers\n    left = 0\n    right = len(sorted_lst) - 1\n    \n    # Create an empty result list\n    result = []\n    \n    # Alternate between smallest and largest remaining elements\n    while left <= right:\n        result.append(sorted_lst[left])\n        left += 1\n        if left <= right:\n            result.append(sorted_lst[right])\n            right -= 1\n    \n    return result\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    \"Identify the smallest and largest elements in the list.\",\n    \"Alternate between selecting the smallest and largest remaining elements.\",\n    \"Continue the process until all elements are selected.\"\n  ],\n  \"high_level_plan\": [\n    \"Sort the list of integers in ascending order.\",\n    \"Initialize two pointers: one at the start (smallest) and one at the end (largest) of the sorted list.\",\n    \"Create an empty result list to store the elements in the strange order.\",\n    \"While there are elements remaining between the two pointers:\",\n    \"  - Append the element at the start pointer to the result list.\",\n    \"  - Move the start pointer one step forward.\",\n    \"  - If the start pointer is still less than or equal to the end pointer, append the element at the end pointer to the result list.\",\n    \"  - Move the end pointer one step backward.\",\n    \"Return the result list.\"\n  ]\n}\n```", "Round_0": {"code": "def strange_sort_list(lst):\n    '''Given list of integers, return list in strange order. Unusual sorting occurs when you begin with the smallest value, then the greatest of the rest of the numbers, and continue alternating in this manner.\n    Examples:\n        strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n        strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n        strange_sort_list([]) == []\n    '''\n    # Sort the list of integers in ascending order\n    sorted_lst = sorted(lst)\n    \n    # Initialize two pointers: one at the start (smallest) and one at the end (largest) of the sorted list\n    start = 0\n    end = len(sorted_lst) - 1\n    \n    # Create an empty result list to store the elements in the strange order\n    result = []\n    \n    # While there are elements remaining between the two pointers\n    while start <= end:\n        # Append the element at the start pointer to the result list\n        result.append(sorted_lst[start])\n        # Move the start pointer one step forward\n        start += 1\n        \n        # If the start pointer is still less than or equal to the end pointer, append the element at the end pointer to the result list\n        if start <= end:\n            result.append(sorted_lst[end])\n            # Move the end pointer one step backward\n            end -= 1\n    \n    # Return the result list\n    return result\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    \"Identify the smallest and largest elements in the list.\",\n    \"Alternate between selecting the smallest and largest remaining elements.\",\n    \"Continue the process until all elements are selected.\"\n  ],\n  \"high_level_plan\": [\n    \"Sort the list of integers in ascending order.\",\n    \"Initialize two pointers: one at the start (smallest) and one at the end (largest) of the sorted list.\",\n    \"Create an empty result list to store the elements in the strange order.\",\n    \"While there are elements between the two pointers:\",\n    \"  - Append the element at the start pointer to the result list.\",\n    \"  - Move the start pointer one step forward.\",\n    \"  - Check if the start pointer is still less than or equal to the end pointer.\",\n    \"  - If so, append the element at the end pointer to the result list.\",\n    \"  - Move the end pointer one step backward.\",\n    \"Return the result list.\"\n  ]\n}\n```", "Round_0": {"code": "def strange_sort_list(lst):\n    '''Given list of integers, return list in strange order. Unusual sorting occurs when you begin with the smallest value, then the greatest of the rest of the numbers, and continue alternating in this manner.\n    Examples:\n        strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n        strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n        strange_sort_list([]) == []\n    '''\n    # Sort the list in ascending order\n    lst.sort()\n    \n    # Initialize two pointers\n    start = 0\n    end = len(lst) - 1\n    \n    # Create an empty result list\n    result = []\n    \n    # While there are elements between the two pointers\n    while start <= end:\n        # Append the element at the start pointer\n        result.append(lst[start])\n        start += 1\n        \n        # Check if the start pointer is still less than or equal to the end pointer\n        if start <= end:\n            # Append the element at the end pointer\n            result.append(lst[end])\n            end -= 1\n    \n    return result\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [107, 107, 107, 107, 107, 107, 107, 107, 107, 107], "passed": true, "pass": true, "pass_num": 10, "round": 63, "mutate_method": "rephrase_one", "save_node": false, "parent_index": 63}
