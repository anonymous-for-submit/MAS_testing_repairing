{"task_id": "HumanEval/126", "prompt": "def is_sorted(lst):\t\n'''Given a list of numbers, return whether or not they are sorted in ascending order. If list has more than 1 duplicate of the same number, return False. Assume no negative numbers and only integers. Ensure your solution is efficient with respect to both time and space complexity.\nExamples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''", "entry_point": "is_sorted", "canonical_solution": "    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1 \n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n    \n    \n", "test": ["def check(is_sorted):\n\tassert is_sorted([1, 1, 3, 6, 7, 8]) == True", "def check(is_sorted):\n\tassert is_sorted([6, 2, 2, 3, 10, 4, 6]) == False", "def check(is_sorted):\n\tassert is_sorted([2, 3, 3, 5]) == True", "def check(is_sorted):\n\tassert is_sorted([1, 4, 4, 5, 6, 6, 10]) == True", "def check(is_sorted):\n\tassert is_sorted([3, 7, 5]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 1, 3, 5, 6, 6]) == True", "def check(is_sorted):\n\tassert is_sorted([5, 6, 3]) == False", "def check(is_sorted):\n\tassert is_sorted([3, 4, 4, 4, 4, 7]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 5, 7, 4, 4, 2]) == False", "def check(is_sorted):\n\tassert is_sorted([2, 2, 6, 8]) == True", "def check(is_sorted):\n\tassert is_sorted([3, 4, 6, 7, 7]) == True", "def check(is_sorted):\n\tassert is_sorted([3, 3, 5, 7, 1, 5]) == False", "def check(is_sorted):\n\tassert is_sorted([2, 4, 8, 9]) == True", "def check(is_sorted):\n\tassert is_sorted([6, 4, 4]) == False", "def check(is_sorted):\n\tassert is_sorted([8, 1, 2]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 3, 4, 5]) == True", "def check(is_sorted):\n\tassert is_sorted([3, 6, 3, 9, 10, 4, 10]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 3, 2, 4, 5]) == False", "def check(is_sorted):\n\tassert is_sorted([1]) == True", "def check(is_sorted):\n\tassert is_sorted([1, 2, 3, 3, 4, 5, 8]) == True", "def check(is_sorted):\n\tassert is_sorted([3, 2, 1]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 1, 3, 5]) == True", "def check(is_sorted):\n\tassert is_sorted([4, 3, 5, 6, 5, 3]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 3, 5, 5, 7]) == True", "def check(is_sorted):\n\tassert is_sorted([5, 4, 6, 7, 1, 5]) == False", "def check(is_sorted):\n\tassert is_sorted([4, 5, 8, 4, 2, 7]) == False", "def check(is_sorted):\n\tassert is_sorted([2, 5, 4, 1, 1, 8, 9]) == False", "def check(is_sorted):\n\tassert is_sorted([5, 5, 2, 3, 3, 4]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 2, 2, 2, 3, 4]) == False", "def check(is_sorted):\n\tassert is_sorted([6, 1, 3, 6, 3, 7]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 1, 1, 2, 5, 8]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 2, 2, 2, 3, 4]) == False", "def check(is_sorted):\n\tassert is_sorted([2, 4, 6, 4, 3, 6, 4]) == False", "def check(is_sorted):\n\tassert is_sorted([3, 7, 7, 6, 6, 7]) == False", "def check(is_sorted):\n\tassert is_sorted([10]) == True", "def check(is_sorted):\n\tassert is_sorted([3, 3, 4, 6, 7, 8]) == True", "def check(is_sorted):\n\tassert is_sorted([2, 2, 2, 5, 8, 11]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 2, 3, 3, 7, 9]) == True", "def check(is_sorted):\n\tassert is_sorted([2, 4, 2, 9, 10]) == False", "def check(is_sorted):\n\tassert is_sorted([3, 4, 6, 7]) == True", "def check(is_sorted):\n\tassert is_sorted([4, 3, 6, 6, 4, 1, 9]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 2, 3, 5, 5, 8]) == True", "def check(is_sorted):\n\tassert is_sorted([6, 1, 2, 3, 3, 3]) == False", "def check(is_sorted):\n\tassert is_sorted([1]) == True", "def check(is_sorted):\n\tassert is_sorted([1, 2, 2, 4, 4, 6, 8]) == True", "def check(is_sorted):\n\tassert is_sorted([1, 3, 3, 4, 5]) == True", "def check(is_sorted):\n\tassert is_sorted([1, 4, 4, 4, 5]) == False", "def check(is_sorted):\n\tassert is_sorted([3, 2, 2, 2, 3]) == False", "def check(is_sorted):\n\tassert is_sorted([3, 5, 5, 6, 7, 8, 10]) == True", "def check(is_sorted):\n\tassert is_sorted([1, 2, 3, 4, 5]) == True", "def check(is_sorted):\n\tassert is_sorted([4]) == True", "def check(is_sorted):\n\tassert is_sorted([5, 7, 4, 2, 2, 4]) == False", "def check(is_sorted):\n\tassert is_sorted([6]) == True", "def check(is_sorted):\n\tassert is_sorted([3, 7, 4, 8, 1, 4]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 6, 3]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 3, 2, 4, 5, 6, 7]) == False", "def check(is_sorted):\n\tassert is_sorted([6, 2, 3, 5, 2, 7]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 2, 4, 4, 6, 7, 10]) == True", "def check(is_sorted):\n\tassert is_sorted([1, 5, 5, 6, 6, 9]) == True", "def check(is_sorted):\n\tassert is_sorted([2, 3, 4, 4, 8, 10]) == True", "def check(is_sorted):\n\tassert is_sorted([1, 5, 5, 6, 9]) == True", "def check(is_sorted):\n\tassert is_sorted([1, 2, 3, 4]) == True", "def check(is_sorted):\n\tassert is_sorted([2, 4, 5]) == True", "def check(is_sorted):\n\tassert is_sorted([7]) == True", "def check(is_sorted):\n\tassert is_sorted([2, 2, 3, 3, 6, 7]) == True", "def check(is_sorted):\n\tassert is_sorted([3, 3, 6, 9, 9]) == True", "def check(is_sorted):\n\tassert is_sorted([1, 5, 6, 7, 9, 10, 10]) == True", "def check(is_sorted):\n\tassert is_sorted([5, 3, 3, 3, 10]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 5, 3, 4, 3]) == False", "def check(is_sorted):\n\tassert is_sorted([2, 4, 4]) == True", "def check(is_sorted):\n\tassert is_sorted([1, 1, 2, 4, 5, 5]) == True", "def check(is_sorted):\n\tassert is_sorted([2, 5, 4]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 2, 2, 3, 3, 4]) == True", "def check(is_sorted):\n\tassert is_sorted([1, 2, 3, 4, 5, 6, 7]) == True", "def check(is_sorted):\n\tassert is_sorted([6, 3, 7, 3, 5, 6, 6]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 2, 3, 3, 3, 4]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 2, 2, 7, 8]) == True", "def check(is_sorted):\n\tassert is_sorted([2, 1, 1, 7, 8, 9, 3]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 2, 3, 4, 5, 6]) == True", "def check(is_sorted):\n\tassert is_sorted([1, 1, 1, 7, 3, 8]) == False", "def check(is_sorted):\n\tassert is_sorted([3, 8, 4, 4, 10]) == False", "def check(is_sorted):\n\tassert is_sorted([]) == True", "def check(is_sorted):\n\tassert is_sorted([1, 2, 3, 3, 5, 7, 9]) == True", "def check(is_sorted):\n\tassert is_sorted([2, 6, 1, 4, 5, 4, 2]) == False", "def check(is_sorted):\n\tassert is_sorted([2, 5, 6, 8]) == True", "def check(is_sorted):\n\tassert is_sorted([4, 5, 7, 8]) == True", "def check(is_sorted):\n\tassert is_sorted([3, 4, 4, 4, 6, 7, 8]) == False", "def check(is_sorted):\n\tassert is_sorted([3]) == True", "def check(is_sorted):\n\tassert is_sorted([3, 3, 3, 3, 5, 6]) == False", "def check(is_sorted):\n\tassert is_sorted([3, 6, 3]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 3, 4, 4, 5, 5]) == True", "def check(is_sorted):\n\tassert is_sorted([3, 1, 8, 4, 7, 4]) == False", "def check(is_sorted):\n\tassert is_sorted([5, 7, 5, 7, 10, 6, 8]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 4, 5, 5, 7, 8]) == True", "def check(is_sorted):\n\tassert is_sorted([1, 4, 6, 1, 6, 7]) == False", "def check(is_sorted):\n\tassert is_sorted([2, 3, 6, 7, 7]) == True", "def check(is_sorted):\n\tassert is_sorted([5]) == True", "def check(is_sorted):\n\tassert is_sorted([]) == True", "def check(is_sorted):\n\tassert is_sorted([3, 2, 6, 3, 6, 4]) == False", "def check(is_sorted):\n\tassert is_sorted([2, 5, 2, 2, 2, 7]) == False", "def check(is_sorted):\n\tassert is_sorted([2, 6, 3, 9, 1]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 1, 1, 3, 4]) == False", "def check(is_sorted):\n\tassert is_sorted([8]) == True", "def check(is_sorted):\n\tassert is_sorted([2, 3, 3, 5, 5, 6, 7]) == True", "def check(is_sorted):\n\tassert is_sorted([2, 4, 5, 7]) == True", "def check(is_sorted):\n\tassert is_sorted([3, 1, 3, 2, 1]) == False", "def check(is_sorted):\n\tassert is_sorted([3, 3, 4, 7, 8, 9]) == True", "def check(is_sorted):\n\tassert is_sorted([1, 5, 6, 6, 7, 7]) == True", "def check(is_sorted):\n\tassert is_sorted([6, 7, 3, 4, 8, 6]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 8, 6, 7, 8]) == False"], "test_case_list": ["assert is_sorted([1, 1, 3, 6, 7, 8]) == True", "assert is_sorted([6, 2, 2, 3, 10, 4, 6]) == False", "assert is_sorted([2, 3, 3, 5]) == True", "assert is_sorted([1, 4, 4, 5, 6, 6, 10]) == True", "assert is_sorted([3, 7, 5]) == False", "assert is_sorted([1, 1, 3, 5, 6, 6]) == True", "assert is_sorted([5, 6, 3]) == False", "assert is_sorted([3, 4, 4, 4, 4, 7]) == False", "assert is_sorted([1, 5, 7, 4, 4, 2]) == False", "assert is_sorted([2, 2, 6, 8]) == True", "assert is_sorted([3, 4, 6, 7, 7]) == True", "assert is_sorted([3, 3, 5, 7, 1, 5]) == False", "assert is_sorted([2, 4, 8, 9]) == True", "assert is_sorted([6, 4, 4]) == False", "assert is_sorted([8, 1, 2]) == False", "assert is_sorted([1, 3, 4, 5]) == True", "assert is_sorted([3, 6, 3, 9, 10, 4, 10]) == False", "assert is_sorted([1, 3, 2, 4, 5]) == False", "assert is_sorted([1]) == True", "assert is_sorted([1, 2, 3, 3, 4, 5, 8]) == True", "assert is_sorted([3, 2, 1]) == False", "assert is_sorted([1, 1, 3, 5]) == True", "assert is_sorted([4, 3, 5, 6, 5, 3]) == False", "assert is_sorted([1, 3, 5, 5, 7]) == True", "assert is_sorted([5, 4, 6, 7, 1, 5]) == False", "assert is_sorted([4, 5, 8, 4, 2, 7]) == False", "assert is_sorted([2, 5, 4, 1, 1, 8, 9]) == False", "assert is_sorted([5, 5, 2, 3, 3, 4]) == False", "assert is_sorted([1, 2, 2, 2, 3, 4]) == False", "assert is_sorted([6, 1, 3, 6, 3, 7]) == False", "assert is_sorted([1, 1, 1, 2, 5, 8]) == False", "assert is_sorted([1, 2, 2, 2, 3, 4]) == False", "assert is_sorted([2, 4, 6, 4, 3, 6, 4]) == False", "assert is_sorted([3, 7, 7, 6, 6, 7]) == False", "assert is_sorted([10]) == True", "assert is_sorted([3, 3, 4, 6, 7, 8]) == True", "assert is_sorted([2, 2, 2, 5, 8, 11]) == False", "assert is_sorted([1, 2, 3, 3, 7, 9]) == True", "assert is_sorted([2, 4, 2, 9, 10]) == False", "assert is_sorted([3, 4, 6, 7]) == True", "assert is_sorted([4, 3, 6, 6, 4, 1, 9]) == False", "assert is_sorted([1, 2, 3, 5, 5, 8]) == True", "assert is_sorted([6, 1, 2, 3, 3, 3]) == False", "assert is_sorted([1]) == True", "assert is_sorted([1, 2, 2, 4, 4, 6, 8]) == True", "assert is_sorted([1, 3, 3, 4, 5]) == True", "assert is_sorted([1, 4, 4, 4, 5]) == False", "assert is_sorted([3, 2, 2, 2, 3]) == False", "assert is_sorted([3, 5, 5, 6, 7, 8, 10]) == True", "assert is_sorted([1, 2, 3, 4, 5]) == True", "assert is_sorted([4]) == True", "assert is_sorted([5, 7, 4, 2, 2, 4]) == False", "assert is_sorted([6]) == True", "assert is_sorted([3, 7, 4, 8, 1, 4]) == False", "assert is_sorted([1, 6, 3]) == False", "assert is_sorted([1, 3, 2, 4, 5, 6, 7]) == False", "assert is_sorted([6, 2, 3, 5, 2, 7]) == False", "assert is_sorted([1, 2, 4, 4, 6, 7, 10]) == True", "assert is_sorted([1, 5, 5, 6, 6, 9]) == True", "assert is_sorted([2, 3, 4, 4, 8, 10]) == True", "assert is_sorted([1, 5, 5, 6, 9]) == True", "assert is_sorted([1, 2, 3, 4]) == True", "assert is_sorted([2, 4, 5]) == True", "assert is_sorted([7]) == True", "assert is_sorted([2, 2, 3, 3, 6, 7]) == True", "assert is_sorted([3, 3, 6, 9, 9]) == True", "assert is_sorted([1, 5, 6, 7, 9, 10, 10]) == True", "assert is_sorted([5, 3, 3, 3, 10]) == False", "assert is_sorted([1, 5, 3, 4, 3]) == False", "assert is_sorted([2, 4, 4]) == True", "assert is_sorted([1, 1, 2, 4, 5, 5]) == True", "assert is_sorted([2, 5, 4]) == False", "assert is_sorted([1, 2, 2, 3, 3, 4]) == True", "assert is_sorted([1, 2, 3, 4, 5, 6, 7]) == True", "assert is_sorted([6, 3, 7, 3, 5, 6, 6]) == False", "assert is_sorted([1, 2, 3, 3, 3, 4]) == False", "assert is_sorted([1, 2, 2, 7, 8]) == True", "assert is_sorted([2, 1, 1, 7, 8, 9, 3]) == False", "assert is_sorted([1, 2, 3, 4, 5, 6]) == True", "assert is_sorted([1, 1, 1, 7, 3, 8]) == False", "assert is_sorted([3, 8, 4, 4, 10]) == False", "assert is_sorted([]) == True", "assert is_sorted([1, 2, 3, 3, 5, 7, 9]) == True", "assert is_sorted([2, 6, 1, 4, 5, 4, 2]) == False", "assert is_sorted([2, 5, 6, 8]) == True", "assert is_sorted([4, 5, 7, 8]) == True", "assert is_sorted([3, 4, 4, 4, 6, 7, 8]) == False", "assert is_sorted([3]) == True", "assert is_sorted([3, 3, 3, 3, 5, 6]) == False", "assert is_sorted([3, 6, 3]) == False", "assert is_sorted([1, 3, 4, 4, 5, 5]) == True", "assert is_sorted([3, 1, 8, 4, 7, 4]) == False", "assert is_sorted([5, 7, 5, 7, 10, 6, 8]) == False", "assert is_sorted([1, 4, 5, 5, 7, 8]) == True", "assert is_sorted([1, 4, 6, 1, 6, 7]) == False", "assert is_sorted([2, 3, 6, 7, 7]) == True", "assert is_sorted([5]) == True", "assert is_sorted([]) == True", "assert is_sorted([3, 2, 6, 3, 6, 4]) == False", "assert is_sorted([2, 5, 2, 2, 2, 7]) == False", "assert is_sorted([2, 6, 3, 9, 1]) == False", "assert is_sorted([1, 1, 1, 3, 4]) == False", "assert is_sorted([8]) == True", "assert is_sorted([2, 3, 3, 5, 5, 6, 7]) == True", "assert is_sorted([2, 4, 5, 7]) == True", "assert is_sorted([3, 1, 3, 2, 1]) == False", "assert is_sorted([3, 3, 4, 7, 8, 9]) == True", "assert is_sorted([1, 5, 6, 6, 7, 7]) == True", "assert is_sorted([6, 7, 3, 4, 8, 6]) == False", "assert is_sorted([1, 8, 6, 7, 8]) == False"], "nl": "\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    ", "func": "def is_sorted(lst):", "examples": "Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    ", "completion": "def is_sorted(lst):\n    if len(lst) <= 1:\n        return True\n\n    # Check if the list is sorted in ascending order\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n\n    # Check for duplicates\n    count = {}\n    for num in lst:\n        if num in count:\n            count[num] += 1\n            if count[num] > 2:\n                return False\n        else:\n            count[num] = 1\n\n    return True\n", "completions": ["def is_sorted(lst):\n    if not lst:\n        return True\n\n    # Initialize a variable to track the previous number in the list\n    prev_num = lst[0]\n\n    # Dictionary to count occurrences of each number\n    count_dict = {}\n\n    # Iterate through the list\n    for num in lst:\n        # Check if the list is sorted\n        if num < prev_num:\n            return False\n        prev_num = num\n\n        # Count occurrences of each number\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n\n        # Check for more than two occurrences\n        if count_dict[num] > 2:\n            return False\n\n    # Return True if the list is sorted and no number has more than two occurrences\n    return True\n", "def is_sorted(lst):\n    if not lst:\n        return True\n\n    # Initialize a variable to track the previous number in the list\n    prev_num = None\n\n    # Dictionary to count occurrences of each number\n    count_dict = {}\n\n    # Iterate through the list\n    for num in lst:\n        # Check if the list is sorted in ascending order\n        if prev_num is not None and num < prev_num:\n            return False\n        prev_num = num\n\n        # Count occurrences of each number\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n\n    # Check for more than one duplicate of the same number\n    for count in count_dict.values():\n        if count > 2:\n            return False\n\n    return True\n", "def is_sorted(lst):\n    if not lst:\n        return True\n\n    previous = None\n    count_dict = {}\n\n    for num in lst:\n        # Check for ascending order\n        if previous is not None and num < previous:\n            return False\n        previous = num\n\n        # Count occurrences of each number\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n\n        # Check for more than one duplicate\n        if count_dict[num] > 2:\n            return False\n\n    return True\n", "def is_sorted(lst):\n    if not lst:\n        return True\n\n    # Check if the list is sorted in ascending order\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i - 1]:\n            return False\n\n    # Check for duplicates\n    from collections import Counter\n    count = Counter(lst)\n    for value in count.values():\n        if value > 2:\n            return False\n\n    return True\n", "def is_sorted(lst):\n    if len(lst) <= 1:\n        return True\n\n    # Initialize a dictionary to count occurrences of each number\n    count = {}\n\n    # Iterate through the list\n    for i in range(len(lst) - 1):\n        # Check sorting condition\n        if lst[i] > lst[i + 1]:\n            return False\n\n        # Check duplicate condition\n        if lst[i] in count:\n            count[lst[i]] += 1\n        else:\n            count[lst[i]] = 1\n\n        # If any number appears more than twice, return False\n        if count[lst[i]] > 2:\n            return False\n\n    # Check the last element for duplicates\n    last_element = lst[-1]\n    if last_element in count:\n        count[last_element] += 1\n    else:\n        count[last_element] = 1\n\n    if count[last_element] > 2:\n        return False\n\n    return True\n", "def is_sorted(lst):\n    if not lst:\n        return True\n\n    frequency = {}\n    \n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n        frequency[lst[i]] = frequency.get(lst[i], 0) + 1\n\n    # Check the last element frequency\n    frequency[lst[-1]] = frequency.get(lst[-1], 0) + 1\n\n    for count in frequency.values():\n        if count > 2:\n            return False\n\n    return True\n", "def is_sorted(lst):\n    if not lst:\n        return True\n\n    frequency = {}\n    \n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n        frequency[lst[i]] = frequency.get(lst[i], 0) + 1\n\n    # Check the last element\n    frequency[lst[-1]] = frequency.get(lst[-1], 0) + 1\n\n    for count in frequency.values():\n        if count > 2:\n            return False\n\n    return True\n", "def is_sorted(lst):\n    if not lst:\n        return True\n\n    # Check if the list is sorted in ascending order\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i - 1]:\n            return False\n\n    # Check for more than one duplicate of the same number\n    count = {}\n    for num in lst:\n        if num in count:\n            count[num] += 1\n            if count[num] > 2:\n                return False\n        else:\n            count[num] = 1\n\n    return True\n", "def is_sorted(lst):\n    # Initialize a dictionary to count occurrences of each number in the list\n    count_dict = {}\n\n    # Iterate through the list to check if it is sorted in ascending order\n    for i in range(len(lst) - 1):\n        # Update the dictionary with the count of each number\n        count_dict[lst[i]] = count_dict.get(lst[i], 0) + 1\n\n        # Check if the list is sorted in ascending order\n        if lst[i] > lst[i + 1]:\n            return False\n\n    # Update the dictionary for the last element\n    if lst:\n        count_dict[lst[-1]] = count_dict.get(lst[-1], 0) + 1\n\n    # If any number appears more than twice in the dictionary, return False\n    for count in count_dict.values():\n        if count > 2:\n            return False\n\n    # If both conditions are satisfied, return True\n    return True\n", "def is_sorted(lst):\n    if len(lst) <= 1:\n        return True\n\n    # Check if the list is sorted in ascending order\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n\n    # Check for duplicates\n    count = {}\n    for num in lst:\n        if num in count:\n            count[num] += 1\n            if count[num] > 2:\n                return False\n        else:\n            count[num] = 1\n\n    return True\n"], "session_history": {"plan": "```json\n{\n  \"decomposition\": [\n    {\n      \"subproblem\": \"Check if the list is sorted in ascending order.\",\n      \"description\": \"Iterate through the list and ensure each element is less than or equal to the next element.\"\n    },\n    {\n      \"subproblem\": \"Check for duplicates.\",\n      \"description\": \"Iterate through the list and count occurrences of each number. If any number appears more than twice, return False.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Initialize a variable to track the count of each number in the list.\"\n    },\n    {\n      \"step\": \"Iterate through the list to check if it is sorted in ascending order.\",\n      \"description\": \"Compare each element with the next one. If any element is greater than the next, return False.\"\n    },\n    {\n      \"step\": \"Iterate through the list to count occurrences of each number.\",\n      \"description\": \"Use a dictionary or similar data structure to count occurrences. If any number appears more than twice, return False.\"\n    },\n    {\n      \"step\": \"Return True if the list is sorted and no number appears more than twice.\"\n    }\n  ]\n}\n```", "Round_0": {"code": "def is_sorted(lst):\n    if len(lst) <= 1:\n        return True\n\n    # Check if the list is sorted in ascending order\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n\n    # Check for duplicates\n    count = {}\n    for num in lst:\n        if num in count:\n            count[num] += 1\n            if count[num] > 2:\n                return False\n        else:\n            count[num] = 1\n\n    return True\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, "session_historys": [{"plan": "```json\n{\n  \"decomposition\": [\n    {\n      \"subproblem\": \"Check if the list is sorted in ascending order.\",\n      \"description\": \"Iterate through the list and ensure each element is less than or equal to the next element.\"\n    },\n    {\n      \"subproblem\": \"Check for duplicates in the list.\",\n      \"description\": \"Count occurrences of each number and ensure no number appears more than twice.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Initialize a variable to track the previous number in the list.\",\n      \"description\": \"This will help in comparing each number with the previous one to check for sorting.\"\n    },\n    {\n      \"step\": \"Iterate through the list.\",\n      \"description\": \"For each number, compare it with the previous number to check if the list is sorted.\"\n    },\n    {\n      \"step\": \"Use a dictionary to count occurrences of each number.\",\n      \"description\": \"As you iterate, update the count of each number in the dictionary.\"\n    },\n    {\n      \"step\": \"Check the dictionary for any number with more than two occurrences.\",\n      \"description\": \"If found, return False.\"\n    },\n    {\n      \"step\": \"Return True if the list is sorted and no number has more than two occurrences.\",\n      \"description\": \"This indicates the list meets the requirements.\"\n    }\n  ]\n}\n```", "Round_0": {"code": "def is_sorted(lst):\n    if not lst:\n        return True\n\n    # Initialize a variable to track the previous number in the list\n    prev_num = lst[0]\n\n    # Dictionary to count occurrences of each number\n    count_dict = {}\n\n    # Iterate through the list\n    for num in lst:\n        # Check if the list is sorted\n        if num < prev_num:\n            return False\n        prev_num = num\n\n        # Count occurrences of each number\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n\n        # Check for more than two occurrences\n        if count_dict[num] > 2:\n            return False\n\n    # Return True if the list is sorted and no number has more than two occurrences\n    return True\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Check if the list is sorted in ascending order.\",\n      \"details\": \"Iterate through the list and ensure each element is less than or equal to the next element.\"\n    },\n    {\n      \"description\": \"Check for more than one duplicate of the same number.\",\n      \"details\": \"Count occurrences of each number and ensure no number appears more than twice.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Initialize a variable to track the previous number in the list.\",\n      \"details\": \"Set this variable to None initially.\"\n    },\n    {\n      \"step\": \"Iterate through the list to check for ascending order.\",\n      \"details\": \"For each number, compare it with the previous number. If it is smaller, return False.\"\n    },\n    {\n      \"step\": \"Use a dictionary to count occurrences of each number.\",\n      \"details\": \"Iterate through the list and update the count for each number in the dictionary.\"\n    },\n    {\n      \"step\": \"Check the counts for duplicates.\",\n      \"details\": \"Iterate through the dictionary and if any number has a count greater than 2, return False.\"\n    },\n    {\n      \"step\": \"Return True if all checks are passed.\",\n      \"details\": \"If the list is sorted and no number appears more than twice, return True.\"\n    }\n  ]\n}\n```", "Round_0": {"code": "def is_sorted(lst):\n    if not lst:\n        return True\n\n    # Initialize a variable to track the previous number in the list\n    prev_num = None\n\n    # Dictionary to count occurrences of each number\n    count_dict = {}\n\n    # Iterate through the list\n    for num in lst:\n        # Check if the list is sorted in ascending order\n        if prev_num is not None and num < prev_num:\n            return False\n        prev_num = num\n\n        # Count occurrences of each number\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n\n    # Check for more than one duplicate of the same number\n    for count in count_dict.values():\n        if count > 2:\n            return False\n\n    return True\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Check if the list is sorted in ascending order.\",\n      \"details\": \"Iterate through the list and ensure each element is less than or equal to the next element.\"\n    },\n    {\n      \"description\": \"Check for more than one duplicate of the same number.\",\n      \"details\": \"Count occurrences of each number and ensure no number appears more than twice.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Initialize a variable to track the previous number in the list.\",\n      \"details\": \"Set this variable to None initially.\"\n    },\n    {\n      \"step\": \"Iterate through the list to check for ascending order.\",\n      \"details\": \"For each number, compare it with the previous number. If it is smaller, return False.\"\n    },\n    {\n      \"step\": \"Use a dictionary to count occurrences of each number.\",\n      \"details\": \"Iterate through the list and update the count for each number in the dictionary.\"\n    },\n    {\n      \"step\": \"Check the counts in the dictionary.\",\n      \"details\": \"If any number has a count greater than 2, return False.\"\n    },\n    {\n      \"step\": \"Return True if all checks pass.\",\n      \"details\": \"If the list is sorted and no number appears more than twice, return True.\"\n    }\n  ]\n}\n```", "Round_0": {"code": "def is_sorted(lst):\n    if not lst:\n        return True\n\n    previous = None\n    count_dict = {}\n\n    for num in lst:\n        # Check for ascending order\n        if previous is not None and num < previous:\n            return False\n        previous = num\n\n        # Count occurrences of each number\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n\n        # Check for more than one duplicate\n        if count_dict[num] > 2:\n            return False\n\n    return True\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"decomposition\": [\n    {\n      \"subproblem\": \"Check if the list is sorted in ascending order.\",\n      \"description\": \"Iterate through the list and ensure each element is less than or equal to the next element.\"\n    },\n    {\n      \"subproblem\": \"Check for duplicates in the list.\",\n      \"description\": \"Count occurrences of each number in the list and ensure no number appears more than twice.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Initialize a variable to track the previous number in the list.\",\n      \"description\": \"Set this variable to the first element of the list.\"\n    },\n    {\n      \"step\": \"Iterate through the list starting from the second element.\",\n      \"description\": \"For each element, compare it with the previous number to check if the list is sorted.\"\n    },\n    {\n      \"step\": \"Check for duplicates.\",\n      \"description\": \"Use a dictionary or a counter to track occurrences of each number and ensure no number appears more than twice.\"\n    },\n    {\n      \"step\": \"Return the result.\",\n      \"description\": \"If the list is sorted and no number appears more than twice, return True; otherwise, return False.\"\n    }\n  ]\n}\n```", "Round_0": {"code": "def is_sorted(lst):\n    if not lst:\n        return True\n\n    # Check if the list is sorted in ascending order\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i - 1]:\n            return False\n\n    # Check for duplicates\n    from collections import Counter\n    count = Counter(lst)\n    for value in count.values():\n        if value > 2:\n            return False\n\n    return True\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"decomposition\": [\n    {\n      \"subproblem\": \"Check if the list is sorted in ascending order\",\n      \"description\": \"Iterate through the list and ensure each element is less than or equal to the next element.\"\n    },\n    {\n      \"subproblem\": \"Check for duplicates\",\n      \"description\": \"Iterate through the list and count occurrences of each number. If any number appears more than twice, return False.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Initialize variables\",\n      \"description\": \"Set up necessary variables to track the current element and its count.\"\n    },\n    {\n      \"step\": \"Iterate through the list\",\n      \"description\": \"Loop through the list to check if it is sorted and count occurrences of each number.\"\n    },\n    {\n      \"step\": \"Check sorting condition\",\n      \"description\": \"During iteration, compare each element with the next to ensure the list is sorted in ascending order.\"\n    },\n    {\n      \"step\": \"Check duplicate condition\",\n      \"description\": \"During iteration, count occurrences of each number and ensure no number appears more than twice.\"\n    },\n    {\n      \"step\": \"Return result\",\n      \"description\": \"If both conditions are satisfied, return True; otherwise, return False.\"\n    }\n  ]\n}\n```", "Round_0": {"code": "def is_sorted(lst):\n    if len(lst) <= 1:\n        return True\n\n    # Initialize a dictionary to count occurrences of each number\n    count = {}\n\n    # Iterate through the list\n    for i in range(len(lst) - 1):\n        # Check sorting condition\n        if lst[i] > lst[i + 1]:\n            return False\n\n        # Check duplicate condition\n        if lst[i] in count:\n            count[lst[i]] += 1\n        else:\n            count[lst[i]] = 1\n\n        # If any number appears more than twice, return False\n        if count[lst[i]] > 2:\n            return False\n\n    # Check the last element for duplicates\n    last_element = lst[-1]\n    if last_element in count:\n        count[last_element] += 1\n    else:\n        count[last_element] = 1\n\n    if count[last_element] > 2:\n        return False\n\n    return True\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Check if the list is sorted in ascending order.\",\n      \"details\": \"Iterate through the list and compare each element with the next one to ensure each element is less than or equal to the next.\"\n    },\n    {\n      \"description\": \"Check for more than one duplicate of the same number.\",\n      \"details\": \"Use a dictionary or a counter to track the frequency of each number and ensure no number appears more than twice.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Initialize a counter or dictionary to track the frequency of each number in the list.\",\n    \"Iterate through the list to check if it is sorted in ascending order:\",\n    \"  - For each element, compare it with the next element.\",\n    \"  - If any element is greater than the next, return False.\",\n    \"  - Update the frequency counter for each element.\",\n    \"After checking the order, iterate through the frequency counter:\",\n    \"  - If any number appears more than twice, return False.\",\n    \"If all checks pass, return True.\"\n  ]\n}\n```", "Round_0": {"code": "def is_sorted(lst):\n    if not lst:\n        return True\n\n    frequency = {}\n    \n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n        frequency[lst[i]] = frequency.get(lst[i], 0) + 1\n\n    # Check the last element frequency\n    frequency[lst[-1]] = frequency.get(lst[-1], 0) + 1\n\n    for count in frequency.values():\n        if count > 2:\n            return False\n\n    return True\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Check if the list is sorted in ascending order.\",\n      \"details\": \"Iterate through the list and compare each element with the next one to ensure each element is less than or equal to the next.\"\n    },\n    {\n      \"description\": \"Check for more than one duplicate of the same number.\",\n      \"details\": \"Use a dictionary or a counter to track the frequency of each number in the list and ensure no number appears more than twice.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Initialize a counter or dictionary to track the frequency of each number in the list.\",\n    \"Iterate through the list to check if it is sorted in ascending order:\",\n    \"  - For each element, compare it with the next element to ensure it is less than or equal to the next.\",\n    \"  - Update the frequency counter for each element.\",\n    \"After the iteration, check the frequency counter to ensure no number appears more than twice.\",\n    \"Return True if the list is sorted and no number appears more than twice; otherwise, return False.\"\n  ]\n}\n```", "Round_0": {"code": "def is_sorted(lst):\n    if not lst:\n        return True\n\n    frequency = {}\n    \n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n        frequency[lst[i]] = frequency.get(lst[i], 0) + 1\n\n    # Check the last element\n    frequency[lst[-1]] = frequency.get(lst[-1], 0) + 1\n\n    for count in frequency.values():\n        if count > 2:\n            return False\n\n    return True\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Check if the list is sorted in ascending order.\",\n      \"details\": \"Iterate through the list and ensure each element is less than or equal to the next element.\"\n    },\n    {\n      \"description\": \"Check for more than one duplicate of the same number.\",\n      \"details\": \"Count occurrences of each number and ensure no number appears more than twice.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Initialize a variable to track the previous number in the list.\",\n    \"Iterate through the list starting from the first element.\",\n    \"For each element, compare it with the previous element to ensure it is greater than or equal.\",\n    \"If any element is less than the previous element, return False.\",\n    \"Use a dictionary or similar data structure to count occurrences of each number.\",\n    \"If any number appears more than twice, return False.\",\n    \"If the list passes both checks, return True.\"\n  ]\n}\n```", "Round_0": {"code": "def is_sorted(lst):\n    if not lst:\n        return True\n\n    # Check if the list is sorted in ascending order\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i - 1]:\n            return False\n\n    # Check for more than one duplicate of the same number\n    count = {}\n    for num in lst:\n        if num in count:\n            count[num] += 1\n            if count[num] > 2:\n                return False\n        else:\n            count[num] = 1\n\n    return True\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Check if the list is sorted in ascending order.\",\n      \"details\": \"Iterate through the list and compare each element with the next one to ensure each element is less than or equal to the next.\"\n    },\n    {\n      \"description\": \"Check for more than one duplicate of the same number.\",\n      \"details\": \"Use a dictionary to count occurrences of each number and ensure no number appears more than twice.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Initialize a dictionary to count occurrences of each number in the list.\"\n    },\n    {\n      \"step\": \"Iterate through the list to check if it is sorted in ascending order.\",\n      \"details\": \"During the iteration, update the dictionary with the count of each number.\"\n    },\n    {\n      \"step\": \"If any number appears more than twice in the dictionary, return False.\"\n    },\n    {\n      \"step\": \"If the list is not sorted in ascending order, return False.\"\n    },\n    {\n      \"step\": \"If both conditions are satisfied, return True.\"\n    }\n  ]\n}\n```", "Round_0": {"code": "def is_sorted(lst):\n    # Initialize a dictionary to count occurrences of each number in the list\n    count_dict = {}\n\n    # Iterate through the list to check if it is sorted in ascending order\n    for i in range(len(lst) - 1):\n        # Update the dictionary with the count of each number\n        count_dict[lst[i]] = count_dict.get(lst[i], 0) + 1\n\n        # Check if the list is sorted in ascending order\n        if lst[i] > lst[i + 1]:\n            return False\n\n    # Update the dictionary for the last element\n    if lst:\n        count_dict[lst[-1]] = count_dict.get(lst[-1], 0) + 1\n\n    # If any number appears more than twice in the dictionary, return False\n    for count in count_dict.values():\n        if count > 2:\n            return False\n\n    # If both conditions are satisfied, return True\n    return True\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"decomposition\": [\n    {\n      \"subproblem\": \"Check if the list is sorted in ascending order.\",\n      \"description\": \"Iterate through the list and ensure each element is less than or equal to the next element.\"\n    },\n    {\n      \"subproblem\": \"Check for duplicates.\",\n      \"description\": \"Iterate through the list and count occurrences of each number. If any number appears more than twice, return False.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Initialize a variable to track the count of each number in the list.\"\n    },\n    {\n      \"step\": \"Iterate through the list to check if it is sorted in ascending order.\",\n      \"description\": \"Compare each element with the next one. If any element is greater than the next, return False.\"\n    },\n    {\n      \"step\": \"Iterate through the list to count occurrences of each number.\",\n      \"description\": \"Use a dictionary or similar data structure to count occurrences. If any number appears more than twice, return False.\"\n    },\n    {\n      \"step\": \"Return True if the list is sorted and no number appears more than twice.\"\n    }\n  ]\n}\n```", "Round_0": {"code": "def is_sorted(lst):\n    if len(lst) <= 1:\n        return True\n\n    # Check if the list is sorted in ascending order\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n\n    # Check for duplicates\n    count = {}\n    for num in lst:\n        if num in count:\n            count[num] += 1\n            if count[num] > 2:\n                return False\n        else:\n            count[num] = 1\n\n    return True\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [110, 110, 110, 110, 110, 110, 110, 110, 110, 110], "passed": true, "pass": true, "pass_num": 10, "round": 312, "mutate_method": "add_1_sentence_at_end", "save_node": false, "parent_index": 279}
