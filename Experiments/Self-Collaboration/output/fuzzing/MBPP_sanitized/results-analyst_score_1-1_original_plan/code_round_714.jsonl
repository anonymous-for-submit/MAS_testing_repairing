{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 577, "prompt": "Write a python function to find the last digit in factorial of a given number. A factorial of a non-negative integer n is the product of all positive integers less than or equal to n. The factorial operation is denoted by n!.", "code": "def last_Digit_Factorial(n): \n    if (n == 0): return 1\n    elif (n <= 2): return n  \n    elif (n == 3): return 6\n    elif (n == 4): return 4 \n    else: \n      return 0", "test_imports": [], "test_list": ["assert last_Digit_Factorial(4) == 4", "assert last_Digit_Factorial(21) == 0", "assert last_Digit_Factorial(30) == 0", "assert last_Digit_Factorial(8) == 0", "assert last_Digit_Factorial(2) == 2", "assert last_Digit_Factorial(7) == 0", "assert last_Digit_Factorial(5) == 0", "assert last_Digit_Factorial(9) == 0", "assert last_Digit_Factorial(9) == 0", "assert last_Digit_Factorial(6) == 0", "assert last_Digit_Factorial(8) == 0", "assert last_Digit_Factorial(5) == 0", "assert last_Digit_Factorial(2) == 2", "assert last_Digit_Factorial(2) == 2", "assert last_Digit_Factorial(6) == 0", "assert last_Digit_Factorial(3) == 6", "assert last_Digit_Factorial(7) == 0", "assert last_Digit_Factorial(9) == 0", "assert last_Digit_Factorial(5) == 0", "assert last_Digit_Factorial(9) == 0", "assert last_Digit_Factorial(4) == 4", "assert last_Digit_Factorial(2) == 2", "assert last_Digit_Factorial(3) == 6", "assert last_Digit_Factorial(3) == 6", "assert last_Digit_Factorial(3) == 6", "assert last_Digit_Factorial(4) == 4", "assert last_Digit_Factorial(7) == 0", "assert last_Digit_Factorial(2) == 2", "assert last_Digit_Factorial(9) == 0", "assert last_Digit_Factorial(1) == 1", "assert last_Digit_Factorial(8) == 0", "assert last_Digit_Factorial(6) == 0", "assert last_Digit_Factorial(6) == 0", "assert last_Digit_Factorial(1) == 1", "assert last_Digit_Factorial(3) == 6", "assert last_Digit_Factorial(4) == 4", "assert last_Digit_Factorial(21) == 0", "assert last_Digit_Factorial(23) == 0", "assert last_Digit_Factorial(20) == 0", "assert last_Digit_Factorial(24) == 0", "assert last_Digit_Factorial(16) == 0", "assert last_Digit_Factorial(20) == 0", "assert last_Digit_Factorial(22) == 0", "assert last_Digit_Factorial(18) == 0", "assert last_Digit_Factorial(17) == 0", "assert last_Digit_Factorial(25) == 0", "assert last_Digit_Factorial(17) == 0", "assert last_Digit_Factorial(18) == 0", "assert last_Digit_Factorial(26) == 0", "assert last_Digit_Factorial(16) == 0", "assert last_Digit_Factorial(25) == 0", "assert last_Digit_Factorial(23) == 0", "assert last_Digit_Factorial(23) == 0", "assert last_Digit_Factorial(16) == 0", "assert last_Digit_Factorial(16) == 0", "assert last_Digit_Factorial(25) == 0", "assert last_Digit_Factorial(24) == 0", "assert last_Digit_Factorial(18) == 0", "assert last_Digit_Factorial(24) == 0", "assert last_Digit_Factorial(22) == 0", "assert last_Digit_Factorial(25) == 0", "assert last_Digit_Factorial(21) == 0", "assert last_Digit_Factorial(17) == 0", "assert last_Digit_Factorial(19) == 0", "assert last_Digit_Factorial(23) == 0", "assert last_Digit_Factorial(23) == 0", "assert last_Digit_Factorial(20) == 0", "assert last_Digit_Factorial(20) == 0", "assert last_Digit_Factorial(24) == 0", "assert last_Digit_Factorial(25) == 0", "assert last_Digit_Factorial(25) == 0", "assert last_Digit_Factorial(29) == 0", "assert last_Digit_Factorial(28) == 0", "assert last_Digit_Factorial(25) == 0", "assert last_Digit_Factorial(25) == 0", "assert last_Digit_Factorial(32) == 0", "assert last_Digit_Factorial(25) == 0", "assert last_Digit_Factorial(35) == 0", "assert last_Digit_Factorial(31) == 0", "assert last_Digit_Factorial(30) == 0", "assert last_Digit_Factorial(29) == 0", "assert last_Digit_Factorial(30) == 0", "assert last_Digit_Factorial(28) == 0", "assert last_Digit_Factorial(33) == 0", "assert last_Digit_Factorial(28) == 0", "assert last_Digit_Factorial(26) == 0", "assert last_Digit_Factorial(26) == 0", "assert last_Digit_Factorial(30) == 0", "assert last_Digit_Factorial(26) == 0", "assert last_Digit_Factorial(32) == 0", "assert last_Digit_Factorial(35) == 0", "assert last_Digit_Factorial(33) == 0", "assert last_Digit_Factorial(33) == 0", "assert last_Digit_Factorial(29) == 0", "assert last_Digit_Factorial(25) == 0", "assert last_Digit_Factorial(33) == 0", "assert last_Digit_Factorial(26) == 0", "assert last_Digit_Factorial(25) == 0", "assert last_Digit_Factorial(26) == 0", "assert last_Digit_Factorial(26) == 0", "assert last_Digit_Factorial(28) == 0", "assert last_Digit_Factorial(27) == 0"], "entry_point": "last_Digit_Factorial", "completion": "from typing import *\ndef last_Digit_Factorial(n):\n    if n == 0:\n        return 1\n    factorial = 1\n    for i in range(1, n + 1):\n        factorial *= i\n    return factorial % 10\n\n# Test the function with the example given\nprint(last_Digit_Factorial(4))  # Output should be 4\n", "completions": ["from typing import *\ndef last_Digit_Factorial(n):\n    if n == 0:\n        return 1\n    factorial = 1\n    for i in range(1, n + 1):\n        factorial *= i\n    return factorial % 10\n\n# Test the function with the example given\nprint(last_Digit_Factorial(4))  # Output should be 4\n", "from typing import *\ndef last_Digit_Factorial(n):\n    if n == 0:\n        return 1\n    factorial = 1\n    for i in range(1, n + 1):\n        factorial *= i\n    return factorial % 10\n\n# Test the function with the example given\nprint(last_Digit_Factorial(4))  # Output should be 4\n", "from typing import *\ndef last_digit_factorial(n):\n    if n == 0:\n        return 1\n    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    return result % 10\n\n# Test the function with the example given\nprint(last_digit_factorial(4))  # Output should be 4\n", "from typing import *\ndef last_Digit_Factorial(n):\n    if n == 0:\n        return 1\n    \n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    \n    return factorial % 10\n\n# Test the function with the example provided\nprint(last_Digit_Factorial(4))  # Output should be 4\n", "from typing import *\ndef last_Digit_Factorial(n):\n    if n == 0:\n        return 1\n    \n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    \n    return factorial % 10\n\n# Test the function with the example given\nprint(last_Digit_Factorial(4))  # Output should be 4\n", "from typing import *\ndef last_Digit_Factorial(n):\n    if n == 0:\n        return 1\n    \n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    \n    last_digit = factorial % 10\n    return last_digit\n\n# Test the function with the example given\nprint(last_Digit_Factorial(4))  # Output should be 4\n", "from typing import *\ndef last_Digit_Factorial(n):\n    if n == 0:\n        return 1\n    factorial = 1\n    for i in range(1, n + 1):\n        factorial *= i\n    return factorial % 10\n\n# Test the function with the example given\nprint(last_Digit_Factorial(4))  # Output should be 4\n", "from typing import *\ndef last_Digit_Factorial(n):\n    if n == 0:\n        return 1\n    \n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    \n    return factorial % 10\n\n# Test the function with the example given\nprint(last_Digit_Factorial(4))  # Output should be 4\n", "from typing import *\ndef last_digit_factorial(n):\n    if n == 0:\n        return 1\n    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    return result % 10\n\n# Test the function with the example given\nprint(last_digit_factorial(4))  # Output should be 4\n", "from typing import *\ndef last_Digit_Factorial(n):\n    if n == 0:\n        return 1\n    factorial = 1\n    for i in range(1, n + 1):\n        factorial *= i\n    return factorial % 10\n\n# Test the function with the example given\nprint(last_Digit_Factorial(4))  # Output should be 4\n"], "session_history": {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Calculate the factorial of a given number\",\n      \"Extract the last digit of the factorial result\"\n    ],\n    \"high-level_steps\": [\n      \"Define a function last_Digit_Factorial that takes a number as input\",\n      \"Calculate the factorial of the input number\",\n      \"Extract the last digit of the factorial result\",\n      \"Return the last digit as the output\"\n    ]\n  }\n}", "Round_0": {"code": "def last_Digit_Factorial(n):\n    if n == 0:\n        return 1\n    factorial = 1\n    for i in range(1, n + 1):\n        factorial *= i\n    return factorial % 10\n\n# Test the function with the example given\nprint(last_Digit_Factorial(4))  # Output should be 4\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 17)"}, "Round_1": {"code": "def last_Digit_Factorial(n):\n    if n == 0:\n        return 1\n    factorial = 1\n    for i in range(1, n + 1):\n        factorial *= i\n    return factorial % 10\n\n# Test the function with the example given\nprint(last_Digit_Factorial(4))  # Output should be 4\n"}}, "session_historys": [{"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Calculate the factorial of a given number\",\n      \"Extract the last digit of the factorial result\"\n    ],\n    \"high-level_steps\": [\n      \"Define a function last_Digit_Factorial that takes a number as input\",\n      \"Calculate the factorial of the input number\",\n      \"Extract the last digit of the factorial result\",\n      \"Return the last digit as the output\"\n    ]\n  }\n}", "Round_0": {"code": "def last_Digit_Factorial(n):\n    if n == 0:\n        return 1\n    factorial = 1\n    for i in range(1, n + 1):\n        factorial *= i\n    return factorial % 10\n\n# Test the function with the example given\nprint(last_Digit_Factorial(4))  # Output should be 4\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Calculate the factorial of a given number\",\n      \"Extract the last digit of the factorial result\"\n    ],\n    \"high-level_steps\": [\n      \"Define a function last_Digit_Factorial that takes a number as input\",\n      \"Calculate the factorial of the input number\",\n      \"Extract the last digit of the factorial result\",\n      \"Return the last digit as the output\"\n    ]\n  }\n}", "Round_0": {"code": "def last_Digit_Factorial(n):\n    if n == 0:\n        return 1\n    factorial = 1\n    for i in range(1, n + 1):\n        factorial *= i\n    return factorial % 10\n\n# Test the function with the example given\nprint(last_Digit_Factorial(4))  # Output should be 4\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Understand the concept of factorial\",\n      \"Write a function to calculate the factorial of a given number\",\n      \"Extract the last digit of the factorial result\"\n    ],\n    \"high-level_steps\": [\n      \"Define a function to calculate the factorial of a given number\",\n      \"Call the factorial function with the input number\",\n      \"Extract the last digit of the factorial result\",\n      \"Return the last digit as the output\"\n    ]\n  }\n}", "Round_0": {"code": "def factorial(n):\n    if n == 0:\n        return 1\n    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    return result\n\ndef last_digit_factorial(n):\n    fact = factorial(n)\n    return fact % 10\n\n# Test the function with the example given\nprint(last_digit_factorial(4))  # Output should be 4\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 21)"}, "Round_1": {"code": "def last_digit_factorial(n):\n    if n == 0:\n        return 1\n    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    return result % 10\n\n# Test the function with the example given\nprint(last_digit_factorial(4))  # Output should be 4\n"}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Calculate the factorial of a given number\",\n      \"Extract the last digit of the factorial result\"\n    ],\n    \"high-level_steps\": [\n      \"Define a function called last_Digit_Factorial that takes a single parameter (n)\",\n      \"Calculate the factorial of the input number (n)\",\n      \"Extract the last digit of the factorial result\",\n      \"Return the last digit as the output\"\n    ]\n  }\n}", "Round_0": {"code": "def last_Digit_Factorial(n):\n    if n == 0:\n        return 1\n    \n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    \n    return factorial % 10\n\n# Test the function with the example provided\nprint(last_Digit_Factorial(4))  # Output should be 4\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Calculate the factorial of a given number\",\n      \"Extract the last digit of the factorial result\"\n    ],\n    \"high-level_steps\": [\n      \"Define a function last_Digit_Factorial that takes a number as input\",\n      \"Calculate the factorial of the input number\",\n      \"Extract the last digit of the factorial result\",\n      \"Return the last digit as the output\"\n    ]\n  }\n}", "Round_0": {"code": "def last_Digit_Factorial(n):\n    if n == 0:\n        return 1\n    \n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    \n    return factorial % 10\n\n# Test the function with the example given\nprint(last_Digit_Factorial(4))  # Output should be 4\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Calculate the factorial of a given number\",\n      \"Extract the last digit of the factorial result\"\n    ],\n    \"high-level_steps\": [\n      \"Define a function last_Digit_Factorial that takes a number as input\",\n      \"Calculate the factorial of the input number using a loop\",\n      \"Extract the last digit of the factorial result using modulo operation\",\n      \"Return the last digit\"\n    ]\n  }\n}", "Round_0": {"code": "def last_Digit_Factorial(n):\n    if n == 0:\n        return 1\n    \n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    \n    last_digit = factorial % 10\n    return last_digit\n\n# Test the function with the example given\nprint(last_Digit_Factorial(4))  # Output should be 4\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Calculate the factorial of a given number\",\n      \"Extract the last digit of the factorial result\"\n    ],\n    \"high-level_steps\": [\n      \"Define a function last_Digit_Factorial that takes a number as input\",\n      \"Calculate the factorial of the input number\",\n      \"Extract the last digit of the factorial result\",\n      \"Return the last digit as the output\"\n    ]\n  }\n}", "Round_0": {"code": "def last_Digit_Factorial(n):\n    if n == 0:\n        return 1\n    factorial = 1\n    for i in range(1, n + 1):\n        factorial *= i\n    return factorial % 10\n\n# Test the function with the example given\nprint(last_Digit_Factorial(4))  # Output should be 4\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Calculate the factorial of a given number\",\n      \"Extract the last digit of the factorial result\"\n    ],\n    \"high-level_steps\": [\n      \"Define a function last_Digit_Factorial that takes a number as input\",\n      \"Calculate the factorial of the input number\",\n      \"Extract the last digit of the factorial result\",\n      \"Return the last digit as the output\"\n    ]\n  }\n}", "Round_0": {"code": "def last_Digit_Factorial(n):\n    if n == 0:\n        return 1\n    \n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    \n    return factorial % 10\n\n# Test the function with the example given\nprint(last_Digit_Factorial(4))  # Output should be 4\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 19)"}, "Round_1": {"code": "def last_Digit_Factorial(n):\n    if n == 0:\n        return 1\n    \n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    \n    return factorial % 10\n\n# Test the function with the example given\nprint(last_Digit_Factorial(4))  # Output should be 4\n"}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Understand the concept of factorial\",\n      \"Write a function to calculate the factorial of a given number\",\n      \"Extract the last digit of the factorial result\"\n    ],\n    \"steps\": [\n      \"Define a function to calculate the factorial of a given number\",\n      \"Call the factorial function with the input number\",\n      \"Extract the last digit of the factorial result\",\n      \"Return the last digit as the output\"\n    ]\n  }\n}", "Round_0": {"code": "def factorial(n):\n    if n == 0:\n        return 1\n    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    return result\n\ndef last_digit_factorial(n):\n    fact = factorial(n)\n    return fact % 10\n\n# Test the function with the example given\nprint(last_digit_factorial(4))  # Output should be 4\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 21)"}, "Round_1": {"code": "def last_digit_factorial(n):\n    if n == 0:\n        return 1\n    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    return result % 10\n\n# Test the function with the example given\nprint(last_digit_factorial(4))  # Output should be 4\n"}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Calculate the factorial of a given number\",\n      \"Extract the last digit of the factorial result\"\n    ],\n    \"high-level_steps\": [\n      \"Define a function last_Digit_Factorial that takes a number as input\",\n      \"Calculate the factorial of the input number\",\n      \"Extract the last digit of the factorial result\",\n      \"Return the last digit as the output\"\n    ]\n  }\n}", "Round_0": {"code": "def last_Digit_Factorial(n):\n    if n == 0:\n        return 1\n    factorial = 1\n    for i in range(1, n + 1):\n        factorial *= i\n    return factorial % 10\n\n# Test the function with the example given\nprint(last_Digit_Factorial(4))  # Output should be 4\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 17)"}, "Round_1": {"code": "def last_Digit_Factorial(n):\n    if n == 0:\n        return 1\n    factorial = 1\n    for i in range(1, n + 1):\n        factorial *= i\n    return factorial % 10\n\n# Test the function with the example given\nprint(last_Digit_Factorial(4))  # Output should be 4\n"}}], "test": ["def check(last_Digit_Factorial):\n\tassert last_Digit_Factorial(4) == 4", "def check(last_Digit_Factorial):\n\tassert last_Digit_Factorial(21) == 0", "def check(last_Digit_Factorial):\n\tassert last_Digit_Factorial(30) == 0", "def check(last_Digit_Factorial):\n\tassert last_Digit_Factorial(8) == 0", "def check(last_Digit_Factorial):\n\tassert last_Digit_Factorial(2) == 2", "def check(last_Digit_Factorial):\n\tassert last_Digit_Factorial(7) == 0", "def check(last_Digit_Factorial):\n\tassert last_Digit_Factorial(5) == 0", "def check(last_Digit_Factorial):\n\tassert last_Digit_Factorial(9) == 0", "def check(last_Digit_Factorial):\n\tassert last_Digit_Factorial(9) == 0", "def check(last_Digit_Factorial):\n\tassert last_Digit_Factorial(6) == 0", "def check(last_Digit_Factorial):\n\tassert last_Digit_Factorial(8) == 0", "def check(last_Digit_Factorial):\n\tassert last_Digit_Factorial(5) == 0", "def check(last_Digit_Factorial):\n\tassert last_Digit_Factorial(2) == 2", "def check(last_Digit_Factorial):\n\tassert last_Digit_Factorial(2) == 2", "def check(last_Digit_Factorial):\n\tassert last_Digit_Factorial(6) == 0", "def check(last_Digit_Factorial):\n\tassert last_Digit_Factorial(3) == 6", "def check(last_Digit_Factorial):\n\tassert last_Digit_Factorial(7) == 0", "def check(last_Digit_Factorial):\n\tassert last_Digit_Factorial(9) == 0", "def check(last_Digit_Factorial):\n\tassert last_Digit_Factorial(5) == 0", "def check(last_Digit_Factorial):\n\tassert last_Digit_Factorial(9) == 0", "def check(last_Digit_Factorial):\n\tassert last_Digit_Factorial(4) == 4", "def check(last_Digit_Factorial):\n\tassert last_Digit_Factorial(2) == 2", "def check(last_Digit_Factorial):\n\tassert last_Digit_Factorial(3) == 6", "def check(last_Digit_Factorial):\n\tassert last_Digit_Factorial(3) == 6", "def check(last_Digit_Factorial):\n\tassert last_Digit_Factorial(3) == 6", "def check(last_Digit_Factorial):\n\tassert last_Digit_Factorial(4) == 4", "def check(last_Digit_Factorial):\n\tassert last_Digit_Factorial(7) == 0", "def check(last_Digit_Factorial):\n\tassert last_Digit_Factorial(2) == 2", "def check(last_Digit_Factorial):\n\tassert last_Digit_Factorial(9) == 0", "def check(last_Digit_Factorial):\n\tassert last_Digit_Factorial(1) == 1", "def check(last_Digit_Factorial):\n\tassert last_Digit_Factorial(8) == 0", "def check(last_Digit_Factorial):\n\tassert last_Digit_Factorial(6) == 0", "def check(last_Digit_Factorial):\n\tassert last_Digit_Factorial(6) == 0", "def check(last_Digit_Factorial):\n\tassert last_Digit_Factorial(1) == 1", "def check(last_Digit_Factorial):\n\tassert last_Digit_Factorial(3) == 6", "def check(last_Digit_Factorial):\n\tassert last_Digit_Factorial(4) == 4", "def check(last_Digit_Factorial):\n\tassert last_Digit_Factorial(21) == 0", "def check(last_Digit_Factorial):\n\tassert last_Digit_Factorial(23) == 0", "def check(last_Digit_Factorial):\n\tassert last_Digit_Factorial(20) == 0", "def check(last_Digit_Factorial):\n\tassert last_Digit_Factorial(24) == 0", "def check(last_Digit_Factorial):\n\tassert last_Digit_Factorial(16) == 0", "def check(last_Digit_Factorial):\n\tassert last_Digit_Factorial(20) == 0", "def check(last_Digit_Factorial):\n\tassert last_Digit_Factorial(22) == 0", "def check(last_Digit_Factorial):\n\tassert last_Digit_Factorial(18) == 0", "def check(last_Digit_Factorial):\n\tassert last_Digit_Factorial(17) == 0", "def check(last_Digit_Factorial):\n\tassert last_Digit_Factorial(25) == 0", "def check(last_Digit_Factorial):\n\tassert last_Digit_Factorial(17) == 0", "def check(last_Digit_Factorial):\n\tassert last_Digit_Factorial(18) == 0", "def check(last_Digit_Factorial):\n\tassert last_Digit_Factorial(26) == 0", "def check(last_Digit_Factorial):\n\tassert last_Digit_Factorial(16) == 0", "def check(last_Digit_Factorial):\n\tassert last_Digit_Factorial(25) == 0", "def check(last_Digit_Factorial):\n\tassert last_Digit_Factorial(23) == 0", "def check(last_Digit_Factorial):\n\tassert last_Digit_Factorial(23) == 0", "def check(last_Digit_Factorial):\n\tassert last_Digit_Factorial(16) == 0", "def check(last_Digit_Factorial):\n\tassert last_Digit_Factorial(16) == 0", "def check(last_Digit_Factorial):\n\tassert last_Digit_Factorial(25) == 0", "def check(last_Digit_Factorial):\n\tassert last_Digit_Factorial(24) == 0", "def check(last_Digit_Factorial):\n\tassert last_Digit_Factorial(18) == 0", "def check(last_Digit_Factorial):\n\tassert last_Digit_Factorial(24) == 0", "def check(last_Digit_Factorial):\n\tassert last_Digit_Factorial(22) == 0", "def check(last_Digit_Factorial):\n\tassert last_Digit_Factorial(25) == 0", "def check(last_Digit_Factorial):\n\tassert last_Digit_Factorial(21) == 0", "def check(last_Digit_Factorial):\n\tassert last_Digit_Factorial(17) == 0", "def check(last_Digit_Factorial):\n\tassert last_Digit_Factorial(19) == 0", "def check(last_Digit_Factorial):\n\tassert last_Digit_Factorial(23) == 0", "def check(last_Digit_Factorial):\n\tassert last_Digit_Factorial(23) == 0", "def check(last_Digit_Factorial):\n\tassert last_Digit_Factorial(20) == 0", "def check(last_Digit_Factorial):\n\tassert last_Digit_Factorial(20) == 0", "def check(last_Digit_Factorial):\n\tassert last_Digit_Factorial(24) == 0", "def check(last_Digit_Factorial):\n\tassert last_Digit_Factorial(25) == 0", "def check(last_Digit_Factorial):\n\tassert last_Digit_Factorial(25) == 0", "def check(last_Digit_Factorial):\n\tassert last_Digit_Factorial(29) == 0", "def check(last_Digit_Factorial):\n\tassert last_Digit_Factorial(28) == 0", "def check(last_Digit_Factorial):\n\tassert last_Digit_Factorial(25) == 0", "def check(last_Digit_Factorial):\n\tassert last_Digit_Factorial(25) == 0", "def check(last_Digit_Factorial):\n\tassert last_Digit_Factorial(32) == 0", "def check(last_Digit_Factorial):\n\tassert last_Digit_Factorial(25) == 0", "def check(last_Digit_Factorial):\n\tassert last_Digit_Factorial(35) == 0", "def check(last_Digit_Factorial):\n\tassert last_Digit_Factorial(31) == 0", "def check(last_Digit_Factorial):\n\tassert last_Digit_Factorial(30) == 0", "def check(last_Digit_Factorial):\n\tassert last_Digit_Factorial(29) == 0", "def check(last_Digit_Factorial):\n\tassert last_Digit_Factorial(30) == 0", "def check(last_Digit_Factorial):\n\tassert last_Digit_Factorial(28) == 0", "def check(last_Digit_Factorial):\n\tassert last_Digit_Factorial(33) == 0", "def check(last_Digit_Factorial):\n\tassert last_Digit_Factorial(28) == 0", "def check(last_Digit_Factorial):\n\tassert last_Digit_Factorial(26) == 0", "def check(last_Digit_Factorial):\n\tassert last_Digit_Factorial(26) == 0", "def check(last_Digit_Factorial):\n\tassert last_Digit_Factorial(30) == 0", "def check(last_Digit_Factorial):\n\tassert last_Digit_Factorial(26) == 0", "def check(last_Digit_Factorial):\n\tassert last_Digit_Factorial(32) == 0", "def check(last_Digit_Factorial):\n\tassert last_Digit_Factorial(35) == 0", "def check(last_Digit_Factorial):\n\tassert last_Digit_Factorial(33) == 0", "def check(last_Digit_Factorial):\n\tassert last_Digit_Factorial(33) == 0", "def check(last_Digit_Factorial):\n\tassert last_Digit_Factorial(29) == 0", "def check(last_Digit_Factorial):\n\tassert last_Digit_Factorial(25) == 0", "def check(last_Digit_Factorial):\n\tassert last_Digit_Factorial(33) == 0", "def check(last_Digit_Factorial):\n\tassert last_Digit_Factorial(26) == 0", "def check(last_Digit_Factorial):\n\tassert last_Digit_Factorial(25) == 0", "def check(last_Digit_Factorial):\n\tassert last_Digit_Factorial(26) == 0", "def check(last_Digit_Factorial):\n\tassert last_Digit_Factorial(26) == 0", "def check(last_Digit_Factorial):\n\tassert last_Digit_Factorial(28) == 0", "def check(last_Digit_Factorial):\n\tassert last_Digit_Factorial(27) == 0"], "scores": [1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0], "pass_results": [true, true, false, true, true, true, true, true, false, true], "pass_test_cases_num": [102, 102, 0, 102, 102, 102, 102, 102, 0, 102], "passed": true, "pass": true, "pass_num": 10, "round": 714, "mutate_method": "expand_one2two", "save_node": true, "parent_index": 242}
