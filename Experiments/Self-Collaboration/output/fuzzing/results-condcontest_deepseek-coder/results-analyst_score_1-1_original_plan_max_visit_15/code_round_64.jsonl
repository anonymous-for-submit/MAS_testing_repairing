{"name": "1591_A. Life of a Flower", "description": "Petya has got an interesting flower. Petya is a busy person, so he sometimes forgets to water it. You are given n days from Petya's live and you have to determine what happened with his flower in the end.\n\nThe flower grows as follows: \n\n  * If the flower isn't watered for two days in a row, it dies. \n  * If the flower is watered in the i-th day, it grows by 1 centimeter. \n  * If the flower is watered in the i-th and in the (i-1)-th day (i > 1), then it grows by 5 centimeters instead of 1. \n  * If the flower is not watered in the i-th day, it does not grow. \n\n\n\nAt the beginning of the 1-st day the flower is 1 centimeter tall. What is its height after n days?\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1", "tags": ["implementation"], "difficulty": 7, "id": 1591, "sample_io": [{"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n", "output": ["3\n7\n-1\n1\n"]}], "test_list": [{"input": "1\n10\n1 1 1 1 1 1 1 1 1 1\n", "output": ["47\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n1\n", "output": ["3\n7\n-1\n2\n"]}, {"input": "1\n10\n1 1 1 1 0 1 1 1 1 1\n", "output": ["38\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["3\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["3\n-1\n8\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n-1\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 1 1\n1\n0\n", "output": ["3\n7\n8\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n-1\n8\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 1\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n7\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 0\n1\n0\n", "output": ["3\n7\n-1\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 0\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n2\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 1 0\n1\n0\n", "output": ["3\n7\n3\n1\n"]}, {"input": "1\n10\n1 1 1 1 0 1 1 1 1 0\n", "output": ["33\n"]}, {"input": "1\n10\n1 1 0 1 0 1 1 1 1 1\n", "output": ["29\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["3\n-1\n8\n2\n"]}, {"input": "4\n3\n0 0 1\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["-1\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 1\n4\n1 0 0 0\n1\n0\n", "output": ["-1\n7\n-1\n1\n"]}, {"input": "4\n3\n0 0 0\n3\n1 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n3\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 0\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n2\n8\n2\n"]}, {"input": "1\n10\n0 1 0 1 0 1 1 1 1 1\n", "output": ["24\n"]}, {"input": "4\n3\n0 1 1\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["7\n-1\n-1\n1\n"]}, {"input": "4\n3\n0 1 1\n3\n0 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["7\n-1\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 1 1\n4\n1 0 0 1\n1\n0\n", "output": ["3\n12\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 1 1 1\n1\n0\n", "output": ["3\n-1\n17\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 1 1\n1\n1\n", "output": ["3\n7\n8\n2\n"]}, {"input": "4\n3\n1 1 0\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["7\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 1 0\n3\n0 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["7\n-1\n8\n2\n"]}, {"input": "1\n10\n1 1 0 1 0 1 1 0 1 1\n", "output": ["20\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n1 0 0 1\n1\n1\n", "output": ["3\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n0 1 1 1\n1\n0\n", "output": ["3\n-1\n12\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["12\n-1\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n0 1 1 0\n1\n0\n", "output": ["3\n-1\n7\n1\n"]}, {"input": "4\n3\n0 0 1\n3\n0 0 1\n4\n0 1 1 0\n1\n0\n", "output": ["-1\n-1\n7\n1\n"]}, {"input": "1\n10\n1 1 0 0 1 1 1 1 1 1\n", "output": ["-1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 1 1\n4\n1 0 1 1\n1\n0\n", "output": ["12\n7\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n0 1 1 1\n1\n1\n", "output": ["3\n7\n12\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n7\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 1\n4\n1 1 1 1\n1\n0\n", "output": ["3\n3\n17\n1\n"]}, {"input": "4\n3\n0 1 0\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["2\n-1\n-1\n2\n"]}, {"input": "4\n3\n0 0 1\n3\n0 0 1\n4\n0 1 1 1\n1\n0\n", "output": ["-1\n-1\n12\n1\n"]}, {"input": "4\n3\n0 1 1\n3\n0 1 1\n4\n1 0 1 1\n1\n0\n", "output": ["7\n7\n8\n1\n"]}, {"input": "1\n10\n0 1 0 1 1 1 1 1 1 0\n", "output": ["28\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 1 1 1\n1\n1\n", "output": ["-1\n7\n17\n2\n"]}, {"input": "4\n3\n0 1 0\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["2\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 0 0\n4\n1 1 1 0\n1\n0\n", "output": ["12\n-1\n12\n1\n"]}, {"input": "4\n3\n1 1 0\n3\n0 0 0\n4\n1 1 1 0\n1\n0\n", "output": ["7\n-1\n12\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 1 1\n4\n1 0 0 1\n1\n1\n", "output": ["3\n12\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["3\n3\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 1 0\n1\n1\n", "output": ["3\n7\n3\n2\n"]}, {"input": "4\n3\n1 1 1\n3\n1 1 1\n4\n1 0 0 1\n1\n0\n", "output": ["12\n12\n-1\n1\n"]}, {"input": "4\n3\n0 0 1\n3\n1 0 1\n4\n0 1 1 1\n1\n0\n", "output": ["-1\n3\n12\n1\n"]}, {"input": "1\n10\n0 1 1 0 1 0 1 1 0 1\n", "output": ["15\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 0\n4\n1 1 1 1\n1\n1\n", "output": ["3\n-1\n17\n2\n"]}, {"input": "1\n10\n0 1 1 1 1 1 1 1 1 1\n", "output": ["42\n"]}, {"input": "4\n3\n0 0 1\n3\n1 1 1\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n12\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 0 1 0\n1\n0\n", "output": ["3\n-1\n3\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 0\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n2\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 0\n4\n1 0 1 1\n1\n1\n", "output": ["3\n2\n8\n2\n"]}, {"input": "4\n3\n0 1 0\n3\n0 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["2\n-1\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 0\n4\n1 0 0 1\n1\n1\n", "output": ["3\n2\n-1\n2\n"]}, {"input": "4\n3\n1 1 1\n3\n0 1 1\n4\n1 0 0 0\n1\n1\n", "output": ["12\n7\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["3\n3\n8\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n1 0 0\n4\n1 1 1 1\n1\n0\n", "output": ["12\n-1\n17\n1\n"]}, {"input": "1\n10\n0 1 1 0 1 0 1 1 1 0\n", "output": ["19\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 0\n4\n1 0 0 1\n1\n0\n", "output": ["3\n2\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n0 1 1 0\n1\n1\n", "output": ["3\n-1\n7\n2\n"]}, {"input": "4\n3\n0 0 1\n3\n0 1 0\n4\n1 0 0 1\n1\n0\n", "output": ["-1\n2\n-1\n1\n"]}, {"input": "4\n3\n0 1 0\n3\n1 0 1\n4\n0 0 0 1\n1\n1\n", "output": ["2\n3\n-1\n2\n"]}, {"input": "4\n3\n0 1 0\n3\n1 0 1\n4\n0 0 0 1\n1\n0\n", "output": ["2\n3\n-1\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n1 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["-1\n3\n-1\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 0 1 0\n1\n0\n", "output": ["-1\n7\n3\n1\n"]}, {"input": "4\n3\n0 0 1\n3\n0 0 1\n4\n0 1 1 0\n1\n1\n", "output": ["-1\n-1\n7\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 1\n4\n1 1 1 1\n1\n1\n", "output": ["-1\n12\n17\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 1\n4\n1 1 1 0\n1\n0\n", "output": ["3\n3\n12\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["3\n3\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 1 0\n4\n1 1 1 1\n1\n0\n", "output": ["3\n7\n17\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 0 1\n4\n0 0 0 1\n1\n1\n", "output": ["12\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 0\n4\n1 1 1 0\n1\n1\n", "output": ["3\n-1\n12\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 0\n4\n1 1 0 1\n1\n0\n", "output": ["3\n2\n8\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n7\n-1\n2\n"]}, {"input": "4\n3\n0 1 0\n3\n1 1 1\n4\n0 0 0 1\n1\n0\n", "output": ["2\n12\n-1\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 1 1\n4\n0 0 0 0\n1\n0\n", "output": ["12\n7\n-1\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n1 0 1\n4\n1 1 1 0\n1\n0\n", "output": ["12\n3\n12\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 0 0\n4\n1 1 0 0\n1\n0\n", "output": ["12\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 1 1 1\n1\n0\n", "output": ["-1\n7\n17\n1\n"]}, {"input": "4\n3\n0 0 0\n3\n1 1 1\n4\n0 0 0 1\n1\n0\n", "output": ["-1\n12\n-1\n1\n"]}, {"input": "1\n10\n1 1 0 1 1 1 1 1 1 1\n", "output": ["38\n"]}, {"input": "4\n3\n0 0 0\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n0 0 0 1\n1\n1\n", "output": ["3\n7\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n0 0 1 1\n1\n1\n", "output": ["3\n7\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 1\n4\n1 0 0 0\n1\n1\n", "output": ["-1\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n7\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n0 0 1 1\n1\n0\n", "output": ["3\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n1 0 0 1\n1\n0\n", "output": ["3\n-1\n-1\n1\n"]}, {"input": "4\n3\n0 0 0\n3\n0 1 0\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n2\n8\n1\n"]}, {"input": "4\n3\n0 0 1\n3\n0 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n-1\n8\n1\n"]}, {"input": "1\n10\n1 1 1 1 1 1 1 1 0 1\n", "output": ["38\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 0\n1\n1\n", "output": ["3\n7\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["-1\n-1\n-1\n1\n"]}, {"input": "4\n3\n0 0 0\n3\n0 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n-1\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n0 0 0 0\n1\n0\n", "output": ["3\n7\n-1\n1\n"]}, {"input": "1\n10\n0 1 0 1 1 1 1 1 1 1\n", "output": ["33\n"]}, {"input": "4\n3\n0 0 0\n3\n1 0 0\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n-1\n-1\n2\n"]}, {"input": "1\n10\n1 1 0 1 0 1 0 0 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 1 1 1 1 1 0 1\n", "output": ["33\n"]}, {"input": "4\n3\n0 0 0\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["-1\n-1\n-1\n1\n"]}, {"input": "4\n3\n0 0 0\n3\n1 0 0\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n-1\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 1 1 0\n1\n0\n", "output": ["3\n-1\n12\n1\n"]}, {"input": "1\n10\n1 1 0 1 0 1 0 0 1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 0 1 1 1 1 0 1\n", "output": ["24\n"]}, {"input": "1\n10\n0 1 0 1 1 1 1 1 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n1 1 1 0\n1\n0\n", "output": ["3\n-1\n12\n1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 0 1 2\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 0\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 0\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n-1\n8\n1\n"]}, {"input": "1\n10\n1 1 1 1 0 0 1 1 1 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 1\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n7\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["3\n-1\n-1\n2\n"]}, {"input": "1\n10\n1 1 0 0 1 1 1 1 2 1\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 0\n4\n1 1 1 1\n1\n0\n", "output": ["3\n-1\n17\n1\n"]}, {"input": "1\n10\n1 1 0 1 0 1 0 0 0 1\n", "output": ["-1\n"]}, {"input": "4\n3\n0 0 1\n3\n1 0 0\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n-1\n8\n2\n"]}, {"input": "1\n10\n0 1 0 1 1 1 0 1 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 0\n4\n1 1 1 0\n1\n0\n", "output": ["-1\n-1\n12\n1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 0 1 1\n", "output": ["-1\n"]}, {"input": "4\n3\n0 0 0\n3\n0 0 0\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n-1\n8\n1\n"]}, {"input": "1\n10\n1 1 1 1 0 0 1 1 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n0 0 0 1\n1\n1\n", "output": ["3\n-1\n-1\n2\n"]}, {"input": "1\n10\n0 1 1 0 1 0 1 1 1 1\n", "output": ["24\n"]}, {"input": "1\n10\n0 1 0 1 2 1 0 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 0 0 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 1 1 0 0 1 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 0 0 0 1 1 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 0 0 2 1 0 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 0 -1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 1 1 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 0 0 0 1 1 1 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n7\n1 0 1 1 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 -1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n7\n0 0 1 1 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n2 0 0 1 0 1 -1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n7\n0 0 2 1 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n4 0 0 1 0 1 -1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 0 0 2 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 0 0 2 0 -1 0\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 -1 0 2 0 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 1 0 1\n1\n0\n", "output": ["3\n7\n8\n1\n"]}, {"input": "1\n10\n1 1 0 1 1 0 1 1 1 1\n", "output": ["29\n"]}, {"input": "1\n10\n1 1 0 1 0 1 1 1 1 0\n", "output": ["24\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 1\n4\n1 1 0 0\n1\n0\n", "output": ["-1\n7\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 1 0\n4\n1 0 0 1\n1\n0\n", "output": ["3\n7\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 0\n4\n1 0 0 1\n1\n0\n", "output": ["3\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 1 0\n3\n0 0 1\n4\n0 0 0 1\n1\n1\n", "output": ["7\n-1\n-1\n2\n"]}, {"input": "4\n3\n0 0 0\n3\n0 1 0\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n2\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n0 1 1 0\n1\n0\n", "output": ["3\n-1\n7\n1\n"]}, {"input": "1\n10\n1 1 1 1 1 1 1 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 1 0 0 1 1 2 1 1 1\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n0 0 1 0\n1\n0\n", "output": ["3\n7\n-1\n1\n"]}, {"input": "4\n3\n0 1 1\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["7\n-1\n-1\n2\n"]}, {"input": "1\n10\n1 1 0 1 0 0 0 0 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 1 1 1 0 1 0 1\n", "output": ["24\n"]}, {"input": "4\n3\n1 1 1\n3\n0 0 1\n4\n1 1 1 0\n1\n0\n", "output": ["12\n-1\n12\n1\n"]}, {"input": "1\n10\n0 1 0 1 0 1 0 0 1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 0 1 1 1 1 1 0 1\n", "output": ["24\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n1 1 0 0\n1\n0\n", "output": ["3\n-1\n-1\n1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 -1 1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n1 1 0 1 0 0 1 1 1 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 1 0 1 0 1 0 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 0 1 1 1 0 1 0 1\n", "output": ["15\n"]}, {"input": "1\n10\n1 0 0 1 0 2 0 0 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 1 1 0 0 1 1 1 0\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 0 1 1 1 1 1 1\n", "output": ["33\n"]}, {"input": "1\n10\n0 1 0 0 1 1 0 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 2 0 1 0 0 0 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 -1 1 1 0 0 1 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 0 0 3 1 0 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 -1 0 1 0 1 0 0 -1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 1 2 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 1 1 -1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n7\n0 0 1 1 0 0 1 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n7\n0 0 2 1 1 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n4 0 0 1 0 0 -1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 1 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 -1 0 2 0 0 -1\n", "output": ["-1\n"]}, {"input": "4\n3\n0 0 1\n3\n0 1 1\n4\n1 1 0 1\n1\n0\n", "output": ["-1\n7\n8\n1\n"]}, {"input": "1\n10\n1 1 0 1 0 0 1 1 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 1 0 1 0 1 1 1 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n0 0 0\n3\n0 1 1\n4\n1 1 0 0\n1\n0\n", "output": ["-1\n7\n-1\n1\n"]}, {"input": "4\n3\n0 1 0\n3\n0 0 1\n4\n0 0 0 1\n1\n1\n", "output": ["2\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 0\n4\n1 0 0 0\n1\n0\n", "output": ["3\n2\n-1\n1\n"]}, {"input": "1\n10\n1 1 1 1 0 1 1 1 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 1 1\n4\n0 0 0 0\n1\n1\n", "output": ["12\n7\n-1\n2\n"]}, {"input": "1\n10\n1 1 0 0 1 1 2 1 1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 0 0 0 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n0 0 0 1 0 1 0 -1 1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n1 1 0 1 1 0 1 1 1 0\n", "output": ["24\n"]}, {"input": "1\n10\n1 1 0 1 1 1 0 0 0 0\n", "output": ["-1\n"]}], "task_id": "codecontest/45", "prompt": "Petya has got an interesting flower. Petya is a busy person, so he sometimes forgets to water it. You are given n days from Petya's life and you need to ascertain what the outcome for his flower is at the end.\n\nThe flower grows as follows:\n\n  * If the flower isn't watered for two days consecutively, it dies.\n  * If the flower is watered on the i-th day, it grows by 1 centimeter.\n  * If the flower is watered on both the i-th and (i-1)-th day (i > 1), then it grows by 5 centimeters instead of 1.\n  * If the flower is not watered on the i-th day, it remains the same height.\n\nAt the start of the 1-st day the flower is 1 centimeter tall. What is its height after n days?\n\nConsider the edge cases where Petya never waters the flower or waters it every day.\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1", "repair_prompt": ["Petya has got an interesting flower. Petya is a busy person, so he sometimes forgets to water it. You are given n days from Petya's life and you need to ascertain what the outcome for his flower is at the end.\n\nThe flower grows as follows:\n\n  * If the flower isn't watered for two days consecutively, it dies.\n  * If the flower is watered on the i-th day, it grows by 1 centimeter.\n  * If the flower is watered on both the i-th and (i-1)-th day (i > 1), then it grows by 5 centimeters instead of 1.\n  * If the flower is not watered on the i-th day, it remains the same height.\n\nAt the start of the 1-st day the flower is 1 centimeter tall. What is its height after n days?\n\nConsider the edge cases where Petya never waters the flower or waters it every day.\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nWrite a main() function and use input() function to read input from stdin"], "completion": "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        n = int(input())\n        watering_schedule = list(map(int, input().split()))\n        \n        height = 1\n        consecutive_unwatered = False\n        \n        for i in range(n):\n            if watering_schedule[i] == 0:\n                if consecutive_unwatered:\n                    height = -1\n                    break\n                else:\n                    consecutive_unwatered = True\n            else:\n                if i > 0 and watering_schedule[i-1] == 1:\n                    height += 5\n                else:\n                    height += 1\n                consecutive_unwatered = False\n        \n        results.append(height)\n    \n    for result in results:\n        print(result)\nmain()", "completions": ["def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        n = int(input())\n        watering_schedule = list(map(int, input().split()))\n        \n        height = 1\n        died = False\n        \n        for i in range(n):\n            if watering_schedule[i] == 0:\n                if i > 0 and watering_schedule[i-1] == 0:\n                    died = True\n                    break\n            else:\n                if i > 0 and watering_schedule[i-1] == 1:\n                    height += 5\n                else:\n                    height += 1\n        \n        if died or (n > 1 and watering_schedule[-1] == 0 and watering_schedule[-2] == 0):\n            results.append(-1)\n        else:\n            results.append(height)\n    \n    for result in results:\n        print(result)\nmain()", "def main():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        watering_schedule = list(map(int, input().split()))\n        \n        height = 1  # Initial height of the flower\n        died = False\n        \n        for i in range(1, n):\n            if watering_schedule[i] == 0 and watering_schedule[i - 1] == 0:\n                died = True\n                break\n            elif watering_schedule[i] == 1 and watering_schedule[i - 1] == 1:\n                height += 5\n            else:\n                height += 1\n        \n        if died or (watering_schedule[0] == 0):\n            print(-1)\n        else:\n            print(height)\nmain()", "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        n = int(input())\n        watering_schedule = list(map(int, input().split()))\n        \n        height = 1  # Initial height of the flower\n        died = False\n        \n        for i in range(n):\n            if watering_schedule[i] == 0:\n                if i > 0 and watering_schedule[i-1] == 0:\n                    died = True\n                    break\n            else:\n                if i > 0 and watering_schedule[i-1] == 1:\n                    height += 5\n                else:\n                    height += 1\n        \n        if died:\n            results.append(-1)\n        else:\n            results.append(height)\n    \n    for result in results:\n        print(result)\nmain()", "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        n = int(input())\n        watering_schedule = list(map(int, input().split()))\n        \n        height = 1\n        died = False\n        \n        for i in range(n):\n            if watering_schedule[i] == 0:\n                if i > 0 and watering_schedule[i-1] == 0:\n                    died = True\n                    break\n            else:\n                if i > 0 and watering_schedule[i-1] == 1:\n                    height += 5\n                else:\n                    height += 1\n        \n        if died or (watering_schedule[-1] == 0 and n > 1):\n            results.append(-1)\n        else:\n            results.append(height)\n    \n    for result in results:\n        print(result)\nmain()", "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        n = int(input())\n        watering_schedule = list(map(int, input().split()))\n        \n        height = 1  # Initial height of the flower\n        died = False\n        \n        for i in range(n):\n            if watering_schedule[i] == 0:\n                if i > 0 and watering_schedule[i-1] == 0:\n                    died = True\n                    break\n            else:\n                if i > 0 and watering_schedule[i-1] == 1:\n                    height += 5\n                else:\n                    height += 1\n        \n        if died:\n            results.append(-1)\n        else:\n            results.append(height)\n    \n    for result in results:\n        print(result)\nmain()", "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        n = int(input())\n        watering_schedule = list(map(int, input().split()))\n        \n        height = 1  # Initial height of the flower\n        died = False\n        \n        for i in range(1, n):\n            if watering_schedule[i] == 0 and watering_schedule[i - 1] == 0:\n                died = True\n                break\n            elif watering_schedule[i] == 1 and watering_schedule[i - 1] == 1:\n                height += 5\n            elif watering_schedule[i] == 1:\n                height += 1\n        \n        if died:\n            results.append(-1)\n        else:\n            results.append(height)\n    \n    for result in results:\n        print(result)\nmain()", "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        n = int(input())\n        watering_schedule = list(map(int, input().split()))\n        \n        height = 1\n        died = False\n        \n        for i in range(n):\n            if watering_schedule[i] == 0:\n                if i > 0 and watering_schedule[i-1] == 0:\n                    died = True\n                    break\n            else:\n                if i > 0 and watering_schedule[i-1] == 1:\n                    height += 5\n                else:\n                    height += 1\n        \n        if died:\n            results.append(-1)\n        else:\n            results.append(height)\n    \n    for result in results:\n        print(result)\nmain()", "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        n = int(input())\n        watering_schedule = list(map(int, input().split()))\n        \n        height = 1\n        died = False\n        \n        for i in range(n):\n            if watering_schedule[i] == 0:\n                if i > 0 and watering_schedule[i-1] == 0:\n                    died = True\n                    break\n            else:\n                if i > 0 and watering_schedule[i-1] == 1:\n                    height += 5\n                else:\n                    height += 1\n        \n        if died:\n            results.append(-1)\n        else:\n            results.append(height)\n    \n    for result in results:\n        print(result)\nmain()", "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        n = int(input())\n        watering_schedule = list(map(int, input().split()))\n        \n        height = 1  # Initial height of the flower\n        consecutive_dry_days = 0  # Counter for consecutive dry days\n        \n        for i in range(n):\n            if watering_schedule[i] == 1:\n                if i > 0 and watering_schedule[i-1] == 1:\n                    height += 5\n                else:\n                    height += 1\n                consecutive_dry_days = 0  # Reset the counter since it was watered\n            else:\n                consecutive_dry_days += 1\n                if consecutive_dry_days == 2:\n                    results.append(-1)\n                    break\n        else:\n            results.append(height)\n    \n    for result in results:\n        print(result)\nmain()", "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        n = int(input())\n        watering_schedule = list(map(int, input().split()))\n        \n        height = 1\n        consecutive_unwatered = False\n        \n        for i in range(n):\n            if watering_schedule[i] == 0:\n                if consecutive_unwatered:\n                    height = -1\n                    break\n                else:\n                    consecutive_unwatered = True\n            else:\n                if i > 0 and watering_schedule[i-1] == 1:\n                    height += 5\n                else:\n                    height += 1\n                consecutive_unwatered = False\n        \n        results.append(height)\n    \n    for result in results:\n        print(result)\nmain()"], "session_history": {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Parse the input to read the number of test cases and the details of each test case.\",\n        \"steps\": [\n          \"Read the number of test cases (t).\"\n        ]\n      },\n      {\n        \"description\": \"For each test case, read the number of days (n) and the watering schedule (a_1, a_2, ..., a_n).\",\n        \"steps\": [\n          \"For each test case, read n and the sequence of 0s and 1s representing the watering schedule.\"\n        ]\n      },\n      {\n        \"description\": \"Calculate the height of the flower for each test case based on the given rules.\",\n        \"steps\": [\n          \"Initialize the flower's height to 1 centimeter.\",\n          \"Iterate through each day to apply the growth rules based on whether the flower was watered or not.\",\n          \"Check if the flower was not watered for two consecutive days; if so, set the height to -1 (flower dies).\",\n          \"Output the final height of the flower or -1 if it dies.\"\n        ]\n      },\n      {\n        \"description\": \"Output the results for each test case.\",\n        \"steps\": [\n          \"For each test case, print the final height of the flower or -1 if it dies.\"\n        ]\n      }\n    ],\n    \"high_level_steps\": [\n      \"Initialize the total number of test cases (t).\",\n      \"For each test case:\",\n      \"  Read the number of days (n) and the watering schedule.\",\n      \"  Initialize the flower's height to 1 centimeter.\",\n      \"  Initialize a variable to track if the flower has been watered in the last two days.\",\n      \"  Iterate through each day:\",\n      \"    Update the flower's height based on whether it was watered or not.\",\n      \"    Check for two consecutive days without watering.\",\n      \"  Output the final height of the flower or -1 if it dies.\",\n      \"End for each test case.\",\n      \"Output the results for all test cases.\"\n    ]\n  }\n}\n```", "Round_0": {"code": "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        n = int(input())\n        watering_schedule = list(map(int, input().split()))\n        \n        height = 1\n        consecutive_unwatered = False\n        \n        for i in range(n):\n            if watering_schedule[i] == 0:\n                if consecutive_unwatered:\n                    height = -1\n                    break\n                else:\n                    consecutive_unwatered = True\n            else:\n                if i > 0 and watering_schedule[i-1] == 1:\n                    height += 5\n                else:\n                    height += 1\n                consecutive_unwatered = False\n        \n        results.append(height)\n    \n    for result in results:\n        print(result)", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        n = int(input())\n        watering_schedule = list(map(int, input().split()))\n        \n        height = 1\n        consecutive_unwatered = False\n        \n        for i in range(n):\n            if watering_schedule[i] == 0:\n                if consecutive_unwatered:\n                    height = -1\n                    break\n                else:\n                    consecutive_unwatered = True\n            else:\n                if i > 0 and watering_schedule[i-1] == 1:\n                    height += 5\n                else:\n                    height += 1\n                consecutive_unwatered = False\n        \n        results.append(height)\n    \n    for result in results:\n        print(result)"}}, "session_historys": [{"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Parse the input to read the number of test cases and the details of each test case.\",\n        \"steps\": [\n          \"Read the number of test cases (t).\"\n        ]\n      },\n      {\n        \"description\": \"For each test case, read the number of days (n) and the watering schedule (a_1, a_2, ..., a_n).\",\n        \"steps\": [\n          \"For each test case, read n.\",\n          \"For each test case, read the watering schedule as a list of integers.\"\n        ]\n      },\n      {\n        \"description\": \"Calculate the height of the flower for each test case based on the given rules.\",\n        \"steps\": [\n          \"Initialize the height of the flower to 1 centimeter.\",\n          \"Iterate through each day to apply the watering rules.\",\n          \"Check if the flower is dead (watered only once in two consecutive days) and return -1 if true.\",\n          \"Return the final height of the flower after n days.\"\n        ]\n      },\n      {\n        \"description\": \"Output the result for each test case.\",\n        \"steps\": [\n          \"For each test case, print the final height of the flower or -1 if the flower is dead.\"\n        ]\n      }\n    ],\n    \"high_level_plan\": [\n      \"Initialize the program to read input from standard input.\",\n      \"Parse the input to get the number of test cases and the details for each test case.\",\n      \"For each test case, calculate the height of the flower based on the watering schedule.\",\n      \"Output the result for each test case.\",\n      \"End the program.\"\n    ]\n  }\n}\n```", "Round_0": {"code": "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        n = int(input())\n        watering_schedule = list(map(int, input().split()))\n        \n        height = 1\n        died = False\n        \n        for i in range(n):\n            if watering_schedule[i] == 0:\n                if i > 0 and watering_schedule[i-1] == 0:\n                    died = True\n                    break\n            else:\n                if i > 0 and watering_schedule[i-1] == 1:\n                    height += 5\n                else:\n                    height += 1\n        \n        if died or (n > 1 and watering_schedule[-1] == 0 and watering_schedule[-2] == 0):\n            results.append(-1)\n        else:\n            results.append(height)\n    \n    for result in results:\n        print(result)", "report": "The compilation output of the preceding code is: main() takes 0 positional arguments but 1 was given"}, "Round_1": {"code": "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        n = int(input())\n        watering_schedule = list(map(int, input().split()))\n        \n        height = 1\n        died = False\n        \n        for i in range(n):\n            if watering_schedule[i] == 0:\n                if i > 0 and watering_schedule[i-1] == 0:\n                    died = True\n                    break\n            else:\n                if i > 0 and watering_schedule[i-1] == 1:\n                    height += 5\n                else:\n                    height += 1\n        \n        if died or (n > 1 and watering_schedule[-1] == 0 and watering_schedule[-2] == 0):\n            results.append(-1)\n        else:\n            results.append(height)\n    \n    for result in results:\n        print(result)"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Parse the input to get the number of test cases and the details for each test case.\",\n        \"steps\": [\n          \"Read the number of test cases.\",\n          \"For each test case, read the number of days and the watering schedule.\"\n        ]\n      },\n      {\n        \"description\": \"Calculate the height of the flower for each test case based on the given rules.\",\n        \"steps\": [\n          \"Initialize the flower's height to 1 centimeter.\",\n          \"Iterate through each day to apply the watering rules.\",\n          \"Check if the flower is dead (watered only once in two consecutive days) and return -1 if true.\",\n          \"Update the flower's height based on whether it was watered on the current day or the previous day.\"\n        ]\n      },\n      {\n        \"description\": \"Output the height of the flower for each test case.\",\n        \"steps\": [\n          \"For each test case, print the final height of the flower or -1 if it died.\"\n        ]\n      }\n    ],\n    \"high_level_plan\": [\n      \"Initialize the program to read input from standard input.\",\n      \"Parse the input to get the number of test cases and the details for each test case.\",\n      \"For each test case, initialize the flower's height and iterate through each day to apply the watering rules.\",\n      \"Check if the flower is dead and output -1 if true.\",\n      \"Update the flower's height based on whether it was watered on the current day or the previous day.\",\n      \"Output the final height of the flower for each test case.\",\n      \"End the program after processing all test cases.\"\n    ]\n  }\n}\n```", "Round_0": {"code": "def main():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        watering_schedule = list(map(int, input().split()))\n        \n        height = 1  # Initial height of the flower\n        died = False\n        \n        for i in range(1, n):\n            if watering_schedule[i] == 0 and watering_schedule[i - 1] == 0:\n                died = True\n                break\n            elif watering_schedule[i] == 1 and watering_schedule[i - 1] == 1:\n                height += 5\n            else:\n                height += 1\n        \n        if died or (watering_schedule[0] == 0):\n            print(-1)\n        else:\n            print(height)", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def main():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        watering_schedule = list(map(int, input().split()))\n        \n        height = 1  # Initial height of the flower\n        died = False\n        \n        for i in range(1, n):\n            if watering_schedule[i] == 0 and watering_schedule[i - 1] == 0:\n                died = True\n                break\n            elif watering_schedule[i] == 1 and watering_schedule[i - 1] == 1:\n                height += 5\n            else:\n                height += 1\n        \n        if died or (watering_schedule[0] == 0):\n            print(-1)\n        else:\n            print(height)", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Parse the input to read the number of test cases and the details of each test case.\",\n        \"steps\": [\n          \"Read the number of test cases (t).\"\n        ]\n      },\n      {\n        \"description\": \"For each test case, read the number of days (n) and the watering schedule (a_1, a_2, ..., a_n).\",\n        \"steps\": [\n          \"For each test case, read n and the sequence of 0s and 1s representing the watering schedule.\"\n        ]\n      },\n      {\n        \"description\": \"Determine the height of the flower for each test case based on the given rules.\",\n        \"steps\": [\n          \"Initialize the flower's height to 1 centimeter.\",\n          \"Iterate through each day to check if the flower is watered or not.\",\n          \"Adjust the flower's height based on whether it was watered on consecutive days or not.\",\n          \"Check if the flower dies (not watered for two consecutive days) and handle accordingly.\",\n          \"Output the final height of the flower or -1 if it dies.\"\n        ]\n      },\n      {\n        \"description\": \"Output the results for each test case.\",\n        \"steps\": [\n          \"For each test case, print the final height of the flower or -1 if it died.\"\n        ]\n      }\n    ],\n    \"high_level_plan\": [\n      \"Initialize the flower's height to 1 centimeter.\",\n      \"Read the number of test cases.\",\n      \"For each test case:\",\n      \"  Read the number of days and the watering schedule.\",\n      \"  Iterate through each day to update the flower's height based on the watering schedule.\",\n      \"  Check for consecutive non-watering days to determine if the flower dies.\",\n      \"  Output the final height of the flower or -1 if it died.\",\n      \"End loop through test cases.\"\n    ]\n  }\n}\n```", "Round_0": {"code": "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        n = int(input())\n        watering_schedule = list(map(int, input().split()))\n        \n        height = 1  # Initial height of the flower\n        died = False\n        \n        for i in range(n):\n            if watering_schedule[i] == 0:\n                if i > 0 and watering_schedule[i-1] == 0:\n                    died = True\n                    break\n            else:\n                if i > 0 and watering_schedule[i-1] == 1:\n                    height += 5\n                else:\n                    height += 1\n        \n        if died:\n            results.append(-1)\n        else:\n            results.append(height)\n    \n    for result in results:\n        print(result)", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        n = int(input())\n        watering_schedule = list(map(int, input().split()))\n        \n        height = 1  # Initial height of the flower\n        died = False\n        \n        for i in range(n):\n            if watering_schedule[i] == 0:\n                if i > 0 and watering_schedule[i-1] == 0:\n                    died = True\n                    break\n            else:\n                if i > 0 and watering_schedule[i-1] == 1:\n                    height += 5\n                else:\n                    height += 1\n        \n        if died:\n            results.append(-1)\n        else:\n            results.append(height)\n    \n    for result in results:\n        print(result)"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Parse the input to read the number of test cases and the details of each test case.\",\n        \"steps\": [\n          \"Read the number of test cases (t).\"\n        ]\n      },\n      {\n        \"description\": \"For each test case, read the number of days (n) and the watering schedule (a_1, a_2, ..., a_n).\",\n        \"steps\": [\n          \"For each test case, read n and the sequence of 0s and 1s representing the watering schedule.\"\n        ]\n      },\n      {\n        \"description\": \"Calculate the height of the flower for each test case based on the given rules.\",\n        \"steps\": [\n          \"Initialize the flower's height to 1 centimeter.\",\n          \"Iterate through each day to apply the growth rules based on whether the flower was watered or not.\",\n          \"Check if the flower was not watered for two consecutive days; if so, set the height to -1 (flower dies).\",\n          \"Output the final height of the flower or -1 if it dies.\"\n        ]\n      },\n      {\n        \"description\": \"Handle edge cases where the flower is never watered or watered every day.\",\n        \"steps\": [\n          \"Check if the flower was never watered and set the final height to 1 centimeter.\",\n          \"Check if the flower was watered every day and calculate the height accordingly.\"\n        ]\n      }\n    ],\n    \"high_level_plan\": [\n      \"Initialize the program to read the number of test cases.\",\n      \"For each test case:\",\n      \"  Read the number of days and the watering schedule.\",\n      \"  Initialize the flower's height to 1 centimeter.\",\n      \"  Iterate through each day to apply the growth rules.\",\n      \"  Check for edge cases.\",\n      \"  Output the final height of the flower or -1 if it dies for each test case.\",\n      \"End.\"\n    ]\n  }\n}\n```", "Round_0": {"code": "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        n = int(input())\n        watering_schedule = list(map(int, input().split()))\n        \n        height = 1\n        died = False\n        \n        for i in range(n):\n            if watering_schedule[i] == 0:\n                if i > 0 and watering_schedule[i-1] == 0:\n                    died = True\n                    break\n            else:\n                if i > 0 and watering_schedule[i-1] == 1:\n                    height += 5\n                else:\n                    height += 1\n        \n        if died or (watering_schedule[-1] == 0 and n > 1):\n            results.append(-1)\n        else:\n            results.append(height)\n    \n    for result in results:\n        print(result)", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        n = int(input())\n        watering_schedule = list(map(int, input().split()))\n        \n        height = 1\n        died = False\n        \n        for i in range(n):\n            if watering_schedule[i] == 0:\n                if i > 0 and watering_schedule[i-1] == 0:\n                    died = True\n                    break\n            else:\n                if i > 0 and watering_schedule[i-1] == 1:\n                    height += 5\n                else:\n                    height += 1\n        \n        if died or (watering_schedule[-1] == 0 and n > 1):\n            results.append(-1)\n        else:\n            results.append(height)\n    \n    for result in results:\n        print(result)"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Parse the input to read the number of test cases and the details of each test case.\",\n        \"steps\": [\n          \"Read the number of test cases (t).\"\n        ]\n      },\n      {\n        \"description\": \"For each test case, read the number of days (n) and the watering schedule (a_1, a_2, ..., a_n).\",\n        \"steps\": [\n          \"For each test case, read n.\",\n          \"For each test case, read the watering schedule as a list of integers.\"\n        ]\n      },\n      {\n        \"description\": \"Calculate the height of the flower for each test case based on the given rules.\",\n        \"steps\": [\n          \"Initialize the flower's height to 1 centimeter.\",\n          \"Iterate through each day to apply the watering rules.\",\n          \"Check if the flower is dead (watered only once in two consecutive days).\",\n          \"Update the flower's height based on whether it was watered on the current day, the previous day, or neither.\",\n          \"Output the final height of the flower or -1 if the flower is dead.\"\n        ]\n      },\n      {\n        \"description\": \"Output the results for each test case.\",\n        \"steps\": [\n          \"For each test case, print the final height of the flower or -1 if the flower is dead.\"\n        ]\n      }\n    ],\n    \"high_level_plan\": [\n      \"Read the number of test cases.\",\n      \"For each test case:\",\n      \"  Read the number of days and the watering schedule.\",\n      \"  Initialize the flower's height.\",\n      \"  Iterate through each day to apply the watering rules.\",\n      \"  Check if the flower is dead.\",\n      \"  Update the flower's height based on the rules.\",\n      \"  Output the final height or -1 if the flower is dead.\",\n      \"End for each test case loop.\",\n      \"End program.\"\n    ]\n  }\n}\n```", "Round_0": {"code": "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        n = int(input())\n        watering_schedule = list(map(int, input().split()))\n        \n        height = 1  # Initial height of the flower\n        died = False\n        \n        for i in range(n):\n            if watering_schedule[i] == 0:\n                if i > 0 and watering_schedule[i-1] == 0:\n                    died = True\n                    break\n            else:\n                if i > 0 and watering_schedule[i-1] == 1:\n                    height += 5\n                else:\n                    height += 1\n        \n        if died:\n            results.append(-1)\n        else:\n            results.append(height)\n    \n    for result in results:\n        print(result)", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 106)"}, "Round_1": {"code": "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        n = int(input())\n        watering_schedule = list(map(int, input().split()))\n        \n        height = 1  # Initial height of the flower\n        died = False\n        \n        for i in range(n):\n            if watering_schedule[i] == 0:\n                if i > 0 and watering_schedule[i-1] == 0:\n                    died = True\n                    break\n            else:\n                if i > 0 and watering_schedule[i-1] == 1:\n                    height += 5\n                else:\n                    height += 1\n        \n        if died:\n            results.append(-1)\n        else:\n            results.append(height)\n    \n    for result in results:\n        print(result)", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Parse the input to read the number of test cases and the details of each test case.\",\n        \"steps\": [\n          \"Read the number of test cases (t).\"\n        ]\n      },\n      {\n        \"description\": \"For each test case, read the number of days (n) and the watering schedule (a_1, a_2, ..., a_n).\",\n        \"steps\": [\n          \"For each test case, read n and the watering schedule.\"\n        ]\n      },\n      {\n        \"description\": \"Determine the height of the flower for each day based on the watering schedule.\",\n        \"steps\": [\n          \"Initialize the flower's height to 1 centimeter.\",\n          \"Iterate through each day to check if the flower is watered or not.\",\n          \"Adjust the height of the flower based on whether it was watered on consecutive days or not.\",\n          \"Check if the flower dies by not being watered for two consecutive days.\"\n        ]\n      },\n      {\n        \"description\": \"Output the height of the flower or -1 if it dies for each test case.\",\n        \"steps\": [\n          \"For each test case, output the final height of the flower or -1 if it died.\"\n        ]\n      }\n    ],\n    \"high_level_plan\": [\n      \"Initialize the program to read the number of test cases.\",\n      \"For each test case:\",\n      \"  Read the number of days and the watering schedule.\",\n      \"  Initialize the flower's height.\",\n      \"  Iterate through each day to update the flower's height based on the watering schedule.\",\n      \"  Check if the flower dies.\",\n      \"  Output the final height or -1 for each test case.\",\n      \"End loop for all test cases.\"\n    ]\n  }\n}\n```", "Round_0": {"code": "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        n = int(input())\n        watering_schedule = list(map(int, input().split()))\n        \n        height = 1  # Initial height of the flower\n        died = False\n        \n        for i in range(1, n):\n            if watering_schedule[i] == 0 and watering_schedule[i - 1] == 0:\n                died = True\n                break\n            elif watering_schedule[i] == 1 and watering_schedule[i - 1] == 1:\n                height += 5\n            elif watering_schedule[i] == 1:\n                height += 1\n        \n        if died:\n            results.append(-1)\n        else:\n            results.append(height)\n    \n    for result in results:\n        print(result)", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        n = int(input())\n        watering_schedule = list(map(int, input().split()))\n        \n        height = 1  # Initial height of the flower\n        died = False\n        \n        for i in range(1, n):\n            if watering_schedule[i] == 0 and watering_schedule[i - 1] == 0:\n                died = True\n                break\n            elif watering_schedule[i] == 1 and watering_schedule[i - 1] == 1:\n                height += 5\n            elif watering_schedule[i] == 1:\n                height += 1\n        \n        if died:\n            results.append(-1)\n        else:\n            results.append(height)\n    \n    for result in results:\n        print(result)"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Parse the input to read the number of test cases and the details of each test case.\",\n        \"steps\": [\n          \"Read the number of test cases (t).\"\n        ]\n      },\n      {\n        \"description\": \"For each test case, read the number of days (n) and the watering schedule (a_1, a_2, ..., a_n).\",\n        \"steps\": [\n          \"For each test case, read n and the sequence of 0s and 1s representing the watering schedule.\"\n        ]\n      },\n      {\n        \"description\": \"Determine the height of the flower for each test case based on the given rules.\",\n        \"steps\": [\n          \"Initialize the flower's height to 1 centimeter.\",\n          \"Iterate through each day to check if the flower is watered or not.\",\n          \"Adjust the flower's height based on whether it was watered on consecutive days or not.\",\n          \"Check if the flower dies (not watered for two consecutive days) and handle accordingly.\",\n          \"Output the final height of the flower or -1 if it dies.\"\n        ]\n      },\n      {\n        \"description\": \"Output the results for each test case.\",\n        \"steps\": [\n          \"For each test case, print the final height of the flower or -1 if it died.\"\n        ]\n      }\n    ],\n    \"high_level_plan\": [\n      \"Initialize the program to read the number of test cases.\",\n      \"For each test case:\",\n      \"  Read the number of days and the watering schedule.\",\n      \"  Initialize the flower's height to 1 centimeter.\",\n      \"  Iterate through each day to update the flower's height based on the watering schedule.\",\n      \"  Check for consecutive days without watering to determine if the flower dies.\",\n      \"  Output the final height of the flower or -1 if it died.\",\n      \"Repeat for all test cases.\"\n    ]\n  }\n}\n```", "Round_0": {"code": "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        n = int(input())\n        watering_schedule = list(map(int, input().split()))\n        \n        height = 1\n        died = False\n        \n        for i in range(n):\n            if watering_schedule[i] == 0:\n                if i > 0 and watering_schedule[i-1] == 0:\n                    died = True\n                    break\n            else:\n                if i > 0 and watering_schedule[i-1] == 1:\n                    height += 5\n                else:\n                    height += 1\n        \n        if died:\n            results.append(-1)\n        else:\n            results.append(height)\n    \n    for result in results:\n        print(result)", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        n = int(input())\n        watering_schedule = list(map(int, input().split()))\n        \n        height = 1\n        died = False\n        \n        for i in range(n):\n            if watering_schedule[i] == 0:\n                if i > 0 and watering_schedule[i-1] == 0:\n                    died = True\n                    break\n            else:\n                if i > 0 and watering_schedule[i-1] == 1:\n                    height += 5\n                else:\n                    height += 1\n        \n        if died:\n            results.append(-1)\n        else:\n            results.append(height)\n    \n    for result in results:\n        print(result)"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Parse the input to read the number of test cases and the details of each test case.\",\n        \"steps\": [\n          \"Read the number of test cases (t).\"\n        ]\n      },\n      {\n        \"description\": \"For each test case, read the number of days (n) and the watering schedule (a_1, a_2, ..., a_n).\",\n        \"steps\": [\n          \"For each test case, read n.\",\n          \"For each test case, read the watering schedule as a list of integers.\"\n        ]\n      },\n      {\n        \"description\": \"Calculate the height of the flower for each test case based on the given rules.\",\n        \"steps\": [\n          \"Initialize the flower's height to 1 centimeter.\",\n          \"Iterate through each day to apply the watering rules.\",\n          \"Check if the flower is dead (watered only once in two consecutive days) and return -1 if true.\",\n          \"Update the flower's height based on whether it was watered on the current day or the previous day.\",\n          \"Return the final height of the flower for each test case.\"\n        ]\n      },\n      {\n        \"description\": \"Output the result for each test case.\",\n        \"steps\": [\n          \"For each test case, print the final height of the flower or -1 if the flower is dead.\"\n        ]\n      }\n    ],\n    \"high_level_steps\": [\n      \"Initialize the program to read input from standard input.\",\n      \"Read the number of test cases.\",\n      \"For each test case:\",\n      \"  Read the number of days and the watering schedule.\",\n      \"  Initialize the flower's height to 1 centimeter.\",\n      \"  Iterate through each day to apply the watering rules.\",\n      \"  Check if the flower is dead and output -1 if true.\",\n      \"  Update the flower's height based on the watering schedule.\",\n      \"  Output the final height of the flower for each test case.\",\n      \"End the program after processing all test cases.\"\n    ]\n  }\n}\n```", "Round_0": {"code": "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        n = int(input())\n        watering_schedule = list(map(int, input().split()))\n        \n        height = 1\n        died = False\n        \n        for i in range(n):\n            if watering_schedule[i] == 0:\n                if i > 0 and watering_schedule[i-1] == 0:\n                    died = True\n                    break\n            else:\n                if i > 0 and watering_schedule[i-1] == 1:\n                    height += 5\n                else:\n                    height += 1\n        \n        if died:\n            results.append(-1)\n        else:\n            results.append(height)\n    \n    for result in results:\n        print(result)", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        n = int(input())\n        watering_schedule = list(map(int, input().split()))\n        \n        height = 1\n        died = False\n        \n        for i in range(n):\n            if watering_schedule[i] == 0:\n                if i > 0 and watering_schedule[i-1] == 0:\n                    died = True\n                    break\n            else:\n                if i > 0 and watering_schedule[i-1] == 1:\n                    height += 5\n                else:\n                    height += 1\n        \n        if died:\n            results.append(-1)\n        else:\n            results.append(height)\n    \n    for result in results:\n        print(result)"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Parse the input to read the number of test cases and the details of each test case.\",\n        \"steps\": [\n          \"Read the number of test cases (t).\"\n        ]\n      },\n      {\n        \"description\": \"For each test case, read the number of days (n) and the watering schedule (a_1, a_2, ..., a_n).\",\n        \"steps\": [\n          \"For each test case, read n and the sequence of 0s and 1s representing the watering schedule.\"\n        ]\n      },\n      {\n        \"description\": \"Determine the height of the flower for each test case based on the given rules.\",\n        \"steps\": [\n          \"Initialize the flower's height to 1 centimeter.\",\n          \"Iterate through each day to check if the flower is watered or not.\",\n          \"Adjust the flower's height based on whether it was watered on consecutive days or not.\",\n          \"Check if the flower dies (not watered for two consecutive days) and handle accordingly.\",\n          \"Output the final height of the flower or -1 if it dies.\"\n        ]\n      },\n      {\n        \"description\": \"Output the results for each test case.\",\n        \"steps\": [\n          \"For each test case, print the final height of the flower or -1 if it died.\"\n        ]\n      }\n    ],\n    \"high_level_plan\": [\n      \"Initialize the flower's height to 1 centimeter.\",\n      \"Read the number of test cases.\",\n      \"For each test case:\",\n      \"  Read the number of days and the watering schedule.\",\n      \"  Iterate through each day to update the flower's height based on the watering schedule.\",\n      \"  Check for consecutive days without watering to determine if the flower dies.\",\n      \"  Output the final height of the flower or -1 if it died.\",\n      \"End loop through test cases.\"\n    ]\n  }\n}\n```", "Round_0": {"code": "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        n = int(input())\n        watering_schedule = list(map(int, input().split()))\n        \n        height = 1  # Initial height of the flower\n        consecutive_dry_days = 0  # Counter for consecutive dry days\n        \n        for i in range(n):\n            if watering_schedule[i] == 1:\n                if i > 0 and watering_schedule[i-1] == 1:\n                    height += 5\n                else:\n                    height += 1\n                consecutive_dry_days = 0  # Reset the counter since it was watered\n            else:\n                consecutive_dry_days += 1\n                if consecutive_dry_days == 2:\n                    results.append(-1)\n                    break\n        else:\n            results.append(height)\n    \n    for result in results:\n        print(result)", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        n = int(input())\n        watering_schedule = list(map(int, input().split()))\n        \n        height = 1  # Initial height of the flower\n        consecutive_dry_days = 0  # Counter for consecutive dry days\n        \n        for i in range(n):\n            if watering_schedule[i] == 1:\n                if i > 0 and watering_schedule[i-1] == 1:\n                    height += 5\n                else:\n                    height += 1\n                consecutive_dry_days = 0  # Reset the counter since it was watered\n            else:\n                consecutive_dry_days += 1\n                if consecutive_dry_days == 2:\n                    results.append(-1)\n                    break\n        else:\n            results.append(height)\n    \n    for result in results:\n        print(result)", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Parse the input to read the number of test cases and the details of each test case.\",\n        \"steps\": [\n          \"Read the number of test cases (t).\"\n        ]\n      },\n      {\n        \"description\": \"For each test case, read the number of days (n) and the watering schedule (a_1, a_2, ..., a_n).\",\n        \"steps\": [\n          \"For each test case, read n and the sequence of 0s and 1s representing the watering schedule.\"\n        ]\n      },\n      {\n        \"description\": \"Calculate the height of the flower for each test case based on the given rules.\",\n        \"steps\": [\n          \"Initialize the flower's height to 1 centimeter.\",\n          \"Iterate through each day to apply the growth rules based on whether the flower was watered or not.\",\n          \"Check if the flower was not watered for two consecutive days; if so, set the height to -1 (flower dies).\",\n          \"Output the final height of the flower or -1 if it dies.\"\n        ]\n      },\n      {\n        \"description\": \"Output the results for each test case.\",\n        \"steps\": [\n          \"For each test case, print the final height of the flower or -1 if it dies.\"\n        ]\n      }\n    ],\n    \"high_level_steps\": [\n      \"Initialize the total number of test cases (t).\",\n      \"For each test case:\",\n      \"  Read the number of days (n) and the watering schedule.\",\n      \"  Initialize the flower's height to 1 centimeter.\",\n      \"  Initialize a variable to track if the flower has been watered in the last two days.\",\n      \"  Iterate through each day:\",\n      \"    Update the flower's height based on whether it was watered or not.\",\n      \"    Check for two consecutive days without watering.\",\n      \"  Output the final height of the flower or -1 if it dies.\",\n      \"End for each test case.\",\n      \"Output the results for all test cases.\"\n    ]\n  }\n}\n```", "Round_0": {"code": "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        n = int(input())\n        watering_schedule = list(map(int, input().split()))\n        \n        height = 1\n        consecutive_unwatered = False\n        \n        for i in range(n):\n            if watering_schedule[i] == 0:\n                if consecutive_unwatered:\n                    height = -1\n                    break\n                else:\n                    consecutive_unwatered = True\n            else:\n                if i > 0 and watering_schedule[i-1] == 1:\n                    height += 5\n                else:\n                    height += 1\n                consecutive_unwatered = False\n        \n        results.append(height)\n    \n    for result in results:\n        print(result)", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        n = int(input())\n        watering_schedule = list(map(int, input().split()))\n        \n        height = 1\n        consecutive_unwatered = False\n        \n        for i in range(n):\n            if watering_schedule[i] == 0:\n                if consecutive_unwatered:\n                    height = -1\n                    break\n                else:\n                    consecutive_unwatered = True\n            else:\n                if i > 0 and watering_schedule[i-1] == 1:\n                    height += 5\n                else:\n                    height += 1\n                consecutive_unwatered = False\n        \n        results.append(height)\n    \n    for result in results:\n        print(result)"}}], "scores": [], "pass_results": [true, true, true, true, true, true, true, false, false, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 4, "round": 64, "examples": "\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1", "mutate_method": "add_1_sentence_at_end", "save_node": false, "parent_index": 40}
