{"name": "1618_A. Polycarp and Sums of Subsequences", "description": "Polycarp had an array a of 3 positive integers. He wrote out the sums of all non-empty subsequences of this array, sorted them in non-decreasing order, and got an array b of 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "tags": ["math", "sortings"], "difficulty": 7, "id": 1618, "sample_io": [{"input": "5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n", "output": ["1 3 4\n1 2 4\n300000000 300000000 300000000\n1 1 999999998\n1 2 2\n"]}], "test_list": [{"input": "1\n69696868 69696868 69696868 139393736 139393736 139393736 209090604\n", "output": ["69696868 69696868 69696868 \n"]}, {"input": "2\n1 1 2 69696874 69696875 69696875 69696876\n1 1 1 2 2 2 3\n", "output": ["1 1 69696874\n1 1 1\n"]}, {"input": "1\n1 1 2 69696880 69696881 69696881 69696882\n", "output": ["1 1 69696880\n"]}, {"input": "2\n1 1 2 69696967 69696968 69696968 69696969\n1 1 1 2 2 2 3\n", "output": ["1 1 69696967\n1 1 1\n"]}, {"input": "2\n1 1 2 69696868 69696869 69696869 69696870\n1 2 3 4 5 6 7\n", "output": ["1 1 69696868\n1 2 4\n"]}, {"input": "2\n1 1 2 696967 696968 696968 696969\n1 1 1 2 2 2 3\n", "output": ["1 1 696967\n1 1 1\n"]}, {"input": "2\n1 1 2 69696873 69696874 69696874 69696875\n1 1 1 2 2 2 3\n", "output": ["1 1 69696873\n1 1 1\n"]}, {"input": "2\n1 1 2 69696889 69696890 69696890 69696891\n1 1 1 2 2 2 3\n", "output": ["1 1 69696889\n1 1 1\n"]}, {"input": "1\n1 2 3 69696875 69696876 69696877 69696878\n", "output": ["1 2 69696875\n"]}, {"input": "2\n1 1 2 69696870 69696871 69696871 69696872\n1 1 1 2 2 2 3\n", "output": ["1 1 69696870\n1 1 1\n"]}, {"input": "2\n1 1 2 69696881 69696882 69696882 69696883\n1 1 1 2 2 2 3\n", "output": ["1 1 69696881\n1 1 1\n"]}, {"input": "2\n1 1 2 598989 598990 598990 598991\n1 3 4 4 5 7 8\n", "output": ["1 1 598989\n1 3 4\n"]}, {"input": "2\n1 1 2 69696875 69696876 69696876 69696877\n1 1 1 2 2 2 3\n", "output": ["1 1 69696875\n1 1 1\n"]}, {"input": "1\n1 1 2 69696884 69696885 69696885 69696886\n", "output": ["1 1 69696884\n"]}, {"input": "1\n1 1 2 69696883 69696884 69696884 69696885\n", "output": ["1 1 69696883\n"]}, {"input": "2\n1 1 2 69696885 69696886 69696886 69696887\n1 1 1 2 2 2 3\n", "output": ["1 1 69696885\n1 1 1\n"]}, {"input": "2\n1 1 2 69696879 69696880 69696880 69696881\n1 1 1 2 2 2 3\n", "output": ["1 1 69696879\n1 1 1\n"]}, {"input": "5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n", "output": ["1 3 4\n1 2 4\n300000000 300000000 300000000\n1 1 999999998\n1 2 2\n"]}, {"input": "2\n1 1 2 69696886 69696887 69696887 69696888\n1 1 1 2 2 2 3\n", "output": ["1 1 69696886\n1 1 1\n"]}, {"input": "2\n1 1 2 69696869 69696870 69696870 69696871\n1 1 1 2 2 2 3\n", "output": ["1 1 69696869\n1 1 1\n"]}, {"input": "2\n1 1 2 69696887 69696888 69696888 69696889\n1 1 1 2 2 2 3\n", "output": ["1 1 69696887\n1 1 1\n"]}, {"input": "2\n1 1 2 69696877 69696878 69696878 69696879\n1 1 1 2 2 2 3\n", "output": ["1 1 69696877\n1 1 1\n"]}, {"input": "2\n1 1 2 69696871 69696872 69696872 69696873\n1 1 1 2 2 2 3\n", "output": ["1 1 69696871\n1 1 1\n"]}, {"input": "2\n1 1 2 69696882 69696883 69696883 69696884\n1 1 1 2 2 2 3\n", "output": ["1 1 69696882\n1 1 1\n"]}, {"input": "1\n1 2 3 69696887 69696888 69696889 69696890\n", "output": ["1 2 69696887\n"]}, {"input": "2\n1 1 2 69696872 69696873 69696873 69696874\n1 1 1 2 2 2 3\n", "output": ["1 1 69696872\n1 1 1\n"]}, {"input": "2\n1 1 2 69696878 69696879 69696879 69696880\n1 1 1 2 2 2 3\n", "output": ["1 1 69696878\n1 1 1\n"]}], "task_id": "codecontest/132", "prompt": "Polycarp had a list a of 3 positive integers and noted down the sums of all non-empty subsets of this list, arranged them in increasing order, and obtained a list b consisting of 7 integers. For example, if a = {1, 4, 3}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8, and after sorting, he got an array b = {1, 3, 4, 4, 5, 7, 8}. Unfortunately, Polycarp lost the array a and only has the array b left, so help him to restore the array a. Assume all numbers in the array are positive integers and there are no repeated numbers in array a. You should deduce the original list a from the given sorted list b.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "repair_prompt": ["Polycarp had a list a of 3 positive integers and noted down the sums of all non-empty subsets of this list, arranged them in increasing order, and obtained a list b consisting of 7 integers. For example, if a = {1, 4, 3}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8, and after sorting, he got an array b = {1, 3, 4, 4, 5, 7, 8}. Unfortunately, Polycarp lost the array a and only has the array b left, so help him to restore the array a. Assume all numbers in the array are positive integers and there are no repeated numbers in array a. You should deduce the original list a from the given sorted list b.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nWrite a main() function and use input() function to read input from stdin"], "completion": "def restore_array():\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        b.sort()\n        \n        # The two largest elements in b are sums of the two largest integers from a\n        a2_a3_sum = b[-1]\n        a1_a2_sum = b[-2]\n        \n        # The third integer in a is the sum of the two largest elements in b minus the second largest element in b\n        a3 = a2_a3_sum - a1_a2_sum\n        a2 = a1_a2_sum - a3\n        a1 = b[0]\n        \n        print(a1, a2, a3)\nmain()", "completions": ["def restore_array():\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        b.sort()\n        \n        # The smallest three elements in b must be a_1 + a_2, a_1 + a_3, and a_2 + a_3\n        a_sums = [b[0], b[1], b[6] - b[1]]\n        a_sums.sort()\n        \n        # The original array a\n        a = [a_sums[0] - a_sums[1], a_sums[1] - a_sums[2], a_sums[2]]\n        print(f\"{a[0]} {a[1]} {a[2]}\")\nmain()", "def restore_array(b):\n    # Since b is sorted, the smallest three elements in b must be a_1 + a_2, a_1 + a_3, and a_2 + a_3.\n    # We can use these sums to deduce the individual values of a_1, a_2, and a_3.\n    a_1_plus_a_2 = b[0]\n    a_1_plus_a_3 = b[1]\n    a_2_plus_a_3 = b[2]\n    \n    # Calculate a_1, a_2, and a_3 using the sums\n    a_1 = (a_1_plus_a_2 + a_1_plus_a_3 - a_2_plus_a_3) // 2\n    a_2 = (a_1_plus_a_2 + a_2_plus_a_3 - a_1_plus_a_3) // 2\n    a_3 = (a_1_plus_a_3 + a_2_plus_a_3 - a_1_plus_a_2) // 2\n    \n    return a_1, a_2, a_3\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        a_1, a_2, a_3 = restore_array(b)\n        print(a_1, a_2, a_3)\nmain()", "def restore_array():\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        b.sort()\n        \n        # The smallest element in b is either a_1 + a_2 or a_1 + a_3\n        # The largest element in b is either a_2 + a_3 or a_1 + a_2\n        a_1_a_2 = b[0]\n        a_2_a_3 = b[-1]\n        \n        # The middle element in b is either a_1 + a_3 or a_2\n        a_1_a_3 = b[1]\n        a_2 = b[2]\n        \n        # Now we need to find a_1, a_2, and a_3\n        a_3 = a_2_a_3 - a_2\n        a_1 = a_1_a_3 - a_3\n        \n        print(a_1, a_2, a_3)\nmain()", "def restore_array(b):\n    # The smallest and largest elements in b must be the sums of the two smallest and the three largest elements in a.\n    # Therefore, the three largest elements in b are part of the sums of the three largest elements in a.\n    a3, a2, a1 = b[-3], b[-2], b[-1]\n    # The sum of the three largest elements in a is the sum of the two smallest and the largest element in b.\n    sum_a1_a2_a3 = a1 + a2 + a3\n    # The sum of the two smallest elements in a is the smallest element in b.\n    sum_a1_a2 = b[0]\n    # The sum of the two largest elements in a is the second smallest element in b.\n    sum_a2_a3 = b[1]\n    # The sum of the two middle elements in a is the third smallest element in b.\n    sum_a1_a3 = b[2]\n    # The sum of the three elements in a is twice the sum of the three largest elements in a.\n    sum_a1_a2_a3_twice = b[-1] + b[-2] + b[-3]\n    \n    # Calculate a1, a2, and a3 using the sums derived from b.\n    a1 = (sum_a1_a2_a3 + sum_a1_a2 - sum_a2_a3) // 2\n    a2 = (sum_a1_a2_a3 + sum_a1_a3 - sum_a2_a3) // 2\n    a3 = (sum_a1_a2_a3 + sum_a2_a3 - sum_a1_a3) // 2\n    \n    return a1, a2, a3\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        a = restore_array(b)\n        print(f\"{a[0]} {a[1]} {a[2]}\")\nmain()", "def restore_array_a(b):\n    # Since b is sorted, the smallest three elements in b must be the sums of the smallest three elements in a.\n    a = sorted(b[:3])\n    # Determine the remaining elements in b that are not part of the sums of a1, a2, and a3 by subtraction.\n    remaining_elements = b[3:]\n    # Verify that the remaining elements can be formed by sums of a1, a2, and a3.\n    for i in range(len(remaining_elements)):\n        for j in range(i, len(remaining_elements)):\n            for k in range(j, len(remaining_elements)):\n                if remaining_elements[i] + remaining_elements[j] + remaining_elements[k] == b[-1]:\n                    a.append(remaining_elements[i])\n                    a.append(remaining_elements[j])\n                    a.append(remaining_elements[k])\n                    return a\n    return a\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        a = restore_array_a(b)\n        print(f\"{a[0]} {a[1]} {a[2]}\")\nmain()", "def main():\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        b.sort()\n        a1 = b[0]\n        a2 = b[1]\n        a3 = b[6] - b[0] - b[1]\n        print(a1, a2, a3)\nmain()", "def restore_array():\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        b.sort()\n        \n        # The smallest three elements in b must be sums of a1, a2, and a3\n        a1, a2, a3 = None, None, None\n        for i in range(7):\n            for j in range(i+1, 7):\n                for k in range(j+1, 7):\n                    if b[i] + b[j] + b[k] == b[-1]:\n                        a1, a2, a3 = b[i], b[j], b[k]\n                        break\n                if a1 is not None:\n                    break\n            if a1 is not None:\n                break\n        \n        print(a1, a2, a3)\nmain()", "def restore_array():\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        b.sort()\n        \n        # The smallest three elements in b must be a_1 + a_2, a_1 + a_3, and a_2 + a_3\n        a_1_a_2 = b[0]\n        a_1_a_3 = b[1]\n        a_2_a_3 = b[6] - a_1_a_3  # b[6] is the largest element, which is a_1 + a_2 + a_3\n        \n        # Now we need to find a_1, a_2, and a_3\n        a_3 = (a_1_a_3 + a_2_a_3 - a_1_a_2) // 2\n        a_2 = a_2_a_3 - a_3\n        a_1 = a_1_a_3 - a_3\n        \n        print(a_1, a_2, a_3)\nmain()", "def restore_array():\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        b.sort()\n        a = [0] * 3\n        a[0] = b[0]\n        a[1] = b[1]\n        a[2] = b[6] - a[0] - a[1]\n        print(a[0], a[1], a[2])\nmain()", "def restore_array():\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        b.sort()\n        \n        # The two largest elements in b are sums of the two largest integers from a\n        a2_a3_sum = b[-1]\n        a1_a2_sum = b[-2]\n        \n        # The third integer in a is the sum of the two largest elements in b minus the second largest element in b\n        a3 = a2_a3_sum - a1_a2_sum\n        a2 = a1_a2_sum - a3\n        a1 = b[0]\n        \n        print(a1, a2, a3)\nmain()"], "session_history": {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Read the input for the number of test cases and the arrays b for each test case.\",\n        \"steps\": [\n          \"Read the number of test cases t.\",\n          \"For each test case, read the 7 integers representing array b.\"\n        ]\n      },\n      {\n        \"description\": \"Determine the original array a from the given array b.\",\n        \"steps\": [\n          \"For each test case, identify the three integers that were summed to form each element in array b.\",\n          \"Since the array b is sorted, the smallest and largest elements in b must be sums of two of the original integers from a.\",\n          \"Identify the two largest elements in b, which are the sums of the two largest integers from a.\",\n          \"Subtract these two sums from b to find the third integer in a.\"\n        ]\n      },\n      {\n        \"description\": \"Output the original array a for each test case.\",\n        \"steps\": [\n          \"For each test case, print the three integers that form the original array a.\"\n        ]\n      }\n    ],\n    \"high_level_plan\": [\n      \"Initialize the number of test cases t.\",\n      \"For each test case:\",\n      \"  Read the 7 integers representing array b.\",\n      \"  Identify the two largest elements in b.\",\n      \"  Calculate the third integer in a by subtracting the sums of the two largest elements from the two largest elements in b.\",\n      \"  Print the three integers that form the original array a.\"\n    ]\n  }\n}\n```", "Round_0": {"code": "def restore_array():\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        b.sort()\n        \n        # The two largest elements in b are sums of the two largest integers from a\n        a2_a3_sum = b[-1]\n        a1_a2_sum = b[-2]\n        \n        # The third integer in a is the sum of the two largest elements in b minus the second largest element in b\n        a3 = a2_a3_sum - a1_a2_sum\n        a2 = a1_a2_sum - a3\n        a1 = b[0]\n        \n        print(a1, a2, a3)", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def restore_array():\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        b.sort()\n        \n        # The two largest elements in b are sums of the two largest integers from a\n        a2_a3_sum = b[-1]\n        a1_a2_sum = b[-2]\n        \n        # The third integer in a is the sum of the two largest elements in b minus the second largest element in b\n        a3 = a2_a3_sum - a1_a2_sum\n        a2 = a1_a2_sum - a3\n        a1 = b[0]\n        \n        print(a1, a2, a3)"}}, "session_historys": [{"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Read the input for the number of test cases and the arrays b for each test case.\",\n        \"steps\": [\n          \"Read the number of test cases t.\",\n          \"For each test case, read the 7 integers representing array b.\"\n        ]\n      },\n      {\n        \"description\": \"Determine the original array a from the given array b.\",\n        \"steps\": [\n          \"For each test case, identify the three integers a_1, a_2, and a_3 that sum to each element in b.\",\n          \"Since b is sorted, the smallest three elements in b must be a_1 + a_2, a_1 + a_3, and a_2 + a_3.\",\n          \"Use these relationships to deduce the values of a_1, a_2, and a_3.\"\n        ]\n      },\n      {\n        \"description\": \"Output the original array a for each test case.\",\n        \"steps\": [\n          \"For each test case, print the values of a_1, a_2, and a_3.\"\n        ]\n      }\n    ],\n    \"high_level_plan\": [\n      \"Initialize the number of test cases t.\",\n      \"For each test case:\",\n      \"  Read the 7 integers representing array b.\",\n      \"  Identify the three integers a_1, a_2, and a_3 by solving the equations derived from the sorted b.\",\n      \"  Print the values of a_1, a_2, and a_3.\"\n    ]\n  }\n}\n```", "Round_0": {"code": "def restore_array():\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        b.sort()\n        \n        # The smallest three elements in b must be a_1 + a_2, a_1 + a_3, and a_2 + a_3\n        a_sums = [b[0], b[1], b[6] - b[1]]\n        a_sums.sort()\n        \n        # The original array a\n        a = [a_sums[0] - a_sums[1], a_sums[1] - a_sums[2], a_sums[2]]\n        print(f\"{a[0]} {a[1]} {a[2]}\")", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def restore_array():\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        b.sort()\n        \n        # The smallest three elements in b must be a_1 + a_2, a_1 + a_3, and a_2 + a_3\n        a_sums = [b[0], b[1], b[6] - b[1]]\n        a_sums.sort()\n        \n        # The original array a\n        a = [a_sums[0] - a_sums[1], a_sums[1] - a_sums[2], a_sums[2]]\n        print(f\"{a[0]} {a[1]} {a[2]}\")"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Read the input for the number of test cases and the arrays b for each test case.\",\n        \"steps\": [\n          \"Read the number of test cases t.\",\n          \"For each test case, read the 7 integers representing array b.\"\n        ]\n      },\n      {\n        \"description\": \"Determine the original array a from the given array b.\",\n        \"steps\": [\n          \"For each test case, identify the three integers a_1, a_2, and a_3 that sum to each element in b.\",\n          \"Since b is sorted, the smallest three elements in b must be a_1 + a_2, a_1 + a_3, and a_2 + a_3.\",\n          \"Use these sums to deduce the individual values of a_1, a_2, and a_3.\"\n        ]\n      },\n      {\n        \"description\": \"Output the original array a for each test case.\",\n        \"steps\": [\n          \"For each test case, print the values of a_1, a_2, and a_3.\"\n        ]\n      }\n    ],\n    \"high_level_plan\": [\n      \"Initialize the number of test cases t.\",\n      \"For each test case:\",\n      \"  Read the 7 integers representing array b.\",\n      \"  Identify the smallest three elements in b and deduce a_1, a_2, and a_3.\",\n      \"  Print the values of a_1, a_2, and a_3.\",\n      \"End for each test case loop.\",\n      \"End program.\"\n    ]\n  }\n}\n```", "Round_0": {"code": "def restore_array(b):\n    # Since b is sorted, the smallest three elements in b must be a_1 + a_2, a_1 + a_3, and a_2 + a_3.\n    # We can use these sums to deduce the individual values of a_1, a_2, and a_3.\n    a_1_plus_a_2 = b[0]\n    a_1_plus_a_3 = b[1]\n    a_2_plus_a_3 = b[2]\n    \n    # Calculate a_1, a_2, and a_3 using the sums\n    a_1 = (a_1_plus_a_2 + a_1_plus_a_3 - a_2_plus_a_3) // 2\n    a_2 = (a_1_plus_a_2 + a_2_plus_a_3 - a_1_plus_a_3) // 2\n    a_3 = (a_1_plus_a_3 + a_2_plus_a_3 - a_1_plus_a_2) // 2\n    \n    return a_1, a_2, a_3\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        a_1, a_2, a_3 = restore_array(b)\n        print(a_1, a_2, a_3)", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Read the input for the number of test cases and the arrays b for each test case.\",\n        \"steps\": [\n          \"Read the number of test cases t.\",\n          \"For each test case, read the 7 integers representing array b.\"\n        ]\n      },\n      {\n        \"description\": \"Determine the original array a from the given array b.\",\n        \"steps\": [\n          \"For each test case, identify the three integers a_1, a_2, and a_3 that sum to each element in b.\",\n          \"Since b is sorted, the smallest and largest elements in b must be sums of two of the original numbers from a, and the middle elements are single numbers from a.\",\n          \"Use the sorted property of b to deduce the original array a.\"\n        ]\n      },\n      {\n        \"description\": \"Output the original array a for each test case.\",\n        \"steps\": [\n          \"For each test case, print the three integers a_1, a_2, and a_3.\"\n        ]\n      }\n    ],\n    \"high_level_plan\": [\n      \"Initialize the program to read the number of test cases.\",\n      \"For each test case:\",\n      \"  Read the array b.\",\n      \"  Identify the three integers a_1, a_2, and a_3 from the sorted array b.\",\n      \"  Print the identified integers.\"\n    ]\n  }\n}\n```", "Round_0": {"code": "def restore_array():\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        b.sort()\n        \n        # The smallest element in b is either a_1 + a_2 or a_1 + a_3\n        # The largest element in b is either a_2 + a_3 or a_1 + a_2\n        a_1_a_2 = b[0]\n        a_2_a_3 = b[-1]\n        \n        # The middle element in b is either a_1 + a_3 or a_2\n        a_1_a_3 = b[1]\n        a_2 = b[2]\n        \n        # Now we need to find a_1, a_2, and a_3\n        a_3 = a_2_a_3 - a_2\n        a_1 = a_1_a_3 - a_3\n        \n        print(a_1, a_2, a_3)", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def restore_array():\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        b.sort()\n        \n        # The smallest element in b is either a_1 + a_2 or a_1 + a_3\n        # The largest element in b is either a_2 + a_3 or a_1 + a_2\n        a_1_a_2 = b[0]\n        a_2_a_3 = b[-1]\n        \n        # The middle element in b is either a_1 + a_3 or a_2\n        a_1_a_3 = b[1]\n        a_2 = b[2]\n        \n        # Now we need to find a_1, a_2, and a_3\n        a_3 = a_2_a_3 - a_2\n        a_1 = a_1_a_3 - a_3\n        \n        print(a_1, a_2, a_3)"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Read the input for the number of test cases and the arrays b for each test case.\",\n        \"steps\": [\n          \"Read the number of test cases t.\",\n          \"For each test case, read the 7 integers representing array b.\"\n        ]\n      },\n      {\n        \"description\": \"Determine the original array a from the given array b.\",\n        \"steps\": [\n          \"For each test case, identify the three integers that were summed to form each element in array b.\",\n          \"Since the array b is sorted, the smallest and largest elements in b must be the sums of the two smallest and the three largest elements in a.\",\n          \"Identify the three largest elements in b and use them to deduce the original array a.\"\n        ]\n      },\n      {\n        \"description\": \"Output the original array a for each test case.\",\n        \"steps\": [\n          \"For each test case, print the three integers that form the original array a.\"\n        ]\n      }\n    ],\n    \"high_level_steps\": [\n      \"Initialize the program to read the number of test cases.\",\n      \"For each test case, read the array b.\",\n      \"Identify the three largest elements in b as they are part of the sums of the three largest elements in a.\",\n      \"Determine the remaining elements of a by subtracting the sums of the identified elements from the elements in b.\",\n      \"Output the original array a for each test case.\",\n      \"Repeat for all test cases.\"\n    ]\n  }\n}\n```", "Round_0": {"code": "def restore_array(b):\n    # The smallest and largest elements in b must be the sums of the two smallest and the three largest elements in a.\n    # Therefore, the three largest elements in b are part of the sums of the three largest elements in a.\n    a3, a2, a1 = b[-3], b[-2], b[-1]\n    # The sum of the three largest elements in a is the sum of the two smallest and the largest element in b.\n    sum_a1_a2_a3 = a1 + a2 + a3\n    # The sum of the two smallest elements in a is the smallest element in b.\n    sum_a1_a2 = b[0]\n    # The sum of the two largest elements in a is the second smallest element in b.\n    sum_a2_a3 = b[1]\n    # The sum of the two middle elements in a is the third smallest element in b.\n    sum_a1_a3 = b[2]\n    # The sum of the three elements in a is twice the sum of the three largest elements in a.\n    sum_a1_a2_a3_twice = b[-1] + b[-2] + b[-3]\n    \n    # Calculate a1, a2, and a3 using the sums derived from b.\n    a1 = (sum_a1_a2_a3 + sum_a1_a2 - sum_a2_a3) // 2\n    a2 = (sum_a1_a2_a3 + sum_a1_a3 - sum_a2_a3) // 2\n    a3 = (sum_a1_a2_a3 + sum_a2_a3 - sum_a1_a3) // 2\n    \n    return a1, a2, a3\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        a = restore_array(b)\n        print(f\"{a[0]} {a[1]} {a[2]}\")", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def restore_array(b):\n    # The smallest and largest elements in b must be the sums of the two smallest and the three largest elements in a.\n    # Therefore, the three largest elements in b are part of the sums of the three largest elements in a.\n    a3, a2, a1 = b[-3], b[-2], b[-1]\n    # The sum of the three largest elements in a is the sum of the two smallest and the largest element in b.\n    sum_a1_a2_a3 = a1 + a2 + a3\n    # The sum of the two smallest elements in a is the smallest element in b.\n    sum_a1_a2 = b[0]\n    # The sum of the two largest elements in a is the second smallest element in b.\n    sum_a2_a3 = b[1]\n    # The sum of the two middle elements in a is the third smallest element in b.\n    sum_a1_a3 = b[2]\n    # The sum of the three elements in a is twice the sum of the three largest elements in a.\n    sum_a1_a2_a3_twice = b[-1] + b[-2] + b[-3]\n    \n    # Calculate a1, a2, and a3 using the sums derived from b.\n    a1 = (sum_a1_a2_a3 + sum_a1_a2 - sum_a2_a3) // 2\n    a2 = (sum_a1_a2_a3 + sum_a1_a3 - sum_a2_a3) // 2\n    a3 = (sum_a1_a2_a3 + sum_a2_a3 - sum_a1_a3) // 2\n    \n    return a1, a2, a3\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        a = restore_array(b)\n        print(f\"{a[0]} {a[1]} {a[2]}\")"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Read the input for the number of test cases and the arrays b for each test case.\",\n        \"steps\": [\n          \"Read the number of test cases t.\",\n          \"For each test case, read the 7 integers representing array b.\"\n        ]\n      },\n      {\n        \"description\": \"Determine the original array a from the given array b.\",\n        \"steps\": [\n          \"For each test case, identify the three integers that were summed to form each element in array b.\",\n          \"Since the array b is sorted, the smallest three elements in b must be the sums of the smallest three elements in a.\",\n          \"Identify the three smallest elements in b and assume they are a1, a2, and a3 from array a.\",\n          \"Determine the remaining elements in b that are not part of the sums of a1, a2, and a3 by subtraction.\",\n          \"Verify that the remaining elements can be formed by sums of a1, a2, and a3.\"\n        ]\n      },\n      {\n        \"description\": \"Output the original array a for each test case.\",\n        \"steps\": [\n          \"For each test case, output the identified a1, a2, and a3.\"\n        ]\n      }\n    ],\n    \"high_level_plan\": [\n      \"Initialize the program to read input from standard input.\",\n      \"Read the number of test cases t.\",\n      \"For each test case:\",\n      \"  Read the 7 integers representing array b.\",\n      \"  Identify the three smallest elements in b as a1, a2, and a3.\",\n      \"  Determine the remaining elements in b by subtraction.\",\n      \"  Output a1, a2, and a3 as the original array a.\",\n      \"End the program after processing all test cases.\"\n    ]\n  }\n}\n```", "Round_0": {"code": "def restore_array_a(b):\n    # Since b is sorted, the smallest three elements in b must be the sums of the smallest three elements in a.\n    a = sorted(b[:3])\n    # Determine the remaining elements in b that are not part of the sums of a1, a2, and a3 by subtraction.\n    remaining_elements = b[3:]\n    # Verify that the remaining elements can be formed by sums of a1, a2, and a3.\n    for i in range(len(remaining_elements)):\n        for j in range(i, len(remaining_elements)):\n            for k in range(j, len(remaining_elements)):\n                if remaining_elements[i] + remaining_elements[j] + remaining_elements[k] == b[-1]:\n                    a.append(remaining_elements[i])\n                    a.append(remaining_elements[j])\n                    a.append(remaining_elements[k])\n                    return a\n    return a\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        a = restore_array_a(b)\n        print(f\"{a[0]} {a[1]} {a[2]}\")", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 48)"}, "Round_1": {"code": "def restore_array_a(b):\n    # Since b is sorted, the smallest three elements in b must be the sums of the smallest three elements in a.\n    a = sorted(b[:3])\n    # Determine the remaining elements in b that are not part of the sums of a1, a2, and a3 by subtraction.\n    remaining_elements = b[3:]\n    # Verify that the remaining elements can be formed by sums of a1, a2, and a3.\n    for i in range(len(remaining_elements)):\n        for j in range(i, len(remaining_elements)):\n            for k in range(j, len(remaining_elements)):\n                if remaining_elements[i] + remaining_elements[j] + remaining_elements[k] == b[-1]:\n                    a.append(remaining_elements[i])\n                    a.append(remaining_elements[j])\n                    a.append(remaining_elements[k])\n                    return a\n    return a\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        a = restore_array_a(b)\n        print(f\"{a[0]} {a[1]} {a[2]}\")"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Read the input for the number of test cases and the arrays b for each test case.\",\n        \"steps\": [\n          \"Read the number of test cases t.\",\n          \"For each test case, read the 7 integers representing array b.\"\n        ]\n      },\n      {\n        \"description\": \"Determine the original array a from the given array b.\",\n        \"steps\": [\n          \"For each test case, identify the three integers that make up array a.\",\n          \"Since the array b is sorted and contains the sums of all non-empty subsets of a, the smallest three elements in b must be a1, a2, and a3.\",\n          \"The remaining elements in b are sums of combinations of a1, a2, and a3.\",\n          \"Using the sorted property of b, deduce the values of a1, a2, and a3.\"\n        ]\n      },\n      {\n        \"description\": \"Output the original array a for each test case.\",\n        \"steps\": [\n          \"For each test case, print the three integers a1, a2, and a3.\"\n        ]\n      }\n    ],\n    \"high_level_plan\": [\n      \"Initialize the number of test cases t.\",\n      \"For each test case:\",\n      \"  Read the 7 integers representing array b.\",\n      \"  Identify the smallest three elements in b as a1, a2, and a3.\",\n      \"  Print a1, a2, and a3 as the original array a.\"\n    ]\n  }\n}\n```", "Round_0": {"code": "def main():\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        b.sort()\n        a = [b[0], b[1], b[6] - b[0] - b[1]]\n        print(a[0], a[1], a[2])", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def main():\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        b.sort()\n        a1 = b[0]\n        a2 = b[1]\n        a3 = b[6] - b[0] - b[1]\n        print(a1, a2, a3)"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Read the input for the number of test cases and the arrays b for each test case.\",\n        \"steps\": [\n          \"Read the number of test cases t.\",\n          \"For each test case, read the 7 integers representing array b.\"\n        ]\n      },\n      {\n        \"description\": \"Determine the original array a from the given array b.\",\n        \"steps\": [\n          \"For each test case, identify the three integers a1, a2, and a3 that sum to each element in b.\",\n          \"Since b is sorted, the smallest three elements in b must be sums of a1, a2, and a3.\",\n          \"Iterate through b to find the combination of three numbers that sum to each element.\"\n        ]\n      },\n      {\n        \"description\": \"Output the original array a for each test case.\",\n        \"steps\": [\n          \"For each test case, print the three integers a1, a2, and a3 that were determined to be the original array a.\"\n        ]\n      }\n    ],\n    \"high_level_plan\": [\n      \"Initialize the program to read the number of test cases.\",\n      \"For each test case:\",\n      \"  Read the array b.\",\n      \"  Determine the original array a by identifying the three integers that sum to each element in b.\",\n      \"  Print the original array a.\"\n    ]\n  }\n}\n```", "Round_0": {"code": "def restore_array():\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        b.sort()\n        \n        # The smallest three elements in b must be sums of a1, a2, and a3\n        a1, a2, a3 = None, None, None\n        for i in range(7):\n            for j in range(i+1, 7):\n                for k in range(j+1, 7):\n                    if b[i] + b[j] + b[k] == b[-1]:\n                        a1, a2, a3 = b[i], b[j], b[k]\n                        break\n                if a1 is not None:\n                    break\n            if a1 is not None:\n                break\n        \n        print(a1, a2, a3)", "report": "The compilation output of the preceding code is: restore_array() takes 0 positional arguments but 1 was given"}, "Round_1": {"code": "def restore_array():\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        b.sort()\n        \n        # The smallest three elements in b must be sums of a1, a2, and a3\n        a1, a2, a3 = None, None, None\n        for i in range(7):\n            for j in range(i+1, 7):\n                for k in range(j+1, 7):\n                    if b[i] + b[j] + b[k] == b[-1]:\n                        a1, a2, a3 = b[i], b[j], b[k]\n                        break\n                if a1 is not None:\n                    break\n            if a1 is not None:\n                break\n        \n        print(a1, a2, a3)", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Read the input for the number of test cases and the arrays b for each test case.\",\n        \"steps\": [\n          \"Read the number of test cases t.\",\n          \"For each test case, read the 7 integers representing array b.\"\n        ]\n      },\n      {\n        \"description\": \"Determine the original array a from the given array b.\",\n        \"steps\": [\n          \"For each test case, identify the three integers a_1, a_2, and a_3 that sum to each element in b.\",\n          \"Since b is sorted, the smallest three elements in b must be a_1 + a_2, a_1 + a_3, and a_2 + a_3.\",\n          \"Use these sums to deduce the values of a_1, a_2, and a_3.\"\n        ]\n      },\n      {\n        \"description\": \"Output the original array a for each test case.\",\n        \"steps\": [\n          \"For each test case, print the values of a_1, a_2, and a_3.\"\n        ]\n      }\n    ],\n    \"high_level_plan\": [\n      \"Initialize the number of test cases t.\",\n      \"For each test case:\",\n      \"  Read the 7 integers representing array b.\",\n      \"  Identify the smallest three elements in b.\",\n      \"  Use these elements to deduce the values of a_1, a_2, and a_3.\",\n      \"  Print the values of a_1, a_2, and a_3.\",\n      \"Repeat for the next test case until all test cases are processed.\"\n    ]\n  }\n}\n```", "Round_0": {"code": "def restore_array():\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        b.sort()\n        \n        # The smallest three elements in b must be a_1 + a_2, a_1 + a_3, and a_2 + a_3\n        a_1_a_2 = b[0]\n        a_1_a_3 = b[1]\n        a_2_a_3 = b[6] - a_1_a_3  # b[6] is the largest element, which is a_1 + a_2 + a_3\n        \n        # Now we need to find a_1, a_2, and a_3\n        a_3 = (a_1_a_3 + a_2_a_3 - a_1_a_2) // 2\n        a_2 = a_2_a_3 - a_3\n        a_1 = a_1_a_3 - a_3\n        \n        print(a_1, a_2, a_3)", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def restore_array():\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        b.sort()\n        \n        # The smallest three elements in b must be a_1 + a_2, a_1 + a_3, and a_2 + a_3\n        a_1_a_2 = b[0]\n        a_1_a_3 = b[1]\n        a_2_a_3 = b[6] - a_1_a_3  # b[6] is the largest element, which is a_1 + a_2 + a_3\n        \n        # Now we need to find a_1, a_2, and a_3\n        a_3 = (a_1_a_3 + a_2_a_3 - a_1_a_2) // 2\n        a_2 = a_2_a_3 - a_3\n        a_1 = a_1_a_3 - a_3\n        \n        print(a_1, a_2, a_3)"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Read the input for the number of test cases and the arrays b for each test case.\",\n        \"steps\": [\n          \"Read the number of test cases t.\",\n          \"For each test case, read the 7 integers representing array b.\"\n        ]\n      },\n      {\n        \"description\": \"Determine the original array a from the given array b.\",\n        \"steps\": [\n          \"For each test case, identify the three integers a_1, a_2, and a_3 that sum to each element in b.\",\n          \"Since b is sorted, the smallest three elements in b must be a_1, a_2, and a_3 in some order.\",\n          \"Iterate through b to find the combination of three numbers that sum to each element in b.\"\n        ]\n      },\n      {\n        \"description\": \"Output the original array a for each test case.\",\n        \"steps\": [\n          \"For each test case, print the three integers a_1, a_2, and a_3 found in the previous step.\"\n        ]\n      }\n    ],\n    \"high_level_steps\": [\n      \"Initialize the number of test cases t.\",\n      \"For each test case:\",\n      \"  Read the 7 integers representing array b.\",\n      \"  Identify the three integers a_1, a_2, and a_3 from the sorted array b.\",\n      \"  Print the three integers a_1, a_2, and a_3.\"\n    ]\n  }\n}\n```", "Round_0": {"code": "def restore_array():\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        b.sort()\n        a = [0] * 3\n        a[0] = b[0]\n        a[1] = b[1]\n        a[2] = b[6] - a[0] - a[1]\n        print(a[0], a[1], a[2])", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def restore_array():\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        b.sort()\n        a = [0] * 3\n        a[0] = b[0]\n        a[1] = b[1]\n        a[2] = b[6] - a[0] - a[1]\n        print(a[0], a[1], a[2])"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Read the input for the number of test cases and the arrays b for each test case.\",\n        \"steps\": [\n          \"Read the number of test cases t.\",\n          \"For each test case, read the 7 integers representing array b.\"\n        ]\n      },\n      {\n        \"description\": \"Determine the original array a from the given array b.\",\n        \"steps\": [\n          \"For each test case, identify the three integers that were summed to form each element in array b.\",\n          \"Since the array b is sorted, the smallest and largest elements in b must be sums of two of the original integers from a.\",\n          \"Identify the two largest elements in b, which are the sums of the two largest integers from a.\",\n          \"Subtract these two sums from b to find the third integer in a.\"\n        ]\n      },\n      {\n        \"description\": \"Output the original array a for each test case.\",\n        \"steps\": [\n          \"For each test case, print the three integers that form the original array a.\"\n        ]\n      }\n    ],\n    \"high_level_plan\": [\n      \"Initialize the number of test cases t.\",\n      \"For each test case:\",\n      \"  Read the 7 integers representing array b.\",\n      \"  Identify the two largest elements in b.\",\n      \"  Calculate the third integer in a by subtracting the sums of the two largest elements from the two largest elements in b.\",\n      \"  Print the three integers that form the original array a.\"\n    ]\n  }\n}\n```", "Round_0": {"code": "def restore_array():\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        b.sort()\n        \n        # The two largest elements in b are sums of the two largest integers from a\n        a2_a3_sum = b[-1]\n        a1_a2_sum = b[-2]\n        \n        # The third integer in a is the sum of the two largest elements in b minus the second largest element in b\n        a3 = a2_a3_sum - a1_a2_sum\n        a2 = a1_a2_sum - a3\n        a1 = b[0]\n        \n        print(a1, a2, a3)", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def restore_array():\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        b.sort()\n        \n        # The two largest elements in b are sums of the two largest integers from a\n        a2_a3_sum = b[-1]\n        a1_a2_sum = b[-2]\n        \n        # The third integer in a is the sum of the two largest elements in b minus the second largest element in b\n        a3 = a2_a3_sum - a1_a2_sum\n        a2 = a1_a2_sum - a3\n        a1 = b[0]\n        \n        print(a1, a2, a3)"}}], "scores": [], "pass_results": [false, false, false, false, true, false, false, false, false, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 5, "round": 80, "examples": "\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "mutate_method": "condense_two2one", "save_node": true, "parent_index": 33}
