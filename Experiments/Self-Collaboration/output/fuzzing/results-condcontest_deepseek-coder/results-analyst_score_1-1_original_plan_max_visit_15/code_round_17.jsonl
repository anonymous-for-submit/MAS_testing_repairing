{"name": "1619_B. Squares and Cubes", "description": "Polycarp likes squares and cubes of positive integers. Here is the beginning of the sequence of numbers he likes: 1, 4, 8, 9, ....\n\nFor a given number n, count the number of integers from 1 to n that Polycarp likes. In other words, find the number of such x that x is a square of a positive integer number or a cube of a positive integer number (or both a square and a cube simultaneously).\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 20) \u2014 the number of test cases.\n\nThen t lines contain the test cases, one per line. Each of the lines contains one integer n (1 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer you are looking for \u2014 the number of integers from 1 to n that Polycarp likes.\n\nExample\n\nInput\n\n\n6\n10\n1\n25\n1000000000\n999999999\n500000000\n\n\nOutput\n\n\n4\n1\n6\n32591\n32590\n23125", "tags": ["implementation", "math"], "difficulty": 8, "id": 1619, "sample_io": [{"input": "6\n10\n1\n25\n1000000000\n999999999\n500000000\n", "output": ["4\n1\n6\n32591\n32590\n23125\n"]}], "test_list": [{"input": "2\n64\n15625\n", "output": ["10\n145\n"]}, {"input": "8\n64000000\n85766121\n113379904\n148035889\n191102976\n244140625\n594823321\n887503681\n", "output": ["8380\n9681\n11110\n12673\n14376\n16225\n25201\n30721\n"]}, {"input": "2\n15625\n46656\n", "output": ["145\n246\n"]}, {"input": "2\n1000000\n4096\n", "output": ["1090\n76\n"]}, {"input": "1\n4095\n", "output": ["75\n"]}, {"input": "1\n4096\n", "output": ["76\n"]}, {"input": "20\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n", "output": ["2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n"]}, {"input": "5\n64000000\n85766121\n113379904\n148035889\n8000\n", "output": ["8380\n9681\n11110\n12673\n105\n"]}, {"input": "12\n64\n4096\n15625\n46656\n117649\n262144\n531441\n1000000\n1771561\n2985984\n4826809\n7529536\n", "output": ["10\n76\n145\n246\n385\n568\n801\n1090\n1441\n1860\n2353\n2926\n"]}, {"input": "20\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n6012\n975\n3916\n4805\n7952\n3301\n647\n3799\n8657\n122\n", "output": ["1\n1\n1\n2\n2\n2\n2\n3\n4\n4\n91\n37\n74\n81\n104\n68\n31\n73\n109\n13\n"]}, {"input": "1\n216\n", "output": ["18\n"]}, {"input": "5\n62\n63\n64\n4096\n66\n", "output": ["9\n9\n10\n76\n10\n"]}, {"input": "1\n125\n", "output": ["14\n"]}, {"input": "1\n4090\n", "output": ["75\n"]}, {"input": "1\n1000000\n", "output": ["1090\n"]}, {"input": "18\n2515456\n2571353\n2628072\n2685619\n2744000\n2803221\n2924207\n3048625\n3112136\n3176523\n3307949\n3442951\n3511808\n3581577\n3652264\n3796416\n3869893\n3944312\n", "output": ["1711\n1729\n1748\n1766\n1785\n1804\n1842\n1879\n1898\n1917\n1955\n1994\n2013\n2033\n2053\n2092\n2112\n2132\n"]}, {"input": "2\n5000\n8000\n", "output": ["83\n105\n"]}, {"input": "5\n2985983\n4826807\n4826808\n7529533\n7529534\n", "output": ["1859\n2352\n2352\n2925\n2925\n"]}, {"input": "1\n59319\n", "output": ["276\n"]}, {"input": "1\n26\n", "output": ["6\n"]}, {"input": "3\n1000\n8000\n1000000\n", "output": ["38\n105\n1090\n"]}, {"input": "4\n4096\n15625\n117649\n262144\n", "output": ["76\n145\n385\n568\n"]}, {"input": "10\n728999999\n729000001\n594823320\n594823322\n481890303\n308915775\n387420488\n191102975\n148035888\n113379903\n", "output": ["27869\n27870\n25200\n25201\n22707\n18225\n20384\n14375\n12672\n11109\n"]}, {"input": "4\n64\n729\n728\n4096\n", "output": ["10\n33\n32\n76\n"]}, {"input": "10\n3307949\n3375000\n3442951\n3511808\n3581577\n3652264\n3723875\n3796416\n3869893\n3944312\n", "output": ["1955\n1975\n1994\n2013\n2033\n2053\n2072\n2092\n2112\n2132\n"]}, {"input": "1\n16777216\n", "output": ["4336\n"]}, {"input": "7\n728\n1000\n10000\n100000\n1000000\n10000000\n100000000\n", "output": ["32\n38\n117\n356\n1090\n3363\n10443\n"]}, {"input": "15\n7762392\n7880599\n8000000\n8120601\n8242408\n8365427\n8489664\n8615125\n8741816\n8998912\n9129329\n9261000\n9393931\n9663597\n9938375\n", "output": ["2970\n2992\n3014\n3036\n3058\n3081\n3103\n3126\n3148\n3193\n3216\n3239\n3261\n3307\n3353\n"]}, {"input": "6\n887503681\n887503680\n887503682\n999887640\n999887641\n999887642\n", "output": ["30721\n30720\n30721\n32588\n32589\n32589\n"]}, {"input": "1\n991026973\n", "output": ["32446\n"]}, {"input": "1\n481890304\n", "output": ["22708\n"]}, {"input": "1\n8000\n", "output": ["105\n"]}, {"input": "20\n887503680\n887503679\n887503678\n887503677\n887503676\n887503675\n887503674\n887503673\n887503672\n887503671\n887503670\n887503669\n887503668\n887503667\n887503666\n887503665\n887503664\n887503663\n887503662\n887503661\n", "output": ["30720\n30720\n30720\n30720\n30720\n30720\n30720\n30720\n30720\n30720\n30720\n30720\n30720\n30720\n30720\n30720\n30720\n30720\n30720\n30720\n"]}, {"input": "1\n997002999\n", "output": ["32543\n"]}, {"input": "2\n1000\n999\n", "output": ["38\n37\n"]}, {"input": "10\n1\n64\n729\n4096\n15625\n46656\n117649\n262144\n531441\n1000000\n", "output": ["1\n10\n33\n76\n145\n246\n385\n568\n801\n1090\n"]}, {"input": "10\n64000000\n32324\n4645758\n148035889\n382748428\n33627363\n36273373\n75675757\n9897\n34536\n", "output": ["8380\n205\n2309\n12673\n20263\n6103\n6335\n9101\n116\n212\n"]}, {"input": "1\n46142\n", "output": ["244\n"]}, {"input": "20\n117649\n262144\n531441\n1000000\n1771561\n7529536\n11390625\n24137569\n34012224\n85766121\n113379904\n148035889\n191102976\n244140625\n308915776\n387420489\n481890304\n594823321\n729000000\n887503681\n", "output": ["385\n568\n801\n1090\n1441\n2926\n3585\n5185\n6138\n9681\n11110\n12673\n14376\n16225\n18226\n20385\n22708\n25201\n27870\n30721\n"]}, {"input": "9\n8489664\n8615125\n8741816\n8998912\n9129329\n9261000\n9393931\n9663597\n9938375\n", "output": ["3103\n3126\n3148\n3193\n3216\n3239\n3261\n3307\n3353\n"]}, {"input": "1\n49\n", "output": ["9\n"]}, {"input": "2\n49\n676\n", "output": ["9\n32\n"]}, {"input": "4\n117649\n262144\n1000000\n1771561\n", "output": ["385\n568\n1090\n1441\n"]}, {"input": "3\n64\n15625\n1000000\n", "output": ["10\n145\n1090\n"]}, {"input": "3\n15625\n97336\n195112\n", "output": ["145\n351\n492\n"]}, {"input": "5\n4657463\n4741632\n4913000\n5000211\n5088448\n", "output": ["2313\n2333\n2373\n2394\n2414\n"]}, {"input": "20\n125\n216\n343\n512\n1000\n1331\n1728\n2197\n2744\n3375\n4913\n5832\n6859\n8000\n9261\n10648\n12167\n13824\n17576\n19683\n", "output": ["14\n18\n23\n28\n38\n44\n50\n56\n63\n70\n83\n90\n97\n105\n113\n121\n129\n137\n153\n162\n"]}, {"input": "1\n262144\n", "output": ["568\n"]}, {"input": "1\n134217728\n", "output": ["12075\n"]}, {"input": "17\n7301384\n7414875\n7762392\n7880599\n8000000\n8120601\n8242408\n8365427\n8489664\n8615125\n8741816\n8998912\n9129329\n9261000\n9393931\n9663597\n9938375\n", "output": ["2883\n2905\n2970\n2992\n3014\n3036\n3058\n3081\n3103\n3126\n3148\n3193\n3216\n3239\n3261\n3307\n3353\n"]}, {"input": "6\n4096\n15625\n46656\n117649\n262144\n531441\n", "output": ["76\n145\n246\n385\n568\n801\n"]}, {"input": "1\n46655\n", "output": ["245\n"]}, {"input": "1\n34012224\n", "output": ["6138\n"]}, {"input": "7\n244140625\n308915776\n387420489\n481890304\n594823321\n729000000\n887503681\n", "output": ["16225\n18226\n20385\n22708\n25201\n27870\n30721\n"]}, {"input": "9\n4096\n15625\n46656\n117649\n262144\n531441\n1000000\n1771561\n2985984\n", "output": ["76\n145\n246\n385\n568\n801\n1090\n1441\n1860\n"]}, {"input": "1\n308915776\n", "output": ["18226\n"]}, {"input": "5\n720\n721\n722\n723\n724\n", "output": ["32\n32\n32\n32\n32\n"]}, {"input": "2\n4096\n720\n", "output": ["76\n32\n"]}, {"input": "1\n42144192\n", "output": ["6821\n"]}, {"input": "20\n1000000000\n999999999\n999999998\n999999997\n999999996\n999999995\n999999994\n999999993\n999999992\n999999991\n999999990\n999999989\n999999988\n999999987\n999999986\n999999985\n999999984\n999999983\n999999982\n999999981\n", "output": ["32591\n32590\n32590\n32590\n32590\n32590\n32590\n32590\n32590\n32590\n32590\n32590\n32590\n32590\n32590\n32590\n32590\n32590\n32590\n32590\n"]}, {"input": "8\n728\n1000\n4095\n10000\n100000\n1000000\n10000000\n100000000\n", "output": ["32\n38\n75\n117\n356\n1090\n3363\n10443\n"]}, {"input": "9\n728\n1000000\n35\n144\n4095\n10000\n100000\n10000000\n100000000\n", "output": ["32\n1090\n7\n15\n75\n117\n356\n3363\n10443\n"]}, {"input": "3\n24389\n31329\n21025\n", "output": ["180\n203\n167\n"]}, {"input": "2\n8000\n1000000\n", "output": ["105\n1090\n"]}, {"input": "5\n1\n64\n729\n4096\n15625\n", "output": ["1\n10\n33\n76\n145\n"]}, {"input": "1\n7529536\n", "output": ["2926\n"]}, {"input": "1\n387420489\n", "output": ["20385\n"]}, {"input": "8\n117649\n262144\n531441\n1000000\n1771561\n2985984\n4826809\n7529536\n", "output": ["385\n568\n801\n1090\n1441\n1860\n2353\n2926\n"]}, {"input": "1\n117649\n", "output": ["385\n"]}, {"input": "12\n64\n125\n216\n343\n512\n729\n1000\n1331\n1728\n2197\n2744\n3375\n", "output": ["10\n14\n18\n23\n28\n33\n38\n44\n50\n56\n63\n70\n"]}, {"input": "1\n4913\n", "output": ["83\n"]}, {"input": "20\n999950883\n999950883\n999950883\n999950883\n999950883\n999950883\n999950883\n999950883\n999950883\n999950883\n999950883\n999950883\n999950883\n999950883\n999950883\n999950883\n999950883\n999950883\n999950883\n999950883\n", "output": ["32589\n32589\n32589\n32589\n32589\n32589\n32589\n32589\n32589\n32589\n32589\n32589\n32589\n32589\n32589\n32589\n32589\n32589\n32589\n32589\n"]}, {"input": "2\n1000000\n9025699\n", "output": ["1090\n3198\n"]}, {"input": "1\n64\n", "output": ["10\n"]}, {"input": "2\n4096\n15625\n", "output": ["76\n145\n"]}, {"input": "11\n4096\n15625\n46656\n117649\n262144\n531441\n1000000\n1771561\n2985984\n4826809\n7529536\n", "output": ["76\n145\n246\n385\n568\n801\n1090\n1441\n1860\n2353\n2926\n"]}, {"input": "1\n728\n", "output": ["32\n"]}, {"input": "20\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n", "output": ["32591\n32591\n32591\n32591\n32591\n32591\n32591\n32591\n32591\n32591\n32591\n32591\n32591\n32591\n32591\n32591\n32591\n32591\n32591\n32591\n"]}, {"input": "20\n4096\n15625\n46656\n117649\n262144\n531441\n1000000\n1771561\n2985984\n4826809\n7529536\n11390625\n16777216\n24137569\n34012224\n47045881\n64000000\n85766121\n113379904\n148035889\n", "output": ["76\n145\n246\n385\n568\n801\n1090\n1441\n1860\n2353\n2926\n3585\n4336\n5185\n6138\n7201\n8380\n9681\n11110\n12673\n"]}, {"input": "3\n887503681\n887503680\n887503682\n", "output": ["30721\n30720\n30721\n"]}, {"input": "5\n125\n216\n343\n512\n729\n", "output": ["14\n18\n23\n28\n33\n"]}, {"input": "20\n999999999\n999999999\n999999999\n999999999\n999999999\n999999999\n999999999\n999999999\n999999999\n999999999\n999999999\n999999999\n999999999\n999999999\n999999999\n999999999\n999999999\n999999999\n999999999\n999999999\n", "output": ["32590\n32590\n32590\n32590\n32590\n32590\n32590\n32590\n32590\n32590\n32590\n32590\n32590\n32590\n32590\n32590\n32590\n32590\n32590\n32590\n"]}, {"input": "2\n8000\n5000\n", "output": ["105\n83\n"]}, {"input": "1\n1771561\n", "output": ["1441\n"]}, {"input": "13\n64\n4096\n15625\n46656\n117649\n262144\n531441\n1000000\n1771561\n2985984\n4826809\n1000000000\n7529536\n", "output": ["10\n76\n145\n246\n385\n568\n801\n1090\n1441\n1860\n2353\n32591\n2926\n"]}, {"input": "7\n887503681\n887503680\n887503682\n999887640\n999887641\n55240747\n3566977\n", "output": ["30721\n30720\n30721\n32588\n32589\n7793\n2028\n"]}, {"input": "7\n728999999\n729000001\n594823320\n594823322\n481890303\n308915775\n387420488\n", "output": ["27869\n27870\n25200\n25201\n22707\n18225\n20384\n"]}, {"input": "1\n1000\n", "output": ["38\n"]}, {"input": "7\n4096\n64\n1000000000\n15625\n46656\n262144\n2985984\n", "output": ["76\n10\n32591\n145\n246\n568\n1860\n"]}, {"input": "3\n4096\n64\n1000000000\n", "output": ["76\n10\n32591\n"]}, {"input": "6\n64\n729\n4096\n15625\n46656\n117649\n", "output": ["10\n33\n76\n145\n246\n385\n"]}, {"input": "2\n1000\n1000000\n", "output": ["38\n1090\n"]}, {"input": "1\n15625\n", "output": ["145\n"]}, {"input": "1\n11390625\n", "output": ["3585\n"]}, {"input": "1\n728999999\n", "output": ["27869\n"]}, {"input": "16\n8000000\n8120601\n8242408\n8365427\n8489664\n8615125\n8741816\n8869743\n8998912\n9129329\n9261000\n9393931\n9528128\n9663597\n9800344\n9938375\n", "output": ["3014\n3036\n3058\n3081\n3103\n3126\n3148\n3171\n3193\n3216\n3239\n3261\n3284\n3307\n3330\n3353\n"]}, {"input": "5\n117649\n262144\n531441\n1000000\n1771561\n", "output": ["385\n568\n801\n1090\n1441\n"]}, {"input": "3\n8000\n1000\n100000000\n", "output": ["105\n38\n10443\n"]}, {"input": "13\n4096\n64\n1000000000\n15625\n46656\n262144\n2985984\n4826807\n7529533\n7529534\n7529535\n720\n4095\n", "output": ["76\n10\n32591\n145\n246\n568\n1860\n2352\n2925\n2925\n2925\n32\n75\n"]}, {"input": "5\n8000\n64000000\n85766121\n113379904\n148035889\n", "output": ["105\n8380\n9681\n11110\n12673\n"]}, {"input": "2\n4096\n64\n", "output": ["76\n10\n"]}, {"input": "1\n24137569\n", "output": ["5185\n"]}, {"input": "5\n15625\n97336\n195112\n205379\n274625\n", "output": ["145\n351\n492\n505\n581\n"]}, {"input": "1\n238144\n", "output": ["542\n"]}, {"input": "1\n531441\n", "output": ["801\n"]}, {"input": "5\n62\n63\n64\n65\n66\n", "output": ["9\n9\n10\n10\n10\n"]}, {"input": "1\n729\n", "output": ["33\n"]}, {"input": "3\n5000\n8000\n1000000\n", "output": ["83\n105\n1090\n"]}, {"input": "3\n64\n729\n728\n", "output": ["10\n33\n32\n"]}, {"input": "1\n46656\n", "output": ["246\n"]}, {"input": "1\n887483586\n", "output": ["30720\n"]}, {"input": "4\n481890304\n594823321\n729000000\n887503681\n", "output": ["22708\n25201\n27870\n30721\n"]}, {"input": "5\n9261000\n9393931\n9663597\n9800344\n9938375\n", "output": ["3239\n3261\n3307\n3330\n3353\n"]}, {"input": "1\n65\n", "output": ["10\n"]}, {"input": "4\n64000000\n85766121\n113379904\n148035889\n", "output": ["8380\n9681\n11110\n12673\n"]}, {"input": "5\n125\n216\n2197\n2744\n3375\n", "output": ["14\n18\n56\n63\n70\n"]}, {"input": "1\n720\n", "output": ["32\n"]}, {"input": "1\n64000000\n", "output": ["8380\n"]}, {"input": "5\n49\n50\n675\n676\n677\n", "output": ["9\n9\n31\n32\n32\n"]}, {"input": "1\n97336\n", "output": ["351\n"]}, {"input": "6\n64\n729\n4096\n117649\n262144\n531441\n", "output": ["10\n33\n76\n385\n568\n801\n"]}, {"input": "11\n4096\n64\n1000000000\n15625\n46656\n262144\n2985984\n4826807\n7529533\n7529534\n7529535\n", "output": ["76\n10\n32591\n145\n246\n568\n1860\n2352\n2925\n2925\n2925\n"]}, {"input": "3\n8000\n1000\n1000000\n", "output": ["105\n38\n1090\n"]}, {"input": "10\n5050\n30404\n12345\n98765432\n1234564\n64\n456\n1\n23\n123\n", "output": ["84\n200\n130\n10379\n1208\n10\n26\n1\n5\n13\n"]}, {"input": "1\n887503681\n", "output": ["30721\n"]}, {"input": "2\n15625\n4096\n", "output": ["145\n76\n"]}, {"input": "1\n5000\n", "output": ["83\n"]}, {"input": "20\n50653\n54872\n59319\n64000\n68921\n74088\n79507\n85184\n91125\n97336\n103823\n110592\n125000\n132651\n140608\n148877\n157464\n166375\n175616\n185193\n", "output": ["256\n266\n276\n286\n297\n308\n318\n329\n340\n351\n363\n374\n396\n408\n419\n431\n443\n455\n468\n480\n"]}, {"input": "7\n64000000\n85766121\n113379904\n148035889\n191102976\n244140625\n594823321\n", "output": ["8380\n9681\n11110\n12673\n14376\n16225\n25201\n"]}, {"input": "2\n42144192\n887503681\n", "output": ["6821\n30721\n"]}, {"input": "7\n100\n1000\n10000\n100000\n1000000\n10000000\n100000000\n", "output": ["12\n38\n117\n356\n1090\n3363\n10443\n"]}, {"input": "1\n1729\n", "output": ["50\n"]}, {"input": "5\n10000\n100000\n1000000\n10000000\n100000000\n", "output": ["117\n356\n1090\n3363\n10443\n"]}, {"input": "18\n54872\n59319\n64000\n68921\n74088\n79507\n85184\n91125\n97336\n103823\n110592\n125000\n132651\n140608\n148877\n157464\n166375\n175616\n", "output": ["266\n276\n286\n297\n308\n318\n329\n340\n351\n363\n374\n396\n408\n419\n431\n443\n455\n468\n"]}, {"input": "1\n887503149\n", "output": ["30720\n"]}, {"input": "1\n729000000\n", "output": ["27870\n"]}, {"input": "1\n512\n", "output": ["28\n"]}, {"input": "2\n30\n15625\n", "output": ["7\n145\n"]}, {"input": "8\n64000000\n6779273\n113379904\n148035889\n191102976\n244140625\n594823321\n887503681\n", "output": ["8380\n2779\n11110\n12673\n14376\n16225\n25201\n30721\n"]}, {"input": "2\n15625\n9522\n", "output": ["145\n114\n"]}, {"input": "2\n1000000\n2995\n", "output": ["1090\n65\n"]}, {"input": "1\n1406\n", "output": ["45\n"]}, {"input": "1\n4375\n", "output": ["78\n"]}, {"input": "20\n7\n9\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n", "output": ["2\n4\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n"]}, {"input": "5\n64000000\n85766121\n113379904\n148035889\n3627\n", "output": ["8380\n9681\n11110\n12673\n72\n"]}, {"input": "12\n64\n4096\n15625\n46656\n117649\n262144\n531441\n1000000\n1771561\n2985984\n4826809\n2207430\n", "output": ["10\n76\n145\n246\n385\n568\n801\n1090\n1441\n1860\n2353\n1604\n"]}, {"input": "1\n127\n", "output": ["14\n"]}, {"input": "5\n62\n63\n68\n4096\n66\n", "output": ["9\n9\n10\n76\n10\n"]}, {"input": "1\n60\n", "output": ["9\n"]}, {"input": "1\n3444\n", "output": ["70\n"]}, {"input": "1\n1000001\n", "output": ["1090\n"]}, {"input": "18\n2515456\n2571353\n2628072\n2685619\n2744000\n2803221\n2924207\n3048625\n3112136\n3176523\n3307949\n3442951\n3511808\n3581577\n2798293\n3796416\n3869893\n3944312\n", "output": ["1711\n1729\n1748\n1766\n1785\n1804\n1842\n1879\n1898\n1917\n1955\n1994\n2013\n2033\n1801\n2092\n2112\n2132\n"]}, {"input": "2\n5000\n3092\n", "output": ["83\n66\n"]}, {"input": "5\n2985983\n4826807\n7267230\n7529533\n7529534\n", "output": ["1859\n2352\n2875\n2925\n2925\n"]}, {"input": "1\n58027\n", "output": ["272\n"]}, {"input": "1\n8\n", "output": ["3\n"]}, {"input": "3\n1000\n1087\n1000000\n", "output": ["38\n39\n1090\n"]}, {"input": "4\n4096\n15625\n117649\n262424\n", "output": ["76\n145\n385\n568\n"]}, {"input": "10\n728999999\n925717858\n594823320\n594823322\n481890303\n308915775\n387420488\n191102975\n148035888\n113379903\n", "output": ["27869\n31368\n25200\n25201\n22707\n18225\n20384\n14375\n12672\n11109\n"]}, {"input": "4\n64\n729\n728\n2136\n", "output": ["10\n33\n32\n55\n"]}, {"input": "10\n3307949\n3375000\n1340212\n3511808\n3581577\n3652264\n3723875\n3796416\n3869893\n3944312\n", "output": ["1955\n1975\n1257\n2013\n2033\n2053\n2072\n2092\n2112\n2132\n"]}, {"input": "1\n9480257\n", "output": ["3276\n"]}, {"input": "7\n728\n1000\n10000\n100000\n1000000\n10000000\n101000000\n", "output": ["32\n38\n117\n356\n1090\n3363\n10493\n"]}, {"input": "15\n7762392\n7880599\n8000000\n8120601\n8242408\n8365427\n8489664\n8615125\n8741816\n8998912\n884275\n9261000\n9393931\n9663597\n9938375\n", "output": ["2970\n2992\n3014\n3036\n3058\n3081\n3103\n3126\n3148\n3193\n1026\n3239\n3261\n3307\n3353\n"]}, {"input": "6\n887503681\n887503680\n887503682\n839681625\n999887641\n999887642\n", "output": ["30721\n30720\n30721\n29890\n32589\n32589\n"]}, {"input": "1\n121581031\n", "output": ["11499\n"]}, {"input": "1\n7376\n", "output": ["100\n"]}, {"input": "2\n1000\n1117\n", "output": ["38\n40\n"]}, {"input": "10\n1\n64\n729\n4096\n15625\n87389\n117649\n262144\n531441\n1000000\n", "output": ["1\n10\n33\n76\n145\n333\n385\n568\n801\n1090\n"]}, {"input": "10\n64000000\n32324\n1744179\n148035889\n382748428\n33627363\n36273373\n75675757\n9897\n34536\n", "output": ["8380\n205\n1430\n12673\n20263\n6103\n6335\n9101\n116\n212\n"]}, {"input": "1\n57182\n", "output": ["271\n"]}, {"input": "20\n117649\n262144\n531441\n1000000\n1771561\n7529536\n11390625\n24137569\n34012224\n113920889\n113379904\n148035889\n191102976\n244140625\n308915776\n387420489\n481890304\n594823321\n729000000\n887503681\n", "output": ["385\n568\n801\n1090\n1441\n2926\n3585\n5185\n6138\n11135\n11110\n12673\n14376\n16225\n18226\n20385\n22708\n25201\n27870\n30721\n"]}, {"input": "9\n8489664\n8615125\n8741816\n8998912\n9129329\n9261000\n9393931\n1153754\n9938375\n", "output": ["3103\n3126\n3148\n3193\n3216\n3239\n3261\n1168\n3353\n"]}, {"input": "1\n91\n", "output": ["11\n"]}, {"input": "2\n20\n676\n", "output": ["5\n32\n"]}, {"input": "4\n117649\n262144\n1000000\n1036687\n", "output": ["385\n568\n1090\n1109\n"]}, {"input": "3\n15625\n188666\n195112\n", "output": ["145\n484\n492\n"]}, {"input": "5\n4657463\n4741632\n4913000\n5000211\n2484840\n", "output": ["2313\n2333\n2373\n2394\n1700\n"]}, {"input": "20\n125\n216\n343\n512\n1000\n1331\n1728\n2197\n2744\n3375\n4913\n5832\n6859\n8000\n17776\n10648\n12167\n13824\n17576\n19683\n", "output": ["14\n18\n23\n28\n38\n44\n50\n56\n63\n70\n83\n90\n97\n105\n154\n121\n129\n137\n153\n162\n"]}, {"input": "1\n73410\n", "output": ["305\n"]}, {"input": "1\n26785760\n", "output": ["5457\n"]}, {"input": "17\n7301384\n7414875\n7762392\n7880599\n8000000\n8120601\n8242408\n8365427\n8489664\n8615125\n8741816\n8998912\n9129329\n9261000\n9393931\n8451825\n9938375\n", "output": ["2883\n2905\n2970\n2992\n3014\n3036\n3058\n3081\n3103\n3126\n3148\n3193\n3216\n3239\n3261\n3096\n3353\n"]}, {"input": "6\n8069\n15625\n46656\n117649\n262144\n531441\n", "output": ["105\n145\n246\n385\n568\n801\n"]}, {"input": "1\n70109\n", "output": ["299\n"]}, {"input": "1\n44712374\n", "output": ["7022\n"]}, {"input": "7\n244140625\n308915776\n387420489\n481890304\n359052248\n729000000\n887503681\n", "output": ["16225\n18226\n20385\n22708\n19632\n27870\n30721\n"]}, {"input": "9\n4096\n15625\n46656\n117649\n122890\n531441\n1000000\n1771561\n2985984\n", "output": ["76\n145\n246\n385\n392\n801\n1090\n1441\n1860\n"]}, {"input": "1\n255817929\n", "output": ["16603\n"]}, {"input": "5\n720\n448\n722\n723\n724\n", "output": ["32\n26\n32\n32\n32\n"]}, {"input": "2\n7010\n720\n", "output": ["98\n32\n"]}, {"input": "1\n16911191\n", "output": ["4352\n"]}, {"input": "8\n728\n1000\n4095\n10000\n100000\n1000000\n10000000\n100010000\n", "output": ["32\n38\n75\n117\n356\n1090\n3363\n10443\n"]}, {"input": "9\n728\n1000000\n35\n144\n4095\n10000\n100000\n10001000\n100000000\n", "output": ["32\n1090\n7\n15\n75\n117\n356\n3363\n10443\n"]}, {"input": "3\n48700\n31329\n21025\n", "output": ["250\n203\n167\n"]}, {"input": "2\n8000\n1000001\n", "output": ["105\n1090\n"]}, {"input": "5\n1\n72\n729\n4096\n15625\n", "output": ["1\n10\n33\n76\n145\n"]}, {"input": "1\n10898647\n", "output": ["3508\n"]}, {"input": "1\n122600118\n", "output": ["11546\n"]}, {"input": "8\n117649\n262144\n531441\n1000000\n1771561\n2985984\n4826809\n1305260\n", "output": ["385\n568\n801\n1090\n1441\n1860\n2353\n1241\n"]}, {"input": "1\n52628\n", "output": ["260\n"]}, {"input": "12\n64\n125\n357\n343\n512\n729\n1000\n1331\n1728\n2197\n2744\n3375\n", "output": ["10\n14\n23\n23\n28\n33\n38\n44\n50\n56\n63\n70\n"]}, {"input": "1\n4002\n", "output": ["75\n"]}, {"input": "20\n999950883\n999950883\n999950883\n999950883\n999950883\n999950883\n999950883\n999950883\n999950883\n999950883\n999950883\n999950883\n999950883\n999950883\n999950883\n999950883\n999950883\n999950883\n589412590\n999950883\n", "output": ["32589\n32589\n32589\n32589\n32589\n32589\n32589\n32589\n32589\n32589\n32589\n32589\n32589\n32589\n32589\n32589\n32589\n32589\n25087\n32589\n"]}, {"input": "2\n1000000\n15696692\n", "output": ["1090\n4196\n"]}, {"input": "1\n40\n", "output": ["8\n"]}, {"input": "2\n4096\n23197\n", "output": ["76\n175\n"]}, {"input": "11\n4096\n15625\n46656\n117649\n262144\n531441\n1000000\n1771561\n741529\n4826809\n7529536\n", "output": ["76\n145\n246\n385\n568\n801\n1090\n1441\n942\n2353\n2926\n"]}, {"input": "1\n751\n", "output": ["33\n"]}, {"input": "20\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000100\n1000000000\n", "output": ["32591\n32591\n32591\n32591\n32591\n32591\n32591\n32591\n32591\n32591\n32591\n32591\n32591\n32591\n32591\n32591\n32591\n32591\n32591\n32591\n"]}, {"input": "20\n4096\n15625\n46656\n117649\n262144\n531441\n1000000\n1771561\n2985984\n4826809\n7529536\n11390625\n29118316\n24137569\n34012224\n47045881\n64000000\n85766121\n113379904\n148035889\n", "output": ["76\n145\n246\n385\n568\n801\n1090\n1441\n1860\n2353\n2926\n3585\n5686\n5185\n6138\n7201\n8380\n9681\n11110\n12673\n"]}, {"input": "3\n887503681\n887503680\n45561153\n", "output": ["30721\n30720\n7088\n"]}, {"input": "5\n83\n216\n343\n512\n729\n", "output": ["11\n18\n23\n28\n33\n"]}, {"input": "20\n999999999\n999999999\n999999999\n999999999\n999999999\n999999999\n999999999\n999999999\n999999999\n999999999\n999999999\n478794427\n999999999\n999999999\n999999999\n999999999\n999999999\n999999999\n999999999\n999999999\n", "output": ["32590\n32590\n32590\n32590\n32590\n32590\n32590\n32590\n32590\n32590\n32590\n22636\n32590\n32590\n32590\n32590\n32590\n32590\n32590\n32590\n"]}, {"input": "2\n13837\n5000\n", "output": ["137\n83\n"]}, {"input": "1\n64945\n", "output": ["288\n"]}, {"input": "13\n64\n4096\n15625\n46656\n117649\n262144\n531441\n1010000\n1771561\n2985984\n4826809\n1000000000\n7529536\n", "output": ["10\n76\n145\n246\n385\n568\n801\n1094\n1441\n1860\n2353\n32591\n2926\n"]}, {"input": "7\n887503681\n887503680\n887503682\n999887640\n999887641\n100452051\n3566977\n", "output": ["30721\n30720\n30721\n32588\n32589\n10465\n2028\n"]}, {"input": "7\n728999999\n729000001\n594823320\n679278099\n481890303\n308915775\n387420488\n", "output": ["27869\n27870\n25200\n26912\n22707\n18225\n20384\n"]}, {"input": "7\n4096\n83\n1000000000\n15625\n46656\n262144\n2985984\n", "output": ["76\n11\n32591\n145\n246\n568\n1860\n"]}, {"input": "3\n335\n64\n1000000000\n", "output": ["22\n10\n32591\n"]}, {"input": "6\n106\n729\n4096\n15625\n46656\n117649\n", "output": ["12\n33\n76\n145\n246\n385\n"]}, {"input": "1\n8176\n", "output": ["106\n"]}, {"input": "1\n9986164\n", "output": ["3361\n"]}, {"input": "16\n8000000\n8120601\n8242408\n8365427\n8348189\n8615125\n8741816\n8869743\n8998912\n9129329\n9261000\n9393931\n9528128\n9663597\n9800344\n9938375\n", "output": ["3014\n3036\n3058\n3081\n3077\n3126\n3148\n3171\n3193\n3216\n3239\n3261\n3284\n3307\n3330\n3353\n"]}, {"input": "5\n117649\n262144\n115285\n1000000\n1771561\n", "output": ["385\n568\n381\n1090\n1441\n"]}, {"input": "3\n8000\n1000\n100000100\n", "output": ["105\n38\n10443\n"]}, {"input": "13\n4096\n64\n1000000000\n15625\n46656\n262144\n2985984\n4826807\n1149531\n7529534\n7529535\n720\n4095\n", "output": ["76\n10\n32591\n145\n246\n568\n1860\n2352\n1166\n2925\n2925\n32\n75\n"]}, {"input": "5\n8000\n64000000\n85766121\n113379904\n200531019\n", "output": ["105\n8380\n9681\n11110\n14721\n"]}, {"input": "2\n3696\n64\n", "output": ["72\n10\n"]}, {"input": "1\n7212693\n", "output": ["2865\n"]}, {"input": "5\n15625\n97336\n7310\n205379\n274625\n", "output": ["145\n351\n100\n505\n581\n"]}, {"input": "1\n45605\n", "output": ["243\n"]}, {"input": "1\n160796\n", "output": ["447\n"]}, {"input": "5\n62\n63\n64\n65\n84\n", "output": ["9\n9\n10\n10\n11\n"]}, {"input": "1\n211\n", "output": ["17\n"]}, {"input": "3\n5000\n15814\n1000000\n", "output": ["83\n145\n1090\n"]}, {"input": "3\n25\n729\n728\n", "output": ["6\n33\n32\n"]}, {"input": "1\n34005\n", "output": ["211\n"]}, {"input": "5\n9261000\n9393931\n6041900\n9800344\n9938375\n", "output": ["3239\n3261\n2627\n3330\n3353\n"]}, {"input": "1\n17\n", "output": ["5\n"]}, {"input": "4\n64000000\n85766121\n113379904\n269756718\n", "output": ["8380\n9681\n11110\n17045\n"]}, {"input": "5\n125\n216\n2197\n2744\n3430\n", "output": ["14\n18\n56\n63\n70\n"]}, {"input": "1\n102462643\n", "output": ["10568\n"]}, {"input": "5\n11\n50\n675\n676\n677\n", "output": ["4\n9\n31\n32\n32\n"]}, {"input": "1\n172146\n", "output": ["462\n"]}, {"input": "6\n64\n729\n4096\n117649\n132535\n531441\n", "output": ["10\n33\n76\n385\n407\n801\n"]}, {"input": "11\n4096\n64\n1000000000\n15625\n51900\n262144\n2985984\n4826807\n7529533\n7529534\n7529535\n", "output": ["76\n10\n32591\n145\n258\n568\n1860\n2352\n2925\n2925\n2925\n"]}, {"input": "3\n6897\n1000\n1000000\n", "output": ["98\n38\n1090\n"]}, {"input": "10\n5050\n30404\n12345\n98765432\n1234564\n64\n236\n1\n23\n123\n", "output": ["84\n200\n130\n10379\n1208\n10\n19\n1\n5\n13\n"]}, {"input": "1\n934500044\n", "output": ["31515\n"]}, {"input": "2\n16537\n4096\n", "output": ["148\n76\n"]}, {"input": "1\n2885\n", "output": ["64\n"]}, {"input": "20\n50653\n54872\n59319\n64000\n68921\n74088\n151003\n85184\n91125\n97336\n103823\n110592\n125000\n132651\n140608\n148877\n157464\n166375\n175616\n185193\n", "output": ["256\n266\n276\n286\n297\n308\n434\n329\n340\n351\n363\n374\n396\n408\n419\n431\n443\n455\n468\n480\n"]}, {"input": "7\n64000000\n85766121\n113379904\n35336991\n191102976\n244140625\n594823321\n", "output": ["8380\n9681\n11110\n6254\n14376\n16225\n25201\n"]}, {"input": "2\n34203623\n887503681\n", "output": ["6154\n30721\n"]}, {"input": "7\n100\n1001\n10000\n100000\n1000000\n10000000\n100000000\n", "output": ["12\n38\n117\n356\n1090\n3363\n10443\n"]}, {"input": "1\n1708\n", "output": ["49\n"]}, {"input": "5\n10000\n100000\n1000000\n10000100\n100000000\n", "output": ["117\n356\n1090\n3363\n10443\n"]}, {"input": "18\n54872\n59319\n64000\n68921\n74088\n79507\n85184\n91125\n97336\n103823\n110592\n125000\n132651\n262005\n148877\n157464\n166375\n175616\n", "output": ["266\n276\n286\n297\n308\n318\n329\n340\n351\n363\n374\n396\n408\n567\n431\n443\n455\n468\n"]}, {"input": "1\n286650660\n", "output": ["17564\n"]}, {"input": "1\n61625719\n", "output": ["8225\n"]}, {"input": "1\n830\n", "output": ["34\n"]}, {"input": "6\n10\n1\n19\n1000000000\n999999999\n500000000\n", "output": ["4\n1\n5\n32591\n32590\n23125\n"]}, {"input": "2\n30\n21470\n", "output": ["7\n168\n"]}, {"input": "8\n19411695\n6779273\n113379904\n148035889\n191102976\n244140625\n594823321\n887503681\n", "output": ["4657\n2779\n11110\n12673\n14376\n16225\n25201\n30721\n"]}, {"input": "2\n9974\n9522\n", "output": ["116\n114\n"]}, {"input": "1\n2269\n", "output": ["57\n"]}, {"input": "1\n1658\n", "output": ["48\n"]}, {"input": "20\n7\n9\n7\n7\n7\n7\n7\n7\n7\n7\n11\n7\n7\n7\n7\n7\n7\n7\n7\n7\n", "output": ["2\n4\n2\n2\n2\n2\n2\n2\n2\n2\n4\n2\n2\n2\n2\n2\n2\n2\n2\n2\n"]}, {"input": "5\n64000000\n85766121\n10649182\n148035889\n3627\n", "output": ["8380\n9681\n3469\n12673\n72\n"]}, {"input": "12\n64\n4096\n15625\n7797\n117649\n262144\n531441\n1000000\n1771561\n2985984\n4826809\n2207430\n", "output": ["10\n76\n145\n103\n385\n568\n801\n1090\n1441\n1860\n2353\n1604\n"]}, {"input": "5\n62\n63\n131\n4096\n66\n", "output": ["9\n9\n14\n76\n10\n"]}, {"input": "1\n11\n", "output": ["4\n"]}, {"input": "1\n2005\n", "output": ["53\n"]}, {"input": "1\n0000001\n", "output": ["1\n"]}, {"input": "18\n2515456\n2571353\n2628072\n2685619\n5149368\n2803221\n2924207\n3048625\n3112136\n3176523\n3307949\n3442951\n3511808\n3581577\n2798293\n3796416\n3869893\n3944312\n", "output": ["1711\n1729\n1748\n1766\n2428\n1804\n1842\n1879\n1898\n1917\n1955\n1994\n2013\n2033\n1801\n2092\n2112\n2132\n"]}, {"input": "2\n3536\n3092\n", "output": ["71\n66\n"]}, {"input": "5\n2985983\n4826807\n7267230\n7529533\n9986545\n", "output": ["1859\n2352\n2875\n2925\n3361\n"]}, {"input": "1\n44671\n", "output": ["241\n"]}, {"input": "3\n1000\n2149\n1000000\n", "output": ["38\n55\n1090\n"]}, {"input": "4\n1664\n15625\n117649\n262424\n", "output": ["48\n145\n385\n568\n"]}, {"input": "4\n17\n729\n728\n2136\n", "output": ["5\n33\n32\n55\n"]}, {"input": "10\n3307949\n3375000\n2474200\n3511808\n3581577\n3652264\n3723875\n3796416\n3869893\n3944312\n", "output": ["1955\n1975\n1696\n2013\n2033\n2053\n2072\n2092\n2112\n2132\n"]}, {"input": "1\n15373823\n", "output": ["4153\n"]}, {"input": "15\n7762392\n211382\n8000000\n8120601\n8242408\n8365427\n8489664\n8615125\n8741816\n8998912\n884275\n9261000\n9393931\n9663597\n9938375\n", "output": ["2970\n511\n3014\n3036\n3058\n3081\n3103\n3126\n3148\n3193\n1026\n3239\n3261\n3307\n3353\n"]}, {"input": "1\n188117206\n", "output": ["14264\n"]}, {"input": "1\n14290\n", "output": ["139\n"]}, {"input": "2\n1000\n1698\n", "output": ["38\n49\n"]}, {"input": "10\n1\n64\n923\n4096\n15625\n87389\n117649\n262144\n531441\n1000000\n", "output": ["1\n10\n36\n76\n145\n333\n385\n568\n801\n1090\n"]}, {"input": "10\n64000000\n58808\n1744179\n148035889\n382748428\n33627363\n36273373\n75675757\n9897\n34536\n", "output": ["8380\n274\n1430\n12673\n20263\n6103\n6335\n9101\n116\n212\n"]}, {"input": "1\n37976\n", "output": ["222\n"]}, {"input": "20\n117649\n262144\n531441\n1000000\n1771561\n7529536\n11390625\n24137569\n34012224\n113920889\n113379904\n10402692\n191102976\n244140625\n308915776\n387420489\n481890304\n594823321\n729000000\n887503681\n", "output": ["385\n568\n801\n1090\n1441\n2926\n3585\n5185\n6138\n11135\n11110\n3429\n14376\n16225\n18226\n20385\n22708\n25201\n27870\n30721\n"]}, {"input": "9\n8489664\n8615125\n8741816\n8998912\n9129329\n5288652\n9393931\n1153754\n9938375\n", "output": ["3103\n3126\n3148\n3193\n3216\n2460\n3261\n1168\n3353\n"]}, {"input": "1\n148\n", "output": ["15\n"]}, {"input": "2\n3\n676\n", "output": ["1\n32\n"]}, {"input": "4\n117649\n262144\n1000000\n31710\n", "output": ["385\n568\n1090\n204\n"]}, {"input": "3\n5811\n188666\n195112\n", "output": ["89\n484\n492\n"]}, {"input": "5\n2355981\n4741632\n4913000\n5000211\n2484840\n", "output": ["1656\n2333\n2373\n2394\n1700\n"]}, {"input": "20\n125\n216\n343\n512\n1000\n1331\n1728\n2197\n2744\n3375\n4913\n5832\n238\n8000\n17776\n10648\n12167\n13824\n17576\n19683\n", "output": ["14\n18\n23\n28\n38\n44\n50\n56\n63\n70\n83\n90\n19\n105\n154\n121\n129\n137\n153\n162\n"]}, {"input": "1\n77230\n", "output": ["313\n"]}, {"input": "1\n12979492\n", "output": ["3822\n"]}, {"input": "17\n7301384\n7414875\n7762392\n7880599\n8000000\n8120601\n8242408\n8365427\n8489664\n8615125\n8741816\n8998912\n9129329\n9261000\n9393931\n8451825\n5610507\n", "output": ["2883\n2905\n2970\n2992\n3014\n3036\n3058\n3081\n3103\n3126\n3148\n3193\n3216\n3239\n3261\n3096\n2532\n"]}, {"input": "6\n8069\n15625\n48272\n117649\n262144\n531441\n", "output": ["105\n145\n249\n385\n568\n801\n"]}, {"input": "1\n32683\n", "output": ["206\n"]}, {"input": "1\n7276725\n", "output": ["2877\n"]}, {"input": "7\n244140625\n612920676\n387420489\n481890304\n359052248\n729000000\n887503681\n", "output": ["16225\n25577\n20385\n22708\n19632\n27870\n30721\n"]}, {"input": "9\n4096\n25904\n46656\n117649\n122890\n531441\n1000000\n1771561\n2985984\n", "output": ["76\n184\n246\n385\n392\n801\n1090\n1441\n1860\n"]}, {"input": "1\n85958414\n", "output": ["9691\n"]}, {"input": "5\n720\n448\n722\n916\n724\n", "output": ["32\n26\n32\n36\n32\n"]}, {"input": "2\n8614\n720\n", "output": ["108\n32\n"]}, {"input": "1\n2478976\n", "output": ["1698\n"]}, {"input": "8\n1384\n1000\n4095\n10000\n100000\n1000000\n10000000\n100010000\n", "output": ["45\n38\n75\n117\n356\n1090\n3363\n10443\n"]}, {"input": "3\n17589\n31329\n21025\n", "output": ["153\n203\n167\n"]}, {"input": "5\n1\n143\n729\n4096\n15625\n", "output": ["1\n14\n33\n76\n145\n"]}, {"input": "1\n5136354\n", "output": ["2425\n"]}, {"input": "1\n29308783\n", "output": ["5704\n"]}, {"input": "8\n117649\n262144\n531441\n1000000\n1771561\n2985984\n4826809\n469785\n", "output": ["385\n568\n801\n1090\n1441\n1860\n2353\n754\n"]}, {"input": "1\n38886\n", "output": ["225\n"]}, {"input": "12\n64\n125\n357\n343\n512\n729\n1000\n1331\n1728\n2197\n2744\n1220\n", "output": ["10\n14\n23\n23\n28\n33\n38\n44\n50\n56\n63\n41\n"]}, {"input": "1\n6208\n", "output": ["92\n"]}, {"input": "20\n999950883\n999950883\n999950883\n999950883\n999950883\n999950883\n999950883\n999950883\n999950883\n999950883\n999950883\n999950883\n999950883\n999950883\n999950883\n820515574\n999950883\n999950883\n589412590\n999950883\n", "output": ["32589\n32589\n32589\n32589\n32589\n32589\n32589\n32589\n32589\n32589\n32589\n32589\n32589\n32589\n32589\n29550\n32589\n32589\n25087\n32589\n"]}, {"input": "2\n2567\n23197\n", "output": ["60\n175\n"]}, {"input": "11\n4096\n15625\n46656\n117649\n262144\n531441\n1000000\n1771561\n741529\n1720155\n7529536\n", "output": ["76\n145\n246\n385\n568\n801\n1090\n1441\n942\n1420\n2926\n"]}, {"input": "1\n1287\n", "output": ["42\n"]}, {"input": "20\n4096\n15625\n46656\n117649\n262144\n531441\n1000000\n1771561\n2985984\n4826809\n7529536\n11390625\n29118316\n33774247\n34012224\n47045881\n64000000\n85766121\n113379904\n148035889\n", "output": ["76\n145\n246\n385\n568\n801\n1090\n1441\n1860\n2353\n2926\n3585\n5686\n6117\n6138\n7201\n8380\n9681\n11110\n12673\n"]}, {"input": "3\n982427564\n887503680\n45561153\n", "output": ["32306\n30720\n7088\n"]}, {"input": "5\n83\n216\n343\n887\n729\n", "output": ["11\n18\n23\n35\n33\n"]}, {"input": "20\n999999999\n999999999\n999999999\n999999999\n162038073\n999999999\n999999999\n999999999\n999999999\n999999999\n999999999\n478794427\n999999999\n999999999\n999999999\n999999999\n999999999\n999999999\n999999999\n999999999\n", "output": ["32590\n32590\n32590\n32590\n13251\n32590\n32590\n32590\n32590\n32590\n32590\n22636\n32590\n32590\n32590\n32590\n32590\n32590\n32590\n32590\n"]}, {"input": "2\n11100\n5000\n", "output": ["123\n83\n"]}, {"input": "1\n65940\n", "output": ["290\n"]}, {"input": "13\n64\n4096\n11211\n46656\n117649\n262144\n531441\n1010000\n1771561\n2985984\n4826809\n1000000000\n7529536\n", "output": ["10\n76\n123\n246\n385\n568\n801\n1094\n1441\n1860\n2353\n32591\n2926\n"]}, {"input": "7\n643483165\n887503680\n887503682\n999887640\n999887641\n100452051\n3566977\n", "output": ["26200\n30720\n30721\n32588\n32589\n10465\n2028\n"]}, {"input": "7\n1633\n83\n1000000000\n15625\n46656\n262144\n2985984\n", "output": ["48\n11\n32591\n145\n246\n568\n1860\n"]}, {"input": "3\n587\n64\n1000000000\n", "output": ["30\n10\n32591\n"]}, {"input": "6\n39\n729\n4096\n15625\n46656\n117649\n", "output": ["8\n33\n76\n145\n246\n385\n"]}, {"input": "1\n16056\n", "output": ["146\n"]}, {"input": "1\n7360657\n", "output": ["2894\n"]}], "task_id": "codecontest/140", "prompt": "Polycarp is fond of squares and cubes of positive integers. Here is the beginning of the sequence of numbers he likes: 1, 4, 8, 9, ....\n\nFor a specific integer n, tally the quantity of numbers from 1 to n that are ones Polycarp admires. To put it differently, identify the number of such x that x is a square of a positive integer number. Alternatively, x can be a cube of a positive integer number (or both a square and a cube simultaneously).\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 20) \u2014 the number of test cases.\n\nThen t lines contain the test cases, one per line. Each of the lines contains one integer n (1 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer you are looking for \u2014 the number of integers from 1 to n that Polycarp likes.\n\nExample\n\nInput\n\n\n6\n10\n1\n25\n1000000000\n999999999\n500000000\n\n\nOutput\n\n\n4\n1\n6\n32591\n32590\n23125", "repair_prompt": ["Polycarp is fond of squares and cubes of positive integers. Here is the beginning of the sequence of numbers he likes: 1, 4, 8, 9, ....\n\nFor a specific integer n, tally the quantity of numbers from 1 to n that are ones Polycarp admires. To put it differently, identify the number of such x that x is a square of a positive integer number. Alternatively, x can be a cube of a positive integer number (or both a square and a cube simultaneously).\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 20) \u2014 the number of test cases.\n\nThen t lines contain the test cases, one per line. Each of the lines contains one integer n (1 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer you are looking for \u2014 the number of integers from 1 to n that Polycarp likes.\n\nExample\n\nInput\n\n\n6\n10\n1\n25\n1000000000\n999999999\n500000000\n\n\nOutput\n\n\n4\n1\n6\n32591\n32590\n23125\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nWrite a main() function and use input() function to read input from stdin"], "completion": "def count_polycarp_numbers(n):\n    count = 0\n    limit = int(math.sqrt(n))\n    cubes_limit = int(math.pow(n, 1/3))\n    sixth_powers_limit = int(math.pow(n, 1/6))\n\n    # Count squares\n    for i in range(1, limit + 1):\n        count += 1\n\n    # Count cubes\n    for i in range(1, cubes_limit + 1):\n        count += 1\n\n    # Subtract double-counted sixth powers\n    for i in range(1, sixth_powers_limit + 1):\n        if i**6 <= n:\n            count -= 1\n\n    return count\n\ndef main():\n    t = int(input())\n    results = []\n    for _ in range(t):\n        n = int(input())\n        results.append(count_polycarp_numbers(n))\n    \n    for result in results:\n        print(result)\nmain()", "completions": ["def count_polycarp_numbers(n):\n    count = 0\n    a = int(math.sqrt(n))\n    b = int(math.pow(n, 1/3))\n    \n    # Count squares\n    for i in range(1, a + 1):\n        count += 1\n    \n    # Count cubes\n    for i in range(1, b + 1):\n        count += 1\n    \n    # Count numbers that are both squares and cubes (perfect sixth powers)\n    for i in range(1, int(math.pow(n, 1/6)) + 1):\n        if i**6 <= n:\n            count += 1\n    \n    return count\n\ndef main():\n    t = int(input())\n    results = []\n    for _ in range(t):\n        n = int(input())\n        results.append(count_polycarp_numbers(n))\n    \n    for result in results:\n        print(result)\nmain()", "def count_polycarp_numbers(n):\n    squares = set()\n    cubes = set()\n    sixth_powers = set()\n    \n    # Find all perfect squares up to n\n    i = 1\n    while i * i <= n:\n        squares.add(i * i)\n        i += 1\n    \n    # Find all perfect cubes up to n\n    j = 1\n    while j * j * j <= n:\n        cubes.add(j * j * j)\n        j += 1\n    \n    # Find all perfect sixth powers up to n\n    k = 1\n    while k * k * k * k * k * k <= n:\n        sixth_powers.add(k * k * k * k * k * k)\n        k += 1\n    \n    # Combine the sets and count unique numbers\n    unique_numbers = squares.union(cubes).union(sixth_powers)\n    return len(unique_numbers)\n\ndef main():\n    t = int(input())\n    results = []\n    for _ in range(t):\n        n = int(input())\n        results.append(count_polycarp_numbers(n))\n    \n    for result in results:\n        print(result)\nmain()", "def count_polycarp_numbers(n):\n    count = 0\n    limit = int(math.sqrt(n))\n    cubes_limit = int(n ** (1/3))\n    \n    # Count squares\n    squares = [i**2 for i in range(1, limit + 1)]\n    count += len(squares)\n    \n    # Count cubes\n    cubes = [i**3 for i in range(1, cubes_limit + 1)]\n    count += len(cubes)\n    \n    # Subtract numbers that are both squares and cubes (perfect sixth powers)\n    sixth_powers = [i**6 for i in range(1, int(n ** (1/6)) + 1)]\n    count -= len(sixth_powers)\n    \n    return count\n\ndef main():\n    t = int(input())\n    results = []\n    for _ in range(t):\n        n = int(input())\n        results.append(count_polycarp_numbers(n))\n    \n    for result in results:\n        print(result)\nmain()", "def count_admired_numbers(n):\n    count = 0\n    limit = int(math.sqrt(n)) + 1\n    cubes = set()\n    \n    for i in range(1, limit):\n        square = i * i\n        if square > n:\n            break\n        count += 1\n        cube = square\n        while cube <= n:\n            if cube not in cubes:\n                count += 1\n                cubes.add(cube)\n            cube *= i\n    return count\n\ndef main():\n    t = int(input())\n    results = []\n    for _ in range(t):\n        n = int(input())\n        results.append(count_admired_numbers(n))\n    \n    for result in results:\n        print(result)\nmain()", "def count_polycarp_numbers(n):\n    count = 0\n    limit = int(math.sqrt(n))\n    cubes_limit = int(n ** (1/3))\n    \n    squares = set()\n    cubes = set()\n    \n    for i in range(1, limit + 1):\n        squares.add(i * i)\n    \n    for i in range(1, cubes_limit + 1):\n        cubes.add(i * i * i)\n    \n    for num in squares:\n        if num <= n:\n            count += 1\n    \n    for num in cubes:\n        if num <= n:\n            count += 1\n    \n    return count\n\ndef main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        n = int(input())\n        results.append(count_polycarp_numbers(n))\n    \n    for result in results:\n        print(result)\nmain()", "def count_polycarp_numbers(n):\n    count = 0\n    limit_square = int(math.sqrt(n))\n    limit_cube = int(math.cbrt(n))\n    limit_sixth = int(n ** (1/6))\n    \n    for i in range(1, limit_square + 1):\n        if i * i <= n:\n            count += 1\n        if i * i * i <= n:\n            count += 1\n        if i * i * i * i * i * i <= n:\n            count += 1\n    return count\n\ndef main():\n    t = int(input())\n    results = []\n    for _ in range(t):\n        n = int(input())\n        results.append(count_polycarp_numbers(n))\n    for result in results:\n        print(result)\nmain()", "def count_polycarp_numbers(n):\n    # Calculate the maximum k such that k^2 <= n\n    k_max = int(math.sqrt(n))\n    # Calculate the maximum m such that m^3 <= n\n    m_max = int(n ** (1/3))\n    # Calculate the maximum l such that l^6 <= n\n    l_max = int(n ** (1/6))\n    \n    # Initialize the count of numbers Polycarp likes\n    count = 0\n    \n    # Count the squares\n    for k in range(1, k_max + 1):\n        if k * k <= n:\n            count += 1\n    \n    # Count the cubes\n    for m in range(1, m_max + 1):\n        if m * m * m <= n:\n            count += 1\n    \n    # Count the perfect sixth powers\n    for l in range(1, l_max + 1):\n        if l * l * l * l * l * l <= n:\n            count += 1\n    \n    # Use a set to avoid double-counting numbers that are both squares and cubes\n    squares_and_cubes = set()\n    for k in range(1, min(k_max, m_max) + 1):\n        if k * k <= n and k * k * k <= n:\n            squares_and_cubes.add(k * k)\n    \n    # Add the unique numbers that are both squares and cubes\n    count += len(squares_and_cubes)\n    \n    return count\n\ndef main():\n    # Read the number of test cases\n    t = int(input())\n    # Process each test case\n    results = []\n    for _ in range(t):\n        n = int(input())\n        results.append(count_polycarp_numbers(n))\n    # Output the results\n    for result in results:\n        print(result)\nmain()", "def count_polycarp_numbers(n):\n    count = 0\n    limit = int(math.sqrt(n))\n    cubes = set()\n    \n    for i in range(1, limit + 1):\n        square = i * i\n        cube = i * i * i\n        if square <= n:\n            if square not in cubes:\n                count += 1\n            if cube <= n:\n                if cube not in cubes:\n                    count += 1\n                    cubes.add(cube)\n        else:\n            break\n    \n    return count\n\ndef main():\n    t = int(input())\n    results = []\n    for _ in range(t):\n        n = int(input())\n        results.append(count_polycarp_numbers(n))\n    \n    for result in results:\n        print(result)\nmain()", "def count_polycarp_numbers(n):\n    count = 0\n    # Count the number of perfect squares\n    i = 1\n    while i * i <= n:\n        count += 1\n        i += 1\n    \n    # Count the number of perfect cubes\n    i = 1\n    while i * i * i <= n:\n        count += 1\n        i += 1\n    \n    # Count the number of perfect sixth powers\n    i = 1\n    while i * i * i * i * i * i <= n:\n        count += 1\n        i += 1\n    \n    # Subtract the duplicates (numbers that are both squares and cubes)\n    i = 1\n    while i * i * i <= n:\n        if i * i * i * i * i * i <= n:\n            count -= 1\n        i += 1\n    \n    return count\n\ndef main():\n    t = int(input())\n    results = []\n    for _ in range(t):\n        n = int(input())\n        results.append(count_polycarp_numbers(n))\n    \n    for result in results:\n        print(result)\nmain()", "def count_polycarp_numbers(n):\n    count = 0\n    limit = int(math.sqrt(n))\n    cubes_limit = int(math.pow(n, 1/3))\n    sixth_powers_limit = int(math.pow(n, 1/6))\n\n    # Count squares\n    for i in range(1, limit + 1):\n        count += 1\n\n    # Count cubes\n    for i in range(1, cubes_limit + 1):\n        count += 1\n\n    # Subtract double-counted sixth powers\n    for i in range(1, sixth_powers_limit + 1):\n        if i**6 <= n:\n            count -= 1\n\n    return count\n\ndef main():\n    t = int(input())\n    results = []\n    for _ in range(t):\n        n = int(input())\n        results.append(count_polycarp_numbers(n))\n    \n    for result in results:\n        print(result)\nmain()"], "session_history": {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Identify the numbers that are either squares or cubes of positive integers up to a given limit.\",\n        \"steps\": [\n          \"Determine the maximum integer 'x' such that 'x^2' is less than or equal to 'n'.\",\n          \"Determine the maximum integer 'y' such that 'y^3' is less than or equal to 'n'.\",\n          \"Identify numbers that are both squares and cubes (i.e., perfect sixth powers) and ensure they are not double-counted.\"\n        ]\n      },\n      {\n        \"description\": \"Count the numbers that are either squares or cubes up to a given limit.\",\n        \"steps\": [\n          \"Count all squares up to the limit.\",\n          \"Count all cubes up to the limit.\",\n          \"Subtract the count of numbers that are both squares and cubes to avoid double-counting.\"\n        ]\n      }\n    ],\n    \"major_steps\": [\n      \"Read the number of test cases 't' from the input.\",\n      \"For each test case, read the integer 'n'.\",\n      \"For each test case, determine the count of numbers that are either squares or cubes up to 'n'.\",\n      \"Output the count for each test case.\"\n    ]\n  }\n}\n```", "Round_0": {"code": "def count_polycarp_numbers(n):\n    count = 0\n    limit = int(math.sqrt(n))\n    cubes_limit = int(math.pow(n, 1/3))\n    sixth_powers_limit = int(math.pow(n, 1/6))\n\n    # Count squares\n    for i in range(1, limit + 1):\n        count += 1\n\n    # Count cubes\n    for i in range(1, cubes_limit + 1):\n        count += 1\n\n    # Subtract double-counted sixth powers\n    for i in range(1, sixth_powers_limit + 1):\n        if i**6 <= n:\n            count -= 1\n\n    return count\n\ndef main():\n    t = int(input())\n    results = []\n    for _ in range(t):\n        n = int(input())\n        results.append(count_polycarp_numbers(n))\n    \n    for result in results:\n        print(result)", "report": "The compilation output of the preceding code is: Code Test Passed."}}, "session_historys": [{"plan": " ```json\n{\n  \"Plan\": {\n    \"Subproblems\": [\n      {\n        \"Subproblem\": \"Identify the numbers that are either squares or cubes of positive integers up to a given limit n.\",\n        \"Steps\": [\n          \"Determine the maximum integer 'a' such that a^2 <= n.\",\n          \"Determine the maximum integer 'b' such that b^3 <= n.\",\n          \"Identify all numbers that are either a^2 or b^3 within the range from 1 to n.\"\n        ]\n      },\n      {\n        \"Subproblem\": \"Handle multiple test cases efficiently.\",\n        \"Steps\": [\n          \"Read the number of test cases t.\",\n          \"For each test case, read the integer n.\",\n          \"Apply the logic to count the numbers that are squares or cubes up to n for each test case.\"\n        ]\n      }\n    ],\n    \"MajorSteps\": [\n      \"Read the number of test cases t.\",\n      {\n        \"Step\": \"For each test case:\",\n        \"Substeps\": [\n          \"Read the integer n.\",\n          \"Calculate the maximum integer 'a' such that a^2 <= n.\",\n          \"Calculate the maximum integer 'b' such that b^3 <= n.\",\n          \"Count the numbers that are either a^2 or b^3 within the range from 1 to n.\",\n          \"Output the count for each test case.\"\n        ]\n      }\n    ]\n  }\n}\n```", "Round_0": {"code": "def count_polycarp_numbers(n):\n    count = 0\n    a = int(math.sqrt(n))\n    b = int(math.pow(n, 1/3))\n    \n    # Count squares\n    for i in range(1, a + 1):\n        count += 1\n    \n    # Count cubes\n    for i in range(1, b + 1):\n        count += 1\n    \n    # Count numbers that are both squares and cubes (perfect sixth powers)\n    for i in range(1, int(math.pow(n, 1/6)) + 1):\n        if i**6 <= n:\n            count += 1\n    \n    return count\n\ndef main():\n    t = int(input())\n    results = []\n    for _ in range(t):\n        n = int(input())\n        results.append(count_polycarp_numbers(n))\n    \n    for result in results:\n        print(result)", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"Plan\": {\n    \"Subproblems\": [\n      {\n        \"Subproblem\": \"Identify the numbers that are either squares or cubes of positive integers up to a given limit n.\",\n        \"Description\": \"Develop a method to determine which numbers up to n are perfect squares and which are perfect cubes. Additionally, identify numbers that are both perfect squares and perfect cubes (i.e., perfect sixth powers).\"\n      },\n      {\n        \"Subproblem\": \"Count the unique numbers that meet the criteria.\",\n        \"Description\": \"Given the list of numbers identified as either squares, cubes, or both up to n, ensure that each number is counted only once, even if it appears in both categories.\"\n      },\n      {\n        \"Subproblem\": \"Optimize the counting process for large values of n.\",\n        \"Description\": \"Since n can be as large as 10^9, the counting process must be efficient to handle the upper limit efficiently.\"\n      }\n    ],\n    \"MajorSteps\": [\n      {\n        \"Step\": \"Initialize the program with a function to count the numbers that Polycarp likes.\",\n        \"Description\": \"Create a function that will take an integer n as input and return the count of numbers from 1 to n that are either squares or cubes or both.\"\n      },\n      {\n        \"Step\": \"Implement a method to find all perfect squares and perfect cubes up to n.\",\n        \"Description\": \"Use mathematical properties to generate these numbers efficiently without iterating through all numbers up to n.\"\n      },\n      {\n        \"Step\": \"Combine the results from squares and cubes, ensuring no duplicates.\",\n        \"Description\": \"Use a set to store the results to automatically handle uniqueness.\"\n      },\n      {\n        \"Step\": \"Return the count of unique numbers.\",\n        \"Description\": \"The size of the set will give the count of numbers that Polycarp likes.\"\n      },\n      {\n        \"Step\": \"Test the function with multiple test cases to ensure correctness.\",\n        \"Description\": \"Use the provided input format to test the function with various values of n.\"\n      }\n    ]\n  }\n}\n```", "Round_0": {"code": "def count_polycarp_numbers(n):\n    squares = set()\n    cubes = set()\n    sixth_powers = set()\n    \n    # Find all perfect squares up to n\n    i = 1\n    while i * i <= n:\n        squares.add(i * i)\n        i += 1\n    \n    # Find all perfect cubes up to n\n    j = 1\n    while j * j * j <= n:\n        cubes.add(j * j * j)\n        j += 1\n    \n    # Find all perfect sixth powers up to n\n    k = 1\n    while k * k * k * k * k * k <= n:\n        sixth_powers.add(k * k * k * k * k * k)\n        k += 1\n    \n    # Combine the sets and count unique numbers\n    unique_numbers = squares.union(cubes).union(sixth_powers)\n    return len(unique_numbers)\n\ndef main():\n    t = int(input())\n    results = []\n    for _ in range(t):\n        n = int(input())\n        results.append(count_polycarp_numbers(n))\n    \n    for result in results:\n        print(result)", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"Plan\": {\n    \"Subproblems\": [\n      {\n        \"Description\": \"Identify the numbers that are either squares or cubes of positive integers up to a given limit.\",\n        \"Details\": \"Develop a method to determine which numbers up to a given limit n are either squares or cubes of positive integers.\"\n      },\n      {\n        \"Description\": \"Handle multiple test cases efficiently.\",\n        \"Details\": \"Implement a loop to process each test case, applying the method from the first subproblem to find the count of numbers Polycarp likes for each case.\"\n      }\n    ],\n    \"HighLevelSteps\": [\n      {\n        \"Step\": 1,\n        \"Description\": \"Read the number of test cases t from the input.\"\n      },\n      {\n        \"Step\": 2,\n        \"Description\": \"For each test case, read the integer n.\"\n      },\n      {\n        \"Step\": 3,\n        \"Description\": \"For each test case, determine the count of numbers from 1 to n that are either squares or cubes of positive integers.\"\n      },\n      {\n        \"Step\": 4,\n        \"Description\": \"Output the count for each test case.\"\n      }\n    ]\n  }\n}\n```", "Round_0": {"code": "def count_polycarp_numbers(n):\n    count = 0\n    limit = int(math.sqrt(n))\n    cubes_limit = int(n ** (1/3))\n    \n    # Count squares\n    squares = [i**2 for i in range(1, limit + 1)]\n    count += len(squares)\n    \n    # Count cubes\n    cubes = [i**3 for i in range(1, cubes_limit + 1)]\n    count += len(cubes)\n    \n    # Subtract numbers that are both squares and cubes (perfect sixth powers)\n    sixth_powers = [i**6 for i in range(1, int(n ** (1/6)) + 1)]\n    count -= len(sixth_powers)\n    \n    return count\n\ndef main():\n    t = int(input())\n    results = []\n    for _ in range(t):\n        n = int(input())\n        results.append(count_polycarp_numbers(n))\n    \n    for result in results:\n        print(result)", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"Plan\": {\n    \"Subproblems\": [\n      {\n        \"Subproblem\": \"Identify the numbers that are either squares or cubes of positive integers up to a given limit.\",\n        \"Description\": \"Develop a method to determine which numbers up to a given limit n are either squares or cubes of positive integers.\"\n      },\n      {\n        \"Subproblem\": \"Count the occurrences of such numbers within a given range.\",\n        \"Description\": \"Implement a function to count how many such numbers exist between 1 and n for each test case.\"\n      },\n      {\n        \"Subproblem\": \"Handle multiple test cases efficiently.\",\n        \"Description\": \"Create a loop to process each test case and output the count for each.\"\n      }\n    ],\n    \"HighLevelPlan\": [\n      {\n        \"Step\": \"Read the number of test cases t.\",\n        \"Action\": \"Use input() to read the integer t.\"\n      },\n      {\n        \"Step\": \"Initialize a counter for each test case.\",\n        \"Action\": \"Set up a loop to iterate through each of the t test cases.\"\n      },\n      {\n        \"Step\": \"For each test case, read the integer n.\",\n        \"Action\": \"Use input() to read the integer n for each test case within the loop.\"\n      },\n      {\n        \"Step\": \"Calculate the number of numbers that are either squares or cubes up to n.\",\n        \"Action\": \"Implement a function to count such numbers and apply it to the current test case.\"\n      },\n      {\n        \"Step\": \"Output the count for each test case.\",\n        \"Action\": \"Print the result for each test case after calculating it.\"\n      }\n    ]\n  }\n}\n```", "Round_0": {"code": "def count_admired_numbers(n):\n    count = 0\n    limit = int(math.sqrt(n)) + 1\n    cubes = set()\n    \n    for i in range(1, limit):\n        square = i * i\n        if square > n:\n            break\n        count += 1\n        cube = square\n        while cube <= n:\n            if cube not in cubes:\n                count += 1\n                cubes.add(cube)\n            cube *= i\n    return count\n\ndef main():\n    t = int(input())\n    results = []\n    for _ in range(t):\n        n = int(input())\n        results.append(count_admired_numbers(n))\n    \n    for result in results:\n        print(result)", "report": "The compilation output of the preceding code is: must be real number, not list"}, "Round_1": {"code": "def count_admired_numbers(n):\n    count = 0\n    limit = int(math.sqrt(n)) + 1\n    cubes = set()\n    \n    for i in range(1, limit):\n        square = i * i\n        if square > n:\n            break\n        count += 1\n        cube = square\n        while cube <= n:\n            if cube not in cubes:\n                count += 1\n                cubes.add(cube)\n            cube *= i\n    return count\n\ndef main():\n    t = int(input())\n    results = []\n    for _ in range(t):\n        n = int(input())\n        results.append(count_admired_numbers(n))\n    \n    for result in results:\n        print(result)"}}, {"plan": " ```json\n{\n  \"Plan\": {\n    \"Subproblems\": [\n      {\n        \"Description\": \"Identify the numbers that are either squares or cubes of positive integers up to a given limit.\",\n        \"Details\": \"Develop a method to determine which numbers up to a given limit n are either squares or cubes of positive integers.\"\n      },\n      {\n        \"Description\": \"Handle multiple test cases efficiently.\",\n        \"Details\": \"Implement a loop to process each test case, applying the method developed in the previous subproblem to count the numbers that Polycarp likes for each case.\"\n      }\n    ],\n    \"HighLevelSteps\": [\n      {\n        \"Step\": 1,\n        \"Description\": \"Read the number of test cases t from standard input.\"\n      },\n      {\n        \"Step\": 2,\n        \"Description\": \"For each test case, read the integer n.\"\n      },\n      {\n        \"Step\": 3,\n        \"Description\": \"For each test case, determine the numbers from 1 to n that are either squares or cubes of positive integers.\"\n      },\n      {\n        \"Step\": 4,\n        \"Description\": \"Count these numbers and print the count for each test case.\"\n      }\n    ]\n  }\n}\n```", "Round_0": {"code": "def count_polycarp_numbers(n):\n    count = 0\n    limit = int(math.sqrt(n))\n    cubes_limit = int(n ** (1/3))\n    \n    squares = set()\n    cubes = set()\n    \n    for i in range(1, limit + 1):\n        squares.add(i * i)\n    \n    for i in range(1, cubes_limit + 1):\n        cubes.add(i * i * i)\n    \n    for num in squares:\n        if num <= n:\n            count += 1\n    \n    for num in cubes:\n        if num <= n:\n            count += 1\n    \n    return count\n\ndef main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        n = int(input())\n        results.append(count_polycarp_numbers(n))\n    \n    for result in results:\n        print(result)", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"Plan\": {\n    \"Subproblems\": [\n      {\n        \"Subproblem\": \"Identify the numbers that are either squares or cubes of positive integers up to a given limit n.\",\n        \"Description\": \"Develop a method to determine which numbers up to n are perfect squares and which are perfect cubes. Additionally, identify numbers that are both perfect squares and perfect cubes (i.e., perfect sixth powers).\"\n      },\n      {\n        \"Subproblem\": \"Count the occurrences of these numbers within the range from 1 to n.\",\n        \"Description\": \"For each number identified as a square, cube, or both, count how many such numbers exist within the range from 1 to n.\"\n      },\n      {\n        \"Subproblem\": \"Optimize the counting process for large values of n.\",\n        \"Description\": \"Given the constraint that n can be as large as 10^9, implement an efficient algorithm to count the numbers without iterating through all numbers up to n, which would be computationally expensive.\"\n      }\n    ],\n    \"MajorSteps\": [\n      {\n        \"Step\": \"Initialize the program to handle multiple test cases.\",\n        \"Description\": \"Read the number of test cases t from the input and prepare to process each case sequentially.\"\n      },\n      {\n        \"Step\": \"Process each test case.\",\n        \"Description\": \"For each test case, read the integer n and initialize a counter to keep track of the numbers Polycarp likes.\"\n      },\n      {\n        \"Step\": \"Identify and count the numbers.\",\n        \"Description\": \"Using efficient methods to determine squares, cubes, and sixth powers, count how many numbers from 1 to n are squares, cubes, or both. Use mathematical properties to avoid unnecessary computations.\"\n      },\n      {\n        \"Step\": \"Output the results.\",\n        \"Description\": \"For each test case, print the count of numbers Polycarp likes.\"\n      }\n    ]\n  }\n}\n```", "Round_0": {"code": "def count_polycarp_numbers(n):\n    count = 0\n    limit = int(math.sqrt(n))\n    for i in range(1, limit + 1):\n        if i * i <= n:\n            count += 1\n        if i * i * i <= n:\n            count += 1\n        if i * i * i * i * i * i <= n:\n            count += 1\n    return count\n\ndef main():\n    t = int(input())\n    results = []\n    for _ in range(t):\n        n = int(input())\n        results.append(count_polycarp_numbers(n))\n    for result in results:\n        print(result)", "report": "The compilation output of the preceding code is: must be real number, not list"}, "Round_1": {"code": "def count_polycarp_numbers(n):\n    count = 0\n    limit_square = int(math.sqrt(n))\n    limit_cube = int(math.cbrt(n))\n    limit_sixth = int(n ** (1/6))\n    \n    for i in range(1, limit_square + 1):\n        if i * i <= n:\n            count += 1\n        if i * i * i <= n:\n            count += 1\n        if i * i * i * i * i * i <= n:\n            count += 1\n    return count\n\ndef main():\n    t = int(input())\n    results = []\n    for _ in range(t):\n        n = int(input())\n        results.append(count_polycarp_numbers(n))\n    for result in results:\n        print(result)"}}, {"plan": " ```json\n{\n  \"Plan\": {\n    \"Subproblems\": [\n      {\n        \"Subproblem\": \"Identify the numbers that are either squares or cubes of positive integers up to a given limit n.\",\n        \"Steps\": [\n          \"Determine the maximum integer 'k' such that k^2 <= n.\",\n          \"Determine the maximum integer 'm' such that m^3 <= n.\",\n          \"Identify numbers that are either k^2 or m^3 and count them.\"\n        ]\n      },\n      {\n        \"Subproblem\": \"Handle the case where a number can be both a square and a cube (i.e., perfect sixth powers).\",\n        \"Steps\": [\n          \"Determine the maximum integer 'l' such that l^6 <= n.\",\n          \"Include numbers that are l^6 in the count.\"\n        ]\n      },\n      {\n        \"Subproblem\": \"Optimize the counting process to handle the upper limit of 10^9 efficiently.\",\n        \"Steps\": [\n          \"Use mathematical properties to avoid unnecessary computations.\",\n          \"Utilize set operations to avoid double-counting numbers that are both squares and cubes.\"\n        ]\n      }\n    ],\n    \"MajorSteps\": [\n      \"Read the number of test cases 't' from standard input.\",\n      \"For each test case, read the integer 'n'.\",\n      \"For each test case, calculate the number of integers from 1 to n that are either squares or cubes or both.\",\n      \"Output the result for each test case.\"\n    ]\n  }\n}\n```", "Round_0": {"code": "def count_polycarp_numbers(n):\n    # Calculate the maximum k such that k^2 <= n\n    k_max = int(math.sqrt(n))\n    # Calculate the maximum m such that m^3 <= n\n    m_max = int(n ** (1/3))\n    # Calculate the maximum l such that l^6 <= n\n    l_max = int(n ** (1/6))\n    \n    # Initialize the count of numbers Polycarp likes\n    count = 0\n    \n    # Count the squares\n    for k in range(1, k_max + 1):\n        if k * k <= n:\n            count += 1\n    \n    # Count the cubes\n    for m in range(1, m_max + 1):\n        if m * m * m <= n:\n            count += 1\n    \n    # Count the perfect sixth powers\n    for l in range(1, l_max + 1):\n        if l * l * l * l * l * l <= n:\n            count += 1\n    \n    # Use a set to avoid double-counting numbers that are both squares and cubes\n    squares_and_cubes = set()\n    for k in range(1, min(k_max, m_max) + 1):\n        if k * k <= n and k * k * k <= n:\n            squares_and_cubes.add(k * k)\n    \n    # Add the unique numbers that are both squares and cubes\n    count += len(squares_and_cubes)\n    \n    return count\n\ndef main():\n    # Read the number of test cases\n    t = int(input())\n    # Process each test case\n    results = []\n    for _ in range(t):\n        n = int(input())\n        results.append(count_polycarp_numbers(n))\n    # Output the results\n    for result in results:\n        print(result)", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def count_polycarp_numbers(n):\n    # Calculate the maximum k such that k^2 <= n\n    k_max = int(math.sqrt(n))\n    # Calculate the maximum m such that m^3 <= n\n    m_max = int(n ** (1/3))\n    # Calculate the maximum l such that l^6 <= n\n    l_max = int(n ** (1/6))\n    \n    # Initialize the count of numbers Polycarp likes\n    count = 0\n    \n    # Count the squares\n    for k in range(1, k_max + 1):\n        if k * k <= n:\n            count += 1\n    \n    # Count the cubes\n    for m in range(1, m_max + 1):\n        if m * m * m <= n:\n            count += 1\n    \n    # Count the perfect sixth powers\n    for l in range(1, l_max + 1):\n        if l * l * l * l * l * l <= n:\n            count += 1\n    \n    # Use a set to avoid double-counting numbers that are both squares and cubes\n    squares_and_cubes = set()\n    for k in range(1, min(k_max, m_max) + 1):\n        if k * k <= n and k * k * k <= n:\n            squares_and_cubes.add(k * k)\n    \n    # Add the unique numbers that are both squares and cubes\n    count += len(squares_and_cubes)\n    \n    return count\n\ndef main():\n    # Read the number of test cases\n    t = int(input())\n    # Process each test case\n    results = []\n    for _ in range(t):\n        n = int(input())\n        results.append(count_polycarp_numbers(n))\n    # Output the results\n    for result in results:\n        print(result)"}}, {"plan": " ```json\n{\n  \"Plan\": {\n    \"Subproblems\": [\n      {\n        \"Description\": \"Identify the numbers that are either squares or cubes of positive integers up to a given limit.\",\n        \"Details\": \"Develop a method to determine which numbers up to n are perfect squares and which are perfect cubes.\"\n      },\n      {\n        \"Description\": \"Count the numbers that are both squares and cubes within the given range.\",\n        \"Details\": \"Implement a function to count numbers that are both perfect squares and perfect cubes, as these will be counted only once.\"\n      },\n      {\n        \"Description\": \"Handle the input and output for each test case efficiently.\",\n        \"Details\": \"Create a loop to read multiple test cases and output the result for each case.\"\n      }\n    ],\n    \"HighLevelSteps\": [\n      {\n        \"Step\": 1,\n        \"Description\": \"Read the number of test cases t.\"\n      },\n      {\n        \"Step\": 2,\n        \"Description\": \"For each test case, read the integer n.\"\n      },\n      {\n        \"Step\": 3,\n        \"Description\": \"Calculate the number of integers from 1 to n that are either squares or cubes of positive integers.\"\n      },\n      {\n        \"Step\": 4,\n        \"Description\": \"Output the result for each test case.\"\n      }\n    ]\n  }\n}\n```", "Round_0": {"code": "def count_polycarp_numbers(n):\n    count = 0\n    limit = int(math.sqrt(n))\n    cubes = set()\n    \n    for i in range(1, limit + 1):\n        square = i * i\n        cube = i * i * i\n        if square <= n:\n            if square not in cubes:\n                count += 1\n            if cube <= n:\n                if cube not in cubes:\n                    count += 1\n                    cubes.add(cube)\n        else:\n            break\n    \n    return count\n\ndef main():\n    t = int(input())\n    results = []\n    for _ in range(t):\n        n = int(input())\n        results.append(count_polycarp_numbers(n))\n    \n    for result in results:\n        print(result)", "report": "The compilation output of the preceding code is: must be real number, not list"}, "Round_1": {"code": "def count_polycarp_numbers(n):\n    count = 0\n    limit = int(math.sqrt(n))\n    cubes = set()\n    \n    for i in range(1, limit + 1):\n        square = i * i\n        cube = i * i * i\n        if square <= n:\n            if square not in cubes:\n                count += 1\n            if cube <= n:\n                if cube not in cubes:\n                    count += 1\n                    cubes.add(cube)\n        else:\n            break\n    \n    return count\n\ndef main():\n    t = int(input())\n    results = []\n    for _ in range(t):\n        n = int(input())\n        results.append(count_polycarp_numbers(n))\n    \n    for result in results:\n        print(result)"}}, {"plan": " ```json\n{\n  \"Plan\": {\n    \"Subproblems\": [\n      {\n        \"Description\": \"Identify the numbers that are either squares or cubes of positive integers.\",\n        \"Details\": \"Determine the set of numbers that are either perfect squares or perfect cubes within the range from 1 to n.\"\n      },\n      {\n        \"Description\": \"Handle the overlap between squares and cubes.\",\n        \"Details\": \"Since a number that is both a square and a cube is a perfect sixth power, we need to account for numbers that are perfect sixth powers within the given range.\"\n      },\n      {\n        \"Description\": \"Optimize the solution for large values of n.\",\n        \"Details\": \"Given the constraint that n can be as large as 10^9, the solution should be efficient to avoid performance issues.\"\n      }\n    ],\n    \"MajorSteps\": [\n      {\n        \"Step\": \"Read the number of test cases.\",\n        \"Details\": \"The program should start by reading the number of test cases t from the input.\"\n      },\n      {\n        \"Step\": \"Process each test case.\",\n        \"Details\": \"For each test case, read the integer n and determine the count of numbers from 1 to n that are either squares or cubes or both.\"\n      },\n      {\n        \"Step\": \"Identify squares and cubes.\",\n        \"Details\": \"For a given n, find all integers i such that i^2 <= n, i^3 <= n, and i^6 <= n. These will be the numbers Polycarp likes.\"\n      },\n      {\n        \"Step\": \"Output the results.\",\n        \"Details\": \"For each test case, print the count of numbers Polycarp likes.\"\n      }\n    ]\n  }\n}\n```", "Round_0": {"code": "def count_polycarp_numbers(n):\n    count = 0\n    # Count the number of perfect squares\n    i = 1\n    while i * i <= n:\n        count += 1\n        i += 1\n    \n    # Count the number of perfect cubes\n    i = 1\n    while i * i * i <= n:\n        count += 1\n        i += 1\n    \n    # Count the number of perfect sixth powers\n    i = 1\n    while i * i * i * i * i * i <= n:\n        count += 1\n        i += 1\n    \n    # Subtract the duplicates (numbers that are both squares and cubes)\n    i = 1\n    while i * i * i <= n:\n        if i * i * i * i * i * i <= n:\n            count -= 1\n        i += 1\n    \n    return count\n\ndef main():\n    t = int(input())\n    results = []\n    for _ in range(t):\n        n = int(input())\n        results.append(count_polycarp_numbers(n))\n    \n    for result in results:\n        print(result)", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Identify the numbers that are either squares or cubes of positive integers up to a given limit.\",\n        \"steps\": [\n          \"Determine the maximum integer 'x' such that 'x^2' is less than or equal to 'n'.\",\n          \"Determine the maximum integer 'y' such that 'y^3' is less than or equal to 'n'.\",\n          \"Identify numbers that are both squares and cubes (i.e., perfect sixth powers) and ensure they are not double-counted.\"\n        ]\n      },\n      {\n        \"description\": \"Count the numbers that are either squares or cubes up to a given limit.\",\n        \"steps\": [\n          \"Count all squares up to the limit.\",\n          \"Count all cubes up to the limit.\",\n          \"Subtract the count of numbers that are both squares and cubes to avoid double-counting.\"\n        ]\n      }\n    ],\n    \"major_steps\": [\n      \"Read the number of test cases 't' from the input.\",\n      \"For each test case, read the integer 'n'.\",\n      \"For each test case, determine the count of numbers that are either squares or cubes up to 'n'.\",\n      \"Output the count for each test case.\"\n    ]\n  }\n}\n```", "Round_0": {"code": "def count_polycarp_numbers(n):\n    count = 0\n    limit = int(math.sqrt(n))\n    cubes_limit = int(math.pow(n, 1/3))\n    sixth_powers_limit = int(math.pow(n, 1/6))\n\n    # Count squares\n    for i in range(1, limit + 1):\n        count += 1\n\n    # Count cubes\n    for i in range(1, cubes_limit + 1):\n        count += 1\n\n    # Subtract double-counted sixth powers\n    for i in range(1, sixth_powers_limit + 1):\n        if i**6 <= n:\n            count -= 1\n\n    return count\n\ndef main():\n    t = int(input())\n    results = []\n    for _ in range(t):\n        n = int(input())\n        results.append(count_polycarp_numbers(n))\n    \n    for result in results:\n        print(result)", "report": "The compilation output of the preceding code is: Code Test Passed."}}], "scores": [], "pass_results": [false, false, false, false, false, true, false, false, false, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 4, "round": 17, "examples": "\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 20) \u2014 the number of test cases.\n\nThen t lines contain the test cases, one per line. Each of the lines contains one integer n (1 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer you are looking for \u2014 the number of integers from 1 to n that Polycarp likes.\n\nExample\n\nInput\n\n\n6\n10\n1\n25\n1000000000\n999999999\n500000000\n\n\nOutput\n\n\n4\n1\n6\n32591\n32590\n23125", "mutate_method": "expand_one2two", "save_node": true, "parent_index": 24}
