{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 12, "prompt": "Write a function to sort a given matrix in ascending order according to the sum of its rows. Ensure that the function efficiently handles matrices of varying sizes.", "code": "def sort_matrix(M):\n    result = sorted(M, key=sum)\n    return result", "test_imports": [], "test_list": ["assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]", "assert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]", "assert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]", "assert sort_matrix([[1, 5, 3], [3, 4, 10], [2, 1, 4]]) == [[2, 1, 4], [1, 5, 3], [3, 4, 10]]", "assert sort_matrix([[2, 5, 4], [3, 9, 3], [4, 2, 2]]) == [[4, 2, 2], [2, 5, 4], [3, 9, 3]]", "assert sort_matrix([[1, 1, 6], [7, 8, 3], [1, 1, 6]]) == [[1, 1, 6], [1, 1, 6], [7, 8, 3]]", "assert sort_matrix([[3, 3, 7], [2, 6, 10], [1, 3, 1]]) == [[1, 3, 1], [3, 3, 7], [2, 6, 10]]", "assert sort_matrix([[3, 2, 3], [4, 3, 8], [6, 2, 3]]) == [[3, 2, 3], [6, 2, 3], [4, 3, 8]]", "assert sort_matrix([[4, 5, 5], [6, 8, 6], [2, 5, 4]]) == [[2, 5, 4], [4, 5, 5], [6, 8, 6]]", "assert sort_matrix([[1, 2, 3], [3, 1, 4], [1, 2, 4]]) == [[1, 2, 3], [1, 2, 4], [3, 1, 4]]", "assert sort_matrix([[2, 2, 5], [4, 6, 9], [5, 2, 5]]) == [[2, 2, 5], [5, 2, 5], [4, 6, 9]]", "assert sort_matrix([[3, 4, 7], [7, 6, 5], [6, 3, 1]]) == [[6, 3, 1], [3, 4, 7], [7, 6, 5]]", "assert sort_matrix([[5, 1, 5], [4, 5, 1], [4, 5, 1]]) == [[4, 5, 1], [4, 5, 1], [5, 1, 5]]", "assert sort_matrix([[4, 1, 8], [7, 2, 10], [1, 3, 5]]) == [[1, 3, 5], [4, 1, 8], [7, 2, 10]]", "assert sort_matrix([[1, 3, 8], [6, 3, 7], [1, 4, 3]]) == [[1, 4, 3], [1, 3, 8], [6, 3, 7]]", "assert sort_matrix([[5, 5, 6], [6, 9, 1], [2, 5, 1]]) == [[2, 5, 1], [5, 5, 6], [6, 9, 1]]", "assert sort_matrix([[5, 2, 2], [5, 5, 3], [5, 1, 1]]) == [[5, 1, 1], [5, 2, 2], [5, 5, 3]]", "assert sort_matrix([[1, 2, 3], [3, 5, 5], [6, 2, 3]]) == [[1, 2, 3], [6, 2, 3], [3, 5, 5]]", "assert sort_matrix([[3, 7, 7], [6, 7, 5], [1, 1, 2]]) == [[1, 1, 2], [3, 7, 7], [6, 7, 5]]", "assert sort_matrix([[1, 1, 5], [2, 5, 1], [5, 6, 5]]) == [[1, 1, 5], [2, 5, 1], [5, 6, 5]]", "assert sort_matrix([[6, 3, 8], [7, 9, 5], [4, 2, 6]]) == [[4, 2, 6], [6, 3, 8], [7, 9, 5]]", "assert sort_matrix([[3, 6, 4], [7, 5, 10], [6, 4, 5]]) == [[3, 6, 4], [6, 4, 5], [7, 5, 10]]", "assert sort_matrix([[3, 3, 7], [3, 5, 3], [3, 3, 3]]) == [[3, 3, 3], [3, 5, 3], [3, 3, 7]]", "assert sort_matrix([[6, 3, 6], [5, 1, 2], [6, 5, 3]]) == [[5, 1, 2], [6, 5, 3], [6, 3, 6]]", "assert sort_matrix([[2, 2, 8], [5, 9, 10], [5, 1, 5]]) == [[5, 1, 5], [2, 2, 8], [5, 9, 10]]", "assert sort_matrix([[5, 3, 5], [3, 8, 2], [1, 5, 2]]) == [[1, 5, 2], [5, 3, 5], [3, 8, 2]]", "assert sort_matrix([[2, 6, 8], [1, 9, 2], [5, 2, 4]]) == [[5, 2, 4], [1, 9, 2], [2, 6, 8]]", "assert sort_matrix([[1, 1, 3], [6, 4, 7], [1, 1, 2]]) == [[1, 1, 2], [1, 1, 3], [6, 4, 7]]", "assert sort_matrix([[5, 2, 8], [1, 4, 5], [2, 4, 2]]) == [[2, 4, 2], [1, 4, 5], [5, 2, 8]]", "assert sort_matrix([[3, 2, 4], [6, 4, 4], [2, 6, 6]]) == [[3, 2, 4], [6, 4, 4], [2, 6, 6]]", "assert sort_matrix([[5, 2, 4], [5, 1, 2], [1, 5, 3]]) == [[5, 1, 2], [1, 5, 3], [5, 2, 4]]", "assert sort_matrix([[5, 3, 1], [5, 9, 5], [5, 4, 1]]) == [[5, 3, 1], [5, 4, 1], [5, 9, 5]]", "assert sort_matrix([[6, 2, 6], [1, 6, 5], [5, 1, 3]]) == [[5, 1, 3], [1, 6, 5], [6, 2, 6]]", "assert sort_matrix([[6, 7, 8], [2, 2, 9], [6, 4, 1]]) == [[6, 4, 1], [2, 2, 9], [6, 7, 8]]", "assert sort_matrix([[2, 1, 1], [4, 4, 2], [3, 5, 4]]) == [[2, 1, 1], [4, 4, 2], [3, 5, 4]]", "assert sort_matrix([[6, 4, 4], [3, 4, 7], [4, 5, 3]]) == [[4, 5, 3], [6, 4, 4], [3, 4, 7]]", "assert sort_matrix([[1, 7, 7], [-6, 7, -6], [5, -2, 3]]) == [[-6, 7, -6], [5, -2, 3], [1, 7, 7]]", "assert sort_matrix([[1, 4, 5], [2, 4, 0], [5, -4, 3]]) == [[5, -4, 3], [2, 4, 0], [1, 4, 5]]", "assert sort_matrix([[5, 2, 3], [-6, 6, -7], [6, 1, 5]]) == [[-6, 6, -7], [5, 2, 3], [6, 1, 5]]", "assert sort_matrix([[1, 3, 4], [0, 6, -2], [5, -3, 6]]) == [[0, 6, -2], [1, 3, 4], [5, -3, 6]]", "assert sort_matrix([[3, 4, 4], [3, 3, -2], [3, 2, 6]]) == [[3, 3, -2], [3, 4, 4], [3, 2, 6]]", "assert sort_matrix([[6, 2, 7], [-5, 2, -1], [2, -6, 2]]) == [[-5, 2, -1], [2, -6, 2], [6, 2, 7]]", "assert sort_matrix([[1, 2, 1], [3, 7, -8], [3, -4, 1]]) == [[3, -4, 1], [3, 7, -8], [1, 2, 1]]", "assert sort_matrix([[3, 4, 7], [-6, 8, 0], [4, -5, 2]]) == [[4, -5, 2], [-6, 8, 0], [3, 4, 7]]", "assert sort_matrix([[4, 3, 5], [0, 6, 0], [1, -6, 2]]) == [[1, -6, 2], [0, 6, 0], [4, 3, 5]]", "assert sort_matrix([[5, 6, 1], [-7, 5, -6], [5, -1, 2]]) == [[-7, 5, -6], [5, -1, 2], [5, 6, 1]]", "assert sort_matrix([[3, 2, 8], [1, 2, -3], [6, 1, 2]]) == [[1, 2, -3], [6, 1, 2], [3, 2, 8]]", "assert sort_matrix([[3, 3, 1], [0, 9, -2], [1, -5, 5]]) == [[1, -5, 5], [3, 3, 1], [0, 9, -2]]", "assert sort_matrix([[5, 7, 1], [-6, 4, -1], [2, -2, 2]]) == [[-6, 4, -1], [2, -2, 2], [5, 7, 1]]", "assert sort_matrix([[6, 5, 2], [-6, 7, -1], [2, -5, 4]]) == [[-6, 7, -1], [2, -5, 4], [6, 5, 2]]", "assert sort_matrix([[2, 6, 7], [-1, 2, -2], [1, -2, 1]]) == [[-1, 2, -2], [1, -2, 1], [2, 6, 7]]", "assert sort_matrix([[1, 3, 8], [-1, 4, -2], [5, 2, 1]]) == [[-1, 4, -2], [5, 2, 1], [1, 3, 8]]", "assert sort_matrix([[6, 3, 3], [3, 3, 0], [3, 1, 3]]) == [[3, 3, 0], [3, 1, 3], [6, 3, 3]]", "assert sort_matrix([[4, 7, 8], [-7, 7, -1], [2, 1, 5]]) == [[-7, 7, -1], [2, 1, 5], [4, 7, 8]]", "assert sort_matrix([[6, 1, 2], [-3, 8, -9], [5, 3, 6]]) == [[-3, 8, -9], [6, 1, 2], [5, 3, 6]]", "assert sort_matrix([[3, 4, 3], [-2, 8, -10], [3, 0, 6]]) == [[-2, 8, -10], [3, 0, 6], [3, 4, 3]]", "assert sort_matrix([[3, 5, 5], [-4, 3, -9], [3, -1, 1]]) == [[-4, 3, -9], [3, -1, 1], [3, 5, 5]]", "assert sort_matrix([[4, 2, 2], [-2, 1, -8], [5, -5, 1]]) == [[-2, 1, -8], [5, -5, 1], [4, 2, 2]]", "assert sort_matrix([[5, 4, 7], [-5, 4, -8], [1, 1, 4]]) == [[-5, 4, -8], [1, 1, 4], [5, 4, 7]]", "assert sort_matrix([[6, 4, 5], [2, 7, -10], [1, 2, 2]]) == [[2, 7, -10], [1, 2, 2], [6, 4, 5]]", "assert sort_matrix([[5, 7, 6], [2, 1, -4], [5, -6, 4]]) == [[2, 1, -4], [5, -6, 4], [5, 7, 6]]", "assert sort_matrix([[5, 5, 8], [3, 3, -2], [3, -1, 3]]) == [[3, 3, -2], [3, -1, 3], [5, 5, 8]]", "assert sort_matrix([[5, 1, 8], [-2, 3, -6], [1, 0, 2]]) == [[-2, 3, -6], [1, 0, 2], [5, 1, 8]]", "assert sort_matrix([[4, 7, 5], [-4, 9, 0], [2, -4, 2]]) == [[2, -4, 2], [-4, 9, 0], [4, 7, 5]]", "assert sort_matrix([[1, 5, 6], [2, 1, -2], [1, 1, 3]]) == [[2, 1, -2], [1, 1, 3], [1, 5, 6]]", "assert sort_matrix([[4, 5, 8], [-3, 9, 0], [4, 3, 3]]) == [[-3, 9, 0], [4, 3, 3], [4, 5, 8]]", "assert sort_matrix([[3, 4, 4], [1, 6, -5], [5, 0, 2]]) == [[1, 6, -5], [5, 0, 2], [3, 4, 4]]", "assert sort_matrix([[4, 4, 2], [-6, 7, -3], [4, 3, 5]]) == [[-6, 7, -3], [4, 4, 2], [4, 3, 5]]", "assert sort_matrix([[4, 7, 7], [0, 5, -1], [1, -1, 4]]) == [[0, 5, -1], [1, -1, 4], [4, 7, 7]]", "assert sort_matrix([[10, 12, 8], [5, 1, 5], [2, 5, 8]]) == [[5, 1, 5], [2, 5, 8], [10, 12, 8]]", "assert sort_matrix([[3, 8, 13], [11, 9, 6], [3, 6, 4]]) == [[3, 6, 4], [3, 8, 13], [11, 9, 6]]", "assert sort_matrix([[1, 11, 8], [2, 5, 6], [6, 3, 5]]) == [[2, 5, 6], [6, 3, 5], [1, 11, 8]]", "assert sort_matrix([[1, 6, 11], [1, 8, 8], [2, 2, 6]]) == [[2, 2, 6], [1, 8, 8], [1, 6, 11]]", "assert sort_matrix([[9, 4, 8], [10, 7, 2], [1, 3, 2]]) == [[1, 3, 2], [10, 7, 2], [9, 4, 8]]", "assert sort_matrix([[7, 4, 4], [9, 2, 8], [1, 4, 2]]) == [[1, 4, 2], [7, 4, 4], [9, 2, 8]]", "assert sort_matrix([[4, 5, 12], [2, 9, 7], [5, 4, 5]]) == [[5, 4, 5], [2, 9, 7], [4, 5, 12]]", "assert sort_matrix([[3, 9, 4], [7, 3, 6], [3, 1, 9]]) == [[3, 1, 9], [3, 9, 4], [7, 3, 6]]", "assert sort_matrix([[1, 11, 11], [4, 9, 5], [4, 3, 7]]) == [[4, 3, 7], [4, 9, 5], [1, 11, 11]]", "assert sort_matrix([[6, 4, 6], [2, 6, 1], [6, 1, 4]]) == [[2, 6, 1], [6, 1, 4], [6, 4, 6]]", "assert sort_matrix([[9, 11, 11], [1, 4, 1], [4, 1, 8]]) == [[1, 4, 1], [4, 1, 8], [9, 11, 11]]", "assert sort_matrix([[1, 11, 4], [5, 7, 2], [5, 5, 6]]) == [[5, 7, 2], [1, 11, 4], [5, 5, 6]]", "assert sort_matrix([[9, 9, 11], [2, 8, 5], [3, 6, 6]]) == [[2, 8, 5], [3, 6, 6], [9, 9, 11]]", "assert sort_matrix([[3, 3, 4], [5, 1, 6], [2, 6, 4]]) == [[3, 3, 4], [5, 1, 6], [2, 6, 4]]", "assert sort_matrix([[1, 9, 13], [9, 9, 3], [6, 4, 4]]) == [[6, 4, 4], [9, 9, 3], [1, 9, 13]]", "assert sort_matrix([[9, 4, 11], [5, 7, 4], [3, 5, 4]]) == [[3, 5, 4], [5, 7, 4], [9, 4, 11]]", "assert sort_matrix([[5, 8, 12], [1, 3, 2], [6, 4, 8]]) == [[1, 3, 2], [6, 4, 8], [5, 8, 12]]", "assert sort_matrix([[10, 13, 6], [3, 6, 7], [6, 4, 4]]) == [[6, 4, 4], [3, 6, 7], [10, 13, 6]]", "assert sort_matrix([[7, 11, 7], [4, 1, 3], [5, 5, 7]]) == [[4, 1, 3], [5, 5, 7], [7, 11, 7]]", "assert sort_matrix([[9, 9, 10], [10, 2, 7], [5, 6, 9]]) == [[10, 2, 7], [5, 6, 9], [9, 9, 10]]", "assert sort_matrix([[8, 12, 11], [1, 5, 7], [4, 3, 5]]) == [[4, 3, 5], [1, 5, 7], [8, 12, 11]]", "assert sort_matrix([[2, 6, 14], [5, 2, 3], [3, 1, 5]]) == [[3, 1, 5], [5, 2, 3], [2, 6, 14]]", "assert sort_matrix([[6, 3, 5], [7, 5, 3], [6, 6, 7]]) == [[6, 3, 5], [7, 5, 3], [6, 6, 7]]", "assert sort_matrix([[1, 13, 4], [4, 4, 2], [4, 1, 9]]) == [[4, 4, 2], [4, 1, 9], [1, 13, 4]]", "assert sort_matrix([[8, 7, 4], [5, 8, 4], [2, 4, 1]]) == [[2, 4, 1], [5, 8, 4], [8, 7, 4]]", "assert sort_matrix([[4, 8, 9], [5, 4, 4], [2, 5, 6]]) == [[5, 4, 4], [2, 5, 6], [4, 8, 9]]", "assert sort_matrix([[5, 10, 14], [9, 7, 7], [5, 6, 7]]) == [[5, 6, 7], [9, 7, 7], [5, 10, 14]]", "assert sort_matrix([[5, 6, 4], [8, 8, 1], [2, 5, 1]]) == [[2, 5, 1], [5, 6, 4], [8, 8, 1]]", "assert sort_matrix([[5, 12, 12], [3, 5, 3], [5, 3, 1]]) == [[5, 3, 1], [3, 5, 3], [5, 12, 12]]", "assert sort_matrix([[4, 7, 10], [10, 4, 8], [5, 6, 8]]) == [[5, 6, 8], [4, 7, 10], [10, 4, 8]]", "assert sort_matrix([[2, 4, 7], [10, 3, 3], [6, 4, 6]]) == [[2, 4, 7], [10, 3, 3], [6, 4, 6]]", "assert sort_matrix([[5, 5, 6], [11, 9, 3], [1, 3, 9]]) == [[1, 3, 9], [5, 5, 6], [11, 9, 3]]", "assert sort_matrix([[3, 8, 10], [7, 7, 7], [4, 3, 3]]) == [[4, 3, 3], [3, 8, 10], [7, 7, 7]]"], "entry_point": "sort_matrix", "repair_prompt": ["Write a function to sort a given matrix in ascending order according to the sum of its rows. Ensure that the function efficiently handles matrices of varying sizes.\nexample:\nsort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n"], "completion": "from typing import *\ndef sort_matrix(matrix):\n    # Calculate the sum of each row and store it along with the row itself\n    row_sums = [(sum(row), row) for row in matrix]\n    \n    # Sort the rows based on their sums in ascending order\n    sorted_row_sums = sorted(row_sums, key=lambda x: x[0])\n    \n    # Extract the sorted rows\n    sorted_matrix = [row for _, row in sorted_row_sums]\n    \n    return sorted_matrix", "completions": ["from typing import *\ndef sort_matrix(matrix):\n    # Define the function signature for `sort_matrix`.\n    # Implement a function to calculate the sum of each row in the matrix.\n    # Use the row sums to sort the matrix rows in ascending order.\n    # Ensure the function can handle matrices of varying sizes, including empty matrices.\n    # Test the function with the provided example and additional test cases.\n    \n    if not matrix or not matrix[0]:\n        return matrix\n    \n    # Calculate the sum of each row in the matrix and store these sums along with their corresponding row indices.\n    row_sums_with_indices = [(sum(row), i, row) for i, row in enumerate(matrix)]\n    \n    # Sort the rows based on their sums in ascending order.\n    row_sums_with_indices.sort(key=lambda x: x[0])\n    \n    # Return the sorted matrix.\n    sorted_matrix = [row for _, _, row in row_sums_with_indices]\n    return sorted_matrix", "from typing import *\ndef sort_matrix(matrix):\n    def calculate_row_sums(matrix):\n        return [sum(row) for row in matrix]\n\n    def sort_matrix_by_sums(matrix, row_sums):\n        return [row for _, row in sorted(zip(row_sums, matrix), key=lambda x: x[0])]\n\n    row_sums = calculate_row_sums(matrix)\n    sorted_matrix = sort_matrix_by_sums(matrix, row_sums)\n    return sorted_matrix", "from typing import *\ndef sort_matrix(matrix):\n    # Step 1: Define the function and capture the input matrix.\n    if not matrix:\n        return []\n\n    # Step 2: Initialize a list to store the sums of each row.\n    row_sums = []\n\n    # Step 3: Calculate the sum of each row and store it in the list.\n    for row in matrix:\n        row_sum = sum(row)\n        row_sums.append((row_sum, row))\n\n    # Step 4: Pair each row with its sum and sort the pairs based on the sums.\n    row_sums.sort(key=lambda x: x[0])\n\n    # Step 5: Reconstruct the matrix from the sorted pairs.\n    sorted_matrix = [row for _, row in row_sums]\n\n    # Step 6: Return the sorted matrix.\n    return sorted_matrix", "from typing import *\ndef sort_matrix(matrix):\n    if not matrix or not matrix[0]:\n        return matrix\n\n    # Calculate the sum of each row and store it along with the row index\n    row_sums = []\n    for i, row in enumerate(matrix):\n        row_sum = sum(row)\n        row_sums.append((row_sum, i, row))\n\n    # Sort the rows based on their sums in ascending order\n    row_sums.sort(key=lambda x: x[0])\n\n    # Return the sorted matrix\n    sorted_matrix = [row for _, _, row in row_sums]\n    return sorted_matrix", "from typing import *\ndef sort_matrix(matrix):\n    # Step 1: Calculate the sum of each row and store these sums along with their corresponding rows\n    row_sums_with_rows = [(sum(row), row) for row in matrix]\n    \n    # Step 2: Sort the list of tuples by the sum values\n    sorted_row_sums_with_rows = sorted(row_sums_with_rows, key=lambda x: x[0])\n    \n    # Step 3: Extract the sorted rows from the sorted list of tuples\n    sorted_matrix = [row for _, row in sorted_row_sums_with_rows]\n    \n    # Step 4: Return the sorted matrix\n    return sorted_matrix", "from typing import *\ndef sort_matrix(matrix):\n    def row_sum(row):\n        return sum(row)\n    \n    # Sort the matrix based on the sum of each row\n    sorted_matrix = sorted(matrix, key=row_sum)\n    return sorted_matrix", "from typing import *\ndef sort_matrix(matrix):\n    def calculate_row_sums(matrix):\n        return [sum(row) for row in matrix]\n\n    def sort_matrix_by_sums(matrix, row_sums):\n        return [row for _, row in sorted(zip(row_sums, matrix), key=lambda x: x[0])]\n\n    row_sums = calculate_row_sums(matrix)\n    sorted_matrix = sort_matrix_by_sums(matrix, row_sums)\n    return sorted_matrix", "from typing import *\ndef sort_matrix(matrix):\n    if not matrix or not matrix[0]:\n        return matrix\n\n    # Calculate the sum of each row and store it along with the row index\n    row_sums = []\n    for i, row in enumerate(matrix):\n        row_sum = sum(row)\n        row_sums.append((row_sum, i, row))\n\n    # Sort the rows based on their sums in ascending order\n    row_sums.sort(key=lambda x: x[0])\n\n    # Return the sorted matrix\n    sorted_matrix = [row for _, _, row in row_sums]\n    return sorted_matrix", "from typing import *\ndef calculate_row_sums(matrix):\n    return [sum(row) for row in matrix]\n\ndef sort_matrix_by_sums(matrix, row_sums):\n    return [row for _, row in sorted(zip(row_sums, matrix), key=lambda x: x[0])]\n\ndef sort_matrix(matrix):\n    row_sums = calculate_row_sums(matrix)\n    return sort_matrix_by_sums(matrix, row_sums)", "from typing import *\ndef sort_matrix(matrix):\n    # Calculate the sum of each row and store it along with the row itself\n    row_sums = [(sum(row), row) for row in matrix]\n    \n    # Sort the rows based on their sums in ascending order\n    sorted_row_sums = sorted(row_sums, key=lambda x: x[0])\n    \n    # Extract the sorted rows\n    sorted_matrix = [row for _, row in sorted_row_sums]\n    \n    return sorted_matrix"], "session_history": {"plan": " ```json\n{\n  \"subproblems\": [\n    {\n      \"subproblem\": \"Define the function signature for sorting the matrix by row sums.\",\n      \"details\": \"The function should take a matrix as input and return a new matrix sorted by the sum of its rows in ascending order.\"\n    },\n    {\n      \"subproblem\": \"Calculate the sum of each row in the matrix.\",\n      \"details\": \"This will involve iterating through each row of the matrix and summing its elements.\"\n    },\n    {\n      \"subproblem\": \"Sort the matrix based on the row sums.\",\n      \"details\": \"Use a sorting algorithm that can handle custom key functions, such as the sum of the rows, to sort the matrix accordingly.\"\n    },\n    {\n      \"subproblem\": \"Handle matrices of varying sizes.\",\n      \"details\": \"Ensure the function can handle matrices with different numbers of rows and columns, including empty matrices or matrices with non-numeric elements.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Define the function and import necessary modules.\",\n      \"details\": \"Import any required modules and define the function sort_matrix.\"\n    },\n    {\n      \"step\": \"Calculate the sum of each row.\",\n      \"details\": \"Iterate through each row of the input matrix, calculate the sum of its elements, and store these sums along with the row itself.\"\n    },\n    {\n      \"step\": \"Sort the rows based on their sums.\",\n      \"details\": \"Use a sorting algorithm that allows for custom key functions to sort the rows based on their sums in ascending order.\"\n    },\n    {\n      \"step\": \"Return the sorted matrix.\",\n      \"details\": \"Extract the sorted rows from the sorting process and return them as the output of the function.\"\n    }\n  ]\n}\n```", "Round_0": {"code": "def sort_matrix(matrix):\n    # Calculate the sum of each row and store it along with the row itself\n    row_sums = [(sum(row), row) for row in matrix]\n    \n    # Sort the rows based on their sums in ascending order\n    sorted_row_sums = sorted(row_sums, key=lambda x: x[0])\n    \n    # Extract the sorted rows\n    sorted_matrix = [row for _, row in sorted_row_sums]\n    \n    return sorted_matrix", "report": "The compilation output of the preceding code is: Code Test Passed."}}, "session_historys": [{"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      \"Define the function signature for `sort_matrix`.\",\n      \"Implement a function to calculate the sum of each row in the matrix.\",\n      \"Use the row sums to sort the matrix rows in ascending order.\",\n      \"Ensure the function can handle matrices of varying sizes, including empty matrices.\",\n      \"Test the function with the provided example and additional test cases.\"\n    ],\n    \"high_level_steps\": [\n      \"Define the `sort_matrix` function that takes a matrix as input.\",\n      \"Calculate the sum of each row in the matrix and store these sums along with their corresponding row indices.\",\n      \"Sort the rows based on their sums in ascending order.\",\n      \"Return the sorted matrix.\",\n      \"Test the function with the example provided by the user and additional test cases to ensure robustness.\"\n    ]\n  }\n}\n```", "Round_0": {"code": "def sort_matrix(matrix):\n    # Define the function signature for `sort_matrix`.\n    # Implement a function to calculate the sum of each row in the matrix.\n    # Use the row sums to sort the matrix rows in ascending order.\n    # Ensure the function can handle matrices of varying sizes, including empty matrices.\n    # Test the function with the provided example and additional test cases.\n    \n    if not matrix or not matrix[0]:\n        return matrix\n    \n    # Calculate the sum of each row in the matrix and store these sums along with their corresponding row indices.\n    row_sums_with_indices = [(sum(row), i, row) for i, row in enumerate(matrix)]\n    \n    # Sort the rows based on their sums in ascending order.\n    row_sums_with_indices.sort(key=lambda x: x[0])\n    \n    # Return the sorted matrix.\n    sorted_matrix = [row for _, _, row in row_sums_with_indices]\n    return sorted_matrix", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Define the function signature for sorting the matrix by row sums.\",\n        \"details\": {\n          \"function_name\": \"sort_matrix\",\n          \"parameters\": [\"matrix\"],\n          \"return_type\": \"list\"\n        }\n      },\n      {\n        \"description\": \"Calculate the sum of each row in the matrix.\",\n        \"details\": {\n          \"function_name\": \"calculate_row_sums\",\n          \"parameters\": [\"matrix\"],\n          \"return_type\": \"list\"\n        }\n      },\n      {\n        \"description\": \"Sort the matrix based on the row sums calculated in the previous step.\",\n        \"details\": {\n          \"function_name\": \"sort_matrix_by_sums\",\n          \"parameters\": [\"matrix\", \"row_sums\"],\n          \"return_type\": \"list\"\n        }\n      }\n    ],\n    \"high_level_plan\": [\n      {\n        \"step\": \"Define the function signature and get the matrix as input.\",\n        \"substep\": \"Call the function to calculate row sums.\"\n      },\n      {\n        \"step\": \"Calculate the sum of each row in the matrix.\",\n        \"substep\": \"Iterate through each row of the matrix and sum its elements.\"\n      },\n      {\n        \"step\": \"Sort the matrix based on the row sums.\",\n        \"substep\": \"Use a sorting algorithm that can handle custom keys (row sums) to sort the matrix rows.\"\n      },\n      {\n        \"step\": \"Return the sorted matrix.\",\n        \"substep\": \"Ensure the function returns the sorted matrix.\"\n      }\n    ]\n  }\n}\n```", "Round_0": {"code": "def sort_matrix(matrix):\n    def calculate_row_sums(matrix):\n        return [sum(row) for row in matrix]\n\n    def sort_matrix_by_sums(matrix, row_sums):\n        return [row for _, row in sorted(zip(row_sums, matrix), key=lambda x: x[0])]\n\n    row_sums = calculate_row_sums(matrix)\n    sorted_matrix = sort_matrix_by_sums(matrix, row_sums)\n    return sorted_matrix", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Define the function signature for sorting the matrix by row sums.\",\n      \"details\": \"The function should take a matrix as input and return a new matrix sorted by the sum of its rows in ascending order.\"\n    },\n    {\n      \"description\": \"Calculate the sum of each row in the matrix.\",\n      \"details\": \"Iterate through each row of the matrix and compute the sum of the elements in that row.\"\n    },\n    {\n      \"description\": \"Sort the matrix based on the row sums.\",\n      \"details\": \"Use a sorting algorithm that can handle custom sorting criteria, such as sorting based on the sums calculated in the previous step.\"\n    },\n    {\n      \"description\": \"Handle matrices of varying sizes.\",\n      \"details\": \"Ensure the function can handle matrices with different numbers of rows and columns, including empty matrices or matrices with non-uniform row lengths.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": 1,\n      \"description\": \"Define the function and capture the input matrix.\"\n    },\n    {\n      \"step\": 2,\n      \"description\": \"Initialize a list to store the sums of each row.\"\n    },\n    {\n      \"step\": 3,\n      \"description\": \"Calculate the sum of each row and store it in the list.\"\n    },\n    {\n      \"step\": 4,\n      \"description\": \"Pair each row with its sum and sort the pairs based on the sums.\"\n    },\n    {\n      \"step\": 5,\n      \"description\": \"Reconstruct the matrix from the sorted pairs.\"\n    },\n    {\n      \"step\": 6,\n      \"description\": \"Return the sorted matrix.\"\n    }\n  ]\n}\n```", "Round_0": {"code": "def sort_matrix(matrix):\n    # Step 1: Define the function and capture the input matrix.\n    if not matrix:\n        return []\n\n    # Step 2: Initialize a list to store the sums of each row.\n    row_sums = []\n\n    # Step 3: Calculate the sum of each row and store it in the list.\n    for row in matrix:\n        row_sum = sum(row)\n        row_sums.append((row_sum, row))\n\n    # Step 4: Pair each row with its sum and sort the pairs based on the sums.\n    row_sums.sort(key=lambda x: x[0])\n\n    # Step 5: Reconstruct the matrix from the sorted pairs.\n    sorted_matrix = [row for _, row in row_sums]\n\n    # Step 6: Return the sorted matrix.\n    return sorted_matrix", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      \"Define the function signature for `sort_matrix`.\",\n      \"Implement a function to calculate the sum of each row in the matrix.\",\n      \"Use the row sums to sort the matrix rows in ascending order.\",\n      \"Ensure the function can handle matrices of varying sizes, including empty matrices.\",\n      \"Test the function with the provided example and additional test cases.\"\n    ],\n    \"high_level_steps\": [\n      \"Define the `sort_matrix` function that takes a matrix as input.\",\n      \"Calculate the sum of each row in the matrix and store these sums along with their corresponding row indices.\",\n      \"Sort the rows based on their sums in ascending order.\",\n      \"Return the sorted matrix.\",\n      \"Test the function with the example provided by the user and additional test cases to ensure robustness.\"\n    ]\n  }\n}\n```", "Round_0": {"code": "def sort_matrix(matrix):\n    if not matrix or not matrix[0]:\n        return matrix\n\n    # Calculate the sum of each row and store it along with the row index\n    row_sums = []\n    for i, row in enumerate(matrix):\n        row_sum = sum(row)\n        row_sums.append((row_sum, i, row))\n\n    # Sort the rows based on their sums in ascending order\n    row_sums.sort(key=lambda x: x[0])\n\n    # Return the sorted matrix\n    sorted_matrix = [row for _, _, row in row_sums]\n    return sorted_matrix", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"subproblems\": [\n    {\n      \"subproblem\": \"Define the function signature for sorting the matrix by row sums.\",\n      \"details\": \"The function should take a matrix as input and return a new matrix sorted by the sum of its rows in ascending order.\"\n    },\n    {\n      \"subproblem\": \"Calculate the sum of each row in the matrix.\",\n      \"details\": \"This will involve iterating through each row of the matrix and summing its elements.\"\n    },\n    {\n      \"subproblem\": \"Sort the matrix based on the row sums.\",\n      \"details\": \"Use a sorting algorithm that can handle custom key functions, such as Python's `sorted()` function with a key argument that applies the sum of rows.\"\n    },\n    {\n      \"subproblem\": \"Handle matrices of varying sizes.\",\n      \"details\": \"Ensure the function can handle matrices with different numbers of rows and columns, including empty matrices or matrices with non-uniform row lengths.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Define the function `sort_matrix(matrix)`.\",\n      \"details\": \"The function will take a matrix as input.\"\n    },\n    {\n      \"step\": \"Calculate the sum of each row and store these sums along with their corresponding rows.\",\n      \"details\": \"Use a list of tuples to keep track of both the sum and the row for sorting.\"\n    },\n    {\n      \"step\": \"Sort the list of tuples by the sum values.\",\n      \"details\": \"Use Python's `sorted()` function with a key that extracts the sum from each tuple.\"\n    },\n    {\n      \"step\": \"Extract the sorted rows from the sorted list of tuples.\",\n      \"details\": \"This will involve creating a new matrix from the sorted row tuples.\"\n    },\n    {\n      \"step\": \"Return the sorted matrix.\",\n      \"details\": \"Ensure the function returns the new matrix sorted by row sums.\"\n    }\n  ]\n}\n```", "Round_0": {"code": "def sort_matrix(matrix):\n    # Step 1: Calculate the sum of each row and store these sums along with their corresponding rows\n    row_sums_with_rows = [(sum(row), row) for row in matrix]\n    \n    # Step 2: Sort the list of tuples by the sum values\n    sorted_row_sums_with_rows = sorted(row_sums_with_rows, key=lambda x: x[0])\n    \n    # Step 3: Extract the sorted rows from the sorted list of tuples\n    sorted_matrix = [row for _, row in sorted_row_sums_with_rows]\n    \n    # Step 4: Return the sorted matrix\n    return sorted_matrix", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      \"Define the function signature for `sort_matrix`.\",\n      \"Implement a function to calculate the sum of each row in the matrix.\",\n      \"Use the row sums to sort the matrix rows in ascending order.\",\n      \"Ensure the function can handle matrices of varying sizes, including empty matrices.\",\n      \"Test the function with the provided example and additional test cases.\"\n    ],\n    \"high_level_plan\": [\n      \"1. Define the function `sort_matrix` which takes a matrix as input.\",\n      \"2. Create a helper function to calculate the sum of each row in the matrix.\",\n      \"3. Use the row sums to sort the matrix rows in ascending order.\",\n      \"4. Return the sorted matrix.\"\n    ]\n  }\n}\n```", "Round_0": {"code": "def sort_matrix(matrix):\n    def row_sum(row):\n        return sum(row)\n    \n    # Sort the matrix based on the sum of each row\n    sorted_matrix = sorted(matrix, key=row_sum)\n    return sorted_matrix", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Define the function signature for sorting the matrix by row sums.\",\n        \"details\": {\n          \"function_name\": \"sort_matrix\",\n          \"parameters\": [\"matrix\"],\n          \"return_type\": \"list\"\n        }\n      },\n      {\n        \"description\": \"Calculate the sum of each row in the matrix.\",\n        \"details\": {\n          \"function_name\": \"calculate_row_sums\",\n          \"parameters\": [\"matrix\"],\n          \"return_type\": \"list\"\n        }\n      },\n      {\n        \"description\": \"Sort the matrix based on the row sums calculated in the previous step.\",\n        \"details\": {\n          \"function_name\": \"sort_matrix_by_sums\",\n          \"parameters\": [\"matrix\", \"row_sums\"],\n          \"return_type\": \"list\"\n        }\n      }\n    ],\n    \"high_level_plan\": [\n      {\n        \"step\": \"Define the function signature and call the necessary helper functions.\",\n        \"details\": {\n          \"function_name\": \"sort_matrix\",\n          \"parameters\": [\"matrix\"]\n        }\n      },\n      {\n        \"step\": \"Calculate the sum of each row in the matrix.\",\n        \"details\": {\n          \"function_name\": \"calculate_row_sums\",\n          \"parameters\": [\"matrix\"]\n        }\n      },\n      {\n        \"step\": \"Sort the matrix based on the row sums.\",\n        \"details\": {\n          \"function_name\": \"sort_matrix_by_sums\",\n          \"parameters\": [\"matrix\", \"row_sums\"]\n        }\n      },\n      {\n        \"step\": \"Return the sorted matrix.\",\n        \"details\": {\n          \"function_name\": \"sort_matrix\",\n          \"return_value\": \"sorted_matrix\"\n        }\n      }\n    ]\n  }\n}\n```", "Round_0": {"code": "def sort_matrix(matrix):\n    def calculate_row_sums(matrix):\n        return [sum(row) for row in matrix]\n\n    def sort_matrix_by_sums(matrix, row_sums):\n        return [row for _, row in sorted(zip(row_sums, matrix), key=lambda x: x[0])]\n\n    row_sums = calculate_row_sums(matrix)\n    sorted_matrix = sort_matrix_by_sums(matrix, row_sums)\n    return sorted_matrix", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      \"Define the function signature for `sort_matrix`.\",\n      \"Implement a function to calculate the sum of each row in the matrix.\",\n      \"Use the row sums to sort the matrix rows in ascending order.\",\n      \"Ensure the function can handle matrices of varying sizes, including empty matrices.\",\n      \"Test the function with the provided example and additional test cases.\"\n    ],\n    \"high_level_steps\": [\n      \"Define the `sort_matrix` function that takes a matrix as input.\",\n      \"Calculate the sum of each row in the matrix and store these sums along with their corresponding row indices.\",\n      \"Sort the rows based on their sums in ascending order.\",\n      \"Return the sorted matrix.\",\n      \"Test the function with the example provided by the user and additional test cases to ensure robustness.\"\n    ]\n  }\n}\n```", "Round_0": {"code": "def sort_matrix(matrix):\n    if not matrix or not matrix[0]:\n        return matrix\n\n    # Calculate the sum of each row and store it along with the row index\n    row_sums = []\n    for i, row in enumerate(matrix):\n        row_sum = sum(row)\n        row_sums.append((row_sum, i, row))\n\n    # Sort the rows based on their sums in ascending order\n    row_sums.sort(key=lambda x: x[0])\n\n    # Return the sorted matrix\n    sorted_matrix = [row for _, _, row in row_sums]\n    return sorted_matrix", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Define the function signature for sorting the matrix by row sums.\",\n        \"details\": {\n          \"function_name\": \"sort_matrix\",\n          \"parameters\": [\"matrix\"],\n          \"return_type\": \"list\"\n        }\n      },\n      {\n        \"description\": \"Calculate the sum of each row in the matrix.\",\n        \"details\": {\n          \"function_name\": \"calculate_row_sums\",\n          \"parameters\": [\"matrix\"],\n          \"return_type\": \"list\"\n        }\n      },\n      {\n        \"description\": \"Sort the matrix based on the row sums calculated in the previous step.\",\n        \"details\": {\n          \"function_name\": \"sort_matrix_by_sums\",\n          \"parameters\": [\"matrix\", \"row_sums\"],\n          \"return_type\": \"list\"\n        }\n      }\n    ],\n    \"high_level_plan\": [\n      {\n        \"step\": 1,\n        \"description\": \"Define the function to sort the matrix by row sums.\",\n        \"sub_steps\": [\n          \"Calculate the sum of each row in the matrix.\",\n          \"Sort the matrix based on the row sums.\"\n        ]\n      },\n      {\n        \"step\": 2,\n        \"description\": \"Implement helper functions to calculate row sums and sort the matrix.\",\n        \"sub_steps\": [\n          \"Define a function to calculate the sum of each row in the matrix.\",\n          \"Define a function to sort the matrix based on the row sums.\"\n        ]\n      },\n      {\n        \"step\": 3,\n        \"description\": \"Test the function with various matrix sizes to ensure it works efficiently.\",\n        \"sub_steps\": []\n      }\n    ]\n  }\n}\n```", "Round_0": {"code": "def calculate_row_sums(matrix):\n    return [sum(row) for row in matrix]\n\ndef sort_matrix_by_sums(matrix, row_sums):\n    return [row for _, row in sorted(zip(row_sums, matrix), key=lambda x: x[0])]\n\ndef sort_matrix(matrix):\n    row_sums = calculate_row_sums(matrix)\n    return sort_matrix_by_sums(matrix, row_sums)", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"subproblems\": [\n    {\n      \"subproblem\": \"Define the function signature for sorting the matrix by row sums.\",\n      \"details\": \"The function should take a matrix as input and return a new matrix sorted by the sum of its rows in ascending order.\"\n    },\n    {\n      \"subproblem\": \"Calculate the sum of each row in the matrix.\",\n      \"details\": \"This will involve iterating through each row of the matrix and summing its elements.\"\n    },\n    {\n      \"subproblem\": \"Sort the matrix based on the row sums.\",\n      \"details\": \"Use a sorting algorithm that can handle custom key functions, such as the sum of the rows, to sort the matrix accordingly.\"\n    },\n    {\n      \"subproblem\": \"Handle matrices of varying sizes.\",\n      \"details\": \"Ensure the function can handle matrices with different numbers of rows and columns, including empty matrices or matrices with non-numeric elements.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Define the function and import necessary modules.\",\n      \"details\": \"Import any required modules and define the function sort_matrix.\"\n    },\n    {\n      \"step\": \"Calculate the sum of each row.\",\n      \"details\": \"Iterate through each row of the input matrix, calculate the sum of its elements, and store these sums along with the row itself.\"\n    },\n    {\n      \"step\": \"Sort the rows based on their sums.\",\n      \"details\": \"Use a sorting algorithm that allows for custom key functions to sort the rows based on their sums in ascending order.\"\n    },\n    {\n      \"step\": \"Return the sorted matrix.\",\n      \"details\": \"Extract the sorted rows from the sorting process and return them as the output of the function.\"\n    }\n  ]\n}\n```", "Round_0": {"code": "def sort_matrix(matrix):\n    # Calculate the sum of each row and store it along with the row itself\n    row_sums = [(sum(row), row) for row in matrix]\n    \n    # Sort the rows based on their sums in ascending order\n    sorted_row_sums = sorted(row_sums, key=lambda x: x[0])\n    \n    # Extract the sorted rows\n    sorted_matrix = [row for _, row in sorted_row_sums]\n    \n    return sorted_matrix", "report": "The compilation output of the preceding code is: Code Test Passed."}}], "test": ["def check(sort_matrix):\n\tassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]", "def check(sort_matrix):\n\tassert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 5, 3], [3, 4, 10], [2, 1, 4]]) == [[2, 1, 4], [1, 5, 3], [3, 4, 10]]", "def check(sort_matrix):\n\tassert sort_matrix([[2, 5, 4], [3, 9, 3], [4, 2, 2]]) == [[4, 2, 2], [2, 5, 4], [3, 9, 3]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 1, 6], [7, 8, 3], [1, 1, 6]]) == [[1, 1, 6], [1, 1, 6], [7, 8, 3]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 3, 7], [2, 6, 10], [1, 3, 1]]) == [[1, 3, 1], [3, 3, 7], [2, 6, 10]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 2, 3], [4, 3, 8], [6, 2, 3]]) == [[3, 2, 3], [6, 2, 3], [4, 3, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 5, 5], [6, 8, 6], [2, 5, 4]]) == [[2, 5, 4], [4, 5, 5], [6, 8, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 2, 3], [3, 1, 4], [1, 2, 4]]) == [[1, 2, 3], [1, 2, 4], [3, 1, 4]]", "def check(sort_matrix):\n\tassert sort_matrix([[2, 2, 5], [4, 6, 9], [5, 2, 5]]) == [[2, 2, 5], [5, 2, 5], [4, 6, 9]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 4, 7], [7, 6, 5], [6, 3, 1]]) == [[6, 3, 1], [3, 4, 7], [7, 6, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 1, 5], [4, 5, 1], [4, 5, 1]]) == [[4, 5, 1], [4, 5, 1], [5, 1, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 1, 8], [7, 2, 10], [1, 3, 5]]) == [[1, 3, 5], [4, 1, 8], [7, 2, 10]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 3, 8], [6, 3, 7], [1, 4, 3]]) == [[1, 4, 3], [1, 3, 8], [6, 3, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 5, 6], [6, 9, 1], [2, 5, 1]]) == [[2, 5, 1], [5, 5, 6], [6, 9, 1]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 2, 2], [5, 5, 3], [5, 1, 1]]) == [[5, 1, 1], [5, 2, 2], [5, 5, 3]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 2, 3], [3, 5, 5], [6, 2, 3]]) == [[1, 2, 3], [6, 2, 3], [3, 5, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 7, 7], [6, 7, 5], [1, 1, 2]]) == [[1, 1, 2], [3, 7, 7], [6, 7, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 1, 5], [2, 5, 1], [5, 6, 5]]) == [[1, 1, 5], [2, 5, 1], [5, 6, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 3, 8], [7, 9, 5], [4, 2, 6]]) == [[4, 2, 6], [6, 3, 8], [7, 9, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 6, 4], [7, 5, 10], [6, 4, 5]]) == [[3, 6, 4], [6, 4, 5], [7, 5, 10]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 3, 7], [3, 5, 3], [3, 3, 3]]) == [[3, 3, 3], [3, 5, 3], [3, 3, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 3, 6], [5, 1, 2], [6, 5, 3]]) == [[5, 1, 2], [6, 5, 3], [6, 3, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[2, 2, 8], [5, 9, 10], [5, 1, 5]]) == [[5, 1, 5], [2, 2, 8], [5, 9, 10]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 3, 5], [3, 8, 2], [1, 5, 2]]) == [[1, 5, 2], [5, 3, 5], [3, 8, 2]]", "def check(sort_matrix):\n\tassert sort_matrix([[2, 6, 8], [1, 9, 2], [5, 2, 4]]) == [[5, 2, 4], [1, 9, 2], [2, 6, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 1, 3], [6, 4, 7], [1, 1, 2]]) == [[1, 1, 2], [1, 1, 3], [6, 4, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 2, 8], [1, 4, 5], [2, 4, 2]]) == [[2, 4, 2], [1, 4, 5], [5, 2, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 2, 4], [6, 4, 4], [2, 6, 6]]) == [[3, 2, 4], [6, 4, 4], [2, 6, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 2, 4], [5, 1, 2], [1, 5, 3]]) == [[5, 1, 2], [1, 5, 3], [5, 2, 4]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 3, 1], [5, 9, 5], [5, 4, 1]]) == [[5, 3, 1], [5, 4, 1], [5, 9, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 2, 6], [1, 6, 5], [5, 1, 3]]) == [[5, 1, 3], [1, 6, 5], [6, 2, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 7, 8], [2, 2, 9], [6, 4, 1]]) == [[6, 4, 1], [2, 2, 9], [6, 7, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[2, 1, 1], [4, 4, 2], [3, 5, 4]]) == [[2, 1, 1], [4, 4, 2], [3, 5, 4]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 4, 4], [3, 4, 7], [4, 5, 3]]) == [[4, 5, 3], [6, 4, 4], [3, 4, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 7, 7], [-6, 7, -6], [5, -2, 3]]) == [[-6, 7, -6], [5, -2, 3], [1, 7, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 4, 5], [2, 4, 0], [5, -4, 3]]) == [[5, -4, 3], [2, 4, 0], [1, 4, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 2, 3], [-6, 6, -7], [6, 1, 5]]) == [[-6, 6, -7], [5, 2, 3], [6, 1, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 3, 4], [0, 6, -2], [5, -3, 6]]) == [[0, 6, -2], [1, 3, 4], [5, -3, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 4, 4], [3, 3, -2], [3, 2, 6]]) == [[3, 3, -2], [3, 4, 4], [3, 2, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 2, 7], [-5, 2, -1], [2, -6, 2]]) == [[-5, 2, -1], [2, -6, 2], [6, 2, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 2, 1], [3, 7, -8], [3, -4, 1]]) == [[3, -4, 1], [3, 7, -8], [1, 2, 1]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 4, 7], [-6, 8, 0], [4, -5, 2]]) == [[4, -5, 2], [-6, 8, 0], [3, 4, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 3, 5], [0, 6, 0], [1, -6, 2]]) == [[1, -6, 2], [0, 6, 0], [4, 3, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 6, 1], [-7, 5, -6], [5, -1, 2]]) == [[-7, 5, -6], [5, -1, 2], [5, 6, 1]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 2, 8], [1, 2, -3], [6, 1, 2]]) == [[1, 2, -3], [6, 1, 2], [3, 2, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 3, 1], [0, 9, -2], [1, -5, 5]]) == [[1, -5, 5], [3, 3, 1], [0, 9, -2]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 7, 1], [-6, 4, -1], [2, -2, 2]]) == [[-6, 4, -1], [2, -2, 2], [5, 7, 1]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 5, 2], [-6, 7, -1], [2, -5, 4]]) == [[-6, 7, -1], [2, -5, 4], [6, 5, 2]]", "def check(sort_matrix):\n\tassert sort_matrix([[2, 6, 7], [-1, 2, -2], [1, -2, 1]]) == [[-1, 2, -2], [1, -2, 1], [2, 6, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 3, 8], [-1, 4, -2], [5, 2, 1]]) == [[-1, 4, -2], [5, 2, 1], [1, 3, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 3, 3], [3, 3, 0], [3, 1, 3]]) == [[3, 3, 0], [3, 1, 3], [6, 3, 3]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 7, 8], [-7, 7, -1], [2, 1, 5]]) == [[-7, 7, -1], [2, 1, 5], [4, 7, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 1, 2], [-3, 8, -9], [5, 3, 6]]) == [[-3, 8, -9], [6, 1, 2], [5, 3, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 4, 3], [-2, 8, -10], [3, 0, 6]]) == [[-2, 8, -10], [3, 0, 6], [3, 4, 3]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 5, 5], [-4, 3, -9], [3, -1, 1]]) == [[-4, 3, -9], [3, -1, 1], [3, 5, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 2, 2], [-2, 1, -8], [5, -5, 1]]) == [[-2, 1, -8], [5, -5, 1], [4, 2, 2]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 4, 7], [-5, 4, -8], [1, 1, 4]]) == [[-5, 4, -8], [1, 1, 4], [5, 4, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 4, 5], [2, 7, -10], [1, 2, 2]]) == [[2, 7, -10], [1, 2, 2], [6, 4, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 7, 6], [2, 1, -4], [5, -6, 4]]) == [[2, 1, -4], [5, -6, 4], [5, 7, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 5, 8], [3, 3, -2], [3, -1, 3]]) == [[3, 3, -2], [3, -1, 3], [5, 5, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 1, 8], [-2, 3, -6], [1, 0, 2]]) == [[-2, 3, -6], [1, 0, 2], [5, 1, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 7, 5], [-4, 9, 0], [2, -4, 2]]) == [[2, -4, 2], [-4, 9, 0], [4, 7, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 5, 6], [2, 1, -2], [1, 1, 3]]) == [[2, 1, -2], [1, 1, 3], [1, 5, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 5, 8], [-3, 9, 0], [4, 3, 3]]) == [[-3, 9, 0], [4, 3, 3], [4, 5, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 4, 4], [1, 6, -5], [5, 0, 2]]) == [[1, 6, -5], [5, 0, 2], [3, 4, 4]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 4, 2], [-6, 7, -3], [4, 3, 5]]) == [[-6, 7, -3], [4, 4, 2], [4, 3, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 7, 7], [0, 5, -1], [1, -1, 4]]) == [[0, 5, -1], [1, -1, 4], [4, 7, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[10, 12, 8], [5, 1, 5], [2, 5, 8]]) == [[5, 1, 5], [2, 5, 8], [10, 12, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 8, 13], [11, 9, 6], [3, 6, 4]]) == [[3, 6, 4], [3, 8, 13], [11, 9, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 11, 8], [2, 5, 6], [6, 3, 5]]) == [[2, 5, 6], [6, 3, 5], [1, 11, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 6, 11], [1, 8, 8], [2, 2, 6]]) == [[2, 2, 6], [1, 8, 8], [1, 6, 11]]", "def check(sort_matrix):\n\tassert sort_matrix([[9, 4, 8], [10, 7, 2], [1, 3, 2]]) == [[1, 3, 2], [10, 7, 2], [9, 4, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[7, 4, 4], [9, 2, 8], [1, 4, 2]]) == [[1, 4, 2], [7, 4, 4], [9, 2, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 5, 12], [2, 9, 7], [5, 4, 5]]) == [[5, 4, 5], [2, 9, 7], [4, 5, 12]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 9, 4], [7, 3, 6], [3, 1, 9]]) == [[3, 1, 9], [3, 9, 4], [7, 3, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 11, 11], [4, 9, 5], [4, 3, 7]]) == [[4, 3, 7], [4, 9, 5], [1, 11, 11]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 4, 6], [2, 6, 1], [6, 1, 4]]) == [[2, 6, 1], [6, 1, 4], [6, 4, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[9, 11, 11], [1, 4, 1], [4, 1, 8]]) == [[1, 4, 1], [4, 1, 8], [9, 11, 11]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 11, 4], [5, 7, 2], [5, 5, 6]]) == [[5, 7, 2], [1, 11, 4], [5, 5, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[9, 9, 11], [2, 8, 5], [3, 6, 6]]) == [[2, 8, 5], [3, 6, 6], [9, 9, 11]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 3, 4], [5, 1, 6], [2, 6, 4]]) == [[3, 3, 4], [5, 1, 6], [2, 6, 4]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 9, 13], [9, 9, 3], [6, 4, 4]]) == [[6, 4, 4], [9, 9, 3], [1, 9, 13]]", "def check(sort_matrix):\n\tassert sort_matrix([[9, 4, 11], [5, 7, 4], [3, 5, 4]]) == [[3, 5, 4], [5, 7, 4], [9, 4, 11]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 8, 12], [1, 3, 2], [6, 4, 8]]) == [[1, 3, 2], [6, 4, 8], [5, 8, 12]]", "def check(sort_matrix):\n\tassert sort_matrix([[10, 13, 6], [3, 6, 7], [6, 4, 4]]) == [[6, 4, 4], [3, 6, 7], [10, 13, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[7, 11, 7], [4, 1, 3], [5, 5, 7]]) == [[4, 1, 3], [5, 5, 7], [7, 11, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[9, 9, 10], [10, 2, 7], [5, 6, 9]]) == [[10, 2, 7], [5, 6, 9], [9, 9, 10]]", "def check(sort_matrix):\n\tassert sort_matrix([[8, 12, 11], [1, 5, 7], [4, 3, 5]]) == [[4, 3, 5], [1, 5, 7], [8, 12, 11]]", "def check(sort_matrix):\n\tassert sort_matrix([[2, 6, 14], [5, 2, 3], [3, 1, 5]]) == [[3, 1, 5], [5, 2, 3], [2, 6, 14]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 3, 5], [7, 5, 3], [6, 6, 7]]) == [[6, 3, 5], [7, 5, 3], [6, 6, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 13, 4], [4, 4, 2], [4, 1, 9]]) == [[4, 4, 2], [4, 1, 9], [1, 13, 4]]", "def check(sort_matrix):\n\tassert sort_matrix([[8, 7, 4], [5, 8, 4], [2, 4, 1]]) == [[2, 4, 1], [5, 8, 4], [8, 7, 4]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 8, 9], [5, 4, 4], [2, 5, 6]]) == [[5, 4, 4], [2, 5, 6], [4, 8, 9]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 10, 14], [9, 7, 7], [5, 6, 7]]) == [[5, 6, 7], [9, 7, 7], [5, 10, 14]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 6, 4], [8, 8, 1], [2, 5, 1]]) == [[2, 5, 1], [5, 6, 4], [8, 8, 1]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 12, 12], [3, 5, 3], [5, 3, 1]]) == [[5, 3, 1], [3, 5, 3], [5, 12, 12]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 7, 10], [10, 4, 8], [5, 6, 8]]) == [[5, 6, 8], [4, 7, 10], [10, 4, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[2, 4, 7], [10, 3, 3], [6, 4, 6]]) == [[2, 4, 7], [10, 3, 3], [6, 4, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 5, 6], [11, 9, 3], [1, 3, 9]]) == [[1, 3, 9], [5, 5, 6], [11, 9, 3]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 8, 10], [7, 7, 7], [4, 3, 3]]) == [[4, 3, 3], [3, 8, 10], [7, 7, 7]]"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 102, 102, 102, 102, 102], "passed": true, "pass": true, "pass_num": 10, "round": 6, "mutate_method": "add_1_sentence_at_end", "save_node": false, "parent_index": 6}
