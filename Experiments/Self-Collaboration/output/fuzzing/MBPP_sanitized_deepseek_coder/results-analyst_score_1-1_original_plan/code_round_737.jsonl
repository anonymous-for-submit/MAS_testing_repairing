{"source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 129, "prompt": "Write a function to calculate whether the matrix is a square where all rows, columns, and diagonals sum to the same value. The matrix should have the property that all of its rows and columns add up to the same number.", "code": "def magic_square_test(my_matrix):\n    iSize = len(my_matrix[0])\n    sum_list = []\n    sum_list.extend([sum (lines) for lines in my_matrix])   \n    for col in range(iSize):\n        sum_list.append(sum(row[col] for row in my_matrix))\n    result1 = 0\n    for i in range(0,iSize):\n        result1 +=my_matrix[i][i]\n    sum_list.append(result1)      \n    result2 = 0\n    for i in range(iSize-1,-1,-1):\n        result2 +=my_matrix[i][i]\n    sum_list.append(result2)\n    if len(set(sum_list))>1:\n        return False\n    return True", "test_imports": [], "test_list": ["assert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True", "assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True", "assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False", "assert magic_square_test([[8, 9, 3, 14], [7, 10, 9, 11], [16, 6, 13, 6], [9, 11, 17, 2]]) == False", "assert magic_square_test([[9, 10, 6, 17], [5, 8, 4, 11], [13, 1, 5, 9], [11, 10, 17, 8]]) == False", "assert magic_square_test([[2, 8, 3, 9], [3, 16, 5, 7], [12, 7, 5, 2], [12, 11, 12, 6]]) == False", "assert magic_square_test([[12, 12, 6, 10], [7, 10, 4, 9], [20, 8, 9, 8], [14, 8, 16, 3]]) == False", "assert magic_square_test([[12, 10, 1, 13], [4, 12, 3, 6], [18, 7, 5, 1], [4, 2, 15, 7]]) == False", "assert magic_square_test([[12, 17, 3, 9], [7, 9, 11, 8], [19, 1, 11, 1], [10, 9, 15, 7]]) == False", "assert magic_square_test([[11, 7, 2, 16], [7, 18, 4, 12], [16, 7, 13, 6], [10, 1, 18, 6]]) == False", "assert magic_square_test([[8, 7, 5, 15], [7, 13, 6, 8], [20, 2, 11, 9], [13, 6, 15, 4]]) == False", "assert magic_square_test([[10, 8, 3, 10], [1, 9, 7, 13], [16, 7, 14, 4], [7, 10, 18, 1]]) == False", "assert magic_square_test([[2, 17, 1, 10], [4, 15, 5, 11], [15, 6, 5, 7], [5, 1, 14, 8]]) == False", "assert magic_square_test([[6, 13, 5, 14], [5, 15, 11, 14], [12, 4, 15, 2], [13, 9, 13, 5]]) == False", "assert magic_square_test([[12, 14, 5, 9], [1, 11, 9, 14], [13, 5, 14, 8], [11, 7, 13, 4]]) == False", "assert magic_square_test([[2, 9, 2, 16], [7, 15, 4, 11], [21, 2, 13, 4], [10, 9, 20, 9]]) == False", "assert magic_square_test([[7, 11, 2, 16], [6, 10, 9, 8], [15, 4, 12, 6], [14, 10, 18, 9]]) == False", "assert magic_square_test([[9, 8, 3, 12], [6, 14, 5, 7], [13, 3, 6, 10], [12, 11, 15, 6]]) == False", "assert magic_square_test([[4, 10, 4, 17], [1, 14, 3, 12], [17, 6, 13, 1], [4, 8, 12, 8]]) == False", "assert magic_square_test([[9, 7, 6, 9], [6, 10, 8, 10], [19, 3, 5, 1], [8, 7, 18, 5]]) == False", "assert magic_square_test([[5, 13, 1, 12], [6, 16, 7, 10], [18, 4, 8, 5], [8, 5, 16, 4]]) == False", "assert magic_square_test([[8, 12, 3, 13], [4, 13, 13, 8], [17, 7, 15, 9], [14, 5, 14, 7]]) == False", "assert magic_square_test([[10, 9, 2, 18], [7, 9, 13, 13], [18, 7, 9, 4], [5, 9, 14, 8]]) == False", "assert magic_square_test([[5, 8, 5, 16], [6, 14, 9, 15], [20, 2, 13, 5], [7, 4, 18, 1]]) == False", "assert magic_square_test([[7, 14, 6, 9], [7, 14, 13, 8], [11, 6, 9, 5], [10, 3, 10, 6]]) == False", "assert magic_square_test([[7, 15, 5, 9], [2, 17, 7, 8], [21, 8, 8, 1], [10, 11, 15, 8]]) == False", "assert magic_square_test([[9, 14, 5, 19], [4, 15, 11, 16], [19, 6, 13, 7], [9, 7, 10, 1]]) == False", "assert magic_square_test([[12, 11, 6, 15], [6, 16, 5, 13], [19, 8, 11, 1], [13, 10, 11, 2]]) == False", "assert magic_square_test([[10, 11, 5, 11], [3, 18, 10, 15], [18, 6, 5, 3], [12, 5, 18, 3]]) == False", "assert magic_square_test([[7, 11, 4, 17], [2, 15, 4, 11], [17, 5, 5, 3], [8, 2, 20, 7]]) == False", "assert magic_square_test([[6, 16, 4, 15], [2, 15, 11, 8], [20, 6, 14, 3], [14, 3, 20, 7]]) == False", "assert magic_square_test([[8, 11, 3, 11], [2, 12, 9, 7], [21, 5, 9, 10], [14, 7, 11, 1]]) == False", "assert magic_square_test([[12, 17, 4, 14], [6, 9, 4, 16], [15, 5, 14, 5], [13, 3, 10, 7]]) == False", "assert magic_square_test([[11, 14, 2, 17], [5, 17, 4, 10], [14, 1, 8, 6], [4, 7, 14, 2]]) == False", "assert magic_square_test([[7, 16, 2, 10], [2, 17, 6, 13], [12, 5, 10, 5], [7, 1, 15, 1]]) == False", "assert magic_square_test([[12, 7, 4, 14], [7, 18, 5, 9], [17, 4, 12, 1], [10, 7, 17, 4]]) == False", "assert magic_square_test([[2, 2, 4], [5, 9, 5], [8, 2, 6]]) == False", "assert magic_square_test([[7, 10, 8], [14, 9, 6], [1, 1, 13]]) == False", "assert magic_square_test([[7, 2, 3], [4, 1, 1], [7, 2, 9]]) == False", "assert magic_square_test([[4, 10, 11], [7, 5, 3], [5, 1, 4]]) == False", "assert magic_square_test([[3, 7, 1], [12, 5, 3], [1, 7, 6]]) == False", "assert magic_square_test([[6, 11, 4], [8, 1, 2], [9, 8, 11]]) == False", "assert magic_square_test([[4, 3, 8], [4, 5, 6], [4, 4, 10]]) == False", "assert magic_square_test([[5, 2, 11], [10, 4, 1], [3, 6, 4]]) == False", "assert magic_square_test([[3, 7, 9], [5, 5, 6], [6, 2, 7]]) == False", "assert magic_square_test([[2, 3, 7], [5, 1, 5], [6, 3, 8]]) == False", "assert magic_square_test([[1, 11, 3], [11, 10, 3], [5, 8, 3]]) == False", "assert magic_square_test([[4, 9, 4], [8, 8, 4], [2, 8, 10]]) == False", "assert magic_square_test([[2, 11, 3], [9, 8, 3], [9, 5, 11]]) == False", "assert magic_square_test([[5, 8, 3], [7, 10, 4], [3, 2, 11]]) == False", "assert magic_square_test([[3, 9, 11], [13, 1, 3], [6, 3, 9]]) == False", "assert magic_square_test([[6, 4, 2], [13, 2, 2], [6, 1, 12]]) == False", "assert magic_square_test([[1, 2, 7], [13, 10, 3], [3, 6, 7]]) == False", "assert magic_square_test([[7, 2, 9], [10, 8, 5], [2, 8, 13]]) == False", "assert magic_square_test([[4, 8, 4], [14, 10, 3], [2, 1, 9]]) == False", "assert magic_square_test([[4, 10, 10], [5, 6, 5], [1, 2, 11]]) == False", "assert magic_square_test([[7, 3, 2], [6, 5, 4], [6, 1, 9]]) == False", "assert magic_square_test([[6, 3, 2], [11, 2, 6], [2, 7, 11]]) == False", "assert magic_square_test([[4, 8, 2], [6, 8, 5], [6, 6, 4]]) == False", "assert magic_square_test([[1, 7, 4], [9, 2, 3], [5, 8, 9]]) == False", "assert magic_square_test([[1, 8, 7], [4, 3, 4], [3, 1, 6]]) == False", "assert magic_square_test([[2, 6, 5], [5, 3, 3], [5, 2, 4]]) == False", "assert magic_square_test([[6, 5, 4], [6, 7, 1], [7, 1, 5]]) == False", "assert magic_square_test([[1, 7, 2], [10, 4, 6], [6, 4, 6]]) == False", "assert magic_square_test([[1, 12, 5], [7, 3, 1], [7, 3, 4]]) == False", "assert magic_square_test([[1, 10, 1], [13, 4, 6], [4, 7, 12]]) == False", "assert magic_square_test([[1, 7, 9], [7, 2, 2], [7, 5, 12]]) == False", "assert magic_square_test([[1, 10, 3], [5, 2, 2], [7, 6, 4]]) == False", "assert magic_square_test([[7, 5, 7], [6, 6, 2], [2, 1, 13]]) == False", "assert magic_square_test([[5, 9, 3], [8, 8, 2], [7, 6, 3]]) == False", "assert magic_square_test([[4, 2, 10], [10, 6, 4], [3, 4, 3]]) == False", "assert magic_square_test([[4, 6, 10], [11, 4, 6], [3, 6, 2]]) == False", "assert magic_square_test([[7, 11, 5], [5, 6, 2], [8, 4, 10]]) == False", "assert magic_square_test([[7, 5, 4], [12, 10, 1], [1, 3, 6]]) == False", "assert magic_square_test([[6, 7, 11], [7, 6, 5], [3, 8, 4]]) == False", "assert magic_square_test([[6, 10, 11], [10, 5, 4], [2, 4, 4]]) == False", "assert magic_square_test([[2, 5, 3], [4, 6, 1], [7, 1, 10]]) == False", "assert magic_square_test([[4, 7, 4], [4, 8, 4], [7, 3, 2]]) == False", "assert magic_square_test([[5, 2, 11], [12, 7, 4], [7, 2, 6]]) == False", "assert magic_square_test([[7, 7, 6], [7, 2, 2], [6, 7, 11]]) == False", "assert magic_square_test([[4, 8, 8], [7, 8, 3], [8, 3, 6]]) == False", "assert magic_square_test([[6, 6, 2], [13, 9, 4], [6, 4, 4]]) == False", "assert magic_square_test([[6, 11, 6], [8, 8, 4], [8, 7, 2]]) == False", "assert magic_square_test([[5, 11, 2], [14, 5, 2], [7, 5, 5]]) == False", "assert magic_square_test([[3, 12, 11], [13, 9, 2], [2, 8, 12]]) == False", "assert magic_square_test([[5, 7, 1], [9, 7, 6], [4, 2, 2]]) == False", "assert magic_square_test([[2, 3, 9], [14, 8, 5], [6, 1, 7]]) == False", "assert magic_square_test([[3, 6, 7], [14, 5, 6], [8, 8, 5]]) == False", "assert magic_square_test([[3, 8, 2], [9, 7, 3], [4, 8, 9]]) == False", "assert magic_square_test([[7, 2, 6], [4, 3, 2], [9, 8, 7]]) == False", "assert magic_square_test([[4, 10, 9], [11, 9, 3], [1, 3, 2]]) == False", "assert magic_square_test([[4, 5, 7], [5, 6, 2], [8, 2, 5]]) == False", "assert magic_square_test([[6, 8, 5], [10, 5, 3], [7, 6, 7]]) == False", "assert magic_square_test([[4, 7, 11], [13, 8, 6], [8, 6, 3]]) == False", "assert magic_square_test([[4, 5, 3], [11, 7, 5], [9, 1, 7]]) == False", "assert magic_square_test([[1, 7, 1], [7, 9, 1], [2, 1, 11]]) == False", "assert magic_square_test([[3, 7, 9], [13, 4, 3], [1, 3, 11]]) == False", "assert magic_square_test([[5, 4, 9], [12, 4, 1], [4, 4, 9]]) == False", "assert magic_square_test([[1, 4, 7], [9, 1, 3], [1, 8, 10]]) == False", "assert magic_square_test([[2, 11, 2], [11, 4, 4], [3, 5, 2]]) == False", "assert magic_square_test([[4, 2, 1], [14, 1, 3], [3, 4, 9]]) == False", "assert magic_square_test([[7, 4, 8], [8, 2, 3], [1, 7, 11]]) == False"], "entry_point": "magic_square_test", "repair_prompt": ["Write a function to calculate whether the matrix is a square where all rows, columns, and diagonals sum to the same value. The matrix should have the property that all of its rows and columns add up to the same number.\nexample:\nmagic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n"], "completion": "from typing import *\ndef sum_row(matrix, row_index):\n    return sum(matrix[row_index])\n\ndef sum_column(matrix, column_index):\n    return sum(row[column_index] for row in matrix)\n\ndef sum_diagonals(matrix):\n    diag1_sum = sum(matrix[i][i] for i in range(len(matrix)))\n    diag2_sum = sum(matrix[i][len(matrix) - 1 - i] for i in range(len(matrix)))\n    return diag1_sum, diag2_sum\n\ndef magic_square_test(matrix):\n    if not matrix or not matrix[0]:\n        return False\n    \n    n = len(matrix)\n    unique_sums = set()\n    \n    for i in range(n):\n        unique_sums.add(sum_row(matrix, i))\n        unique_sums.add(sum_column(matrix, i))\n    \n    diag1_sum, diag2_sum = sum_diagonals(matrix)\n    unique_sums.add(diag1_sum)\n    unique_sums.add(diag2_sum)\n    \n    return len(unique_sums) == 1", "completions": ["from typing import *\ndef sum_row(matrix, row):\n    return sum(matrix[row])\n\ndef sum_column(matrix, col):\n    return sum(row[col] for row in matrix)\n\ndef sum_main_diagonal(matrix):\n    return sum(matrix[i][i] for i in range(len(matrix)))\n\ndef sum_secondary_diagonal(matrix):\n    n = len(matrix)\n    return sum(matrix[i][n - 1 - i] for i in range(n))\n\ndef magic_square_test(matrix):\n    if not matrix or not matrix[0]:\n        return False\n    \n    n = len(matrix)\n    if any(len(row) != n for row in matrix):\n        return False\n    \n    row_sums = [sum_row(matrix, row) for row in range(n)]\n    col_sums = [sum_column(matrix, col) for col in range(n)]\n    main_diag_sum = sum_main_diagonal(matrix)\n    secondary_diag_sum = sum_secondary_diagonal(matrix)\n    \n    all_sums = row_sums + col_sums + [main_diag_sum, secondary_diag_sum]\n    \n    return all(s == main_diag_sum for s in all_sums)", "from typing import *\ndef magic_square_test(matrix):\n    n = len(matrix)\n    \n    # Check if the matrix is square\n    for row in matrix:\n        if len(row) != n:\n            return False\n    \n    # Calculate the sum of each row\n    row_sums = [sum(row) for row in matrix]\n    \n    # Calculate the sum of each column\n    col_sums = [sum(matrix[i][j] for i in range(n)) for j in range(n)]\n    \n    # Calculate the sum of the main diagonal\n    main_diagonal_sum = sum(matrix[i][i] for i in range(n))\n    \n    # Calculate the sum of the secondary diagonal\n    secondary_diagonal_sum = sum(matrix[i][n - 1 - i] for i in range(n))\n    \n    # Check if all sums are equal\n    target_sum = row_sums[0]\n    if all(sum_ == target_sum for sum_ in row_sums) and \\\n       all(sum_ == target_sum for sum_ in col_sums) and \\\n       main_diagonal_sum == target_sum and \\\n       secondary_diagonal_sum == target_sum:\n        return True\n    else:\n        return False", "from typing import *\ndef magic_square_test(matrix):\n    n = len(matrix)\n    \n    # Check if the matrix is square\n    for row in matrix:\n        if len(row) != n:\n            return False\n    \n    # Calculate the sum of each row\n    row_sums = [sum(row) for row in matrix]\n    \n    # Calculate the sum of each column\n    col_sums = [sum(matrix[i][j] for i in range(n)) for j in range(n)]\n    \n    # Calculate the sum of the main diagonal\n    main_diagonal_sum = sum(matrix[i][i] for i in range(n))\n    \n    # Calculate the sum of the secondary diagonal\n    secondary_diagonal_sum = sum(matrix[i][n-i-1] for i in range(n))\n    \n    # Check if all sums are equal\n    target_sum = row_sums[0]\n    if all(sum_ == target_sum for sum_ in row_sums) and \\\n       all(sum_ == target_sum for sum_ in col_sums) and \\\n       main_diagonal_sum == target_sum and \\\n       secondary_diagonal_sum == target_sum:\n        return True\n    else:\n        return False", "from typing import *\ndef sum_row(matrix, row):\n    return sum(matrix[row])\n\ndef sum_column(matrix, col):\n    return sum(row[col] for row in matrix)\n\ndef sum_diagonal(matrix, direction):\n    if direction == 'primary':\n        return sum(matrix[i][i] for i in range(len(matrix)))\n    elif direction == 'secondary':\n        n = len(matrix)\n        return sum(matrix[i][n - 1 - i] for i in range(len(matrix)))\n\ndef is_magic_square(matrix):\n    n = len(matrix)\n    target_sum = sum_row(matrix, 0)\n    \n    # Check sums of all rows\n    for i in range(1, n):\n        if sum_row(matrix, i) != target_sum:\n            return False\n    \n    # Check sums of all columns\n    for i in range(n):\n        if sum_column(matrix, i) != target_sum:\n            return False\n    \n    # Check sums of both diagonals\n    if sum_diagonal(matrix, 'primary') != target_sum or sum_diagonal(matrix, 'secondary') != target_sum:\n        return False\n    \n    return True", "from typing import *\ndef sum_row(matrix, row_index):\n    return sum(matrix[row_index])\n\ndef sum_column(matrix, column_index):\n    return sum(row[column_index] for row in matrix)\n\ndef sum_diagonals(matrix):\n    primary_diagonal_sum = sum(matrix[i][i] for i in range(len(matrix)))\n    secondary_diagonal_sum = sum(matrix[i][len(matrix) - 1 - i] for i in range(len(matrix)))\n    return primary_diagonal_sum, secondary_diagonal_sum\n\ndef magic_square_test(matrix):\n    if not matrix or not matrix[0]:\n        return False\n    \n    n = len(matrix)\n    unique_sums = set()\n    \n    for i in range(n):\n        unique_sums.add(sum_row(matrix, i))\n        unique_sums.add(sum_column(matrix, i))\n    \n    primary_diagonal_sum, secondary_diagonal_sum = sum_diagonals(matrix)\n    unique_sums.add(primary_diagonal_sum)\n    unique_sums.add(secondary_diagonal_sum)\n    \n    return len(unique_sums) == 1", "from typing import *\ndef sum_row(matrix, row_index):\n    return sum(matrix[row_index])\n\ndef sum_column(matrix, column_index):\n    return sum(row[column_index] for row in matrix)\n\ndef sum_diagonals(matrix):\n    diag1_sum = sum(matrix[i][i] for i in range(len(matrix)))\n    diag2_sum = sum(matrix[i][len(matrix) - 1 - i] for i in range(len(matrix)))\n    return diag1_sum, diag2_sum\n\ndef is_magic_square(matrix):\n    n = len(matrix)\n    first_row_sum = sum_row(matrix, 0)\n    \n    # Check rows\n    for i in range(1, n):\n        if sum_row(matrix, i) != first_row_sum:\n            return False\n    \n    # Check columns\n    for i in range(n):\n        if sum_column(matrix, i) != first_row_sum:\n            return False\n    \n    # Check diagonals\n    diag1_sum, diag2_sum = sum_diagonals(matrix)\n    if diag1_sum != first_row_sum or diag2_sum != first_row_sum:\n        return False\n    \n    return True", "from typing import *\ndef sum_row(matrix, row):\n    return sum(matrix[row])\n\ndef sum_column(matrix, col):\n    return sum(row[col] for row in matrix)\n\ndef sum_main_diagonal(matrix):\n    return sum(matrix[i][i] for i in range(len(matrix)))\n\ndef sum_secondary_diagonal(matrix):\n    n = len(matrix)\n    return sum(matrix[i][n - 1 - i] for i in range(n))\n\ndef magic_square_test(matrix):\n    if not matrix or not matrix[0]:\n        return False\n\n    n = len(matrix)\n    if any(len(row) != n for row in matrix):\n        return False\n\n    target_sum = sum_row(matrix, 0)\n\n    for i in range(1, n):\n        if sum_row(matrix, i) != target_sum:\n            return False\n\n    for i in range(n):\n        if sum_column(matrix, i) != target_sum:\n            return False\n\n    if sum_main_diagonal(matrix) != target_sum:\n        return False\n\n    if sum_secondary_diagonal(matrix) != target_sum:\n        return False\n\n    return True", "from typing import *\ndef sum_row(matrix, row):\n    return sum(matrix[row])\n\ndef sum_column(matrix, col):\n    return sum(row[col] for row in matrix)\n\ndef sum_diagonal(matrix, direction):\n    if direction == 'primary':\n        return sum(matrix[i][i] for i in range(len(matrix)))\n    elif direction == 'secondary':\n        n = len(matrix)\n        return sum(matrix[i][n - 1 - i] for i in range(len(matrix)))\n\ndef is_magic_square(matrix):\n    n = len(matrix)\n    target_sum = sum_row(matrix, 0)\n    \n    # Check sums of all rows\n    for i in range(1, n):\n        if sum_row(matrix, i) != target_sum:\n            return False\n    \n    # Check sums of all columns\n    for i in range(n):\n        if sum_column(matrix, i) != target_sum:\n            return False\n    \n    # Check sums of both diagonals\n    if sum_diagonal(matrix, 'primary') != target_sum or sum_diagonal(matrix, 'secondary') != target_sum:\n        return False\n    \n    return True", "from typing import *\ndef sum_row(matrix, row):\n    return sum(matrix[row])\n\ndef sum_column(matrix, col):\n    return sum(row[col] for row in matrix)\n\ndef sum_main_diagonal(matrix):\n    return sum(matrix[i][i] for i in range(len(matrix)))\n\ndef sum_secondary_diagonal(matrix):\n    n = len(matrix)\n    return sum(matrix[i][n - 1 - i] for i in range(n))\n\ndef magic_square_test(matrix):\n    if not matrix or not matrix[0]:\n        return False\n    \n    n = len(matrix)\n    if any(len(row) != n for row in matrix):\n        return False\n    \n    sums = []\n    \n    for row in range(n):\n        sums.append(sum_row(matrix, row))\n    \n    for col in range(n):\n        sums.append(sum_column(matrix, col))\n    \n    sums.append(sum_main_diagonal(matrix))\n    sums.append(sum_secondary_diagonal(matrix))\n    \n    target_sum = sums[0]\n    return all(sum_ == target_sum for sum_ in sums)", "from typing import *\ndef sum_row(matrix, row_index):\n    return sum(matrix[row_index])\n\ndef sum_column(matrix, column_index):\n    return sum(row[column_index] for row in matrix)\n\ndef sum_diagonals(matrix):\n    diag1_sum = sum(matrix[i][i] for i in range(len(matrix)))\n    diag2_sum = sum(matrix[i][len(matrix) - 1 - i] for i in range(len(matrix)))\n    return diag1_sum, diag2_sum\n\ndef magic_square_test(matrix):\n    if not matrix or not matrix[0]:\n        return False\n    \n    n = len(matrix)\n    unique_sums = set()\n    \n    for i in range(n):\n        unique_sums.add(sum_row(matrix, i))\n        unique_sums.add(sum_column(matrix, i))\n    \n    diag1_sum, diag2_sum = sum_diagonals(matrix)\n    unique_sums.add(diag1_sum)\n    unique_sums.add(diag2_sum)\n    \n    return len(unique_sums) == 1"], "session_history": {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Define a function to calculate the sum of elements in a given row.\",\n        \"steps\": [\n          \"Create a function that takes a matrix and a row index as input.\",\n          \"Iterate through the elements of the specified row.\",\n          \"Sum the elements and return the result.\"\n        ]\n      },\n      {\n        \"description\": \"Define a function to calculate the sum of elements in a given column.\",\n        \"steps\": [\n          \"Create a function that takes a matrix and a column index as input.\",\n          \"Iterate through the elements of the specified column.\",\n          \"Sum the elements and return the result.\"\n        ]\n      },\n      {\n        \"description\": \"Define a function to calculate the sum of elements in both main diagonals.\",\n        \"steps\": [\n          \"Create a function that takes a matrix as input.\",\n          \"Calculate the sum of elements in the main diagonal (from top-left to bottom-right).\",\n          \"Calculate the sum of elements in the secondary diagonal (from top-right to bottom-left).\",\n          \"Return both sums.\"\n        ]\n      },\n      {\n        \"description\": \"Define the main function to check if the matrix is a magic square.\",\n        \"steps\": [\n          \"Create a function that takes a matrix as input.\",\n          \"Initialize a set to store the unique sums of rows, columns, and diagonals.\",\n          \"Iterate through each row to calculate and add the sum to the set.\",\n          \"Iterate through each column to calculate and add the sum to the set.\",\n          \"Use the functions for row and column sums to add their results to the set.\",\n          \"Use the function for diagonal sums to add the results to the set.\",\n          \"Check if the set contains only one unique value.\",\n          \"Return True if the set size is 1, otherwise return False.\"\n        ]\n      }\n    ],\n    \"high_level_plan\": [\n      \"Define a function to calculate the sum of elements in a given row.\",\n      \"Define a function to calculate the sum of elements in a given column.\",\n      \"Define a function to calculate the sum of elements in both main diagonals.\",\n      \"Define the main", "Round_0": {"code": "def sum_row(matrix, row_index):\n    return sum(matrix[row_index])\n\ndef sum_column(matrix, column_index):\n    return sum(row[column_index] for row in matrix)\n\ndef sum_diagonals(matrix):\n    diag1_sum = sum(matrix[i][i] for i in range(len(matrix)))\n    diag2_sum = sum(matrix[i][len(matrix) - 1 - i] for i in range(len(matrix)))\n    return diag1_sum, diag2_sum\n\ndef magic_square_test(matrix):\n    if not matrix or not matrix[0]:\n        return False\n    \n    n = len(matrix)\n    unique_sums = set()\n    \n    for i in range(n):\n        unique_sums.add(sum_row(matrix, i))\n        unique_sums.add(sum_column(matrix, i))\n    \n    diag1_sum, diag2_sum = sum_diagonals(matrix)\n    unique_sums.add(diag1_sum)\n    unique_sums.add(diag2_sum)\n    \n    return len(unique_sums) == 1", "report": "The compilation output of the preceding code is: Code Test Passed."}}, "session_historys": [{"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Define a function to calculate the sum of elements in a given row of the matrix.\"\n      },\n      {\n        \"subproblem\": \"Define a function to calculate the sum of elements in a given column of the matrix.\"\n      },\n      {\n        \"subproblem\": \"Define a function to calculate the sum of elements in the main diagonal of the matrix.\"\n      },\n      {\n        \"subproblem\": \"Define a function to calculate the sum of elements in the secondary diagonal of the matrix.\"\n      },\n      {\n        \"subproblem\": \"Check if all rows, columns, and diagonals have the same sum.\"\n      }\n    ],\n    \"high_level_plan\": [\n      {\n        \"step\": \"Calculate the sum of each row and store them in a list.\"\n      },\n      {\n        \"step\": \"Calculate the sum of each column and add them to the list of row sums.\"\n      },\n      {\n        \"step\": \"Calculate the sum of the main diagonal and add it to the list.\"\n      },\n      {\n        \"step\": \"Calculate the sum of the secondary diagonal and add it to the list.\"\n      },\n      {\n        \"step\": \"Check if all sums in the list are the same.\"\n      },\n      {\n        \"step\": \"Return True if all sums are the same, otherwise return False.\"\n      }\n    ]\n  }\n}\n```", "Round_0": {"code": "def sum_row(matrix, row):\n    return sum(matrix[row])\n\ndef sum_column(matrix, col):\n    return sum(row[col] for row in matrix)\n\ndef sum_main_diagonal(matrix):\n    return sum(matrix[i][i] for i in range(len(matrix)))\n\ndef sum_secondary_diagonal(matrix):\n    n = len(matrix)\n    return sum(matrix[i][n - 1 - i] for i in range(n))\n\ndef magic_square_test(matrix):\n    if not matrix or not matrix[0]:\n        return False\n    \n    n = len(matrix)\n    if any(len(row) != n for row in matrix):\n        return False\n    \n    row_sums = [sum_row(matrix, row) for row in range(n)]\n    col_sums = [sum_column(matrix, col) for col in range(n)]\n    main_diag_sum = sum_main_diagonal(matrix)\n    secondary_diag_sum = sum_secondary_diagonal(matrix)\n    \n    all_sums = row_sums + col_sums + [main_diag_sum, secondary_diag_sum]\n    \n    return all(s == main_diag_sum for s in all_sums)", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Define the function to check if a matrix is square.\",\n        \"details\": \"Ensure the matrix has the same number of rows and columns.\"\n      },\n      {\n        \"subproblem\": \"Calculate the sum of each row in the matrix.\",\n        \"details\": \"Iterate through each row and sum its elements.\"\n      },\n      {\n        \"subproblem\": \"Calculate the sum of each column in the matrix.\",\n        \"details\": \"Iterate through each column and sum its elements.\"\n      },\n      {\n        \"subproblem\": \"Calculate the sum of the main diagonal (from top-left to bottom-right).\",\n        \"details\": \"Sum the elements where the row index equals the column index.\"\n      },\n      {\n        \"subproblem\": \"Calculate the sum of the secondary diagonal (from top-right to bottom-left).\",\n        \"details\": \"Sum the elements where the row index plus the column index equals the length of the matrix minus one.\"\n      },\n      {\n        \"subproblem\": \"Compare all the sums to determine if they are equal.\",\n        \"details\": \"Check if the sum of rows, columns, and both diagonals are the same.\"\n      }\n    ],\n    \"high_level_plan\": [\n      {\n        \"step\": \"Verify if the matrix is square.\",\n        \"substeps\": [\n          \"Check if the number of rows is equal to the number of columns.\"\n        ]\n      },\n      {\n        \"step\": \"Calculate the sums of rows.\",\n        \"substeps\": [\n          \"Iterate through each row and sum its elements.\",\n          \"Store these sums in a list.\"\n        ]\n      },\n      {\n        \"step\": \"Calculate the sums of columns.\",\n        \"substeps\": [\n          \"Iterate through each column and sum its elements.\",\n          \"Store these sums in a list.\"\n        ]\n      },\n      {\n        \"step\": \"Calculate the sum of the main diagonal.\",\n        \"substeps\": [\n          \"Sum the elements where the row index equals the column index.\",\n          \"Store this sum.\"\n        ]\n      },\n      {\n        \"step\": \"", "Round_0": {"code": "def magic_square_test(matrix):\n    n = len(matrix)\n    \n    # Check if the matrix is square\n    for row in matrix:\n        if len(row) != n:\n            return False\n    \n    # Calculate the sum of each row\n    row_sums = [sum(row) for row in matrix]\n    \n    # Calculate the sum of each column\n    col_sums = [sum(matrix[i][j] for i in range(n)) for j in range(n)]\n    \n    # Calculate the sum of the main diagonal\n    main_diagonal_sum = sum(matrix[i][i] for i in range(n))\n    \n    # Calculate the sum of the secondary diagonal\n    secondary_diagonal_sum = sum(matrix[i][n - 1 - i] for i in range(n))\n    \n    # Check if all sums are equal\n    target_sum = row_sums[0]\n    if all(sum_ == target_sum for sum_ in row_sums) and \\\n       all(sum_ == target_sum for sum_ in col_sums) and \\\n       main_diagonal_sum == target_sum and \\\n       secondary_diagonal_sum == target_sum:\n        return True\n    else:\n        return False", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Define the function to check if a matrix is square.\",\n        \"details\": \"Ensure the matrix has an equal number of rows and columns.\"\n      },\n      {\n        \"subproblem\": \"Calculate the sum of each row in the matrix.\",\n        \"details\": \"Iterate through each row and sum the elements.\"\n      },\n      {\n        \"subproblem\": \"Calculate the sum of each column in the matrix.\",\n        \"details\": \"Iterate through each column and sum the elements.\"\n      },\n      {\n        \"subproblem\": \"Calculate the sum of the main diagonal (from top-left to bottom-right).\",\n        \"details\": \"Sum the elements where the row index equals the column index.\"\n      },\n      {\n        \"subproblem\": \"Calculate the sum of the secondary diagonal (from top-right to bottom-left).\",\n        \"details\": \"Sum the elements where the row index plus the column index equals the length of the matrix minus one.\"\n      },\n      {\n        \"subproblem\": \"Compare the sums of rows, columns, and diagonals to determine if they are all equal.\",\n        \"details\": \"Check if all calculated sums are identical.\"\n      }\n    ],\n    \"high_level_plan\": [\n      {\n        \"step\": \"Verify if the matrix is square.\",\n        \"substeps\": [\n          \"Check if the number of rows is equal to the number of columns.\"\n        ]\n      },\n      {\n        \"step\": \"Calculate the sums of rows.\",\n        \"substeps\": [\n          \"Iterate through each row and sum its elements.\",\n          \"Store these sums in a list.\"\n        ]\n      },\n      {\n        \"step\": \"Calculate the sums of columns.\",\n        \"substeps\": [\n          \"Iterate through each column and sum its elements.\",\n          \"Store these sums in a list.\"\n        ]\n      },\n      {\n        \"step\": \"Calculate the sum of the main diagonal.\",\n        \"substeps\": [\n          \"Sum the elements where the row index equals the column index.\"\n        ]\n      },\n      {\n        \"step\": \"Calculate the sum of the secondary diagonal.\",", "Round_0": {"code": "def magic_square_test(matrix):\n    n = len(matrix)\n    \n    # Check if the matrix is square\n    for row in matrix:\n        if len(row) != n:\n            return False\n    \n    # Calculate the sum of each row\n    row_sums = [sum(row) for row in matrix]\n    \n    # Calculate the sum of each column\n    col_sums = [sum(matrix[i][j] for i in range(n)) for j in range(n)]\n    \n    # Calculate the sum of the main diagonal\n    main_diagonal_sum = sum(matrix[i][i] for i in range(n))\n    \n    # Calculate the sum of the secondary diagonal\n    secondary_diagonal_sum = sum(matrix[i][n-i-1] for i in range(n))\n    \n    # Check if all sums are equal\n    target_sum = row_sums[0]\n    if all(sum_ == target_sum for sum_ in row_sums) and \\\n       all(sum_ == target_sum for sum_ in col_sums) and \\\n       main_diagonal_sum == target_sum and \\\n       secondary_diagonal_sum == target_sum:\n        return True\n    else:\n        return False", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Define a function to calculate the sum of elements in a row.\",\n        \"steps\": [\n          \"Iterate through each element in the row.\",\n          \"Sum all the elements in the row.\"\n        ]\n      },\n      {\n        \"description\": \"Define a function to calculate the sum of elements in a column.\",\n        \"steps\": [\n          \"Iterate through each row and each column.\",\n          \"Sum the elements at the same column index across all rows.\"\n        ]\n      },\n      {\n        \"description\": \"Define a function to calculate the sum of elements in both diagonals.\",\n        \"steps\": [\n          \"For the primary diagonal (top-left to bottom-right), sum the elements where the row index equals the column index.\",\n          \"For the secondary diagonal (top-right to bottom-left), sum the elements where the row index plus the column index equals the length of the matrix minus one.\"\n        ]\n      },\n      {\n        \"description\": \"Define a function to check if all sums are equal.\",\n        \"steps\": [\n          \"Compare the sum of each row with the sum of each column.\",\n          \"Compare the sum of each row with the sum of both diagonals.\",\n          \"Ensure all sums are equal to determine if the matrix is a magic square.\"\n        ]\n      }\n    ],\n    \"high_level_steps\": [\n      \"Define a function to calculate the sum of elements in a row.\",\n      \"Define a function to calculate the sum of elements in a column.\",\n      \"Define a function to calculate the sum of elements in both diagonals.\",\n      \"Define a function to check if all sums are equal.\",\n      \"Apply the functions to the given matrix to determine if it is a magic square.\"\n    ]\n  }\n}\n```", "Round_0": {"code": "def sum_row(matrix, row):\n    return sum(matrix[row])\n\ndef sum_column(matrix, col):\n    return sum(row[col] for row in matrix)\n\ndef sum_diagonal(matrix, direction):\n    if direction == 'primary':\n        return sum(matrix[i][i] for i in range(len(matrix)))\n    elif direction == 'secondary':\n        n = len(matrix)\n        return sum(matrix[i][n - 1 - i] for i in range(len(matrix)))\n\ndef is_magic_square(matrix):\n    n = len(matrix)\n    target_sum = sum_row(matrix, 0)\n    \n    # Check sums of all rows\n    for i in range(1, n):\n        if sum_row(matrix, i) != target_sum:\n            return False\n    \n    # Check sums of all columns\n    for i in range(n):\n        if sum_column(matrix, i) != target_sum:\n            return False\n    \n    # Check sums of both diagonals\n    if sum_diagonal(matrix, 'primary') != target_sum or sum_diagonal(matrix, 'secondary') != target_sum:\n        return False\n    \n    return True", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Define a function to calculate the sum of elements in a given row.\",\n        \"steps\": [\n          \"Create a function that takes a matrix and a row index as input.\",\n          \"Iterate through the elements of the specified row.\",\n          \"Sum the elements and return the result.\"\n        ]\n      },\n      {\n        \"description\": \"Define a function to calculate the sum of elements in a given column.\",\n        \"steps\": [\n          \"Create a function that takes a matrix and a column index as input.\",\n          \"Iterate through the elements of the specified column.\",\n          \"Sum the elements and return the result.\"\n        ]\n      },\n      {\n        \"description\": \"Define a function to calculate the sum of elements in both diagonals of the matrix.\",\n        \"steps\": [\n          \"Create a function that takes a matrix as input.\",\n          \"Calculate the sum of the primary diagonal (from top-left to bottom-right).\",\n          \"Calculate the sum of the secondary diagonal (from top-right to bottom-left).\",\n          \"Return both sums.\"\n        ]\n      },\n      {\n        \"description\": \"Define the main function to check if the matrix is a magic square.\",\n        \"steps\": [\n          \"Create a function that takes a matrix as input.\",\n          \"Initialize a set to store the unique sums of rows, columns, and diagonals.\",\n          \"Iterate through each row to calculate and add the sum to the set.\",\n          \"Iterate through each column to calculate and add the sum to the set.\",\n          \"Use the diagonal sum functions to calculate and add the sums to the set.\",\n          \"Check if the set contains only one unique value.\",\n          \"Return True if the set size is 1, otherwise return False.\"\n        ]\n      }\n    ],\n    \"high_level_plan\": [\n      \"Define a function to calculate the sum of elements in a given row.\",\n      \"Define a function to calculate the sum of elements in a given column.\",\n      \"Define a function to calculate the sum of elements in both diagonals of the matrix.\",\n      \"Define the main function to check if the matrix is a magic square.\",\n      \"Use the row and", "Round_0": {"code": "def sum_row(matrix, row_index):\n    return sum(matrix[row_index])\n\ndef sum_column(matrix, column_index):\n    return sum(row[column_index] for row in matrix)\n\ndef sum_diagonals(matrix):\n    primary_diagonal_sum = sum(matrix[i][i] for i in range(len(matrix)))\n    secondary_diagonal_sum = sum(matrix[i][len(matrix) - 1 - i] for i in range(len(matrix)))\n    return primary_diagonal_sum, secondary_diagonal_sum\n\ndef magic_square_test(matrix):\n    if not matrix or not matrix[0]:\n        return False\n    \n    n = len(matrix)\n    unique_sums = set()\n    \n    for i in range(n):\n        unique_sums.add(sum_row(matrix, i))\n        unique_sums.add(sum_column(matrix, i))\n    \n    primary_diagonal_sum, secondary_diagonal_sum = sum_diagonals(matrix)\n    unique_sums.add(primary_diagonal_sum)\n    unique_sums.add(secondary_diagonal_sum)\n    \n    return len(unique_sums) == 1", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Define a function to calculate the sum of elements in a given row.\",\n        \"steps\": [\n          \"Create a function that takes a matrix and a row index as input.\",\n          \"Iterate through the elements of the specified row.\",\n          \"Sum the elements and return the result.\"\n        ]\n      },\n      {\n        \"description\": \"Define a function to calculate the sum of elements in a given column.\",\n        \"steps\": [\n          \"Create a function that takes a matrix and a column index as input.\",\n          \"Iterate through the elements of the specified column.\",\n          \"Sum the elements and return the result.\"\n        ]\n      },\n      {\n        \"description\": \"Define a function to calculate the sum of elements in both diagonals of the matrix.\",\n        \"steps\": [\n          \"Create a function that takes a matrix as input.\",\n          \"Calculate the sum of the main diagonal (from top-left to bottom-right).\",\n          \"Calculate the sum of the secondary diagonal (from top-right to bottom-left).\",\n          \"Return both sums as a list or tuple.\"\n        ]\n      },\n      {\n        \"description\": \"Define the main function to check if the matrix is a magic square.\",\n        \"steps\": [\n          \"Create a function that takes a matrix as input.\",\n          \"Initialize a variable to store the sum of the first row.\",\n          \"Check if all rows have the same sum as the first row.\",\n          \"Check if all columns have the same sum as the first row.\",\n          \"Check if both diagonals have the same sum as the first row.\",\n          \"Return True if all sums are equal, otherwise return False.\"\n        ]\n      }\n    ],\n    \"high_level_plan\": [\n      \"Define a function to calculate the sum of elements in a given row.\",\n      \"Define a function to calculate the sum of elements in a given column.\",\n      \"Define a function to calculate the sum of elements in both diagonals of the matrix.\",\n      \"Define the main function to check if the matrix is a magic square.\",\n      \"Use the defined functions to check if the given matrix is a magic square.\"\n    ]\n  }\n}\n", "Round_0": {"code": "def sum_row(matrix, row_index):\n    return sum(matrix[row_index])\n\ndef sum_column(matrix, column_index):\n    return sum(row[column_index] for row in matrix)\n\ndef sum_diagonals(matrix):\n    diag1_sum = sum(matrix[i][i] for i in range(len(matrix)))\n    diag2_sum = sum(matrix[i][len(matrix) - 1 - i] for i in range(len(matrix)))\n    return diag1_sum, diag2_sum\n\ndef is_magic_square(matrix):\n    n = len(matrix)\n    first_row_sum = sum_row(matrix, 0)\n    \n    # Check rows\n    for i in range(1, n):\n        if sum_row(matrix, i) != first_row_sum:\n            return False\n    \n    # Check columns\n    for i in range(n):\n        if sum_column(matrix, i) != first_row_sum:\n            return False\n    \n    # Check diagonals\n    diag1_sum, diag2_sum = sum_diagonals(matrix)\n    if diag1_sum != first_row_sum or diag2_sum != first_row_sum:\n        return False\n    \n    return True", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Define a function to calculate the sum of elements in a given row of the matrix.\"\n      },\n      {\n        \"subproblem\": \"Define a function to calculate the sum of elements in a given column of the matrix.\"\n      },\n      {\n        \"subproblem\": \"Define a function to calculate the sum of elements in the main diagonal of the matrix.\"\n      },\n      {\n        \"subproblem\": \"Define a function to calculate the sum of elements in the secondary diagonal of the matrix.\"\n      },\n      {\n        \"subproblem\": \"Combine the sums of rows, columns, and diagonals to check if they are all equal.\"\n      }\n    ],\n    \"high_level_plan\": [\n      {\n        \"step\": \"Initialize a variable to store the sum of the first row.\"\n      },\n      {\n        \"step\": \"Iterate through each row of the matrix to check if their sums are equal to the initialized variable.\"\n      },\n      {\n        \"step\": \"Iterate through each column of the matrix to check if their sums are equal to the initialized variable.\"\n      },\n      {\n        \"step\": \"Calculate the sum of the main diagonal and check if it is equal to the initialized variable.\"\n      },\n      {\n        \"step\": \"Calculate the sum of the secondary diagonal and check if it is equal to the initialized variable.\"\n      },\n      {\n        \"step\": \"Return True if all sums are equal, otherwise return False.\"\n      }\n    ]\n  }\n}\n```", "Round_0": {"code": "def sum_row(matrix, row):\n    return sum(matrix[row])\n\ndef sum_column(matrix, col):\n    return sum(row[col] for row in matrix)\n\ndef sum_main_diagonal(matrix):\n    return sum(matrix[i][i] for i in range(len(matrix)))\n\ndef sum_secondary_diagonal(matrix):\n    n = len(matrix)\n    return sum(matrix[i][n - 1 - i] for i in range(n))\n\ndef magic_square_test(matrix):\n    if not matrix or not matrix[0]:\n        return False\n\n    n = len(matrix)\n    if any(len(row) != n for row in matrix):\n        return False\n\n    target_sum = sum_row(matrix, 0)\n\n    for i in range(1, n):\n        if sum_row(matrix, i) != target_sum:\n            return False\n\n    for i in range(n):\n        if sum_column(matrix, i) != target_sum:\n            return False\n\n    if sum_main_diagonal(matrix) != target_sum:\n        return False\n\n    if sum_secondary_diagonal(matrix) != target_sum:\n        return False\n\n    return True", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Define a function to calculate the sum of elements in a row.\",\n        \"steps\": [\n          \"Iterate through each element in the row.\",\n          \"Sum all the elements in the row.\"\n        ]\n      },\n      {\n        \"description\": \"Define a function to calculate the sum of elements in a column.\",\n        \"steps\": [\n          \"Iterate through each row and each column.\",\n          \"Sum the elements at the same column index across all rows.\"\n        ]\n      },\n      {\n        \"description\": \"Define a function to calculate the sum of elements in both diagonals.\",\n        \"steps\": [\n          \"For the primary diagonal (top-left to bottom-right), sum the elements where the row index equals the column index.\",\n          \"For the secondary diagonal (top-right to bottom-left), sum the elements where the row index plus the column index equals the length of the matrix minus one.\"\n        ]\n      },\n      {\n        \"description\": \"Define a function to check if all sums are equal.\",\n        \"steps\": [\n          \"Compare the sum of each row with the sum of each column.\",\n          \"Compare the sum of each row with the sum of both diagonals.\",\n          \"Ensure all sums are equal to determine if the matrix is a magic square.\"\n        ]\n      }\n    ],\n    \"high_level_steps\": [\n      \"Define a function to calculate the sum of elements in a row.\",\n      \"Define a function to calculate the sum of elements in a column.\",\n      \"Define a function to calculate the sum of elements in both diagonals.\",\n      \"Define a function to check if all sums are equal.\",\n      \"Apply the functions to the given matrix to determine if it is a magic square.\"\n    ]\n  }\n}\n```", "Round_0": {"code": "def sum_row(matrix, row):\n    return sum(matrix[row])\n\ndef sum_column(matrix, col):\n    return sum(row[col] for row in matrix)\n\ndef sum_diagonal(matrix, direction):\n    if direction == 'primary':\n        return sum(matrix[i][i] for i in range(len(matrix)))\n    elif direction == 'secondary':\n        n = len(matrix)\n        return sum(matrix[i][n - 1 - i] for i in range(len(matrix)))\n\ndef is_magic_square(matrix):\n    n = len(matrix)\n    target_sum = sum_row(matrix, 0)\n    \n    # Check sums of all rows\n    for i in range(1, n):\n        if sum_row(matrix, i) != target_sum:\n            return False\n    \n    # Check sums of all columns\n    for i in range(n):\n        if sum_column(matrix, i) != target_sum:\n            return False\n    \n    # Check sums of both diagonals\n    if sum_diagonal(matrix, 'primary') != target_sum or sum_diagonal(matrix, 'secondary') != target_sum:\n        return False\n    \n    return True", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Define a function to calculate the sum of elements in a given row of the matrix.\"\n      },\n      {\n        \"subproblem\": \"Define a function to calculate the sum of elements in a given column of the matrix.\"\n      },\n      {\n        \"subproblem\": \"Define a function to calculate the sum of elements in the main diagonal of the matrix.\"\n      },\n      {\n        \"subproblem\": \"Define a function to calculate the sum of elements in the secondary diagonal of the matrix.\"\n      },\n      {\n        \"subproblem\": \"Check if all rows, columns, and diagonals have the same sum.\"\n      }\n    ],\n    \"high_level_plan\": [\n      {\n        \"step\": \"Calculate the sum of each row and store them in a list.\"\n      },\n      {\n        \"step\": \"Calculate the sum of each column and add them to the list of row sums.\"\n      },\n      {\n        \"step\": \"Calculate the sum of the main diagonal and add it to the list.\"\n      },\n      {\n        \"step\": \"Calculate the sum of the secondary diagonal and add it to the list.\"\n      },\n      {\n        \"step\": \"Check if all sums in the list are the same.\"\n      },\n      {\n        \"step\": \"Return True if all sums are the same, otherwise return False.\"\n      }\n    ]\n  }\n}\n```", "Round_0": {"code": "def sum_row(matrix, row):\n    return sum(matrix[row])\n\ndef sum_column(matrix, col):\n    return sum(row[col] for row in matrix)\n\ndef sum_main_diagonal(matrix):\n    return sum(matrix[i][i] for i in range(len(matrix)))\n\ndef sum_secondary_diagonal(matrix):\n    n = len(matrix)\n    return sum(matrix[i][n - 1 - i] for i in range(n))\n\ndef magic_square_test(matrix):\n    if not matrix or not matrix[0]:\n        return False\n    \n    n = len(matrix)\n    if any(len(row) != n for row in matrix):\n        return False\n    \n    sums = []\n    \n    for row in range(n):\n        sums.append(sum_row(matrix, row))\n    \n    for col in range(n):\n        sums.append(sum_column(matrix, col))\n    \n    sums.append(sum_main_diagonal(matrix))\n    sums.append(sum_secondary_diagonal(matrix))\n    \n    target_sum = sums[0]\n    return all(sum_ == target_sum for sum_ in sums)", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Define a function to calculate the sum of elements in a given row.\",\n        \"steps\": [\n          \"Create a function that takes a matrix and a row index as input.\",\n          \"Iterate through the elements of the specified row.\",\n          \"Sum the elements and return the result.\"\n        ]\n      },\n      {\n        \"description\": \"Define a function to calculate the sum of elements in a given column.\",\n        \"steps\": [\n          \"Create a function that takes a matrix and a column index as input.\",\n          \"Iterate through the elements of the specified column.\",\n          \"Sum the elements and return the result.\"\n        ]\n      },\n      {\n        \"description\": \"Define a function to calculate the sum of elements in both main diagonals.\",\n        \"steps\": [\n          \"Create a function that takes a matrix as input.\",\n          \"Calculate the sum of elements in the main diagonal (from top-left to bottom-right).\",\n          \"Calculate the sum of elements in the secondary diagonal (from top-right to bottom-left).\",\n          \"Return both sums.\"\n        ]\n      },\n      {\n        \"description\": \"Define the main function to check if the matrix is a magic square.\",\n        \"steps\": [\n          \"Create a function that takes a matrix as input.\",\n          \"Initialize a set to store the unique sums of rows, columns, and diagonals.\",\n          \"Iterate through each row to calculate and add the sum to the set.\",\n          \"Iterate through each column to calculate and add the sum to the set.\",\n          \"Use the functions for row and column sums to add their results to the set.\",\n          \"Use the function for diagonal sums to add the results to the set.\",\n          \"Check if the set contains only one unique value.\",\n          \"Return True if the set size is 1, otherwise return False.\"\n        ]\n      }\n    ],\n    \"high_level_plan\": [\n      \"Define a function to calculate the sum of elements in a given row.\",\n      \"Define a function to calculate the sum of elements in a given column.\",\n      \"Define a function to calculate the sum of elements in both main diagonals.\",\n      \"Define the main", "Round_0": {"code": "def sum_row(matrix, row_index):\n    return sum(matrix[row_index])\n\ndef sum_column(matrix, column_index):\n    return sum(row[column_index] for row in matrix)\n\ndef sum_diagonals(matrix):\n    diag1_sum = sum(matrix[i][i] for i in range(len(matrix)))\n    diag2_sum = sum(matrix[i][len(matrix) - 1 - i] for i in range(len(matrix)))\n    return diag1_sum, diag2_sum\n\ndef magic_square_test(matrix):\n    if not matrix or not matrix[0]:\n        return False\n    \n    n = len(matrix)\n    unique_sums = set()\n    \n    for i in range(n):\n        unique_sums.add(sum_row(matrix, i))\n        unique_sums.add(sum_column(matrix, i))\n    \n    diag1_sum, diag2_sum = sum_diagonals(matrix)\n    unique_sums.add(diag1_sum)\n    unique_sums.add(diag2_sum)\n    \n    return len(unique_sums) == 1", "report": "The compilation output of the preceding code is: Code Test Passed."}}], "test": ["def check(magic_square_test):\n\tassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True", "def check(magic_square_test):\n\tassert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True", "def check(magic_square_test):\n\tassert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False", "def check(magic_square_test):\n\tassert magic_square_test([[8, 9, 3, 14], [7, 10, 9, 11], [16, 6, 13, 6], [9, 11, 17, 2]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[9, 10, 6, 17], [5, 8, 4, 11], [13, 1, 5, 9], [11, 10, 17, 8]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[2, 8, 3, 9], [3, 16, 5, 7], [12, 7, 5, 2], [12, 11, 12, 6]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[12, 12, 6, 10], [7, 10, 4, 9], [20, 8, 9, 8], [14, 8, 16, 3]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[12, 10, 1, 13], [4, 12, 3, 6], [18, 7, 5, 1], [4, 2, 15, 7]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[12, 17, 3, 9], [7, 9, 11, 8], [19, 1, 11, 1], [10, 9, 15, 7]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[11, 7, 2, 16], [7, 18, 4, 12], [16, 7, 13, 6], [10, 1, 18, 6]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[8, 7, 5, 15], [7, 13, 6, 8], [20, 2, 11, 9], [13, 6, 15, 4]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[10, 8, 3, 10], [1, 9, 7, 13], [16, 7, 14, 4], [7, 10, 18, 1]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[2, 17, 1, 10], [4, 15, 5, 11], [15, 6, 5, 7], [5, 1, 14, 8]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[6, 13, 5, 14], [5, 15, 11, 14], [12, 4, 15, 2], [13, 9, 13, 5]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[12, 14, 5, 9], [1, 11, 9, 14], [13, 5, 14, 8], [11, 7, 13, 4]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[2, 9, 2, 16], [7, 15, 4, 11], [21, 2, 13, 4], [10, 9, 20, 9]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[7, 11, 2, 16], [6, 10, 9, 8], [15, 4, 12, 6], [14, 10, 18, 9]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[9, 8, 3, 12], [6, 14, 5, 7], [13, 3, 6, 10], [12, 11, 15, 6]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 10, 4, 17], [1, 14, 3, 12], [17, 6, 13, 1], [4, 8, 12, 8]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[9, 7, 6, 9], [6, 10, 8, 10], [19, 3, 5, 1], [8, 7, 18, 5]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[5, 13, 1, 12], [6, 16, 7, 10], [18, 4, 8, 5], [8, 5, 16, 4]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[8, 12, 3, 13], [4, 13, 13, 8], [17, 7, 15, 9], [14, 5, 14, 7]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[10, 9, 2, 18], [7, 9, 13, 13], [18, 7, 9, 4], [5, 9, 14, 8]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[5, 8, 5, 16], [6, 14, 9, 15], [20, 2, 13, 5], [7, 4, 18, 1]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[7, 14, 6, 9], [7, 14, 13, 8], [11, 6, 9, 5], [10, 3, 10, 6]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[7, 15, 5, 9], [2, 17, 7, 8], [21, 8, 8, 1], [10, 11, 15, 8]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[9, 14, 5, 19], [4, 15, 11, 16], [19, 6, 13, 7], [9, 7, 10, 1]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[12, 11, 6, 15], [6, 16, 5, 13], [19, 8, 11, 1], [13, 10, 11, 2]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[10, 11, 5, 11], [3, 18, 10, 15], [18, 6, 5, 3], [12, 5, 18, 3]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[7, 11, 4, 17], [2, 15, 4, 11], [17, 5, 5, 3], [8, 2, 20, 7]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[6, 16, 4, 15], [2, 15, 11, 8], [20, 6, 14, 3], [14, 3, 20, 7]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[8, 11, 3, 11], [2, 12, 9, 7], [21, 5, 9, 10], [14, 7, 11, 1]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[12, 17, 4, 14], [6, 9, 4, 16], [15, 5, 14, 5], [13, 3, 10, 7]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[11, 14, 2, 17], [5, 17, 4, 10], [14, 1, 8, 6], [4, 7, 14, 2]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[7, 16, 2, 10], [2, 17, 6, 13], [12, 5, 10, 5], [7, 1, 15, 1]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[12, 7, 4, 14], [7, 18, 5, 9], [17, 4, 12, 1], [10, 7, 17, 4]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[2, 2, 4], [5, 9, 5], [8, 2, 6]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[7, 10, 8], [14, 9, 6], [1, 1, 13]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[7, 2, 3], [4, 1, 1], [7, 2, 9]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 10, 11], [7, 5, 3], [5, 1, 4]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[3, 7, 1], [12, 5, 3], [1, 7, 6]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[6, 11, 4], [8, 1, 2], [9, 8, 11]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 3, 8], [4, 5, 6], [4, 4, 10]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[5, 2, 11], [10, 4, 1], [3, 6, 4]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[3, 7, 9], [5, 5, 6], [6, 2, 7]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[2, 3, 7], [5, 1, 5], [6, 3, 8]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[1, 11, 3], [11, 10, 3], [5, 8, 3]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 9, 4], [8, 8, 4], [2, 8, 10]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[2, 11, 3], [9, 8, 3], [9, 5, 11]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[5, 8, 3], [7, 10, 4], [3, 2, 11]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[3, 9, 11], [13, 1, 3], [6, 3, 9]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[6, 4, 2], [13, 2, 2], [6, 1, 12]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[1, 2, 7], [13, 10, 3], [3, 6, 7]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[7, 2, 9], [10, 8, 5], [2, 8, 13]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 8, 4], [14, 10, 3], [2, 1, 9]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 10, 10], [5, 6, 5], [1, 2, 11]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[7, 3, 2], [6, 5, 4], [6, 1, 9]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[6, 3, 2], [11, 2, 6], [2, 7, 11]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 8, 2], [6, 8, 5], [6, 6, 4]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[1, 7, 4], [9, 2, 3], [5, 8, 9]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[1, 8, 7], [4, 3, 4], [3, 1, 6]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[2, 6, 5], [5, 3, 3], [5, 2, 4]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[6, 5, 4], [6, 7, 1], [7, 1, 5]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[1, 7, 2], [10, 4, 6], [6, 4, 6]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[1, 12, 5], [7, 3, 1], [7, 3, 4]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[1, 10, 1], [13, 4, 6], [4, 7, 12]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[1, 7, 9], [7, 2, 2], [7, 5, 12]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[1, 10, 3], [5, 2, 2], [7, 6, 4]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[7, 5, 7], [6, 6, 2], [2, 1, 13]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[5, 9, 3], [8, 8, 2], [7, 6, 3]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 2, 10], [10, 6, 4], [3, 4, 3]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 6, 10], [11, 4, 6], [3, 6, 2]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[7, 11, 5], [5, 6, 2], [8, 4, 10]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[7, 5, 4], [12, 10, 1], [1, 3, 6]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[6, 7, 11], [7, 6, 5], [3, 8, 4]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[6, 10, 11], [10, 5, 4], [2, 4, 4]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[2, 5, 3], [4, 6, 1], [7, 1, 10]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 7, 4], [4, 8, 4], [7, 3, 2]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[5, 2, 11], [12, 7, 4], [7, 2, 6]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[7, 7, 6], [7, 2, 2], [6, 7, 11]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 8, 8], [7, 8, 3], [8, 3, 6]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[6, 6, 2], [13, 9, 4], [6, 4, 4]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[6, 11, 6], [8, 8, 4], [8, 7, 2]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[5, 11, 2], [14, 5, 2], [7, 5, 5]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[3, 12, 11], [13, 9, 2], [2, 8, 12]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[5, 7, 1], [9, 7, 6], [4, 2, 2]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[2, 3, 9], [14, 8, 5], [6, 1, 7]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[3, 6, 7], [14, 5, 6], [8, 8, 5]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[3, 8, 2], [9, 7, 3], [4, 8, 9]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[7, 2, 6], [4, 3, 2], [9, 8, 7]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 10, 9], [11, 9, 3], [1, 3, 2]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 5, 7], [5, 6, 2], [8, 2, 5]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[6, 8, 5], [10, 5, 3], [7, 6, 7]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 7, 11], [13, 8, 6], [8, 6, 3]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 5, 3], [11, 7, 5], [9, 1, 7]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[1, 7, 1], [7, 9, 1], [2, 1, 11]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[3, 7, 9], [13, 4, 3], [1, 3, 11]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[5, 4, 9], [12, 4, 1], [4, 4, 9]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[1, 4, 7], [9, 1, 3], [1, 8, 10]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[2, 11, 2], [11, 4, 4], [3, 5, 2]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 2, 1], [14, 1, 3], [3, 4, 9]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[7, 4, 8], [8, 2, 3], [1, 7, 11]]) == False"], "scores": [1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0], "pass_results": [true, true, true, false, true, false, true, false, true, true], "pass_test_cases_num": [102, 102, 102, 0, 102, 0, 102, 0, 102, 102], "passed": true, "pass": true, "pass_num": 10, "round": 737, "mutate_method": "expand_one2two", "save_node": true, "parent_index": 50}
