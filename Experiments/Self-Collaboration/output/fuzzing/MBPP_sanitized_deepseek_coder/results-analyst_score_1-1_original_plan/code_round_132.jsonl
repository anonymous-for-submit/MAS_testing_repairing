{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 397, "prompt": "Write a function to find the median of three numbers.", "code": "def median_numbers(a,b,c):\n if a > b:\n    if a < c:\n        median = a\n    elif b > c:\n        median = b\n    else:\n        median = c\n else:\n    if a > c:\n        median = a\n    elif b < c:\n        median = b\n    else:\n        median = c\n return median", "test_imports": [], "test_list": ["assert median_numbers(25,55,65)==55.0", "assert median_numbers(20,10,30)==20.0", "assert median_numbers(15,45,75)==45.0", "assert median_numbers(22, 54, 68) == 54", "assert median_numbers(22, 57, 66) == 57", "assert median_numbers(22, 54, 61) == 54", "assert median_numbers(30, 53, 63) == 53", "assert median_numbers(22, 55, 61) == 55", "assert median_numbers(25, 60, 61) == 60", "assert median_numbers(22, 56, 68) == 56", "assert median_numbers(29, 53, 70) == 53", "assert median_numbers(23, 53, 66) == 53", "assert median_numbers(29, 58, 67) == 58", "assert median_numbers(27, 52, 64) == 52", "assert median_numbers(29, 60, 61) == 60", "assert median_numbers(25, 57, 61) == 57", "assert median_numbers(20, 50, 66) == 50", "assert median_numbers(21, 51, 65) == 51", "assert median_numbers(29, 51, 67) == 51", "assert median_numbers(26, 55, 69) == 55", "assert median_numbers(24, 53, 64) == 53", "assert median_numbers(28, 55, 65) == 55", "assert median_numbers(27, 57, 66) == 57", "assert median_numbers(20, 58, 70) == 58", "assert median_numbers(23, 56, 67) == 56", "assert median_numbers(28, 55, 69) == 55", "assert median_numbers(23, 58, 70) == 58", "assert median_numbers(26, 54, 62) == 54", "assert median_numbers(27, 51, 64) == 51", "assert median_numbers(28, 50, 65) == 50", "assert median_numbers(29, 55, 69) == 55", "assert median_numbers(22, 57, 70) == 57", "assert median_numbers(27, 52, 69) == 52", "assert median_numbers(30, 58, 61) == 58", "assert median_numbers(20, 58, 63) == 58", "assert median_numbers(27, 51, 69) == 51", "assert median_numbers(21, 12, 26) == 21", "assert median_numbers(18, 6, 28) == 18", "assert median_numbers(19, 7, 27) == 19", "assert median_numbers(21, 14, 25) == 21", "assert median_numbers(20, 7, 29) == 20", "assert median_numbers(15, 7, 31) == 15", "assert median_numbers(15, 8, 32) == 15", "assert median_numbers(20, 6, 34) == 20", "assert median_numbers(20, 7, 28) == 20", "assert median_numbers(21, 8, 31) == 21", "assert median_numbers(23, 6, 31) == 23", "assert median_numbers(20, 10, 34) == 20", "assert median_numbers(16, 14, 29) == 16", "assert median_numbers(16, 7, 30) == 16", "assert median_numbers(23, 9, 32) == 23", "assert median_numbers(15, 7, 28) == 15", "assert median_numbers(18, 5, 26) == 18", "assert median_numbers(22, 8, 26) == 22", "assert median_numbers(19, 6, 26) == 19", "assert median_numbers(15, 11, 30) == 15", "assert median_numbers(18, 5, 31) == 18", "assert median_numbers(19, 6, 32) == 19", "assert median_numbers(20, 5, 31) == 20", "assert median_numbers(21, 13, 26) == 21", "assert median_numbers(19, 5, 33) == 19", "assert median_numbers(24, 8, 25) == 24", "assert median_numbers(21, 15, 34) == 21", "assert median_numbers(17, 14, 31) == 17", "assert median_numbers(17, 8, 30) == 17", "assert median_numbers(21, 13, 34) == 21", "assert median_numbers(19, 5, 34) == 19", "assert median_numbers(15, 8, 30) == 15", "assert median_numbers(21, 12, 31) == 21", "assert median_numbers(19, 40, 78) == 40", "assert median_numbers(19, 50, 78) == 50", "assert median_numbers(11, 44, 73) == 44", "assert median_numbers(18, 42, 70) == 42", "assert median_numbers(11, 48, 72) == 48", "assert median_numbers(10, 48, 79) == 48", "assert median_numbers(17, 48, 79) == 48", "assert median_numbers(17, 46, 74) == 46", "assert median_numbers(20, 49, 78) == 49", "assert median_numbers(12, 40, 71) == 40", "assert median_numbers(16, 40, 79) == 40", "assert median_numbers(17, 40, 80) == 40", "assert median_numbers(15, 50, 78) == 50", "assert median_numbers(11, 41, 76) == 41", "assert median_numbers(20, 47, 73) == 47", "assert median_numbers(19, 50, 71) == 50", "assert median_numbers(10, 42, 77) == 42", "assert median_numbers(20, 44, 70) == 44", "assert median_numbers(16, 41, 78) == 41", "assert median_numbers(20, 49, 70) == 49", "assert median_numbers(11, 50, 75) == 50", "assert median_numbers(20, 42, 72) == 42", "assert median_numbers(15, 48, 74) == 48", "assert median_numbers(15, 49, 72) == 49", "assert median_numbers(10, 42, 80) == 42", "assert median_numbers(17, 43, 78) == 43", "assert median_numbers(18, 44, 73) == 44", "assert median_numbers(13, 50, 80) == 50", "assert median_numbers(14, 40, 75) == 40", "assert median_numbers(11, 48, 72) == 48", "assert median_numbers(10, 42, 75) == 42", "assert median_numbers(10, 42, 74) == 42", "assert median_numbers(15, 41, 74) == 41"], "entry_point": "median_numbers", "repair_prompt": ["Write a function to find the median of three numbers.\nexample:\nmedian_numbers(25,55,65)==55.0\n"], "completion": "from typing import *\ndef median_numbers(a, b, c):\n    numbers = [a, b, c]\n    numbers.sort()\n    return numbers[1]", "completions": ["from typing import *\ndef median_numbers(a, b, c):\n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n    # The median number will be the middle number in the sorted list\n    median = sorted_numbers[1]\n    return median", "from typing import *\ndef median_numbers(a, b, c):\n    numbers = [a, b, c]\n    numbers.sort()\n    return numbers[1]", "from typing import *\ndef median_numbers(a, b, c):\n    # Sort the three numbers\n    numbers = [a, b, c]\n    numbers.sort()\n    \n    # Return the middle number, which is the median\n    return numbers[1]", "from typing import *\ndef median_numbers(a, b, c):\n    if a <= b <= c or c <= b <= a:\n        return b\n    elif b <= a <= c or c <= a <= b:\n        return a\n    else:\n        return c", "from typing import *\ndef median_numbers(a, b, c):\n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n    # The median number will be the middle number in the sorted list\n    median = sorted_numbers[1]\n    return median", "from typing import *\ndef median_numbers(a, b, c):\n    # Sort the three numbers\n    numbers = [a, b, c]\n    numbers.sort()\n    \n    # Return the middle number as the median\n    return numbers[1]", "from typing import *\ndef median_numbers(a, b, c):\n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n    # The median number will be the middle value in the sorted list\n    median = sorted_numbers[1]\n    return median", "from typing import *\ndef median_numbers(a, b, c):\n    # Sort the three numbers\n    numbers = [a, b, c]\n    numbers.sort()\n    \n    # Return the middle number, which is the median\n    return numbers[1]", "from typing import *\ndef median_numbers(a, b, c):\n    numbers = [a, b, c]\n    numbers.sort()\n    return numbers[1]", "from typing import *\ndef median_numbers(a, b, c):\n    numbers = [a, b, c]\n    numbers.sort()\n    return numbers[1]"], "session_history": {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      \"Understand the definition of a median and how to calculate it for three numbers.\",\n      \"Design a function that takes three numbers as input.\",\n      \"Implement the logic to determine the median of the three numbers.\",\n      \"Ensure the function returns the correct median value.\",\n      \"Test the function with the provided example to verify its correctness.\"\n    ],\n    \"high_level_steps\": [\n      \"Define a function named `median_numbers` that takes three parameters.\",\n      \"Sort the three numbers to easily identify the median.\",\n      \"Return the middle number as the median.\",\n      \"Test the function with the example provided: `median_numbers(25, 55, 65)` should return `55.0`.\"\n    ]\n  }\n}\n```", "Round_0": {"code": "def median_numbers(a, b, c):\n    numbers = [a, b, c]\n    numbers.sort()\n    return numbers[1]", "report": "The compilation output of the preceding code is: Code Test Passed."}}, "session_historys": [{"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Define the function to find the median of three numbers.\",\n        \"steps\": [\n          \"Create a function named `median_numbers`.\",\n          \"The function should take three parameters: `a`, `b`, and `c`.\",\n          \"Sort the three numbers in ascending order.\"\n        ]\n      },\n      {\n        \"subproblem\": \"Determine the median number from the sorted list.\",\n        \"steps\": [\n          \"After sorting, the median number will be the middle number in the list.\",\n          \"Return the middle number as the result.\"\n        ]\n      }\n    ],\n    \"high_level_plan\": [\n      \"Analyze the requirement to understand the need for a function to find the median of three numbers.\",\n      \"Decompose the requirement into two subproblems: sorting the three numbers and finding the median from the sorted list.\",\n      \"Implement the function `median_numbers` to sort the three numbers and return the median.\",\n      \"Test the function with the provided example to ensure it works correctly.\"\n    ]\n  }\n}\n```", "Round_0": {"code": "def median_numbers(a, b, c):\n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n    # The median number will be the middle number in the sorted list\n    median = sorted_numbers[1]\n    return median", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      \"Understand the definition of a median of three numbers.\",\n      \"Identify the three numbers to be evaluated.\",\n      \"Sort the three numbers.\",\n      \"Determine the median number from the sorted list.\"\n    ],\n    \"high_level_steps\": [\n      \"Receive three numbers as input.\",\n      \"Store the three numbers in a list.\",\n      \"Sort the list of numbers.\",\n      \"Return the middle number from the sorted list as the median.\"\n    ]\n  }\n}\n```", "Round_0": {"code": "def median_numbers(a, b, c):\n    numbers = [a, b, c]\n    numbers.sort()\n    return numbers[1]", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      \"Understand the definition of a median and how to calculate it for three numbers.\",\n      \"Design a function that takes three numbers as input.\",\n      \"Implement the logic to determine the median of the three numbers.\",\n      \"Ensure the function returns the correct median value.\",\n      \"Test the function with various sets of three numbers to verify its correctness.\"\n    ],\n    \"high_level_steps\": [\n      \"Define the function with an appropriate name and parameters.\",\n      \"Sort the three numbers to easily identify the median.\",\n      \"Return the middle number as the median.\",\n      \"Test the function with the provided example and additional test cases.\"\n    ]\n  }\n}\n```", "Round_0": {"code": "def median_numbers(a, b, c):\n    # Sort the three numbers\n    numbers = [a, b, c]\n    numbers.sort()\n    \n    # Return the middle number, which is the median\n    return numbers[1]", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      \"Define the function to find the median of three numbers.\",\n      \"Implement the logic to compare the three numbers and determine the median.\",\n      \"Ensure the function can handle any order of input numbers.\",\n      \"Test the function with various inputs to verify its correctness.\"\n    ],\n    \"high_level_steps\": [\n      \"Start by defining the function with the appropriate name and parameters.\",\n      \"Use conditional statements to compare the three numbers.\",\n      \"Return the median number after determining it.\",\n      \"Test the function with the provided example and additional test cases.\"\n    ]\n  }\n}\n```", "Round_0": {"code": "def median_numbers(a, b, c):\n    if a <= b <= c or c <= b <= a:\n        return b\n    elif b <= a <= c or c <= a <= b:\n        return a\n    else:\n        return c", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Define the function to find the median of three numbers.\",\n        \"steps\": [\n          \"Create a function named `median_numbers`.\",\n          \"The function should take three parameters: `a`, `b`, and `c`.\",\n          \"Sort the three numbers in ascending order.\"\n        ]\n      },\n      {\n        \"subproblem\": \"Determine the median number from the sorted list.\",\n        \"steps\": [\n          \"After sorting, the median number will be the middle number in the list.\",\n          \"Return the middle number as the result.\"\n        ]\n      },\n      {\n        \"subproblem\": \"Test the function to ensure it works correctly.\",\n        \"steps\": [\n          \"Write test cases to verify the function works for various inputs.\",\n          \"Ensure the function returns the correct median for positive numbers.\",\n          \"Ensure the function returns the correct median for negative numbers.\",\n          \"Ensure the function returns the correct median for mixed positive and negative numbers.\"\n        ]\n      }\n    ],\n    \"high_level_plan\": [\n      \"Analyze the requirement to understand the need for a function to find the median of three numbers.\",\n      \"Decompose the requirement into three subproblems: defining the function, determining the median from the sorted numbers, and testing the function.\",\n      \"Implement the function to sort the three numbers and return the median.\",\n      \"Write test cases to validate the function's correctness.\",\n      \"Integrate the function and tests into the development environment.\"\n    ]\n  }\n}\n```", "Round_0": {"code": "def median_numbers(a, b, c):\n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n    # The median number will be the middle number in the sorted list\n    median = sorted_numbers[1]\n    return median", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      \"Understand the definition of a median in the context of three numbers.\",\n      \"Sort the three numbers to easily identify the median.\",\n      \"Return the median value.\"\n    ],\n    \"high_level_steps\": [\n      \"Receive three numbers as input.\",\n      \"Sort the three numbers.\",\n      \"Return the middle number as the median.\"\n    ]\n  }\n}\n```", "Round_0": {"code": "def median_numbers(a, b, c):\n    # Sort the three numbers\n    numbers = [a, b, c]\n    numbers.sort()\n    \n    # Return the middle number as the median\n    return numbers[1]", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Define the function to find the median of three numbers.\",\n        \"steps\": [\n          \"Create a function named `median_numbers`.\",\n          \"The function should take three parameters: `a`, `b`, and `c`.\",\n          \"Sort the three numbers in ascending order.\"\n        ]\n      },\n      {\n        \"subproblem\": \"Determine the median number from the sorted list.\",\n        \"steps\": [\n          \"After sorting, the median number will be the middle value in the list.\",\n          \"Return the middle value as the result.\"\n        ]\n      },\n      {\n        \"subproblem\": \"Test the function to ensure it works correctly.\",\n        \"steps\": [\n          \"Write test cases to verify the function works for various inputs.\",\n          \"Ensure the function returns the correct median for positive numbers.\",\n          \"Ensure the function returns the correct median for negative numbers.\",\n          \"Ensure the function returns the correct median for mixed positive and negative numbers.\"\n        ]\n      }\n    ],\n    \"high_level_plan\": [\n      \"Analyze the requirement to understand the need for a function to find the median of three numbers.\",\n      \"Decompose the requirement into three subproblems: defining the function, determining the median from the sorted list, and testing the function.\",\n      \"Implement the function to sort the three numbers and return the median.\",\n      \"Write test cases to validate the function's correctness.\",\n      \"Review and refine the function based on test results.\"\n    ]\n  }\n}\n```", "Round_0": {"code": "def median_numbers(a, b, c):\n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n    # The median number will be the middle value in the sorted list\n    median = sorted_numbers[1]\n    return median", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      \"Understand the definition of a median and how to calculate it for three numbers.\",\n      \"Design a function that takes three numbers as input.\",\n      \"Implement the logic to determine the median of the three numbers.\",\n      \"Ensure the function returns the correct median value.\",\n      \"Test the function with various sets of three numbers to verify its correctness.\"\n    ],\n    \"high_level_steps\": [\n      \"Define the function with an appropriate name and parameters.\",\n      \"Sort the three numbers to easily identify the median.\",\n      \"Return the middle number as the median.\",\n      \"Test the function with the provided example and additional test cases.\"\n    ]\n  }\n}\n```", "Round_0": {"code": "def median_numbers(a, b, c):\n    # Sort the three numbers\n    numbers = [a, b, c]\n    numbers.sort()\n    \n    # Return the middle number, which is the median\n    return numbers[1]", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      \"Understand the definition of a median and how to calculate it for three numbers.\",\n      \"Design a function that takes three numbers as input.\",\n      \"Implement the logic to determine the median of the three numbers.\",\n      \"Ensure the function returns the correct median value.\",\n      \"Test the function with the provided example to verify its correctness.\"\n    ],\n    \"high_level_steps\": [\n      \"Define a function named `median_numbers` that takes three parameters.\",\n      \"Sort the three numbers to easily identify the median.\",\n      \"Return the middle number as the median.\",\n      \"Test the function with the example provided: `median_numbers(25, 55, 65)` should return `55.0`.\"\n    ]\n  }\n}\n```", "Round_0": {"code": "def median_numbers(a, b, c):\n    numbers = [a, b, c]\n    numbers.sort()\n    return numbers[1]", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      \"Understand the definition of a median and how to calculate it for three numbers.\",\n      \"Design a function that takes three numbers as input.\",\n      \"Implement the logic to determine the median of the three numbers.\",\n      \"Ensure the function returns the correct median value.\",\n      \"Test the function with the provided example to verify its correctness.\"\n    ],\n    \"high_level_steps\": [\n      \"Define a function named `median_numbers` that takes three parameters.\",\n      \"Sort the three numbers to easily identify the median.\",\n      \"Return the middle number as the median.\",\n      \"Test the function with the example provided: `median_numbers(25, 55, 65)` should return `55.0`.\"\n    ]\n  }\n}\n```", "Round_0": {"code": "def median_numbers(a, b, c):\n    numbers = [a, b, c]\n    numbers.sort()\n    return numbers[1]", "report": "The compilation output of the preceding code is: Code Test Passed."}}], "test": ["def check(median_numbers):\n\tassert median_numbers(25,55,65)==55.0", "def check(median_numbers):\n\tassert median_numbers(20,10,30)==20.0", "def check(median_numbers):\n\tassert median_numbers(15,45,75)==45.0", "def check(median_numbers):\n\tassert median_numbers(22, 54, 68) == 54", "def check(median_numbers):\n\tassert median_numbers(22, 57, 66) == 57", "def check(median_numbers):\n\tassert median_numbers(22, 54, 61) == 54", "def check(median_numbers):\n\tassert median_numbers(30, 53, 63) == 53", "def check(median_numbers):\n\tassert median_numbers(22, 55, 61) == 55", "def check(median_numbers):\n\tassert median_numbers(25, 60, 61) == 60", "def check(median_numbers):\n\tassert median_numbers(22, 56, 68) == 56", "def check(median_numbers):\n\tassert median_numbers(29, 53, 70) == 53", "def check(median_numbers):\n\tassert median_numbers(23, 53, 66) == 53", "def check(median_numbers):\n\tassert median_numbers(29, 58, 67) == 58", "def check(median_numbers):\n\tassert median_numbers(27, 52, 64) == 52", "def check(median_numbers):\n\tassert median_numbers(29, 60, 61) == 60", "def check(median_numbers):\n\tassert median_numbers(25, 57, 61) == 57", "def check(median_numbers):\n\tassert median_numbers(20, 50, 66) == 50", "def check(median_numbers):\n\tassert median_numbers(21, 51, 65) == 51", "def check(median_numbers):\n\tassert median_numbers(29, 51, 67) == 51", "def check(median_numbers):\n\tassert median_numbers(26, 55, 69) == 55", "def check(median_numbers):\n\tassert median_numbers(24, 53, 64) == 53", "def check(median_numbers):\n\tassert median_numbers(28, 55, 65) == 55", "def check(median_numbers):\n\tassert median_numbers(27, 57, 66) == 57", "def check(median_numbers):\n\tassert median_numbers(20, 58, 70) == 58", "def check(median_numbers):\n\tassert median_numbers(23, 56, 67) == 56", "def check(median_numbers):\n\tassert median_numbers(28, 55, 69) == 55", "def check(median_numbers):\n\tassert median_numbers(23, 58, 70) == 58", "def check(median_numbers):\n\tassert median_numbers(26, 54, 62) == 54", "def check(median_numbers):\n\tassert median_numbers(27, 51, 64) == 51", "def check(median_numbers):\n\tassert median_numbers(28, 50, 65) == 50", "def check(median_numbers):\n\tassert median_numbers(29, 55, 69) == 55", "def check(median_numbers):\n\tassert median_numbers(22, 57, 70) == 57", "def check(median_numbers):\n\tassert median_numbers(27, 52, 69) == 52", "def check(median_numbers):\n\tassert median_numbers(30, 58, 61) == 58", "def check(median_numbers):\n\tassert median_numbers(20, 58, 63) == 58", "def check(median_numbers):\n\tassert median_numbers(27, 51, 69) == 51", "def check(median_numbers):\n\tassert median_numbers(21, 12, 26) == 21", "def check(median_numbers):\n\tassert median_numbers(18, 6, 28) == 18", "def check(median_numbers):\n\tassert median_numbers(19, 7, 27) == 19", "def check(median_numbers):\n\tassert median_numbers(21, 14, 25) == 21", "def check(median_numbers):\n\tassert median_numbers(20, 7, 29) == 20", "def check(median_numbers):\n\tassert median_numbers(15, 7, 31) == 15", "def check(median_numbers):\n\tassert median_numbers(15, 8, 32) == 15", "def check(median_numbers):\n\tassert median_numbers(20, 6, 34) == 20", "def check(median_numbers):\n\tassert median_numbers(20, 7, 28) == 20", "def check(median_numbers):\n\tassert median_numbers(21, 8, 31) == 21", "def check(median_numbers):\n\tassert median_numbers(23, 6, 31) == 23", "def check(median_numbers):\n\tassert median_numbers(20, 10, 34) == 20", "def check(median_numbers):\n\tassert median_numbers(16, 14, 29) == 16", "def check(median_numbers):\n\tassert median_numbers(16, 7, 30) == 16", "def check(median_numbers):\n\tassert median_numbers(23, 9, 32) == 23", "def check(median_numbers):\n\tassert median_numbers(15, 7, 28) == 15", "def check(median_numbers):\n\tassert median_numbers(18, 5, 26) == 18", "def check(median_numbers):\n\tassert median_numbers(22, 8, 26) == 22", "def check(median_numbers):\n\tassert median_numbers(19, 6, 26) == 19", "def check(median_numbers):\n\tassert median_numbers(15, 11, 30) == 15", "def check(median_numbers):\n\tassert median_numbers(18, 5, 31) == 18", "def check(median_numbers):\n\tassert median_numbers(19, 6, 32) == 19", "def check(median_numbers):\n\tassert median_numbers(20, 5, 31) == 20", "def check(median_numbers):\n\tassert median_numbers(21, 13, 26) == 21", "def check(median_numbers):\n\tassert median_numbers(19, 5, 33) == 19", "def check(median_numbers):\n\tassert median_numbers(24, 8, 25) == 24", "def check(median_numbers):\n\tassert median_numbers(21, 15, 34) == 21", "def check(median_numbers):\n\tassert median_numbers(17, 14, 31) == 17", "def check(median_numbers):\n\tassert median_numbers(17, 8, 30) == 17", "def check(median_numbers):\n\tassert median_numbers(21, 13, 34) == 21", "def check(median_numbers):\n\tassert median_numbers(19, 5, 34) == 19", "def check(median_numbers):\n\tassert median_numbers(15, 8, 30) == 15", "def check(median_numbers):\n\tassert median_numbers(21, 12, 31) == 21", "def check(median_numbers):\n\tassert median_numbers(19, 40, 78) == 40", "def check(median_numbers):\n\tassert median_numbers(19, 50, 78) == 50", "def check(median_numbers):\n\tassert median_numbers(11, 44, 73) == 44", "def check(median_numbers):\n\tassert median_numbers(18, 42, 70) == 42", "def check(median_numbers):\n\tassert median_numbers(11, 48, 72) == 48", "def check(median_numbers):\n\tassert median_numbers(10, 48, 79) == 48", "def check(median_numbers):\n\tassert median_numbers(17, 48, 79) == 48", "def check(median_numbers):\n\tassert median_numbers(17, 46, 74) == 46", "def check(median_numbers):\n\tassert median_numbers(20, 49, 78) == 49", "def check(median_numbers):\n\tassert median_numbers(12, 40, 71) == 40", "def check(median_numbers):\n\tassert median_numbers(16, 40, 79) == 40", "def check(median_numbers):\n\tassert median_numbers(17, 40, 80) == 40", "def check(median_numbers):\n\tassert median_numbers(15, 50, 78) == 50", "def check(median_numbers):\n\tassert median_numbers(11, 41, 76) == 41", "def check(median_numbers):\n\tassert median_numbers(20, 47, 73) == 47", "def check(median_numbers):\n\tassert median_numbers(19, 50, 71) == 50", "def check(median_numbers):\n\tassert median_numbers(10, 42, 77) == 42", "def check(median_numbers):\n\tassert median_numbers(20, 44, 70) == 44", "def check(median_numbers):\n\tassert median_numbers(16, 41, 78) == 41", "def check(median_numbers):\n\tassert median_numbers(20, 49, 70) == 49", "def check(median_numbers):\n\tassert median_numbers(11, 50, 75) == 50", "def check(median_numbers):\n\tassert median_numbers(20, 42, 72) == 42", "def check(median_numbers):\n\tassert median_numbers(15, 48, 74) == 48", "def check(median_numbers):\n\tassert median_numbers(15, 49, 72) == 49", "def check(median_numbers):\n\tassert median_numbers(10, 42, 80) == 42", "def check(median_numbers):\n\tassert median_numbers(17, 43, 78) == 43", "def check(median_numbers):\n\tassert median_numbers(18, 44, 73) == 44", "def check(median_numbers):\n\tassert median_numbers(13, 50, 80) == 50", "def check(median_numbers):\n\tassert median_numbers(14, 40, 75) == 40", "def check(median_numbers):\n\tassert median_numbers(11, 48, 72) == 48", "def check(median_numbers):\n\tassert median_numbers(10, 42, 75) == 42", "def check(median_numbers):\n\tassert median_numbers(10, 42, 74) == 42", "def check(median_numbers):\n\tassert median_numbers(15, 41, 74) == 41"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 102, 102, 102, 102, 102], "passed": true, "pass": true, "pass_num": 10, "round": 132, "mutate_method": "condense_two2one", "save_node": false, "parent_index": 132}
