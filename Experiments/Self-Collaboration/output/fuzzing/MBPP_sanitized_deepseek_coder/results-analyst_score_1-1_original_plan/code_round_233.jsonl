{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 779, "prompt": "Write a function to count how many lists are within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.", "code": "def unique_sublists(list1):\n    result ={}\n    for l in list1: \n        result.setdefault(tuple(l), list()).append(1) \n    for a, b in result.items(): \n        result[a] = sum(b)\n    return result", "test_imports": [], "test_list": ["assert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]])=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}", "assert unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}", "assert unique_sublists([[1, 2], [3, 4], [4, 5], [6, 7]])=={(1, 2): 1, (3, 4): 1, (4, 5): 1, (6, 7): 1}", "assert unique_sublists([[3, 5], [2, 2], [4, 3], [14, 20, 21], [3, 8], [12, 13]]) == {(3, 5): 1, (2, 2): 1, (4, 3): 1, (14, 20, 21): 1, (3, 8): 1, (12, 13): 1}", "assert unique_sublists([[2, 2], [6, 10], [6, 5], [18, 12, 22], [10, 8], [6, 12]]) == {(2, 2): 1, (6, 10): 1, (6, 5): 1, (18, 12, 22): 1, (10, 8): 1, (6, 12): 1}", "assert unique_sublists([[1, 8], [1, 8], [3, 3], [11, 11, 21], [1, 11], [10, 13]]) == {(1, 8): 2, (3, 3): 1, (11, 11, 21): 1, (1, 11): 1, (10, 13): 1}", "assert unique_sublists([[2, 8], [9, 2], [2, 7], [12, 10, 15], [8, 11], [7, 9]]) == {(2, 8): 1, (9, 2): 1, (2, 7): 1, (12, 10, 15): 1, (8, 11): 1, (7, 9): 1}", "assert unique_sublists([[5, 3], [8, 7], [6, 8], [15, 19, 17], [3, 7], [4, 9]]) == {(5, 3): 1, (8, 7): 1, (6, 8): 1, (15, 19, 17): 1, (3, 7): 1, (4, 9): 1}", "assert unique_sublists([[4, 1], [8, 11], [5, 5], [16, 10, 20], [3, 5], [4, 8]]) == {(4, 1): 1, (8, 11): 1, (5, 5): 1, (16, 10, 20): 1, (3, 5): 1, (4, 8): 1}", "assert unique_sublists([[4, 8], [8, 6], [3, 1], [16, 20, 21], [9, 11], [12, 16]]) == {(4, 8): 1, (8, 6): 1, (3, 1): 1, (16, 20, 21): 1, (9, 11): 1, (12, 16): 1}", "assert unique_sublists([[6, 7], [2, 3], [1, 5], [9, 20, 18], [5, 6], [8, 13]]) == {(6, 7): 1, (2, 3): 1, (1, 5): 1, (9, 20, 18): 1, (5, 6): 1, (8, 13): 1}", "assert unique_sublists([[1, 4], [5, 2], [3, 3], [9, 19, 16], [3, 2], [13, 6]]) == {(1, 4): 1, (5, 2): 1, (3, 3): 1, (9, 19, 16): 1, (3, 2): 1, (13, 6): 1}", "assert unique_sublists([[5, 2], [1, 2], [3, 5], [9, 20, 16], [5, 9], [6, 15]]) == {(5, 2): 1, (1, 2): 1, (3, 5): 1, (9, 20, 16): 1, (5, 9): 1, (6, 15): 1}", "assert unique_sublists([[5, 3], [2, 8], [5, 5], [14, 16, 20], [6, 9], [7, 6]]) == {(5, 3): 1, (2, 8): 1, (5, 5): 1, (14, 16, 20): 1, (6, 9): 1, (7, 6): 1}", "assert unique_sublists([[3, 3], [2, 12], [4, 7], [18, 19, 18], [4, 12], [13, 14]]) == {(3, 3): 1, (2, 12): 1, (4, 7): 1, (18, 19, 18): 1, (4, 12): 1, (13, 14): 1}", "assert unique_sublists([[4, 1], [4, 6], [5, 2], [17, 20, 17], [8, 12], [5, 6]]) == {(4, 1): 1, (4, 6): 1, (5, 2): 1, (17, 20, 17): 1, (8, 12): 1, (5, 6): 1}", "assert unique_sublists([[2, 4], [7, 7], [4, 8], [14, 14, 14], [2, 2], [4, 15]]) == {(2, 4): 1, (7, 7): 1, (4, 8): 1, (14, 14, 14): 1, (2, 2): 1, (4, 15): 1}", "assert unique_sublists([[2, 7], [9, 7], [1, 7], [14, 12, 19], [9, 9], [9, 12]]) == {(2, 7): 1, (9, 7): 1, (1, 7): 1, (14, 12, 19): 1, (9, 9): 1, (9, 12): 1}", "assert unique_sublists([[2, 4], [5, 12], [4, 6], [16, 20, 19], [9, 8], [11, 15]]) == {(2, 4): 1, (5, 12): 1, (4, 6): 1, (16, 20, 19): 1, (9, 8): 1, (11, 15): 1}", "assert unique_sublists([[6, 5], [5, 7], [2, 4], [18, 14, 16], [2, 7], [12, 10]]) == {(6, 5): 1, (5, 7): 1, (2, 4): 1, (18, 14, 16): 1, (2, 7): 1, (12, 10): 1}", "assert unique_sublists([[6, 5], [1, 6], [3, 5], [14, 12, 16], [10, 11], [6, 6]]) == {(6, 5): 1, (1, 6): 1, (3, 5): 1, (14, 12, 16): 1, (10, 11): 1, (6, 6): 1}", "assert unique_sublists([[3, 1], [9, 9], [1, 6], [8, 10, 17], [6, 2], [14, 11]]) == {(3, 1): 1, (9, 9): 1, (1, 6): 1, (8, 10, 17): 1, (6, 2): 1, (14, 11): 1}", "assert unique_sublists([[2, 2], [7, 6], [2, 5], [10, 14, 22], [5, 10], [14, 12]]) == {(2, 2): 1, (7, 6): 1, (2, 5): 1, (10, 14, 22): 1, (5, 10): 1, (14, 12): 1}", "assert unique_sublists([[3, 4], [10, 6], [5, 2], [12, 19, 22], [6, 7], [6, 8]]) == {(3, 4): 1, (10, 6): 1, (5, 2): 1, (12, 19, 22): 1, (6, 7): 1, (6, 8): 1}", "assert unique_sublists([[5, 8], [8, 4], [3, 4], [13, 17, 21], [5, 10], [8, 6]]) == {(5, 8): 1, (8, 4): 1, (3, 4): 1, (13, 17, 21): 1, (5, 10): 1, (8, 6): 1}", "assert unique_sublists([[5, 8], [9, 12], [2, 7], [17, 16, 14], [3, 7], [4, 7]]) == {(5, 8): 1, (9, 12): 1, (2, 7): 1, (17, 16, 14): 1, (3, 7): 1, (4, 7): 1}", "assert unique_sublists([[3, 1], [1, 8], [6, 8], [12, 16, 20], [1, 12], [8, 9]]) == {(3, 1): 1, (1, 8): 1, (6, 8): 1, (12, 16, 20): 1, (1, 12): 1, (8, 9): 1}", "assert unique_sublists([[5, 2], [1, 6], [5, 3], [18, 19, 21], [7, 4], [12, 8]]) == {(5, 2): 1, (1, 6): 1, (5, 3): 1, (18, 19, 21): 1, (7, 4): 1, (12, 8): 1}", "assert unique_sublists([[2, 8], [6, 2], [4, 4], [14, 17, 17], [6, 7], [5, 14]]) == {(2, 8): 1, (6, 2): 1, (4, 4): 1, (14, 17, 17): 1, (6, 7): 1, (5, 14): 1}", "assert unique_sublists([[3, 8], [2, 7], [4, 4], [10, 15, 12], [8, 7], [8, 13]]) == {(3, 8): 1, (2, 7): 1, (4, 4): 1, (10, 15, 12): 1, (8, 7): 1, (8, 13): 1}", "assert unique_sublists([[5, 7], [6, 7], [1, 4], [15, 16, 22], [10, 11], [4, 12]]) == {(5, 7): 1, (6, 7): 1, (1, 4): 1, (15, 16, 22): 1, (10, 11): 1, (4, 12): 1}", "assert unique_sublists([[6, 8], [4, 6], [1, 2], [18, 13, 20], [6, 4], [6, 15]]) == {(6, 8): 1, (4, 6): 1, (1, 2): 1, (18, 13, 20): 1, (6, 4): 1, (6, 15): 1}", "assert unique_sublists([[3, 1], [6, 11], [5, 5], [10, 11, 19], [6, 2], [14, 13]]) == {(3, 1): 1, (6, 11): 1, (5, 5): 1, (10, 11, 19): 1, (6, 2): 1, (14, 13): 1}", "assert unique_sublists([[3, 4], [1, 11], [4, 1], [15, 13, 19], [3, 3], [6, 9]]) == {(3, 4): 1, (1, 11): 1, (4, 1): 1, (15, 13, 19): 1, (3, 3): 1, (6, 9): 1}", "assert unique_sublists([[1, 4], [3, 12], [1, 6], [11, 15, 12], [8, 7], [9, 6]]) == {(1, 4): 1, (3, 12): 1, (1, 6): 1, (11, 15, 12): 1, (8, 7): 1, (9, 6): 1}", "assert unique_sublists([[6, 2], [4, 12], [6, 8], [10, 10, 15], [6, 2], [10, 14]]) == {(6, 2): 2, (4, 12): 1, (6, 8): 1, (10, 10, 15): 1, (10, 14): 1}", "assert unique_sublists([['whkqetdu', 'lmqlnaxvefj'], ['lyid'], ['uyvdx', 'bzgmgoxz'], ['tugj']]) == {('whkqetdu', 'lmqlnaxvefj'): 1, ('lyid',): 1, ('uyvdx', 'bzgmgoxz'): 1, ('tugj',): 1}", "assert unique_sublists([['yvqf', 'avcduc'], ['vuxu'], ['fism', 'umfjlkg'], ['zvfyq']]) == {('yvqf', 'avcduc'): 1, ('vuxu',): 1, ('fism', 'umfjlkg'): 1, ('zvfyq',): 1}", "assert unique_sublists([['lixrcqawo', 'qtgpmhnsnytb'], ['wmzztqn'], ['qxmbs', 'ijiuynujn'], ['jevd']]) == {('lixrcqawo', 'qtgpmhnsnytb'): 1, ('wmzztqn',): 1, ('qxmbs', 'ijiuynujn'): 1, ('jevd',): 1}", "assert unique_sublists([['pla', 'wzgkdiz'], ['iwhtwkpfa'], ['xop', 'nlvttyn'], ['knfxsbish']]) == {('pla', 'wzgkdiz'): 1, ('iwhtwkpfa',): 1, ('xop', 'nlvttyn'): 1, ('knfxsbish',): 1}", "assert unique_sublists([['nrcixtzkm', 'jzvbcr'], ['stxxk'], ['ijo', 'vnxdexuespy'], ['wybwq']]) == {('nrcixtzkm', 'jzvbcr'): 1, ('stxxk',): 1, ('ijo', 'vnxdexuespy'): 1, ('wybwq',): 1}", "assert unique_sublists([['klg', 'wixnpu'], ['lpm'], ['ebhcqlrde', 'nhjo'], ['npmyi']]) == {('klg', 'wixnpu'): 1, ('lpm',): 1, ('ebhcqlrde', 'nhjo'): 1, ('npmyi',): 1}", "assert unique_sublists([['jbf', 'psemfbv'], ['ppzxh'], ['gimnnuyov', 'rmyijyvmnidb'], ['borlmpwbv']]) == {('jbf', 'psemfbv'): 1, ('ppzxh',): 1, ('gimnnuyov', 'rmyijyvmnidb'): 1, ('borlmpwbv',): 1}", "assert unique_sublists([['hkwp', 'fonatzvdhepa'], ['aewv'], ['csmyghws', 'xvqoenivi'], ['vyoioej']]) == {('hkwp', 'fonatzvdhepa'): 1, ('aewv',): 1, ('csmyghws', 'xvqoenivi'): 1, ('vyoioej',): 1}", "assert unique_sublists([['nic', 'flu'], ['sgm'], ['jjnxkwpe', 'csuqn'], ['nakkrdoo']]) == {('nic', 'flu'): 1, ('sgm',): 1, ('jjnxkwpe', 'csuqn'): 1, ('nakkrdoo',): 1}", "assert unique_sublists([['eve', 'sdbv'], ['jjkz'], ['hby', 'gwhloxgls'], ['eovp']]) == {('eve', 'sdbv'): 1, ('jjkz',): 1, ('hby', 'gwhloxgls'): 1, ('eovp',): 1}", "assert unique_sublists([['phnnzvgbw', 'xix'], ['axqqpd'], ['boix', 'jfpo'], ['dilm']]) == {('phnnzvgbw', 'xix'): 1, ('axqqpd',): 1, ('boix', 'jfpo'): 1, ('dilm',): 1}", "assert unique_sublists([['afbt', 'ciaqijtxinnv'], ['ozwdake'], ['wuctv', 'wfzlvc'], ['wkiqssgk']]) == {('afbt', 'ciaqijtxinnv'): 1, ('ozwdake',): 1, ('wuctv', 'wfzlvc'): 1, ('wkiqssgk',): 1}", "assert unique_sublists([['fvgfnfqm', 'xunpvficzzc'], ['ghhr'], ['yuk', 'ruydpovwjxce'], ['kcyu']]) == {('fvgfnfqm', 'xunpvficzzc'): 1, ('ghhr',): 1, ('yuk', 'ruydpovwjxce'): 1, ('kcyu',): 1}", "assert unique_sublists([['mlujyy', 'bbxhnzodcu'], ['zhhzxezbx'], ['soh', 'swadtocbq'], ['qlf']]) == {('mlujyy', 'bbxhnzodcu'): 1, ('zhhzxezbx',): 1, ('soh', 'swadtocbq'): 1, ('qlf',): 1}", "assert unique_sublists([['chyrmxd', 'qstmd'], ['detm'], ['fgfg', 'pteduzagqj'], ['xnlmtyts']]) == {('chyrmxd', 'qstmd'): 1, ('detm',): 1, ('fgfg', 'pteduzagqj'): 1, ('xnlmtyts',): 1}", "assert unique_sublists([['qcfnaykhq', 'ifumq'], ['trp'], ['iwo', 'moylylks'], ['amlxkbl']]) == {('qcfnaykhq', 'ifumq'): 1, ('trp',): 1, ('iwo', 'moylylks'): 1, ('amlxkbl',): 1}", "assert unique_sublists([['zkahjws', 'iaimoelvw'], ['qkqtkb'], ['vmrpexoxw', 'rnyh'], ['mjgfq']]) == {('zkahjws', 'iaimoelvw'): 1, ('qkqtkb',): 1, ('vmrpexoxw', 'rnyh'): 1, ('mjgfq',): 1}", "assert unique_sublists([['jetzk', 'ykpfpgv'], ['yxqouoavn'], ['jtdm', 'ysqmumacdycn'], ['wzp']]) == {('jetzk', 'ykpfpgv'): 1, ('yxqouoavn',): 1, ('jtdm', 'ysqmumacdycn'): 1, ('wzp',): 1}", "assert unique_sublists([['wdgenplks', 'lqdn'], ['tsmlrfelx'], ['nvsp', 'qkpuueoen'], ['vhslmdqv']]) == {('wdgenplks', 'lqdn'): 1, ('tsmlrfelx',): 1, ('nvsp', 'qkpuueoen'): 1, ('vhslmdqv',): 1}", "assert unique_sublists([['najytso', 'siwtuoglb'], ['lhvpapcpv'], ['xpnuqbso', 'mlgzdci'], ['ufik']]) == {('najytso', 'siwtuoglb'): 1, ('lhvpapcpv',): 1, ('xpnuqbso', 'mlgzdci'): 1, ('ufik',): 1}", "assert unique_sublists([['gwreye', 'amifhlyszwez'], ['cyoqp'], ['rmrljg', 'ilihr'], ['wwfxtuzq']]) == {('gwreye', 'amifhlyszwez'): 1, ('cyoqp',): 1, ('rmrljg', 'ilihr'): 1, ('wwfxtuzq',): 1}", "assert unique_sublists([['scyklu', 'cbishqzxh'], ['wmszg'], ['qnlfgie', 'hjcisf'], ['nikyz']]) == {('scyklu', 'cbishqzxh'): 1, ('wmszg',): 1, ('qnlfgie', 'hjcisf'): 1, ('nikyz',): 1}", "assert unique_sublists([['ryxbjl', 'nduwwedor'], ['jqc'], ['dsozewns', 'vcip'], ['hpckjb']]) == {('ryxbjl', 'nduwwedor'): 1, ('jqc',): 1, ('dsozewns', 'vcip'): 1, ('hpckjb',): 1}", "assert unique_sublists([['uvcl', 'msvjz'], ['vlevihg'], ['zgzkvtl', 'qmi'], ['mix']]) == {('uvcl', 'msvjz'): 1, ('vlevihg',): 1, ('zgzkvtl', 'qmi'): 1, ('mix',): 1}", "assert unique_sublists([['pqetunau', 'vkmfevcaaie'], ['mnqopqbn'], ['oprvjh', 'lkiwrni'], ['zsyad']]) == {('pqetunau', 'vkmfevcaaie'): 1, ('mnqopqbn',): 1, ('oprvjh', 'lkiwrni'): 1, ('zsyad',): 1}", "assert unique_sublists([['khlwvu', 'iwkyz'], ['fhsejcjgt'], ['uzsystip', 'ozgn'], ['zjnhhyn']]) == {('khlwvu', 'iwkyz'): 1, ('fhsejcjgt',): 1, ('uzsystip', 'ozgn'): 1, ('zjnhhyn',): 1}", "assert unique_sublists([['rbeiumbv', 'wzuehkttjg'], ['hhhjvac'], ['xyy', 'hnrramgt'], ['wljwvjkc']]) == {('rbeiumbv', 'wzuehkttjg'): 1, ('hhhjvac',): 1, ('xyy', 'hnrramgt'): 1, ('wljwvjkc',): 1}", "assert unique_sublists([['ibaascy', 'slsplgipehic'], ['ubfuvrcp'], ['lltvvhns', 'iaojo'], ['sfr']]) == {('ibaascy', 'slsplgipehic'): 1, ('ubfuvrcp',): 1, ('lltvvhns', 'iaojo'): 1, ('sfr',): 1}", "assert unique_sublists([['vciagot', 'yileycb'], ['npsouv'], ['cash', 'kwitbhgitknm'], ['ohcd']]) == {('vciagot', 'yileycb'): 1, ('npsouv',): 1, ('cash', 'kwitbhgitknm'): 1, ('ohcd',): 1}", "assert unique_sublists([['aaevqctls', 'rxrnfbiyvob'], ['zqxpj'], ['idvenw', 'vxkyyxuurbr'], ['jcubc']]) == {('aaevqctls', 'rxrnfbiyvob'): 1, ('zqxpj',): 1, ('idvenw', 'vxkyyxuurbr'): 1, ('jcubc',): 1}", "assert unique_sublists([['mcvbzd', 'cfrouazdrg'], ['pblaxnwlw'], ['hqvmp', 'gbxolpgmatg'], ['rwtuns']]) == {('mcvbzd', 'cfrouazdrg'): 1, ('pblaxnwlw',): 1, ('hqvmp', 'gbxolpgmatg'): 1, ('rwtuns',): 1}", "assert unique_sublists([['lzujhyjl', 'mgglqw'], ['yplnzky'], ['cftqdm', 'ttrjjoxglhh'], ['fhyg']]) == {('lzujhyjl', 'mgglqw'): 1, ('yplnzky',): 1, ('cftqdm', 'ttrjjoxglhh'): 1, ('fhyg',): 1}", "assert unique_sublists([['hymbqwozb', 'oimn'], ['xjtwml'], ['qqmrnujhc', 'oizcztnhpgzt'], ['smzlzrwp']]) == {('hymbqwozb', 'oimn'): 1, ('xjtwml',): 1, ('qqmrnujhc', 'oizcztnhpgzt'): 1, ('smzlzrwp',): 1}", "assert unique_sublists([[4, 7], [8, 2], [3, 9], [5, 2]]) == {(4, 7): 1, (8, 2): 1, (3, 9): 1, (5, 2): 1}", "assert unique_sublists([[6, 7], [6, 3], [2, 5], [10, 10]]) == {(6, 7): 1, (6, 3): 1, (2, 5): 1, (10, 10): 1}", "assert unique_sublists([[1, 5], [7, 7], [7, 9], [10, 12]]) == {(1, 5): 1, (7, 7): 1, (7, 9): 1, (10, 12): 1}", "assert unique_sublists([[6, 4], [2, 1], [4, 9], [1, 7]]) == {(6, 4): 1, (2, 1): 1, (4, 9): 1, (1, 7): 1}", "assert unique_sublists([[3, 3], [6, 1], [1, 4], [7, 10]]) == {(3, 3): 1, (6, 1): 1, (1, 4): 1, (7, 10): 1}", "assert unique_sublists([[6, 7], [5, 6], [6, 9], [1, 10]]) == {(6, 7): 1, (5, 6): 1, (6, 9): 1, (1, 10): 1}", "assert unique_sublists([[4, 2], [7, 5], [6, 2], [10, 9]]) == {(4, 2): 1, (7, 5): 1, (6, 2): 1, (10, 9): 1}", "assert unique_sublists([[1, 5], [4, 1], [3, 4], [7, 4]]) == {(1, 5): 1, (4, 1): 1, (3, 4): 1, (7, 4): 1}", "assert unique_sublists([[4, 5], [6, 7], [4, 10], [10, 8]]) == {(4, 5): 1, (6, 7): 1, (4, 10): 1, (10, 8): 1}", "assert unique_sublists([[3, 1], [7, 4], [9, 1], [9, 12]]) == {(3, 1): 1, (7, 4): 1, (9, 1): 1, (9, 12): 1}", "assert unique_sublists([[6, 1], [2, 1], [1, 8], [11, 3]]) == {(6, 1): 1, (2, 1): 1, (1, 8): 1, (11, 3): 1}", "assert unique_sublists([[6, 5], [3, 9], [7, 6], [5, 9]]) == {(6, 5): 1, (3, 9): 1, (7, 6): 1, (5, 9): 1}", "assert unique_sublists([[1, 3], [2, 3], [8, 4], [1, 9]]) == {(1, 3): 1, (2, 3): 1, (8, 4): 1, (1, 9): 1}", "assert unique_sublists([[4, 4], [3, 4], [8, 1], [7, 12]]) == {(4, 4): 1, (3, 4): 1, (8, 1): 1, (7, 12): 1}", "assert unique_sublists([[2, 2], [7, 3], [9, 8], [1, 2]]) == {(2, 2): 1, (7, 3): 1, (9, 8): 1, (1, 2): 1}", "assert unique_sublists([[6, 3], [7, 3], [3, 9], [7, 6]]) == {(6, 3): 1, (7, 3): 1, (3, 9): 1, (7, 6): 1}", "assert unique_sublists([[1, 2], [4, 8], [5, 4], [2, 8]]) == {(1, 2): 1, (4, 8): 1, (5, 4): 1, (2, 8): 1}", "assert unique_sublists([[5, 7], [6, 9], [4, 1], [10, 7]]) == {(5, 7): 1, (6, 9): 1, (4, 1): 1, (10, 7): 1}", "assert unique_sublists([[6, 1], [1, 5], [8, 5], [4, 7]]) == {(6, 1): 1, (1, 5): 1, (8, 5): 1, (4, 7): 1}", "assert unique_sublists([[5, 1], [3, 8], [9, 8], [2, 12]]) == {(5, 1): 1, (3, 8): 1, (9, 8): 1, (2, 12): 1}", "assert unique_sublists([[4, 1], [2, 5], [3, 6], [3, 9]]) == {(4, 1): 1, (2, 5): 1, (3, 6): 1, (3, 9): 1}", "assert unique_sublists([[1, 2], [3, 5], [7, 6], [8, 8]]) == {(1, 2): 1, (3, 5): 1, (7, 6): 1, (8, 8): 1}", "assert unique_sublists([[2, 4], [4, 9], [1, 8], [1, 10]]) == {(2, 4): 1, (4, 9): 1, (1, 8): 1, (1, 10): 1}", "assert unique_sublists([[6, 7], [8, 5], [3, 2], [9, 5]]) == {(6, 7): 1, (8, 5): 1, (3, 2): 1, (9, 5): 1}", "assert unique_sublists([[2, 3], [4, 8], [1, 9], [1, 4]]) == {(2, 3): 1, (4, 8): 1, (1, 9): 1, (1, 4): 1}", "assert unique_sublists([[4, 6], [5, 1], [1, 1], [2, 9]]) == {(4, 6): 1, (5, 1): 1, (1, 1): 1, (2, 9): 1}", "assert unique_sublists([[5, 1], [6, 2], [7, 8], [9, 10]]) == {(5, 1): 1, (6, 2): 1, (7, 8): 1, (9, 10): 1}", "assert unique_sublists([[2, 4], [1, 2], [3, 1], [3, 3]]) == {(2, 4): 1, (1, 2): 1, (3, 1): 1, (3, 3): 1}", "assert unique_sublists([[1, 6], [8, 8], [7, 10], [7, 2]]) == {(1, 6): 1, (8, 8): 1, (7, 10): 1, (7, 2): 1}", "assert unique_sublists([[4, 2], [2, 7], [8, 4], [11, 4]]) == {(4, 2): 1, (2, 7): 1, (8, 4): 1, (11, 4): 1}", "assert unique_sublists([[3, 2], [8, 4], [3, 7], [3, 2]]) == {(3, 2): 2, (8, 4): 1, (3, 7): 1}", "assert unique_sublists([[6, 7], [3, 6], [6, 4], [9, 2]]) == {(6, 7): 1, (3, 6): 1, (6, 4): 1, (9, 2): 1}", "assert unique_sublists([[5, 7], [7, 1], [7, 10], [8, 11]]) == {(5, 7): 1, (7, 1): 1, (7, 10): 1, (8, 11): 1}"], "entry_point": "unique_sublists", "repair_prompt": ["Write a function to count how many lists are within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\nexample:\nunique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]])=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\n"], "completion": "from typing import *\ndef unique_sublists(main_list):\n    from collections import defaultdict\n\n    # Step 1: Extract unique sublists from the input list\n    unique_sublists_set = set()\n    for sublist in main_list:\n        unique_sublists_set.add(tuple(sublist))\n\n    # Step 2: Count the occurrences of each unique sublist\n    counts_dict = defaultdict(int)\n    for sublist in main_list:\n        counts_dict[tuple(sublist)] += 1\n\n    # Step 3: Return the result as a dictionary\n    return dict(counts_dict)", "completions": ["from typing import *\ndef unique_sublists(main_list):\n    # Initialize an empty dictionary to store the counts of tuples\n    tuple_counts = {}\n    \n    # Iterate through the main list and extract all sublists\n    for sublist in main_list:\n        # Convert each sublist to a tuple\n        sublist_tuple = tuple(sublist)\n        \n        # Update the dictionary to count occurrences of each tuple\n        if sublist_tuple in tuple_counts:\n            tuple_counts[sublist_tuple] += 1\n        else:\n            tuple_counts[sublist_tuple] = 1\n    \n    # Return the dictionary\n    return tuple_counts", "from typing import *\ndef unique_sublists(main_list):\n    # Initialize an empty dictionary to store the counts of tuples\n    tuple_counts = {}\n    \n    # Iterate through the main list and extract all sublists\n    for sublist in main_list:\n        # Convert each sublist to a tuple\n        sublist_tuple = tuple(sublist)\n        \n        # Update the dictionary to count occurrences of each tuple\n        if sublist_tuple in tuple_counts:\n            tuple_counts[sublist_tuple] += 1\n        else:\n            tuple_counts[sublist_tuple] = 1\n    \n    # Return the dictionary\n    return tuple_counts", "from typing import *\ndef unique_sublists(main_list):\n    # Initialize an empty dictionary to store the counts of tuples\n    tuple_counts = {}\n    \n    # Iterate through the main list and extract all sublists\n    for sublist in main_list:\n        # Convert each sublist to a tuple\n        sublist_tuple = tuple(sublist)\n        \n        # Update the dictionary to count occurrences of each tuple\n        if sublist_tuple in tuple_counts:\n            tuple_counts[sublist_tuple] += 1\n        else:\n            tuple_counts[sublist_tuple] = 1\n    \n    # Return the dictionary\n    return tuple_counts", "from typing import *\ndef unique_sublists(main_list):\n    # Initialize an empty dictionary to store the counts of tuples\n    tuple_counts = {}\n    \n    # Iterate through the main list and extract all sublists\n    for sublist in main_list:\n        # Convert each sublist to a tuple\n        sublist_tuple = tuple(sublist)\n        \n        # Update the dictionary to count occurrences of each tuple\n        if sublist_tuple in tuple_counts:\n            tuple_counts[sublist_tuple] += 1\n        else:\n            tuple_counts[sublist_tuple] = 1\n    \n    # Return the dictionary\n    return tuple_counts", "from typing import *\ndef unique_sublists(main_list):\n    # Initialize an empty dictionary to store the counts of tuples\n    tuple_counts = {}\n    \n    # Iterate through the main list and extract all sublists\n    for sublist in main_list:\n        # Convert each sublist to a tuple\n        sublist_tuple = tuple(sublist)\n        \n        # Update the dictionary to count occurrences of each tuple\n        if sublist_tuple in tuple_counts:\n            tuple_counts[sublist_tuple] += 1\n        else:\n            tuple_counts[sublist_tuple] = 1\n    \n    # Return the dictionary\n    return tuple_counts", "from typing import *\ndef unique_sublists(main_list):\n    # Initialize an empty dictionary to store the counts of tuples\n    tuple_counts = {}\n    \n    # Iterate through the main list and extract all sublists\n    for sublist in main_list:\n        # Convert each sublist to a tuple\n        sublist_tuple = tuple(sublist)\n        \n        # Update the dictionary to count occurrences of each tuple\n        if sublist_tuple in tuple_counts:\n            tuple_counts[sublist_tuple] += 1\n        else:\n            tuple_counts[sublist_tuple] = 1\n    \n    # Return the dictionary\n    return tuple_counts", "from typing import *\ndef unique_sublists(lst):\n    # Step 1: Extract all unique sublists from the given list of lists\n    unique_sublists = []\n    for sublist in lst:\n        sorted_sublist = tuple(sorted(sublist))\n        if sorted_sublist not in unique_sublists:\n            unique_sublists.append(sorted_sublist)\n    \n    # Step 2: Count the occurrences of each unique sublist\n    counts = {}\n    for sublist in unique_sublists:\n        counts[sublist] = counts.get(sublist, 0) + 1\n    \n    # Step 3: Convert the dictionary to the required output format\n    result = {k: v for k, v in counts.items()}\n    \n    return result", "from typing import *\ndef unique_sublists(main_list):\n    # Initialize an empty dictionary to store the counts of tuples\n    tuple_counts = {}\n    \n    # Iterate through the main list and extract all sublists\n    for sublist in main_list:\n        # Convert each sublist to a tuple\n        sublist_tuple = tuple(sublist)\n        \n        # Update the dictionary to count occurrences of each tuple\n        if sublist_tuple in tuple_counts:\n            tuple_counts[sublist_tuple] += 1\n        else:\n            tuple_counts[sublist_tuple] = 1\n    \n    # Return the dictionary\n    return tuple_counts", "from typing import *\ndef unique_sublists(lst):\n    unique_sublists_set = set()\n    for sublist in lst:\n        unique_sublists_set.add(tuple(sublist))\n    \n    counts = {}\n    for sublist_tuple in unique_sublists_set:\n        counts[sublist_tuple] = counts.get(sublist_tuple, 0) + 1\n    \n    return counts", "from typing import *\ndef unique_sublists(main_list):\n    from collections import defaultdict\n\n    # Step 1: Extract unique sublists from the input list\n    unique_sublists_set = set()\n    for sublist in main_list:\n        unique_sublists_set.add(tuple(sublist))\n\n    # Step 2: Count the occurrences of each unique sublist\n    counts_dict = defaultdict(int)\n    for sublist in main_list:\n        counts_dict[tuple(sublist)] += 1\n\n    # Step 3: Return the result as a dictionary\n    return dict(counts_dict)"], "session_history": {"plan": " ```json\n{\n  \"Decomposition\": [\n    {\n      \"Subproblem\": \"Extract all unique sublists from the given list of lists.\",\n      \"Steps\": [\n        \"Iterate through the main list.\",\n        \"For each sublist, convert it to a tuple (to ensure it can be used as a dictionary key).\",\n        \"Store these tuples in a set to ensure uniqueness.\"\n      ]\n    },\n    {\n      \"Subproblem\": \"Count the occurrences of each unique sublist.\",\n      \"Steps\": [\n        \"Create a dictionary to keep track of the counts of each tuple.\",\n        \"Iterate through the main list again.\",\n        \"For each sublist, convert it to a tuple and update the count in the dictionary.\"\n      ]\n    },\n    {\n      \"Subproblem\": \"Return the dictionary with tuples as keys and their counts as values.\",\n      \"Steps\": [\n        \"Convert the set of unique tuples to a list if necessary.\",\n        \"Iterate through this list to populate the dictionary with counts.\",\n        \"Return the dictionary.\"\n      ]\n    }\n  ],\n  \"High-Level Plan\": [\n    {\n      \"Step\": \"Extract unique sublists and count their occurrences.\",\n      \"Substeps\": [\n        \"Extract unique sublists from the input list.\",\n        \"Count the occurrences of each unique sublist.\"\n      ]\n    },\n    {\n      \"Step\": \"Return the result as a dictionary.\",\n      \"Substeps\": [\n        \"Convert the unique sublists to a dictionary where keys are tuples and values are their counts.\"\n      ]\n    }\n  ]\n}\n```", "Round_0": {"code": "def unique_sublists(main_list):\n    from collections import defaultdict\n\n    # Step 1: Extract unique sublists from the input list\n    unique_sublists_set = set()\n    for sublist in main_list:\n        unique_sublists_set.add(tuple(sublist))\n\n    # Step 2: Count the occurrences of each unique sublist\n    counts_dict = defaultdict(int)\n    for sublist in main_list:\n        counts_dict[tuple(sublist)] += 1\n\n    # Step 3: Return the result as a dictionary\n    return dict(counts_dict)", "report": "The compilation output of the preceding code is: Code Test Passed."}}, "session_historys": [{"plan": " ```json\n{\n  \"Decomposition\": [\n    {\n      \"Subproblem\": \"Extract all sublists from the input list.\",\n      \"Details\": \"Iterate through the main list and collect all individual sublists.\"\n    },\n    {\n      \"Subproblem\": \"Convert each sublist to a tuple.\",\n      \"Details\": \"Use the tuple() function to convert each sublist to a tuple.\"\n    },\n    {\n      \"Subproblem\": \"Count the occurrences of each tuple.\",\n      \"Details\": \"Use a dictionary to keep track of how many times each tuple appears.\"\n    },\n    {\n      \"Subproblem\": \"Return the dictionary with tuples as keys and their counts as values.\",\n      \"Details\": \"Ensure the dictionary is structured as specified in the requirement.\"\n    }\n  ],\n  \"High-Level Plan\": [\n    {\n      \"Step\": \"Initialize an empty dictionary to store the counts of tuples.\",\n      \"Details\": \"This will be the final output of the function.\"\n    },\n    {\n      \"Step\": \"Iterate through the main list and extract all sublists.\",\n      \"Details\": \"Use a nested loop if necessary to ensure all sublists are captured.\"\n    },\n    {\n      \"Step\": \"Convert each sublist to a tuple.\",\n      \"Details\": \"Use the tuple() function for each sublist.\"\n    },\n    {\n      \"Step\": \"Update the dictionary to count occurrences of each tuple.\",\n      \"Details\": \"Check if the tuple is already a key in the dictionary, and if so, increment its value. If not, add it to the dictionary with a count of 1.\"\n    },\n    {\n      \"Step\": \"Return the dictionary.\",\n      \"Details\": \"Ensure the function returns the dictionary as specified in the requirement.\"\n    }\n  ]\n}\n```", "Round_0": {"code": "def unique_sublists(main_list):\n    # Initialize an empty dictionary to store the counts of tuples\n    tuple_counts = {}\n    \n    # Iterate through the main list and extract all sublists\n    for sublist in main_list:\n        # Convert each sublist to a tuple\n        sublist_tuple = tuple(sublist)\n        \n        # Update the dictionary to count occurrences of each tuple\n        if sublist_tuple in tuple_counts:\n            tuple_counts[sublist_tuple] += 1\n        else:\n            tuple_counts[sublist_tuple] = 1\n    \n    # Return the dictionary\n    return tuple_counts", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"Decomposition\": [\n    {\n      \"Subproblem\": \"Extract all sublists from the input list.\",\n      \"Details\": \"Iterate through the main list and collect all individual sublists.\"\n    },\n    {\n      \"Subproblem\": \"Convert each sublist to a tuple.\",\n      \"Details\": \"Use the tuple() function to convert each sublist to a tuple.\"\n    },\n    {\n      \"Subproblem\": \"Count the occurrences of each tuple.\",\n      \"Details\": \"Use a dictionary to keep track of how many times each tuple appears.\"\n    },\n    {\n      \"Subproblem\": \"Return the dictionary with tuples as keys and their counts as values.\",\n      \"Details\": \"Ensure the dictionary is formatted as required by the user.\"\n    }\n  ],\n  \"High-Level Plan\": [\n    {\n      \"Step\": \"Initialize an empty dictionary to store the counts of tuples.\",\n      \"Details\": \"This will be the final output of the function.\"\n    },\n    {\n      \"Step\": \"Iterate through the main list and extract all sublists.\",\n      \"Details\": \"Use a nested loop if necessary to ensure all sublists are captured.\"\n    },\n    {\n      \"Step\": \"Convert each sublist to a tuple.\",\n      \"Details\": \"Use the tuple() function for each sublist.\"\n    },\n    {\n      \"Step\": \"Update the dictionary to count occurrences of each tuple.\",\n      \"Details\": \"Check if the tuple is already in the dictionary and increment its count, otherwise add it to the dictionary with a count of 1.\"\n    },\n    {\n      \"Step\": \"Return the dictionary.\",\n      \"Details\": \"Ensure the function returns the dictionary with tuples as keys and their counts as values.\"\n    }\n  ]\n}\n```", "Round_0": {"code": "def unique_sublists(main_list):\n    # Initialize an empty dictionary to store the counts of tuples\n    tuple_counts = {}\n    \n    # Iterate through the main list and extract all sublists\n    for sublist in main_list:\n        # Convert each sublist to a tuple\n        sublist_tuple = tuple(sublist)\n        \n        # Update the dictionary to count occurrences of each tuple\n        if sublist_tuple in tuple_counts:\n            tuple_counts[sublist_tuple] += 1\n        else:\n            tuple_counts[sublist_tuple] = 1\n    \n    # Return the dictionary\n    return tuple_counts", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"Decomposition\": [\n    {\n      \"Subproblem\": \"Extract all sublists from the input list.\",\n      \"Details\": \"Iterate through the main list and collect all individual sublists.\"\n    },\n    {\n      \"Subproblem\": \"Convert each sublist to a tuple.\",\n      \"Details\": \"Use the tuple() function to convert each sublist to a tuple.\"\n    },\n    {\n      \"Subproblem\": \"Count the occurrences of each tuple.\",\n      \"Details\": \"Use a dictionary to keep track of how many times each tuple appears.\"\n    },\n    {\n      \"Subproblem\": \"Return the dictionary with tuples as keys and their counts as values.\",\n      \"Details\": \"Ensure the dictionary is structured as required by the user.\"\n    }\n  ],\n  \"High-Level Plan\": [\n    {\n      \"Step\": \"Initialize an empty dictionary to store the counts of tuples.\",\n      \"Details\": \"This will be the final output of the function.\"\n    },\n    {\n      \"Step\": \"Iterate through the main list and extract all sublists.\",\n      \"Details\": \"Use a nested loop if necessary to ensure all sublists are captured.\"\n    },\n    {\n      \"Step\": \"Convert each sublist to a tuple.\",\n      \"Details\": \"Use the tuple() function for each sublist.\"\n    },\n    {\n      \"Step\": \"Update the dictionary to count occurrences of each tuple.\",\n      \"Details\": \"Check if the tuple is already in the dictionary and increment its count, otherwise add it to the dictionary with a count of 1.\"\n    },\n    {\n      \"Step\": \"Return the dictionary.\",\n      \"Details\": \"Ensure the function returns the dictionary as specified in the user requirement.\"\n    }\n  ]\n}\n```", "Round_0": {"code": "def unique_sublists(main_list):\n    # Initialize an empty dictionary to store the counts of tuples\n    tuple_counts = {}\n    \n    # Iterate through the main list and extract all sublists\n    for sublist in main_list:\n        # Convert each sublist to a tuple\n        sublist_tuple = tuple(sublist)\n        \n        # Update the dictionary to count occurrences of each tuple\n        if sublist_tuple in tuple_counts:\n            tuple_counts[sublist_tuple] += 1\n        else:\n            tuple_counts[sublist_tuple] = 1\n    \n    # Return the dictionary\n    return tuple_counts", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"Decomposition\": [\n    {\n      \"Subproblem\": \"Extract all sublists from the input list.\",\n      \"Details\": \"Iterate through the main list and collect all individual sublists.\"\n    },\n    {\n      \"Subproblem\": \"Convert each sublist to a tuple.\",\n      \"Details\": \"Use the tuple() function to convert each sublist to a tuple.\"\n    },\n    {\n      \"Subproblem\": \"Count the occurrences of each tuple.\",\n      \"Details\": \"Use a dictionary to keep track of how many times each tuple appears.\"\n    },\n    {\n      \"Subproblem\": \"Return the dictionary with tuples as keys and their counts as values.\",\n      \"Details\": \"Ensure the dictionary is structured as specified in the requirement.\"\n    }\n  ],\n  \"High-Level Plan\": [\n    {\n      \"Step\": \"Initialize an empty dictionary to store the counts of tuples.\",\n      \"Details\": \"This will be the final output of the function.\"\n    },\n    {\n      \"Step\": \"Iterate through the main list and extract all sublists.\",\n      \"Details\": \"Use a nested loop if necessary to ensure all sublists are captured.\"\n    },\n    {\n      \"Step\": \"Convert each sublist to a tuple.\",\n      \"Details\": \"Use the tuple() function for each sublist.\"\n    },\n    {\n      \"Step\": \"Update the dictionary to count occurrences of each tuple.\",\n      \"Details\": \"Check if the tuple is already in the dictionary and update its count accordingly.\"\n    },\n    {\n      \"Step\": \"Return the dictionary.\",\n      \"Details\": \"Ensure the function returns the dictionary with tuples as keys and their counts as values.\"\n    }\n  ]\n}\n```", "Round_0": {"code": "def unique_sublists(main_list):\n    # Initialize an empty dictionary to store the counts of tuples\n    tuple_counts = {}\n    \n    # Iterate through the main list and extract all sublists\n    for sublist in main_list:\n        # Convert each sublist to a tuple\n        sublist_tuple = tuple(sublist)\n        \n        # Update the dictionary to count occurrences of each tuple\n        if sublist_tuple in tuple_counts:\n            tuple_counts[sublist_tuple] += 1\n        else:\n            tuple_counts[sublist_tuple] = 1\n    \n    # Return the dictionary\n    return tuple_counts", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"Decomposition\": [\n    {\n      \"Subproblem\": \"Extract all sublists from the input list.\",\n      \"Details\": \"Iterate through the main list and collect all individual sublists.\"\n    },\n    {\n      \"Subproblem\": \"Convert each sublist to a tuple.\",\n      \"Details\": \"Use the tuple() function to convert each sublist to a tuple.\"\n    },\n    {\n      \"Subproblem\": \"Count the occurrences of each tuple.\",\n      \"Details\": \"Use a dictionary to keep track of how many times each tuple appears.\"\n    },\n    {\n      \"Subproblem\": \"Return the dictionary with tuples as keys and their counts as values.\",\n      \"Details\": \"Ensure the dictionary is structured as required by the user.\"\n    }\n  ],\n  \"High-Level Plan\": [\n    {\n      \"Step\": \"Initialize an empty dictionary to store the counts of tuples.\",\n      \"Details\": \"This will be the final output of the function.\"\n    },\n    {\n      \"Step\": \"Iterate through the main list and extract all sublists.\",\n      \"Details\": \"Use a nested loop if necessary to ensure all sublists are captured.\"\n    },\n    {\n      \"Step\": \"Convert each sublist to a tuple.\",\n      \"Details\": \"Use the tuple() function for each sublist.\"\n    },\n    {\n      \"Step\": \"Update the dictionary to count occurrences of each tuple.\",\n      \"Details\": \"Check if the tuple is already in the dictionary and increment its count, or add it to the dictionary with a count of 1.\"\n    },\n    {\n      \"Step\": \"Return the dictionary.\",\n      \"Details\": \"Ensure the function returns the dictionary with tuples as keys and their counts as values.\"\n    }\n  ]\n}\n```", "Round_0": {"code": "def unique_sublists(main_list):\n    # Initialize an empty dictionary to store the counts of tuples\n    tuple_counts = {}\n    \n    # Iterate through the main list and extract all sublists\n    for sublist in main_list:\n        # Convert each sublist to a tuple\n        sublist_tuple = tuple(sublist)\n        \n        # Update the dictionary to count occurrences of each tuple\n        if sublist_tuple in tuple_counts:\n            tuple_counts[sublist_tuple] += 1\n        else:\n            tuple_counts[sublist_tuple] = 1\n    \n    # Return the dictionary\n    return tuple_counts", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"Decomposition\": [\n    {\n      \"Subproblem\": \"Extract all sublists from the input list.\",\n      \"Details\": \"Iterate through the main list and collect all individual sublists.\"\n    },\n    {\n      \"Subproblem\": \"Convert each sublist to a tuple.\",\n      \"Details\": \"Use the tuple() function to convert each sublist to a tuple.\"\n    },\n    {\n      \"Subproblem\": \"Count the occurrences of each tuple.\",\n      \"Details\": \"Use a dictionary to keep track of how many times each tuple appears.\"\n    },\n    {\n      \"Subproblem\": \"Return the dictionary with tuples as keys and their counts as values.\",\n      \"Details\": \"Ensure the dictionary is formatted as required by the user.\"\n    }\n  ],\n  \"High-Level Plan\": [\n    {\n      \"Step\": \"Initialize an empty dictionary to store the counts of tuples.\",\n      \"Details\": \"This will be the final output.\"\n    },\n    {\n      \"Step\": \"Iterate through the main list and extract all sublists.\",\n      \"Details\": \"Use nested loops if necessary to ensure all sublists are captured.\"\n    },\n    {\n      \"Step\": \"Convert each sublist to a tuple.\",\n      \"Details\": \"Use the tuple() function for conversion.\"\n    },\n    {\n      \"Step\": \"Update the dictionary to count occurrences of each tuple.\",\n      \"Details\": \"Check if the tuple is already in the dictionary and increment its count, or add it to the dictionary with a count of 1.\"\n    },\n    {\n      \"Step\": \"Return the dictionary.\",\n      \"Details\": \"Ensure the dictionary is returned in the required format.\"\n    }\n  ]\n}\n```", "Round_0": {"code": "def unique_sublists(main_list):\n    # Initialize an empty dictionary to store the counts of tuples\n    tuple_counts = {}\n    \n    # Iterate through the main list and extract all sublists\n    for sublist in main_list:\n        # Convert each sublist to a tuple\n        sublist_tuple = tuple(sublist)\n        \n        # Update the dictionary to count occurrences of each tuple\n        if sublist_tuple in tuple_counts:\n            tuple_counts[sublist_tuple] += 1\n        else:\n            tuple_counts[sublist_tuple] = 1\n    \n    # Return the dictionary\n    return tuple_counts", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"Decomposition\": [\n    {\n      \"Subproblem\": \"Extract all unique sublists from the given list of lists.\",\n      \"Steps\": [\n        \"Iterate through the main list.\",\n        \"For each sublist, sort it to create a canonical form representation.\",\n        \"Use a set to store these canonical forms to ensure uniqueness.\",\n        \"Convert the set of canonical forms back to a list of lists.\"\n      ]\n    },\n    {\n      \"Subproblem\": \"Count the occurrences of each unique sublist.\",\n      \"Steps\": [\n        \"Create a dictionary to store the counts.\",\n        \"Iterate through the list of unique sublists.\",\n        \"For each sublist, use a tuple representation as the key in the dictionary.\",\n        \"Increment the count for each key as you encounter the sublist.\"\n      ]\n    },\n    {\n      \"Subproblem\": \"Convert the dictionary to the required output format.\",\n      \"Steps\": [\n        \"Iterate through the dictionary items.\",\n        \"Convert each dictionary key (which is a tuple) to a tuple.\",\n        \"Store the converted tuples and their counts in a new dictionary.\"\n      ]\n    }\n  ],\n  \"High-Level Plan\": [\n    {\n      \"Step\": \"Extract unique sublists from the input list.\",\n      \"Details\": \"Use the steps provided in the first subproblem to extract unique sublists.\"\n    },\n    {\n      \"Step\": \"Count occurrences of each unique sublist.\",\n      \"Details\": \"Use the steps provided in the second subproblem to count occurrences.\"\n    },\n    {\n      \"Step\": \"Format the output as required.\",\n      \"Details\": \"Use the steps provided in the third subproblem to format the final dictionary.\"\n    },\n    {\n      \"Step\": \"Return the final dictionary.\",\n      \"Details\": \"Ensure the final dictionary matches the example provided in the user requirement.\"\n    }\n  ]\n}\n```", "Round_0": {"code": "def unique_sublists(lst):\n    # Step 1: Extract all unique sublists from the given list of lists\n    unique_sublists = []\n    for sublist in lst:\n        sorted_sublist = tuple(sorted(sublist))\n        if sorted_sublist not in unique_sublists:\n            unique_sublists.append(sorted_sublist)\n    \n    # Step 2: Count the occurrences of each unique sublist\n    counts = {}\n    for sublist in unique_sublists:\n        counts[sublist] = counts.get(sublist, 0) + 1\n    \n    # Step 3: Convert the dictionary to the required output format\n    result = {k: v for k, v in counts.items()}\n    \n    return result", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"Decomposition\": [\n    {\n      \"Subproblem\": \"Extract all sublists from the input list.\",\n      \"Details\": \"Iterate through the main list and collect all individual sublists.\"\n    },\n    {\n      \"Subproblem\": \"Convert each sublist to a tuple.\",\n      \"Details\": \"Use the tuple() function to convert each sublist to a tuple.\"\n    },\n    {\n      \"Subproblem\": \"Count the occurrences of each tuple.\",\n      \"Details\": \"Use a dictionary to keep track of how many times each tuple appears.\"\n    },\n    {\n      \"Subproblem\": \"Return the dictionary with tuples as keys and their counts as values.\",\n      \"Details\": \"Ensure the dictionary is structured as required by the user.\"\n    }\n  ],\n  \"High-Level Plan\": [\n    {\n      \"Step\": \"Initialize an empty dictionary to store the counts of tuples.\",\n      \"Details\": \"This will be the final output of the function.\"\n    },\n    {\n      \"Step\": \"Iterate through the main list and extract all sublists.\",\n      \"Details\": \"Use a nested loop if necessary to ensure all sublists are captured.\"\n    },\n    {\n      \"Step\": \"Convert each sublist to a tuple.\",\n      \"Details\": \"Use the tuple() function for conversion.\"\n    },\n    {\n      \"Step\": \"Update the dictionary to count occurrences of each tuple.\",\n      \"Details\": \"Check if the tuple is already in the dictionary and increment its count, otherwise add it to the dictionary with a count of 1.\"\n    },\n    {\n      \"Step\": \"Return the dictionary.\",\n      \"Details\": \"Ensure the function returns the dictionary as specified in the user requirement.\"\n    }\n  ]\n}\n```", "Round_0": {"code": "def unique_sublists(main_list):\n    # Initialize an empty dictionary to store the counts of tuples\n    tuple_counts = {}\n    \n    # Iterate through the main list and extract all sublists\n    for sublist in main_list:\n        # Convert each sublist to a tuple\n        sublist_tuple = tuple(sublist)\n        \n        # Update the dictionary to count occurrences of each tuple\n        if sublist_tuple in tuple_counts:\n            tuple_counts[sublist_tuple] += 1\n        else:\n            tuple_counts[sublist_tuple] = 1\n    \n    # Return the dictionary\n    return tuple_counts", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"Decomposition\": [\n    {\n      \"Subproblem\": \"Extract all unique sublists from the given list of lists.\",\n      \"Steps\": [\n        \"Iterate through the main list.\",\n        \"For each sublist, convert it to a tuple (to make it hashable and thus usable as a dictionary key).\",\n        \"Use a set to keep track of unique tuples.\"\n      ]\n    },\n    {\n      \"Subproblem\": \"Count the occurrences of each unique sublist.\",\n      \"Steps\": [\n        \"Create a dictionary to store the counts of each tuple.\",\n        \"Iterate through the unique sublists.\",\n        \"For each tuple, check if it is already in the dictionary and increment its count if it is, otherwise initialize it with a count of 1.\"\n      ]\n    }\n  ],\n  \"High-Level Plan\": [\n    {\n      \"Step\": \"Extract unique sublists from the input list and convert them to tuples.\",\n      \"Details\": \"Use a set to ensure all items are unique.\"\n    },\n    {\n      \"Step\": \"Count the occurrences of each unique sublist.\",\n      \"Details\": \"Use a dictionary to keep track of the counts of each tuple.\"\n    },\n    {\n      \"Step\": \"Return the dictionary containing tuples as keys and their counts as values.\",\n      \"Details\": \"Ensure the output matches the specified format.\"\n    }\n  ]\n}\n```", "Round_0": {"code": "def unique_sublists(lst):\n    unique_sublists_set = set()\n    for sublist in lst:\n        unique_sublists_set.add(tuple(sublist))\n    \n    counts = {}\n    for sublist_tuple in unique_sublists_set:\n        counts[sublist_tuple] = counts.get(sublist_tuple, 0) + 1\n    \n    return counts", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"Decomposition\": [\n    {\n      \"Subproblem\": \"Extract all unique sublists from the given list of lists.\",\n      \"Steps\": [\n        \"Iterate through the main list.\",\n        \"For each sublist, convert it to a tuple (to ensure it can be used as a dictionary key).\",\n        \"Store these tuples in a set to ensure uniqueness.\"\n      ]\n    },\n    {\n      \"Subproblem\": \"Count the occurrences of each unique sublist.\",\n      \"Steps\": [\n        \"Create a dictionary to keep track of the counts of each tuple.\",\n        \"Iterate through the main list again.\",\n        \"For each sublist, convert it to a tuple and update the count in the dictionary.\"\n      ]\n    },\n    {\n      \"Subproblem\": \"Return the dictionary with tuples as keys and their counts as values.\",\n      \"Steps\": [\n        \"Convert the set of unique tuples to a list if necessary.\",\n        \"Iterate through this list to populate the dictionary with counts.\",\n        \"Return the dictionary.\"\n      ]\n    }\n  ],\n  \"High-Level Plan\": [\n    {\n      \"Step\": \"Extract unique sublists and count their occurrences.\",\n      \"Substeps\": [\n        \"Extract unique sublists from the input list.\",\n        \"Count the occurrences of each unique sublist.\"\n      ]\n    },\n    {\n      \"Step\": \"Return the result as a dictionary.\",\n      \"Substeps\": [\n        \"Convert the unique sublists to a dictionary where keys are tuples and values are their counts.\"\n      ]\n    }\n  ]\n}\n```", "Round_0": {"code": "def unique_sublists(main_list):\n    from collections import defaultdict\n\n    # Step 1: Extract unique sublists from the input list\n    unique_sublists_set = set()\n    for sublist in main_list:\n        unique_sublists_set.add(tuple(sublist))\n\n    # Step 2: Count the occurrences of each unique sublist\n    counts_dict = defaultdict(int)\n    for sublist in main_list:\n        counts_dict[tuple(sublist)] += 1\n\n    # Step 3: Return the result as a dictionary\n    return dict(counts_dict)", "report": "The compilation output of the preceding code is: Code Test Passed."}}], "test": ["def check(unique_sublists):\n\tassert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]])=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}", "def check(unique_sublists):\n\tassert unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[1, 2], [3, 4], [4, 5], [6, 7]])=={(1, 2): 1, (3, 4): 1, (4, 5): 1, (6, 7): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[3, 5], [2, 2], [4, 3], [14, 20, 21], [3, 8], [12, 13]]) == {(3, 5): 1, (2, 2): 1, (4, 3): 1, (14, 20, 21): 1, (3, 8): 1, (12, 13): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[2, 2], [6, 10], [6, 5], [18, 12, 22], [10, 8], [6, 12]]) == {(2, 2): 1, (6, 10): 1, (6, 5): 1, (18, 12, 22): 1, (10, 8): 1, (6, 12): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[1, 8], [1, 8], [3, 3], [11, 11, 21], [1, 11], [10, 13]]) == {(1, 8): 2, (3, 3): 1, (11, 11, 21): 1, (1, 11): 1, (10, 13): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[2, 8], [9, 2], [2, 7], [12, 10, 15], [8, 11], [7, 9]]) == {(2, 8): 1, (9, 2): 1, (2, 7): 1, (12, 10, 15): 1, (8, 11): 1, (7, 9): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[5, 3], [8, 7], [6, 8], [15, 19, 17], [3, 7], [4, 9]]) == {(5, 3): 1, (8, 7): 1, (6, 8): 1, (15, 19, 17): 1, (3, 7): 1, (4, 9): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[4, 1], [8, 11], [5, 5], [16, 10, 20], [3, 5], [4, 8]]) == {(4, 1): 1, (8, 11): 1, (5, 5): 1, (16, 10, 20): 1, (3, 5): 1, (4, 8): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[4, 8], [8, 6], [3, 1], [16, 20, 21], [9, 11], [12, 16]]) == {(4, 8): 1, (8, 6): 1, (3, 1): 1, (16, 20, 21): 1, (9, 11): 1, (12, 16): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[6, 7], [2, 3], [1, 5], [9, 20, 18], [5, 6], [8, 13]]) == {(6, 7): 1, (2, 3): 1, (1, 5): 1, (9, 20, 18): 1, (5, 6): 1, (8, 13): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[1, 4], [5, 2], [3, 3], [9, 19, 16], [3, 2], [13, 6]]) == {(1, 4): 1, (5, 2): 1, (3, 3): 1, (9, 19, 16): 1, (3, 2): 1, (13, 6): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[5, 2], [1, 2], [3, 5], [9, 20, 16], [5, 9], [6, 15]]) == {(5, 2): 1, (1, 2): 1, (3, 5): 1, (9, 20, 16): 1, (5, 9): 1, (6, 15): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[5, 3], [2, 8], [5, 5], [14, 16, 20], [6, 9], [7, 6]]) == {(5, 3): 1, (2, 8): 1, (5, 5): 1, (14, 16, 20): 1, (6, 9): 1, (7, 6): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[3, 3], [2, 12], [4, 7], [18, 19, 18], [4, 12], [13, 14]]) == {(3, 3): 1, (2, 12): 1, (4, 7): 1, (18, 19, 18): 1, (4, 12): 1, (13, 14): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[4, 1], [4, 6], [5, 2], [17, 20, 17], [8, 12], [5, 6]]) == {(4, 1): 1, (4, 6): 1, (5, 2): 1, (17, 20, 17): 1, (8, 12): 1, (5, 6): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[2, 4], [7, 7], [4, 8], [14, 14, 14], [2, 2], [4, 15]]) == {(2, 4): 1, (7, 7): 1, (4, 8): 1, (14, 14, 14): 1, (2, 2): 1, (4, 15): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[2, 7], [9, 7], [1, 7], [14, 12, 19], [9, 9], [9, 12]]) == {(2, 7): 1, (9, 7): 1, (1, 7): 1, (14, 12, 19): 1, (9, 9): 1, (9, 12): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[2, 4], [5, 12], [4, 6], [16, 20, 19], [9, 8], [11, 15]]) == {(2, 4): 1, (5, 12): 1, (4, 6): 1, (16, 20, 19): 1, (9, 8): 1, (11, 15): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[6, 5], [5, 7], [2, 4], [18, 14, 16], [2, 7], [12, 10]]) == {(6, 5): 1, (5, 7): 1, (2, 4): 1, (18, 14, 16): 1, (2, 7): 1, (12, 10): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[6, 5], [1, 6], [3, 5], [14, 12, 16], [10, 11], [6, 6]]) == {(6, 5): 1, (1, 6): 1, (3, 5): 1, (14, 12, 16): 1, (10, 11): 1, (6, 6): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[3, 1], [9, 9], [1, 6], [8, 10, 17], [6, 2], [14, 11]]) == {(3, 1): 1, (9, 9): 1, (1, 6): 1, (8, 10, 17): 1, (6, 2): 1, (14, 11): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[2, 2], [7, 6], [2, 5], [10, 14, 22], [5, 10], [14, 12]]) == {(2, 2): 1, (7, 6): 1, (2, 5): 1, (10, 14, 22): 1, (5, 10): 1, (14, 12): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[3, 4], [10, 6], [5, 2], [12, 19, 22], [6, 7], [6, 8]]) == {(3, 4): 1, (10, 6): 1, (5, 2): 1, (12, 19, 22): 1, (6, 7): 1, (6, 8): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[5, 8], [8, 4], [3, 4], [13, 17, 21], [5, 10], [8, 6]]) == {(5, 8): 1, (8, 4): 1, (3, 4): 1, (13, 17, 21): 1, (5, 10): 1, (8, 6): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[5, 8], [9, 12], [2, 7], [17, 16, 14], [3, 7], [4, 7]]) == {(5, 8): 1, (9, 12): 1, (2, 7): 1, (17, 16, 14): 1, (3, 7): 1, (4, 7): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[3, 1], [1, 8], [6, 8], [12, 16, 20], [1, 12], [8, 9]]) == {(3, 1): 1, (1, 8): 1, (6, 8): 1, (12, 16, 20): 1, (1, 12): 1, (8, 9): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[5, 2], [1, 6], [5, 3], [18, 19, 21], [7, 4], [12, 8]]) == {(5, 2): 1, (1, 6): 1, (5, 3): 1, (18, 19, 21): 1, (7, 4): 1, (12, 8): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[2, 8], [6, 2], [4, 4], [14, 17, 17], [6, 7], [5, 14]]) == {(2, 8): 1, (6, 2): 1, (4, 4): 1, (14, 17, 17): 1, (6, 7): 1, (5, 14): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[3, 8], [2, 7], [4, 4], [10, 15, 12], [8, 7], [8, 13]]) == {(3, 8): 1, (2, 7): 1, (4, 4): 1, (10, 15, 12): 1, (8, 7): 1, (8, 13): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[5, 7], [6, 7], [1, 4], [15, 16, 22], [10, 11], [4, 12]]) == {(5, 7): 1, (6, 7): 1, (1, 4): 1, (15, 16, 22): 1, (10, 11): 1, (4, 12): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[6, 8], [4, 6], [1, 2], [18, 13, 20], [6, 4], [6, 15]]) == {(6, 8): 1, (4, 6): 1, (1, 2): 1, (18, 13, 20): 1, (6, 4): 1, (6, 15): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[3, 1], [6, 11], [5, 5], [10, 11, 19], [6, 2], [14, 13]]) == {(3, 1): 1, (6, 11): 1, (5, 5): 1, (10, 11, 19): 1, (6, 2): 1, (14, 13): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[3, 4], [1, 11], [4, 1], [15, 13, 19], [3, 3], [6, 9]]) == {(3, 4): 1, (1, 11): 1, (4, 1): 1, (15, 13, 19): 1, (3, 3): 1, (6, 9): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[1, 4], [3, 12], [1, 6], [11, 15, 12], [8, 7], [9, 6]]) == {(1, 4): 1, (3, 12): 1, (1, 6): 1, (11, 15, 12): 1, (8, 7): 1, (9, 6): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[6, 2], [4, 12], [6, 8], [10, 10, 15], [6, 2], [10, 14]]) == {(6, 2): 2, (4, 12): 1, (6, 8): 1, (10, 10, 15): 1, (10, 14): 1}", "def check(unique_sublists):\n\tassert unique_sublists([['whkqetdu', 'lmqlnaxvefj'], ['lyid'], ['uyvdx', 'bzgmgoxz'], ['tugj']]) == {('whkqetdu', 'lmqlnaxvefj'): 1, ('lyid',): 1, ('uyvdx', 'bzgmgoxz'): 1, ('tugj',): 1}", "def check(unique_sublists):\n\tassert unique_sublists([['yvqf', 'avcduc'], ['vuxu'], ['fism', 'umfjlkg'], ['zvfyq']]) == {('yvqf', 'avcduc'): 1, ('vuxu',): 1, ('fism', 'umfjlkg'): 1, ('zvfyq',): 1}", "def check(unique_sublists):\n\tassert unique_sublists([['lixrcqawo', 'qtgpmhnsnytb'], ['wmzztqn'], ['qxmbs', 'ijiuynujn'], ['jevd']]) == {('lixrcqawo', 'qtgpmhnsnytb'): 1, ('wmzztqn',): 1, ('qxmbs', 'ijiuynujn'): 1, ('jevd',): 1}", "def check(unique_sublists):\n\tassert unique_sublists([['pla', 'wzgkdiz'], ['iwhtwkpfa'], ['xop', 'nlvttyn'], ['knfxsbish']]) == {('pla', 'wzgkdiz'): 1, ('iwhtwkpfa',): 1, ('xop', 'nlvttyn'): 1, ('knfxsbish',): 1}", "def check(unique_sublists):\n\tassert unique_sublists([['nrcixtzkm', 'jzvbcr'], ['stxxk'], ['ijo', 'vnxdexuespy'], ['wybwq']]) == {('nrcixtzkm', 'jzvbcr'): 1, ('stxxk',): 1, ('ijo', 'vnxdexuespy'): 1, ('wybwq',): 1}", "def check(unique_sublists):\n\tassert unique_sublists([['klg', 'wixnpu'], ['lpm'], ['ebhcqlrde', 'nhjo'], ['npmyi']]) == {('klg', 'wixnpu'): 1, ('lpm',): 1, ('ebhcqlrde', 'nhjo'): 1, ('npmyi',): 1}", "def check(unique_sublists):\n\tassert unique_sublists([['jbf', 'psemfbv'], ['ppzxh'], ['gimnnuyov', 'rmyijyvmnidb'], ['borlmpwbv']]) == {('jbf', 'psemfbv'): 1, ('ppzxh',): 1, ('gimnnuyov', 'rmyijyvmnidb'): 1, ('borlmpwbv',): 1}", "def check(unique_sublists):\n\tassert unique_sublists([['hkwp', 'fonatzvdhepa'], ['aewv'], ['csmyghws', 'xvqoenivi'], ['vyoioej']]) == {('hkwp', 'fonatzvdhepa'): 1, ('aewv',): 1, ('csmyghws', 'xvqoenivi'): 1, ('vyoioej',): 1}", "def check(unique_sublists):\n\tassert unique_sublists([['nic', 'flu'], ['sgm'], ['jjnxkwpe', 'csuqn'], ['nakkrdoo']]) == {('nic', 'flu'): 1, ('sgm',): 1, ('jjnxkwpe', 'csuqn'): 1, ('nakkrdoo',): 1}", "def check(unique_sublists):\n\tassert unique_sublists([['eve', 'sdbv'], ['jjkz'], ['hby', 'gwhloxgls'], ['eovp']]) == {('eve', 'sdbv'): 1, ('jjkz',): 1, ('hby', 'gwhloxgls'): 1, ('eovp',): 1}", "def check(unique_sublists):\n\tassert unique_sublists([['phnnzvgbw', 'xix'], ['axqqpd'], ['boix', 'jfpo'], ['dilm']]) == {('phnnzvgbw', 'xix'): 1, ('axqqpd',): 1, ('boix', 'jfpo'): 1, ('dilm',): 1}", "def check(unique_sublists):\n\tassert unique_sublists([['afbt', 'ciaqijtxinnv'], ['ozwdake'], ['wuctv', 'wfzlvc'], ['wkiqssgk']]) == {('afbt', 'ciaqijtxinnv'): 1, ('ozwdake',): 1, ('wuctv', 'wfzlvc'): 1, ('wkiqssgk',): 1}", "def check(unique_sublists):\n\tassert unique_sublists([['fvgfnfqm', 'xunpvficzzc'], ['ghhr'], ['yuk', 'ruydpovwjxce'], ['kcyu']]) == {('fvgfnfqm', 'xunpvficzzc'): 1, ('ghhr',): 1, ('yuk', 'ruydpovwjxce'): 1, ('kcyu',): 1}", "def check(unique_sublists):\n\tassert unique_sublists([['mlujyy', 'bbxhnzodcu'], ['zhhzxezbx'], ['soh', 'swadtocbq'], ['qlf']]) == {('mlujyy', 'bbxhnzodcu'): 1, ('zhhzxezbx',): 1, ('soh', 'swadtocbq'): 1, ('qlf',): 1}", "def check(unique_sublists):\n\tassert unique_sublists([['chyrmxd', 'qstmd'], ['detm'], ['fgfg', 'pteduzagqj'], ['xnlmtyts']]) == {('chyrmxd', 'qstmd'): 1, ('detm',): 1, ('fgfg', 'pteduzagqj'): 1, ('xnlmtyts',): 1}", "def check(unique_sublists):\n\tassert unique_sublists([['qcfnaykhq', 'ifumq'], ['trp'], ['iwo', 'moylylks'], ['amlxkbl']]) == {('qcfnaykhq', 'ifumq'): 1, ('trp',): 1, ('iwo', 'moylylks'): 1, ('amlxkbl',): 1}", "def check(unique_sublists):\n\tassert unique_sublists([['zkahjws', 'iaimoelvw'], ['qkqtkb'], ['vmrpexoxw', 'rnyh'], ['mjgfq']]) == {('zkahjws', 'iaimoelvw'): 1, ('qkqtkb',): 1, ('vmrpexoxw', 'rnyh'): 1, ('mjgfq',): 1}", "def check(unique_sublists):\n\tassert unique_sublists([['jetzk', 'ykpfpgv'], ['yxqouoavn'], ['jtdm', 'ysqmumacdycn'], ['wzp']]) == {('jetzk', 'ykpfpgv'): 1, ('yxqouoavn',): 1, ('jtdm', 'ysqmumacdycn'): 1, ('wzp',): 1}", "def check(unique_sublists):\n\tassert unique_sublists([['wdgenplks', 'lqdn'], ['tsmlrfelx'], ['nvsp', 'qkpuueoen'], ['vhslmdqv']]) == {('wdgenplks', 'lqdn'): 1, ('tsmlrfelx',): 1, ('nvsp', 'qkpuueoen'): 1, ('vhslmdqv',): 1}", "def check(unique_sublists):\n\tassert unique_sublists([['najytso', 'siwtuoglb'], ['lhvpapcpv'], ['xpnuqbso', 'mlgzdci'], ['ufik']]) == {('najytso', 'siwtuoglb'): 1, ('lhvpapcpv',): 1, ('xpnuqbso', 'mlgzdci'): 1, ('ufik',): 1}", "def check(unique_sublists):\n\tassert unique_sublists([['gwreye', 'amifhlyszwez'], ['cyoqp'], ['rmrljg', 'ilihr'], ['wwfxtuzq']]) == {('gwreye', 'amifhlyszwez'): 1, ('cyoqp',): 1, ('rmrljg', 'ilihr'): 1, ('wwfxtuzq',): 1}", "def check(unique_sublists):\n\tassert unique_sublists([['scyklu', 'cbishqzxh'], ['wmszg'], ['qnlfgie', 'hjcisf'], ['nikyz']]) == {('scyklu', 'cbishqzxh'): 1, ('wmszg',): 1, ('qnlfgie', 'hjcisf'): 1, ('nikyz',): 1}", "def check(unique_sublists):\n\tassert unique_sublists([['ryxbjl', 'nduwwedor'], ['jqc'], ['dsozewns', 'vcip'], ['hpckjb']]) == {('ryxbjl', 'nduwwedor'): 1, ('jqc',): 1, ('dsozewns', 'vcip'): 1, ('hpckjb',): 1}", "def check(unique_sublists):\n\tassert unique_sublists([['uvcl', 'msvjz'], ['vlevihg'], ['zgzkvtl', 'qmi'], ['mix']]) == {('uvcl', 'msvjz'): 1, ('vlevihg',): 1, ('zgzkvtl', 'qmi'): 1, ('mix',): 1}", "def check(unique_sublists):\n\tassert unique_sublists([['pqetunau', 'vkmfevcaaie'], ['mnqopqbn'], ['oprvjh', 'lkiwrni'], ['zsyad']]) == {('pqetunau', 'vkmfevcaaie'): 1, ('mnqopqbn',): 1, ('oprvjh', 'lkiwrni'): 1, ('zsyad',): 1}", "def check(unique_sublists):\n\tassert unique_sublists([['khlwvu', 'iwkyz'], ['fhsejcjgt'], ['uzsystip', 'ozgn'], ['zjnhhyn']]) == {('khlwvu', 'iwkyz'): 1, ('fhsejcjgt',): 1, ('uzsystip', 'ozgn'): 1, ('zjnhhyn',): 1}", "def check(unique_sublists):\n\tassert unique_sublists([['rbeiumbv', 'wzuehkttjg'], ['hhhjvac'], ['xyy', 'hnrramgt'], ['wljwvjkc']]) == {('rbeiumbv', 'wzuehkttjg'): 1, ('hhhjvac',): 1, ('xyy', 'hnrramgt'): 1, ('wljwvjkc',): 1}", "def check(unique_sublists):\n\tassert unique_sublists([['ibaascy', 'slsplgipehic'], ['ubfuvrcp'], ['lltvvhns', 'iaojo'], ['sfr']]) == {('ibaascy', 'slsplgipehic'): 1, ('ubfuvrcp',): 1, ('lltvvhns', 'iaojo'): 1, ('sfr',): 1}", "def check(unique_sublists):\n\tassert unique_sublists([['vciagot', 'yileycb'], ['npsouv'], ['cash', 'kwitbhgitknm'], ['ohcd']]) == {('vciagot', 'yileycb'): 1, ('npsouv',): 1, ('cash', 'kwitbhgitknm'): 1, ('ohcd',): 1}", "def check(unique_sublists):\n\tassert unique_sublists([['aaevqctls', 'rxrnfbiyvob'], ['zqxpj'], ['idvenw', 'vxkyyxuurbr'], ['jcubc']]) == {('aaevqctls', 'rxrnfbiyvob'): 1, ('zqxpj',): 1, ('idvenw', 'vxkyyxuurbr'): 1, ('jcubc',): 1}", "def check(unique_sublists):\n\tassert unique_sublists([['mcvbzd', 'cfrouazdrg'], ['pblaxnwlw'], ['hqvmp', 'gbxolpgmatg'], ['rwtuns']]) == {('mcvbzd', 'cfrouazdrg'): 1, ('pblaxnwlw',): 1, ('hqvmp', 'gbxolpgmatg'): 1, ('rwtuns',): 1}", "def check(unique_sublists):\n\tassert unique_sublists([['lzujhyjl', 'mgglqw'], ['yplnzky'], ['cftqdm', 'ttrjjoxglhh'], ['fhyg']]) == {('lzujhyjl', 'mgglqw'): 1, ('yplnzky',): 1, ('cftqdm', 'ttrjjoxglhh'): 1, ('fhyg',): 1}", "def check(unique_sublists):\n\tassert unique_sublists([['hymbqwozb', 'oimn'], ['xjtwml'], ['qqmrnujhc', 'oizcztnhpgzt'], ['smzlzrwp']]) == {('hymbqwozb', 'oimn'): 1, ('xjtwml',): 1, ('qqmrnujhc', 'oizcztnhpgzt'): 1, ('smzlzrwp',): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[4, 7], [8, 2], [3, 9], [5, 2]]) == {(4, 7): 1, (8, 2): 1, (3, 9): 1, (5, 2): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[6, 7], [6, 3], [2, 5], [10, 10]]) == {(6, 7): 1, (6, 3): 1, (2, 5): 1, (10, 10): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[1, 5], [7, 7], [7, 9], [10, 12]]) == {(1, 5): 1, (7, 7): 1, (7, 9): 1, (10, 12): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[6, 4], [2, 1], [4, 9], [1, 7]]) == {(6, 4): 1, (2, 1): 1, (4, 9): 1, (1, 7): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[3, 3], [6, 1], [1, 4], [7, 10]]) == {(3, 3): 1, (6, 1): 1, (1, 4): 1, (7, 10): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[6, 7], [5, 6], [6, 9], [1, 10]]) == {(6, 7): 1, (5, 6): 1, (6, 9): 1, (1, 10): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[4, 2], [7, 5], [6, 2], [10, 9]]) == {(4, 2): 1, (7, 5): 1, (6, 2): 1, (10, 9): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[1, 5], [4, 1], [3, 4], [7, 4]]) == {(1, 5): 1, (4, 1): 1, (3, 4): 1, (7, 4): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[4, 5], [6, 7], [4, 10], [10, 8]]) == {(4, 5): 1, (6, 7): 1, (4, 10): 1, (10, 8): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[3, 1], [7, 4], [9, 1], [9, 12]]) == {(3, 1): 1, (7, 4): 1, (9, 1): 1, (9, 12): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[6, 1], [2, 1], [1, 8], [11, 3]]) == {(6, 1): 1, (2, 1): 1, (1, 8): 1, (11, 3): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[6, 5], [3, 9], [7, 6], [5, 9]]) == {(6, 5): 1, (3, 9): 1, (7, 6): 1, (5, 9): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[1, 3], [2, 3], [8, 4], [1, 9]]) == {(1, 3): 1, (2, 3): 1, (8, 4): 1, (1, 9): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[4, 4], [3, 4], [8, 1], [7, 12]]) == {(4, 4): 1, (3, 4): 1, (8, 1): 1, (7, 12): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[2, 2], [7, 3], [9, 8], [1, 2]]) == {(2, 2): 1, (7, 3): 1, (9, 8): 1, (1, 2): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[6, 3], [7, 3], [3, 9], [7, 6]]) == {(6, 3): 1, (7, 3): 1, (3, 9): 1, (7, 6): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[1, 2], [4, 8], [5, 4], [2, 8]]) == {(1, 2): 1, (4, 8): 1, (5, 4): 1, (2, 8): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[5, 7], [6, 9], [4, 1], [10, 7]]) == {(5, 7): 1, (6, 9): 1, (4, 1): 1, (10, 7): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[6, 1], [1, 5], [8, 5], [4, 7]]) == {(6, 1): 1, (1, 5): 1, (8, 5): 1, (4, 7): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[5, 1], [3, 8], [9, 8], [2, 12]]) == {(5, 1): 1, (3, 8): 1, (9, 8): 1, (2, 12): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[4, 1], [2, 5], [3, 6], [3, 9]]) == {(4, 1): 1, (2, 5): 1, (3, 6): 1, (3, 9): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[1, 2], [3, 5], [7, 6], [8, 8]]) == {(1, 2): 1, (3, 5): 1, (7, 6): 1, (8, 8): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[2, 4], [4, 9], [1, 8], [1, 10]]) == {(2, 4): 1, (4, 9): 1, (1, 8): 1, (1, 10): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[6, 7], [8, 5], [3, 2], [9, 5]]) == {(6, 7): 1, (8, 5): 1, (3, 2): 1, (9, 5): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[2, 3], [4, 8], [1, 9], [1, 4]]) == {(2, 3): 1, (4, 8): 1, (1, 9): 1, (1, 4): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[4, 6], [5, 1], [1, 1], [2, 9]]) == {(4, 6): 1, (5, 1): 1, (1, 1): 1, (2, 9): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[5, 1], [6, 2], [7, 8], [9, 10]]) == {(5, 1): 1, (6, 2): 1, (7, 8): 1, (9, 10): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[2, 4], [1, 2], [3, 1], [3, 3]]) == {(2, 4): 1, (1, 2): 1, (3, 1): 1, (3, 3): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[1, 6], [8, 8], [7, 10], [7, 2]]) == {(1, 6): 1, (8, 8): 1, (7, 10): 1, (7, 2): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[4, 2], [2, 7], [8, 4], [11, 4]]) == {(4, 2): 1, (2, 7): 1, (8, 4): 1, (11, 4): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[3, 2], [8, 4], [3, 7], [3, 2]]) == {(3, 2): 2, (8, 4): 1, (3, 7): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[6, 7], [3, 6], [6, 4], [9, 2]]) == {(6, 7): 1, (3, 6): 1, (6, 4): 1, (9, 2): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[5, 7], [7, 1], [7, 10], [8, 11]]) == {(5, 7): 1, (7, 1): 1, (7, 10): 1, (8, 11): 1}"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.1471, 1.0, 0.951, 1.0], "pass_results": [true, true, true, true, true, true, false, true, false, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 102, 15, 102, 97, 102], "passed": true, "pass": true, "pass_num": 6, "round": 233, "mutate_method": "rephrase_one", "save_node": false, "parent_index": 233}
